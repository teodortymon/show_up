{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ev",
				"event"
			],
			[
				"isEvent",
				"isEventFull"
			],
			[
				"Event",
				"EventList  (obj) [E]"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"section",
				"sectionAdmin"
			],
			[
				"cal",
				"call"
			],
			[
				"app",
				"appBody"
			],
			[
				"Sess",
				"Session.get\tMeteor: Session.get(key)"
			],
			[
				"eve",
				"events\tMeteor: Template.myTemplate.events(eventMap)"
			],
			[
				"all",
				"allSections"
			],
			[
				"margi",
				"margin-top"
			],
			[
				"hea",
				"header\tTag"
			],
			[
				"Even",
				"EventList  (obj) [E]"
			],
			[
				"regis",
				"registerHelper"
			],
			[
				"find",
				"findOne (fn) [E]"
			],
			[
				"R",
				"RegisterLimit"
			],
			[
				"T",
				"Type"
			],
			[
				"re",
				"registerHelper"
			],
			[
				"author",
				"authorize-button"
			],
			[
				"S",
				"Succes"
			],
			[
				"fin",
				"findOne (fn) [C]"
			],
			[
				"on",
				"onRendered  (obj) [C]"
			],
			[
				"han",
				"handleAuthResult"
			],
			[
				"handl",
				"handleAuthClick"
			],
			[
				"aut",
				"authorize"
			],
			[
				"users",
				"users_list      (obj)  [C]"
			],
			[
				"set",
				"setChecked"
			],
			[
				"Se",
				"Session      (obj) [E]"
			],
			[
				"wid",
				"width"
			],
			[
				"in",
				"input"
			],
			[
				"va",
				"value"
			],
			[
				"f",
				"font-size"
			],
			[
				"local",
				"localhost"
			]
		]
	},
	"buffers":
	[
		{
			"file": "methods.js",
			"settings":
			{
				"buffer_size": 8489,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 107 files for \"allEvents\"\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.html:\n    5  \t<!-- <div><div><li> -->\n    6  \t<ul class=\"collapsible popout days\">\n    7: \t{{#each allEvents}}\n    8  \t\t{{#if p start.dateTime }}\n    9  \t    \t<center><h4 class=\"\" id=\"{{_id}}\">{{dayFormat start.dateTime}}</h4></center>\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n    1  Template.days.helpers({\n    2  \n    3: \tallEvewnts: sdadasdasdfunction () {\n    4  \t\t// console.log(\"!!!\");\n    5  \t\t\n\n2 matches across 2 files\n\n\nSearching 107 files for \"s: function()\"\n\n/run/media/ted/Data/WEB/ths_signup/methods.js:\n    1  Meteor.methods({\n    2  \n    3:   deleteAllUsers: function(){\n    4      _.each(Meteor.users.find().fetch(), function(x){\n    5  \n    .\n   20    },\n   21  \n   22:   restartUsers: function(){\n   23      Meteor.users.update({},{$set:{'decided': false}},{multi:true})\n   24    },\n   ..\n   28    },\n   29  \n   30:   resetUsers: function(){\n   31      q = [];\n   32      EventList.update({}, {$set: {'users': q}}, {multi: true});\n   ..\n   42  \t},\n   43  \n   44:   clearEvents: function() {\n   45      EventList.remove({});\n   46      console.log(\"Events removed\");\n   ..\n   51    },\n   52  \n   53:   clearDays: function() {\n   54      Days.remove({});\n   55      console.log(\"Days removed\");\n\n5 matches in 1 file\n\n\nSearching 107 files for \"s\"\n\n/run/media/ted/Data/WEB/ths_signup/README.md:\n    1: #THS Signup Tool \n    2: Signup tool that revolutionised KTH THS's event signup. Primary used for Fresher's Week activities selection. Full CMS functionality. Sucks up data from Google Calendars\n    3  \n    4: Uses funky Meteor, js both on server & client, reactivity all the time yeah!\n    5  \n    6: *signup.ths.meteor.com*\n    7  \n\n/run/media/ted/Data/WEB/ths_signup/UIHelpers.js:\n    1: UI.registerHelper(\"FreeLimit\", function() {\n    2:   return RegisterLimit.find().fetch()[0].free;\n    3  });\n    4  \n    5: UI.registerHelper(\"PayableLimit\", function() {\n    6:   return RegisterLimit.find().fetch()[0].payable;\n    7  });\n    8  \n    9: UI.registerHelper(\"dayFormat\", function(a) {\n   10    return moment(a).format('dddd, MMMM Do');\n   11  });\n   12  \n   13: UI.registerHelper(\"hourFormat\", function(a) {\n   14    return moment(a).format('HH:mm');\n   15  });\n   16  \n   17: UI.registerHelper(\"p\", function(a) {\n   18  \t\tvar day1 = B;\n   19: \t\t// Session.set(\"previousDay\", 'dsd'); wild motherfucker!\n   20: \t\tconsole.log(\"GO!\");\n   21  \t\tvar day2 = moment(a).format('DDD');\n   22  \t\tif(day1 == day2)\n   23: \t\t\t\treturn false;\n   24  \t\tB = day2;\n   25  \t\treturn true;\n   ..\n   28  \n   29  \n   30: UI.registerHelper(\"chosenEvents\", function() {\n   31:     console.log('chosenEvents ' +this);\n   32      var q = [];\n   33:     _.each(this.events, function (a){\n   34:       q.push(EventList.findOne(a));\n   35      });\n   36      return q;\n   37  });\n   38  \n   39: UI.registerHelper(\"registeredUsers\", function() {\n   40:     // console.log('registeredUsers' + this);\n   41  \n   42      var q = [];\n   43:     _.each(this.users, function (a){\n   44:       q.push(Meteor.users.findOne(a));\n   45      });\n   46      return q;\n   ..\n   48    \n   49    \n   50: UI.registerHelper(\"hasUserDecided\",function () {\n   51:       return !Meteor.user().decided;\n   52  });\n   53  \n   54: UI.registerHelper(\"hasPaid\", function(event) {\n   55:   if(_.contains(this.paidEvents, event))\n   56      return true;\n   57:   return false;\n   58:   // return this.aid;\n   59  });\n   60  \n   61: UI.registerHelper(\"email\", function () {\n   62    \n   63:   if(typeof this.services.google != \"undefined\")\n   64:     return this.services.google.email;\n   65:   if(typeof this.services.facebook != \"undefined\")\n   66:     return this.services.facebook.email;\n   67:   return this.emails[0].address;\n   68  });\n   69  \n   70: UI.registerHelper('or',function(a,b){\n   71    return a || b;\n   72  });\n   73  \n   74: UI.registerHelper('displayIntroText',function(){\n   75:   return RegisterLimit.find().fetch()[0].intro;\n   76  });\n   77  \n   78: UI.registerHelper('displayOutroText',function(){\n   79:   return RegisterLimit.find().fetch()[0].outro;\n   80  });\n   81  \n   82: UI.registerHelper('isAdmin',function(){\n   83:   if(Roles.userIsInRole(Meteor.user()._id, 'admin'))\n   84    { return true; }\n   85:   if(Roles.userIsInRole(Meteor.user()._id, 'sectionAdmin'))\n   86    {return true; }\n   87:   return false;\n   88  });\n   89  \n   90: UI.registerHelper('users', function () {\n   91:   return Meteor.users.find();\n   92  });\n   93  \n   94: UI.registerHelper('usersLength', function () {\n   95:   return this.users.length;\n   96  });\n   97  \n   98  \n   99  \n  100: // Accounts.onCreateUser(function(options, user) {\n  101: //   user.events = [];\n  102: //   return user;\n  103  // });\n  104  \n\n/run/media/ted/Data/WEB/ths_signup/gcal.txt:\n    1:  <script>\n    2:           var CLIENT_ID = '766997000709-qt7pvl845klc6o1v085mlgf6kkf1ks54.apps.googleusercontent.com';\n    3  \n    4:           var SCOPES = [\"https://www.googleapis.com/auth/calendar.readonly\"];\n    5  \n    6            /**\n    7:            * Check if current user has authorized this application.\n    8             */\n    9            function checkAuth() {\n   ..\n   11                {\n   12                  'client_id': CLIENT_ID,\n   13:                 'scope': SCOPES.join(' '),\n   14                  'immediate': true\n   15:               }, handleAuthResult);\n   16            }\n   17  \n   18            /**\n   19:            * Handle response from authorization server.\n   20             *\n   21:            * @param {Object} authResult Authorization result.\n   22             */\n   23:           function handleAuthResult(authResult) {\n   24              var authorizeDiv = document.getElementById('authorize-div');\n   25:             if (authResult && !authResult.error) {\n   26                // Hide auth UI, then load client library.\n   27:               authorizeDiv.style.display = 'none';\n   28                loadCalendarApi();\n   29:             } else {\n   30:               // Show auth UI, allowing the user to initiate authorization by\n   31                // clicking authorize button.\n   32:               authorizeDiv.style.display = 'inline';\n   33              }\n   34            }\n   35  \n   36            *\n   37:            * Initiate auth flow in response to user clicking authorize button.\n   38             *\n   39             * @param {Event} event Button click event.\n   ..\n   41            function handleAuthClick(event) {\n   42              gapi.auth.authorize(\n   43:               {client_id: CLIENT_ID, scope: SCOPES, immediate: false},\n   44:               handleAuthResult);\n   45:             return false;\n   46            }\n   47  \n   48            /**\n   49:            * Load Google Calendar client library. List upcoming events\n   50:            * once client library is loaded.\n   51             */\n   52            function loadCalendarApi() {\n   53:             gapi.client.load('calendar', 'v3', listUpcomingEvents);\n   54            }\n   55  \n   56            /**\n   57:            * Print the summary and start datetime/date of the next ten events in\n   58:            * the authorized user's calendar. If no events are found an\n   59:            * appropriate message is printed.\n   60             */\n   61:           function listUpcomingEvents() {\n   62:             var request = gapi.client.calendar.events.list({\n   63                'calendarId': 'bg14ap8mqj9qamumgac9lno1no@group.calendar.google.com',\n   64:               'timeMin': (new Date()).toISOString(),\n   65:               'showDeleted': false,\n   66:               'singleEvents': true,\n   67:               'maxResults': 100,\n   68:               'orderBy': 'startTime'\n   69              });\n   70  \n   71:             request.execute(function(resp) {\n   72:               var events_new = resp.items;\n   73  \n   74:               Events.insert(events_new);\n   75              }\n   76  \n   77:       //         if (events.length > 0) {\n   78:       //           for (i = 0; i < events.length-1; i++) {\n   79:       //             var event = events[i];\n   80:       //             var nowStart = event.start.dateTime.replace('+01:00','');\n   81          // var nowEnd = event.end.dateTime.replace('+01:00',''); \n   82:         // var nextStart = events[i+1].start.dateTime.replace('+01:00','');\n   83:         // var nextEnd = events[i+1].end.dateTime.replace('+01:00','');\n   84:       //             if (!nowStart) {\n   85:       //               when = event.start.date;\n   86        //             }\n   87:       //             appendPre(event.summary + ' ' + nowStart +'~'+ nowEnd  + 'Does interlap? ' + moment(nextStart).isBetween(moment(nowStart).subtract(1, 'seconds'), nowEnd) + \"\\n\");\n   88        //           }\n   89:       //         } else {\n   90:       //           appendPre('No upcoming events found.');\n   91        //         }\n   92  \n   ..\n   95  \n   96            /**\n   97:            * Append a pre element to the body containing the given message\n   98:            * as its text node.\n   99             *\n  100:            * @param {string} message Text to be placed in pre element.\n  101             */\n  102:           // function appendPre(message) {\n  103            //   var pre = document.getElementById('output');\n  104:           //   var textContent = document.createTextNode(message + '\\n');\n  105            //   pre.appendChild(textContent);\n  106          \n  107  \n  108:               </script>\n  109:               <script src=\"https://apis.google.com/js/client.js?onload=checkAuth\"></script>\n  110:               <div id=\"authorize-div\" style=\"display: none\">\n  111:                 <span>Authorize access to Google Calendar API</span>\n  112:                 <!--Button for the user to click to initiate auth sequence -->\n  113                  <button id=\"authorize-button\" onclick=\"handleAuthClick(event)\">\n  114                    Authorize\n\n/run/media/ted/Data/WEB/ths_signup/methods.js:\n    1: Meteor.methods({\n    2  \n    3:   deleteAllUsers: function(){\n    4:     _.each(Meteor.users.find().fetch(), function(x){\n    5  \n    6:       if (!Roles.userIsInRole(x, ['sectionAdmin']) && !Roles.userIsInRole(x, ['admin']) ){\n    7:         Meteor.users.remove(x._id);\n    8        }\n    9:     console.log(x._id);\n   10      });\n   11    },\n   12  \n   13:   changeAdminsCalendar: function(b){\n   14:     Meter.users.update(Meteor.user()._id, {$set: {'sectionCalendar': [b]}});\n   15    },\n   16  \n   17    changeVariable: function(a, b){\n   18:     i = RegisterLimit.find().fetch()[0]._id;\n   19:     RegisterLimit.update(i, {$set: {[a]: b}});\n   20    },\n   21  \n   22:   restartUsers: function(){\n   23:     Meteor.users.update({},{$set:{'decided': false}},{multi:true})\n   24    },\n   25  \n   26:   restartUser: function(a){\n   27:     Meteor.users.update(a, {$set:{'decided': false}});\n   28    },\n   29  \n   30:   resetUsers: function(){\n   31      q = [];\n   32:     EventList.update({}, {$set: {'users': q}}, {multi: true});\n   33:     EventList.update({}, {$set: {'registered': 0}}, {multi: true});\n   34:     Meteor.users.update({},{$set:{'decided': false}},{multi:true});\n   35:     Meteor.users.update({}, {$set: {'free': 0}},{multi:true});\n   36:     Meteor.users.update({}, {$set: {'payable': 0}},{multi:true});\n   37:     Meteor.users.update({},{$set:{'paidEvents': false}},{multi:true});\n   38    },\n   39  \n   40: \tgiveAdminPermission: function(userId) {\n   41: \t\tRoles.addUsersToRoles(Meteor.users.findOne(userId), ['admin']);\n   42  \t},\n   43  \n   44:   clearEvents: function() {\n   45:     EventList.remove({});\n   46:     console.log(\"Events removed\");\n   47    },\n   48  \n   49:   clearEventsSection: function(section) {\n   50:     EventList.remove({'s': section});\n   51    },\n   52  \n   53:   clearDays: function() {\n   54:     Days.remove({});\n   55:     console.log(\"Days removed\");\n   56    },\n   57  \n   58:   populateEvents: function (events, s) {\n   59:     _.each(events, function (event) {\n   60:       event.s = s;\n   61        event.eventType = 'free';\n   62:       event.users = [];\n   63        event.limit= 1;\n   64:       event.registered = 0;\n   65:       EventList.insert(event);\n   66:       console.log(event);\n   67      });\n   68:     // _.each(EventList.find().fetch(), function(a){\n   69:     //   EventList.update(a._id, {$set: {'eventType':'free'}});\n   70:     //   EventList.update(a._id, {$set: {'users':[] }});\n   71:     //   EventList.update(a._id, {$set: {'limit': 1 }});\n   72:     //   EventList.update(a._id, {$set: {'s': s }});\n   73        \n   74:       // EventList.update(a._id, {$set: {'registered': 0 }});\n   75        \n   76        \n   77      // });\n   78:     console.log(\"Events Populated\");\n   79    },\n   80  \n   81:   populateDays: function () {\n   82:     _.each(_.groupBy(EventList.find().fetch(), function(a){ return moment(a.start.dateTime).format('DDD'); }), function (a) {\n   83:       Days.insert(a);\n   84        });\n   85  \n   86:     console.log(\"Days Populated\");\n   87    },\n   88    \n   89    eventRemove: function(a) {\n   90:     EventList.remove(a);\n   91:     console.log('Event Removed!');\n   92    },\n   93    \n   94    \n   95    eventUpdate: function (a, b, c) {\n   96:     console.log('trying to update '+ a + ' ' + b + ' ' + c);\n   97:     EventList.update({_id:a}, {$set: {[b]: c} });\n   98    },\n   99    \n  100:   eventUpdateDateStart: function (event, value) {\n  101:          EventList.update({_id: event}, {\n  102:       $set: {'start.dateTime': value} }\n  103        );\n  104    },\n  105    \n  106    eventUpdateDateEnd: function (event, value) {\n  107:          EventList.update({_id:event}, {\n  108:       $set: {'end.dateTime': value} }\n  109        );\n  110    },\n  111    \n  112:   userClear: function () {\n  113:     user = Meteor.user();\n  114:     Meteor.users.update(user._id, {$set: {'free': 0}});\n  115:     Meteor.users.update(user._id, {$set: {'payable': 0}});\n  116:     // _.each(user.events, function (a){\n  117:     //   EventList.update(a, {$inc: {'registered': -1} } );\n  118      // });\n  119      var q = [];\n  120:     if(user.events.length)\n  121:       Meteor.users.update(user._id, {$set: {'events': q }});\n  122:     console.log(user);\n  123      \n  124      \n  ...\n  126    },\n  127    \n  128:   eventSet: function (event, user) {\n  129:     var Type = EventList.findOne(event).eventType;\n  130:     // var count = Session.get(Type);\n  131:     // var list = Session.get(\"list\");\n  132      // if(count == undefined)\n  133      //     count = 0;\n  134:     // if(list == undefined)\n  135:     //     list = [];\n  136  \n  137:     // console.log(count);\n  138:     // console.log(Type);\n  139      \n  140:     if(_.include(Meteor.users.findOne(user).events,event)){                               //wyjebywanie\n  141        // count--;\n  142:       // Session.set(Type, count);\n  143  \n  144:       // list = _.without(list, event);\n  145:       // Session.set('list',list);\n  146  \n  147:       Meteor.users.update(user, {$pull: {events: event}});\n  148:       // EventList.update(event, {$inc: {registered: -1} } );\n  149:       // EventList.update(event, {$pull: {users: user}});\n  150:       Meteor.users.update(user, {$inc: {[Type]: -1}});\n  151:       // console.log(Meteor.users.findOne(user).Type);\n  152:       Session.set(\"Q\",true);\n  153:     }else{\n  154        \n  155        if(Type == 'notLimited'){\n  156:         Meteor.users.update(user, {$push: {events: event}});\n  157:         // EventList.update(event, {$inc: {registered: 1} } );\n  158:         // EventList.update(event, {$addToSet: {users: user}});\n  159          // count++;\n  160:         // Session.set(Type, count);\n  161  \n  162:         // list.push(event);\n  163:         // Session.set('list',list);\n  164            \n  165  \n  166:         Session.set(\"L_add\", true);\n  167:         Session.set(\"Q\",true);\n  168        }\n  169        \n  170        if(Type == 'free'){\n  171:         if(Meteor.users.findOne(user).free < RegisterLimit.find().fetch()[0].free){\n  172:           Meteor.users.update(user, {$push: {events: event}});\n  173:           // EventList.update(event, {$inc: {registered: 1} } );\n  174:           // EventList.update(event, {$addToSet: {users: user}});\n  175:           Meteor.users.update(user, {$inc: {free: 1}});\n  176  \n  177            // count++;\n  178:           // Session.set(Type, count);\n  179  \n  180:           // list.push(event);\n  181:           // Session.set('list',list);\n  182            \n  183:           Session.set(\"F_add\", true);\n  184            \n  185:           Session.set(\"Q\",true);\n  186:         }else{\n  187:           Session.set(\"F_limit\",true);\n  188          }\n  189        }\n  190        \n  191        if(Type == 'payable'){\n  192:         if(Meteor.users.findOne(user).payable < RegisterLimit.find().fetch()[0].payable){\n  193:           Meteor.users.update(user, {$push: {events: event}});\n  194:           // EventList.update(event, {$inc: {registered: 1} } );\n  195:           // EventList.update(event, {$addToSet: {users: user}});\n  196:           Meteor.users.update(user, {$inc: {payable: 1}});\n  197:           Session.set(\"Q\",true);\n  198:           Session.set(\"P_add\", true);\n  199  \n  200            // count++;\n  201:           // Session.set(Type, count);\n  202  \n  203:           // list.push(event);\n  204:           // Session.set('list',list);\n  205            \n  206            \n  207:         }else{\n  208:           Session.set(\"P_limit\",true);\n  209          }\n  210        }\n  ...\n  212      \n  213      // add if depending on the type of the event\n  214:       // if(Meteor.users.findOne(user).events.length < RegisterLimit.find().fetch()[0].number){\n  215:       //   Meteor.users.update(user, {$push: {events: event}});\n  216:       //   EventList.update(event, {$inc: {registered: 1} } );\n  217:       //   Session.set(\"Q\",true);\n  218:       //   // $(q.target).parent().prev().toggleClass(\"chosen\");\n  219:       // }else{\n  220:       //   if(Meteor.users.findOne(user).events.length == RegisterLimit.find().fetch()[0].number){\n  221:       //     Session.set(\"T\",true);\n  222:       //     // Materialize.toast(\"Sorry, you have used your limit of events. Please uncheck some of them to register for this one\" , 4000);\n  223        //   }\n  224        // }\n  ...\n  226    },\n  227    \n  228:   userDecide: function(user) {\n  229:     Meteor.users.update(user, {$set: {decided: true}});\n  230  \n  231:     EventList.update({}, {$pull: {users: user} },{multi:true});\n  232:     //remember to delete users form previous -> decrease their registered length\n  233  \n  234:     _.each(Meteor.users.findOne(user).events, function(event){\n  235:       EventList.update(event, {$addToSet: {users: user}});\n  236:        // if(! _.include(EventList.findOne(event).users, event)){ \n  237:        // {console.log('NEW'); EventList.update(event, {$inc: {registered: 1} } );}}\n  238      });\n  239:     // _.each(EventList.find().fetch(), function(event){\n  240:     //   EventList.update(event._id, {$set: {registered: event.users.length}});\n  241      // });\n  242    },\n  243  \n  244:   userManuallyAdd: function(user, event_w) {\n  245      event = event_w._id;\n  246      type=event_w.type;\n  247:     console.log('# ' +event_w +' '+user);\n  248:     EventList.update(event, {$addToSet: {users: user}});\n  249:     Meteor.users.update(user, {$addToSet: {events: event}});\n  250:     Meteor.users.update(user, {$inc: {[type]: 1}});\n  251    },\n  252  \n  253:   userRemove: function (user) {\n  254:     _.each(Meteor.users.findOne(user).events, function(event){\n  255:       EventList.update(event, {$pull: {users: user}});\n  256      });\n  257  \n  258:     Meteor.users.remove(user);\n  259    },\n  260  \n  261:   userEventRemove: function(user, event) {\n  262:     EventList.update(event, {$pull: {users: user}});\n  263:     // EventList.update(event, {$inc: {registered: -1}});\n  264:     Meteor.users.update(user, {$pull: {events: event}});\n  265:     Meteor.users.update(user, {$inc: {[EventList.findOne(event).eventType]: -1}});  \n  266    },\n  267  \n  268:   userPay: function(user, event) {\n  269:     Meteor.users.update(user, {$addToSet: {paidEvents: event}});\n  270    },\n  271  });\n\n/run/media/ted/Data/WEB/ths_signup/package.json:\n    1  {\n    2:   \"name\": \"signup2\",\n    3    \"private\": true,\n    4:   \"mod-project-name\": \"signup2\",\n    5:   \"scripts\": {\n    6:     \"start\": \"meteor run\"\n    7    },\n    8:   \"engines\": {\n    9      \"npm\": \"4.4.7\"\n   10    },\n   11:   \"dependencies\": {\n   12      \"bcrypt\": \"^0.8.7\"\n   13    }\n\n/run/media/ted/Data/WEB/ths_signup/signup.sublime-project:\n    1  {\n    2: \t\"folders\":\n    3  \t[\n    4  \t\t{\n\n/run/media/ted/Data/WEB/ths_signup/client/stylesheets/style.css:\n    1: .chosen {\n    2    background-color: #0089EC;\n    3  }\n    4  \n    5: .col.s12.m8.push-m2.push-l4.l4.z-depth-1{\n    6  \tmargin-top: 4em;\n    7  }\n    8  \n    9: .at-signup-link{\n   10: \tvisibility:hidden;\n   11  }\n   12  \n   13  .international{\n   14: \tborder: 1px rgba(0, 255, 219, 0.65) outset;\n   15  }\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/admin.html:\n    1: <template name=\"adminSettings\">\n    2: \t<div class=\"card\">\n    3: \t\t<div class=\"card-content\">\n    4: \t\t\t<span class=\"card-title\">Settings</span>\n    5  \n    6  \t\t\t<h6>Intro text</h6>\n    7  \t\t\t<form id=\"intro\">\n    8: \t\t\t\t<input id=\"intro\" type=\"text\" name=\"text\" placeholder=\"Current intro text: {{displayIntroText}}\"/>\n    9  \t\t\t</form>\n   10  \n   11  \t\t\t<h6>Outro text</h6>\n   12  \t\t\t<form id=\"outro\">\n   13: \t\t\t\t<input id=\"outro\" type=\"text\" name=\"text\" placeholder=\"Current outro text: {{displayOutroText}}\"/>\n   14  \t\t\t</form>\n   15  \t\t\t\n   16: \t\t\t<h6>Free events limit</h6>\t\t\n   17  \t\t  \t<form id=\"free\">\n   18  \t\t\t\t<input id=\"free\" type=\"text\" name=\"text\" placeholder=\"Current limit: {{FreeLimit}}\"/>\n   19  \t\t\t</form>\n   20  \n   21: \t\t\t<h6>Payable events limit</h6>\n   22  \t\t\t<form id=\"payable\">\n   23  \t\t\t\t\t<input id=\"payable\" type=\"text\" name=\"text\" placeholder=\"Current limit: {{PayableLimit}}\"/>\n   24  \t\t\t</form>\n   25  \n   26: \t\t\t<a class=\"waves-effect waves-light btn\" id=\"deleteUsers\">Delete all users</a>\n   27: \t\t\t<a class=\"waves-effect waves-light btn\" id=\"resetUsers\">Reset all users event choices</a>\n   28  \t\t\t\n   29  \t\t</div>\n   ..\n   31  </template>\n   32  \n   33: <template name=\"allSections\">\n   34: \t<ul class=\"card collapsible\">\n   35: \t\t<li class=\"card-content\">\n   36: \t\t\t<span class=\"collapsible-header card-title\">Sections settings</span>\n   37: \t\t\t<div class=\"collapsible-body\">\n   38: \t\t\t\t{{#each allSections}}\n   39  \t\t\t\t\t<li>\n   40: \t\t\t\t\t{{> oneSection}}\n   41  \t\t\t\t\t</li>\n   42  \t\t\t\t{{/each}}\n   ..\n   46  </template>\n   47  \n   48: <template name=\"oneSection\">\n   49: \t<h6>Set your section <strong>{{this}}</strong> google calendar id</h6>\n   50: \t<form id={{this}} class=\"row\" style=\"margin-bottom: 0\">\n   51: \t\t<input id={{this}} class=\"col s8\" type=\"text\" name=\"text\" placeholder=\"Remember to press enter after typing in the id\"/>\n   52: \t\t<input type=\"submit\" class=\"col offset-s1 s2 waves-effect waves-light btn\" id=\"{{this}}\" value=\"Change id\">\n   53  \t</form>\n   54: \t\t<a class=\"waves-effect waves-light btn authorize-button\" id=\"{{this}}\">\n   55: \t\t    Reload events\n   56  \t\t</a>\n   57  \n   58: \t\t<a class=\"waves-effect waves-light btn clear-button\" id=\"{{this}}\">\n   59: \t\t    Clear section's events\n   60  \t\t</a>\n   61  \t\t<br /><br />\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/admin.js:\n    1: CLIENT_ID = '766997000709-qt7pvl845klc6o1v085mlgf6kkf1ks54.apps.googleusercontent.com';\n    2: SCOPES = [\"https://www.googleapis.com/auth/calendar.readonly\"];\n    3: Session.set(\"previousDay\",0);\n    4  B = '';\n    5  \n    6: Template.allSections.helpers({\n    7: \tallSections: function () {\n    8: \t\tsections = ['international', 'a', 'b', 'cl', 'd', 'dr', 'e', 'f', 'i', 'ish', 'ist', 'in', 'k', 'm', 'media', 'mit', 's', 't', 'w'];\n    9: \t\treturn sections;\n   10  \t}\n   11  });\n   12  \n   13: Template.oneSection.events({\n   14: \t\"submit\": function (event) {\n   15      event.preventDefault();\n   16:     Session.set(event.target.id, event.target.text.value);\n   17:     // event.target.placeholder.value = \"Set to:\" + event.target.text.value;\n   18:     console.log(event.target);\n   19    },\n   20  \n   21    \"click .clear-button\": function (event) {\n   22:   \tMeteor.call(\"clearEventsSection\", event.target.id);\n   23    },\n   24  \n   ..\n   26  \t\tgapi.auth.authorize({\n   27            'client_id': CLIENT_ID,\n   28:           'scope': SCOPES,\n   29:           'immediate': false\n   30          });\n   31  \n   32  \t\tgapi.client.load('calendar', 'v3');\n   33: \t\t$('#'+event.target.id).html('Please try again');\n   34  \t\t\n   35: \t\tvar c = Session.get(event.target.id);\n   36: \t\tconsole.log(event.target.id);\n   37: \t\tconsole.log(c);\n   38  \n   39  \t\tvar d = new Date();\n   40: \t\td.setDate(d.getDate() - 120 ); //UWAGA KURWA\n   41  \n   42  \n   43: \t\tvar request = gapi.client.calendar.events.list({\n   44  \t      'calendarId': c,\n   45: \t      'timeMin': (d).toISOString(),\n   46: \t      'showDeleted': false,\n   47: \t      'singleEvents': true,\n   48: \t      'maxResults': 100,\n   49: \t      'orderBy': 'startTime'\n   50  \t    });\n   51  \t\t\n   52: \t\trequest.execute(function(resp) {\n   53: \t\t\tvar events_new = resp.items;\n   54: \t\t\tif(! events_new){\n   55: \t\t\t\tconsole.log(\"restarting\");\n   56: \t\t\t\tB=false;\n   57  \t\t\t}\n   58: \t\t\telse{\n   59: \t\t\t\t// Meteor.call(\"clearEvents\");\n   60: \t\t\t    var section = event.target.id;\n   61: \t\t\t\tMeteor.call(\"populateEvents\", events_new, section);\n   62: \t\t\t\tconsole.log(events_new);\n   63  \t\t\t\t\n   64: \t\t\t\t// Meteor.call(\"clearDays\");\n   65: \t\t\t\t// Meteor.call(\"populateDays\");\n   66  \n   67: \t\t\t\t$('#'+event.target.id).html('Success!');\n   68  \t\t\t}\n   69  \t\t});\n   ..\n   72  });\n   73  \n   74: Template.adminSettings.events({\n   75  \n   76:   \"submit #intro\": function (event) {\n   77  \tevent.preventDefault();\n   78  \tMeteor.call(\"changeVariable\",event.target.id, event.target.text.value);\n   ..\n   80  \t},\n   81  \n   82:   \"submit #outro\": function (event) {\n   83  \tevent.preventDefault();\n   84  \tMeteor.call(\"changeVariable\",event.target.id, event.target.text.value);\n   ..\n   86  \t},\n   87  \n   88:   \"submit #payable\": function (event) {\n   89      event.preventDefault();\n   90      Meteor.call(\"changeVariable\",event.target.id, event.target.text.value);\n   ..\n   92    },\n   93  \n   94:   \"submit #free\": function (event) {\n   95      event.preventDefault();\n   96      Meteor.call(\"changeVariable\",event.target.id, event.target.text.value);\n   ..\n   98    },\n   99  \n  100:   \"submit #calendar\": function (event) {\n  101      event.preventDefault();\n  102:     Meteor.call(\"changeAdminsCalendar\", event.target.text.value);\n  103      event.target.text.value = \"\";\n  104    },\n  105  \n  106:   \"click #restartUsers\": function (event) {\n  107      // event.preventDefault();\n  108:     Meteor.call(\"restartUsers\");\n  109      // event.target.text.value = \"\";\n  110    },\n  111  \n  112:   \"click #deleteUsers\": function (event) {\n  113      // event.preventDefault();\n  114:     console.log(\"BAM\");\n  115  \n  116:     Meteor.call(\"deleteAllUsers\");\n  117  \n  118      // event.target.text.value = \"\";\n  119    },\n  120  \n  121:   \"click #resetUsers\": function (event) {\n  122:     Meteor.call(\"resetUsers\");\n  123    }\n  124  \n  ...\n  126  \n  127  Template.adminEvent.onCreated(function() {\n  128:   var self = this;\n  129:   self.opt = new ReactiveVar([]);\n  130:   self.autorun(function(){\n  131:     \tself.subscribe(\"singleEventUsers\", self.opt.get() );\n  132:     \tconsole.log(\"SUBSCRIBING\");\n  133    });\n  134  });\n  135  \n  136: Template.adminEvent.events({\n  137: \t\"click #loadUsers\": function(event, template){\n  138      \n  139      var opt = template.opt.get();\n  140    \n  141:     opt = this.users;\n  142:     console.log(\"click\" + this.users);\n  143      \n  144:     template.opt.set(opt);\n  145  \n  146  \t}\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.html:\n    1: <template name=\"days\">\n    2    <br />\n    3    \n    4  \n    5  \t<!-- <div><div><li> -->\n    6: \t<ul class=\"collapsible popout days\">\n    7: \t{{#each allEvents}}\n    8: \t\t{{#if p start.dateTime }}\n    9: \t    \t<center><h4 class=\"\" id=\"{{_id}}\">{{dayFormat start.dateTime}}</h4></center>\n   10  \t  \t{{/if}}\n   11  \t\t\n   ..\n   15  \t</ul>\n   16  \t<br />\n   17: \t{{#if isAdmin}}\n   18: \t{{else}}\n   19: \t<div class=\"container\">\n   20: \t       <!--<div class=\"row\">-->\n   21:         <!--<div class=\"col s12 m6\">-->\n   22:              <div class=\"card\">\n   23:                 <div class=\"card-content\">\n   24:                     <span class=\"card-title\">Session restart</span>\n   25: \t      \t\t\t<p>In case of interrupted/reloaded session & weird messages, click this button to start fresh</p>\n   26            \t\t</div>\n   27:           \t\t<div class=\"card-action\">\n   28:           \t\t  <a class=\"waves-effect waves-light btn\" id=\"userClear-button\">Clear choices & restart</a>\n   29            \t\t </div>\n   30            \t</div>\n   ..\n   32  \n   33  \n   34:           <div class=\"card blue-grey darken-1\">\n   35:             <div class=\"card-content white-text\">\n   36:               <span class=\"card-title\">Make your decision</span>\n   37:               <p>Your decision is <strong>final</strong>, so there will be <strong>no coming back & no choice changing</strong>. Please make sure that you're totally fine with your choices.</p>\n   38              </div>\n   39:             <div class=\"card-action\">\n   40:               <a id=\"make-decision\" class=\"waves-effect btn\"><i class=\"material-icons left\">done</i>Confirm choices <strong>forever</strong></a>\n   41              </div>\n   42            </div>\n   ..\n   49  <template name=\"oneEvent\">\n   50  \t<li>\n   51: \t  <!--{{#if isEventFull}}-->\n   52:   \t\t<div class=\"collapsible-header {{#if isEventChosen}}chosen{{/if}} {{s}}\"><i class=\"material-icons left\">today</i>{{summary}} {{#if isAdmin}}<a> Registered: {{usersLength}} Section:{{s}}</a>{{/if}}<span class=\"right\">{{hourFormat start.dateTime}} - {{hourFormat end.dateTime}}</span></div>\n   53:   \t\t<div class=\"collapsible-body container\">\n   54    \t\t\t<br />\n   55:   \t\t\t{{description}}\n   56:   \t\t\t<br /><br />Event type: <strong>{{eventType}}</strong>\n   57    \t\t\t<br />\n   58: \t\t\t{{#if hasUserDecided}}\n   59: \t\t\t\t<div class=\"valign-wrapper\">\n   60: \t    \t\t\t<a id=\"register\" class=\"waves-effect btn valign\">{{#if isEventChosen}}Unregister{{else}}Register{{/if}}</a>\n   61  \t\t\t\t</div>\n   62  \t\t\t{{/if}}\n   63:   \t\t\t{{#if isAdmin}}\n   64    \t\t\t\t{{> adminEvent}}\n   65    \t\t\t{{/if}}\n   ..\n   76  \t<br />\n   77  \t\n   78:     <ul class=\"collapsible z-depth-0\"><li><div class=\"collapsible-header\" id=\"loadUsers\" ><h5>Registered Users</h5> </div>\n   79:     \t<div class=\"collapsible-body container\">\n   80      \t<table><tbody>\n   81: \t\t    {{#each registeredUsers}}\n   82: \t\t      {{> user_event}}\n   83  \t\t    {{/each}}\n   84  \t\t</tbody></table>\n   ..\n   87  \t<br />\n   88  \n   89: \t<h5>Add user to the event</h5>\n   90  \t<form id=\"manually-add\">\n   91: \t\t<input id=\"manually-add\" type=\"text\" name=\"text\" placeholder=\"User's mail\"/>\n   92  \t</form>\n   93    \n   94:     <h5>Update registration limit</h5>\n   95  \t    <form id=\"limit\">\n   96: \t\t\t\t<input id=\"limit\" type=\"text\" name=\"text\" placeholder=\"Current limit: {{this.limit}}\"/>\n   97  \t\t</form>\n   98  \t\t\n   99      <h5>Update event type</h5>\n  100:     <h6>Current type: {{this.eventType}}</h6>\n  101:     <a id=\"free\" class=\"waves-effect waves-teal btn-flat\">Free</a>\n  102      \n  103:     <a id=\"payable\" class=\"waves-effect waves-teal btn-flat\">Payable</a>\n  104      \n  105:     <a id=\"notLimited\" class=\"waves-effect waves-teal btn-flat\">Not Limited</a>\n  106  \t\t<br />\n  107  \t\t<br />\n  108  \t\t<h5>Update information</h5>\n  109: \t\t<!--<div class='input-field'>-->\n  110: \t\t\t<form id=\"summary\">\n  111: \t\t\t\t<input id=\"summary\" type=\"text\" name=\"text\" placeholder=\"Title of the event\"  />\n  112  \t\t\t</form>\n  113: \t\t\t<form id=\"description\">\n  114: \t\t\t\t<input id=\"description\" type=\"text\" name=\"text\" placeholder=\"Description of the event\"  />\n  115  \t\t\t</form>\n  116  \t\t<!--</div>-->\n  ...\n  119  \t\t<h5>Update date</h5>\n  120  \t\t\t<br />\n  121: \t\t<!--<div class='input-field'>-->\n  122: \t\t\t<h6>Start date</h6>\n  123: \t\t\t<form id=\"start-date\">\n  124: \t\t\t\t<input id=\"start-date\" type=\"datetime-local\" name=\"text\"  />\n  125: \t\t\t\t<input type=\"submit\" style=\"visibility: hidden;\"/>\n  126  \t\t\t</form>\n  127  \t\t\t\n  ...\n  129  \t\t\t<form id=\"end-date\">\n  130  \t\t\t\t<input id=\"end-date\" type=\"datetime-local\" name=\"text\">\n  131: \t\t\t\t<input type=\"submit\" style=\"visibility: hidden;\"/>\n  132  \t\t\t</form>\n  133  \t\t<!--</div>-->\n  134: \t\t<!--<input type=\"submit\" value=\"Add Player\">-->\n  135  \t<!--</form>-->\n  136: \t<a id=\"event-remove\" class=\"waves-effect btn\"><i class=\"material-icons left\">not_interested</i>Remove event</a>\n  137  \t<br /><br />\n  138      \n  ...\n  143  \n  144  \n  145: <template name=\"afterDecision\">\n  146:   <div class=\"center-align flow-text\">\n  147      <br />\n  148:     <h5>Thanks a lot!</h5>\n  149      <p>\n  150:       {{displayOutroText}}\n  151      </p>\n  152    </div>\n  153    \n  154:   <div class=\"containter\">\n  155:     <h4>Your events:</h4>\n  156:     <ul class=\"collapsible\">\n  157:     {{#with currentUser}}\n  158: \t    {{#each chosenEvents}}\n  159: \t      {{#if p start.dateTime }}\n  160: \t\t    \t<center><h5 class=\"\" id=\"{{_id}}\">{{dayFormat start.dateTime}}</h5></center>\n  161  \t\t  \t{{/if}}\n  162  \t\t\t\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n    1: Template.days.helpers({\n    2  \n    3: \tallEvents: function () {\n    4: \t\t// console.log(\"!!!\");\n    5  \t\t\n    6: \t\tif(Roles.userIsInRole(Meteor.user()._id, 'admin') || Roles.userIsInRole(Meteor.user()._id, 'sectionAdmin') )\n    7: \t\t\treturn EventList.find({}, {sort: {start: {dateTime: 1}}}).fetch().reverse();\n    8: \t\telse\n    9:   \t\t\t// return EventList.find({$where: \"(this.users.length < this.limit) || (Meteor.user().events.indexOf(this._id) > -1) \"}, {sort: {start: {dateTime: 1}}}).fetch().reverse();\n   10: \t       return EventList.find({}, {sort: {start: {dateTime: 1}}}).fetch().reverse();\n   11    },\n   12  \n   13  \tcheckDay: function (a) {\n   14  \t\t\n   15: \t\t// console.log(this.summary + ' ' + Session.get(\"previousDay\") + ' vs ' + moment(this.start.dateTime).format('DDD'));\n   16: \t\tvar day1 = Session.get(\"previousDay\");\n   17  \t\tvar day2 = moment(a).format('DDD');\n   18  \t\tif(day1===day2) {\n   19: \t\t\treturn false;\n   20  \t\t}\n   21: \t\telse{\n   22: \t\t\tSession.set(\"previousDay\", day2);\n   23: \t\t\tconsole.log(\"GO!\");\n   24  \t\t\treturn true;\n   25  \t\t}\n   26  \t},\n   27  \t\n   28: // \tinitCollapsible: function() {\n   29: // \t\t$('.days').collapsible({});\n   30: // \t},has\n   31  \n   32  \n   ..\n   34  \n   35  \n   36: Template.afterDecision.rendered = function () {\n   37: \t$('.collapsible').collapsible();\n   38: \tconsole.log(\"LOOL\");\n   39  };\n   40  \n   41: Template.days.events({\n   42:   \"click #make-decision\": function (event) {\n   43:     Meteor.call(\"userDecide\",Meteor.userId());\n   44    },\n   45    \n   46:   \"click #userClear-button\": function() {\n   47:     Meteor.call(\"userClear\");\n   48      window.location.href = window.location.pathname;\n   49    }\n   50  });\n   51  \n   52: Template.oneEvent.events({\n   53:   \"click #register\": function(event) {\n   54:     console.log(this);\n   55      q=event;\n   56:     Session.set(\"Q\",false);\n   57:     Session.set(\"T\",false);\n   58:     Session.set(\"P_add\",false);\n   59:     Session.set(\"P_limit\",false);\n   60:     Session.set(\"F_limit\",false);\n   61:     Session.set(\"F_add\", false);\n   62:     Session.set(\"L_add\", false);\n   63      \n   64:     console.log($(q.target).text());\n   65      \n   66  \n   67:     Meteor.call(\"eventSet\",this._id, Meteor.userId());\n   68:     // if(Session.get(\"Q\")){\n   69:     //   if($(q.target).text() == \"Register\"){\n   70:     //      $(q.target).text('Unregister');\n   71:     //     // Materialize.toast(\"You've registered for this event!\" , 1000);\n   72      //   }\n   73:     //   else{\n   74:     //     $(q.target).text('Register');\n   75:     //   Materialize.toast(\"You've unregistered for this event!\" , 1000);\n   76      //   }\n   77:     //   // $(event.target).parent().parent().prev().toggleClass(\"chosen\");\n   78      // }\n   79:       var s = '<i class=\"material-icons left\">grade</i>Register';\n   80    \n   81      \n   82:     if(Session.get(\"P_limit\"))\n   83:       Materialize.toast(\"Sorry, you have used your limit of <strong> \t&nbsp;\"+ ' '+RegisterLimit.find().fetch()[0].payable+\"&nbsp; payable events</strong>. Please uncheck some of them to register for this one\" , 4000);\n   84:     if(Session.get(\"L_add\"))\n   85:       Materialize.toast(\"You've registered for a not limited event \" , 4000);\n   86:     if(Session.get(\"P_add\"))\n   87:       Materialize.toast(\"You've registered for <strong> &nbsp; \"+Meteor.user().payable+\" &nbsp; of &nbsp; \"+RegisterLimit.find().fetch()[0].payable+\" &nbsp; payable events </strong> &nbsp; avaible for you. Please remember that you will have to pay on 18th of January in Nymble.\" , 4000);\n   88:     if(Session.get(\"F_add\"))\n   89:       Materialize.toast(\"You've registered for <strong> &nbsp; \"+Meteor.user().free+\" &nbsp; of &nbsp; \"+RegisterLimit.find().fetch()[0].free+\" &nbsp; free events </strong> &nbsp; avaible for you.\" , 4000);\n   90:     if(Session.get(\"F_limit\"))\n   91:       Materialize.toast(\"Sorry, you have used your limit of <strong> &nbsp;\"+ ' '+RegisterLimit.find().fetch()[0].free+\" &nbsp; free events</strong>. &nbsp; Please uncheck some of them to register for this one\" , 4000);\n   92    }\n   93  });\n   94  \n   95: Template.oneEvent.helpers({\n   96:   hasUserDecided: function () {\n   97:       return !Meteor.user().decided;\n   98      },\n   99      \n  100:   isEventFull: function() { \n  101:     console.log('isEventFull'+this);\n  102:     if(!Role.users.IsInRole(Meteor.user()._id, 'admin') && !Meteor.user().decided && this.users.length >= this.limit)\n  103:       return false;\n  104:     else\n  105        return true;\n  106    },\n  107  \n  108:   isEventChosen: function() {\n  109:   \treturn (Meteor.user().events.indexOf(this._id) > -1);\n  110    }\n  111  })\n  ...\n  113  \n  114  \n  115: Template.adminEvent.events({\n  116:   // \"submit #type\": function (event) {\n  117    //   event.preventDefault();\n  118:   //   Meteor.call(\"eventUpdate\",this._id, event.target.id, event.target.text.value);\n  119    //   event.target.text.value = \"\";\n  120    // },\n  121  \n  122:   \"submit #manually-add\": function (event) {\n  123      event.preventDefault();\n  124  \n  125:     console.log(event.target.text.value);\n  126:     console.log(this);\n  127:     Meteor.call(\"userManuallyAdd\",Meteor.users.findOne({ 'emails': { $elemMatch: { 'address': event.target.text.value} } } )._id, this);\n  128      \n  129      event.target.text.value = \"\";\n  ...\n  132    \"click #free\": function (event) {\n  133      // event.preventDefault();\n  134:     Meteor.call(\"eventUpdate\",this._id, 'eventType', 'free');\n  135      // event.target.text.value = \"\";\n  136    },\n  ...\n  138    \"click #payable\": function (event) {\n  139      // event.preventDefault();\n  140:     Meteor.call(\"eventUpdate\",this._id, 'eventType', 'payable');\n  141      // event.target.text.value = \"\";\n  142    },\n  ...\n  144    \"click #notLimited\": function (event) {\n  145      // event.preventDefault();\n  146:     Meteor.call(\"eventUpdate\",this._id, 'eventType', 'notLimited');\n  147      // event.target.text.value = \"\";\n  148    },\n  149    \n  150:   \"submit #description\": function (event) {\n  151      event.preventDefault();\n  152:     Meteor.call(\"eventUpdate\",this._id, event.target.id, event.target.text.value);\n  153      event.target.text.value = \"\";\n  154    },\n  155  \n  156:   \"submit #summary\": function (event) {\n  157      event.preventDefault();\n  158:     Meteor.call(\"eventUpdate\",this._id, event.target.id, event.target.text.value);\n  159      event.target.text.value = \"\";\n  160    },\n  161    \n  162:   \"submit #limit\": function (event) {\n  163      event.preventDefault();\n  164:     Meteor.call(\"eventUpdate\",this._id, event.target.id, event.target.text.value);\n  165      event.target.text.value = \"\";\n  166    },\n  167    \n  168:   \"submit #start-date\": function (event) {\n  169      E=event;\n  170:     console.log(E);\n  171      event.preventDefault();\n  172:     Meteor.call(\"eventUpdateDateStart\",this._id, event.target.text.value);\n  173      event.target.text.value = \"\";\n  174    },\n  175    \n  176:   \"submit #end-date\": function (event) {\n  177      event.preventDefault();\n  178:     Meteor.call(\"eventUpdateDateEnd\",this._id, event.target.text.value);\n  179      event.target.text.value = \"\";\n  180    },\n  181    \n  182    \"click #event-remove\": function() {\n  183:     console.log(\"trying to remove \" + this._id);\n  184:     Meteor.call(\"eventRemove\", this._id);\n  185    },\n  186    \n  ...\n  188  });\n  189  \n  190: // Template.days.onRendered(function () {\n  191: // \t\t// $('.days').append('<div><div><ul>');\n  192: // \t\t// $('.day_card').prepend('</ul></div></div><div class=\"card day\"><div class=\"card-content\">');\n  193  // \t\t// $('.day_card').append('<ul>');\n  194  \n  195  // \t\t$('.day_card').each(function(index) {\n  196  \n  197: // \t\t\tconsole.log(index);\n  198  \n  199: // \t\t\ts='</ul></div></div>';\n  200  // \t\t\tif(index != 0)\n  201: // \t\t\t\t $('this').before(s);\n  202  \n  203: // \t\t\ts='<div class=\"card day\"><div class=\"card-content\">';\n  204: // \t\t\t$(this).before(s);\n  205: // \t\t\ts='<ul>';\n  206: // \t\t\t$(this).after(s);\n  207  // \t\t});\n  208  \n  209: \t\t// $('#'+a).prepend('</ul></div></div><div class=\"card day\"><div class=\"card-content\">');\n  210  \t\t// $('#'+a).append('<ul>');\n  211  \n  212: \t\t// console.log('inserted for ' +'#'+a);\n  213  \t\t// }\n  214  // });\n  ...\n  217  \n  218  \n  219: Succes = false;\n  220  \n  221: // var gapi=window.gapi=window.gapi||{};gapi._bs=new Date().getTime();(function(){var f=window,h=document,m=f.location,n=function(){},u=/\\[native code\\]/,w=function(a,b,c){return a[b]=a[b]||c},A=function(a){for(var b=0;b<this.length;b++)if(this[b]===a)return b;return-1},B=function(a){a=a.sort();for(var b=[],c=void 0,d=0;d<a.length;d++){var e=a[d];e!=c&&b.push(e);c=e}return b},C=function(){var a;if((a=Object.create)&&u.test(a))a=a(null);else{a={};for(var b in a)a[b]=void 0}return a},D=w(f,\"gapi\",{});var E;E=w(f,\"___jsl\",C());w(E,\"I\",0);w(E,\"hel\",10);var F=function(){var a=m.href,b;if(E.dpo)b=E.h;else{b=E.h;var c=RegExp(\"([#].*&|[#])jsh=([^&#]*)\",\"g\"),d=RegExp(\"([?#].*&|[?#])jsh=([^&#]*)\",\"g\");if(a=a&&(c.exec(a)||d.exec(a)))try{b=decodeURIComponent(a[2])}catch(e){}}return b},G=function(a){var b=w(E,\"PQ\",[]);E.PQ=[];var c=b.length;if(0===c)a();else for(var d=0,e=function(){++d===c&&a()},g=0;g<c;g++)b[g](e)},H=function(a){return w(w(E,\"H\",C()),a,C())};var J=w(E,\"perf\",C()),K=w(J,\"g\",C()),aa=w(J,\"i\",C());w(J,\"r\",[]);C();C();var L=function(a,b,c){var d=J.r;\"function\"===typeof d?d(a,b,c):d.push([a,b,c])},N=function(a,b,c){b&&0<b.length&&(b=M(b),c&&0<c.length&&(b+=\"___\"+M(c)),28<b.length&&(b=b.substr(0,28)+(b.length-28)),c=b,b=w(aa,\"_p\",C()),w(b,c,C())[a]=(new Date).getTime(),L(a,\"_p\",c))},M=function(a){return a.join(\"__\").replace(/\\./g,\"_\").replace(/\\-/g,\"_\").replace(/\\,/g,\"_\")};var O=C(),P=[],Q=function(a){throw Error(\"Bad hint\"+(a?\": \"+a:\"\"));};P.push([\"jsl\",function(a){for(var b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b];\"object\"==typeof c?E[b]=w(E,b,[]).concat(c):w(E,b,c)}if(b=a.u)a=w(E,\"us\",[]),a.push(b),(b=/^https:(.*)$/.exec(b))&&a.push(\"http:\"+b[1])}]);var ba=/^(\\/[a-zA-Z0-9_\\-]+)+$/,ca=/^[a-zA-Z0-9\\-_\\.,!]+$/,da=/^gapi\\.loaded_[0-9]+$/,ea=/^[a-zA-Z0-9,._-]+$/,ia=function(a,b,c,d){var e=a.split(\";\"),g=e.shift(),l=O[g],k=null;l?k=l(e,b,c,d):Q(\"no hint processor for: \"+g);k||Q(\"failed to generate load url\");b=k;c=b.match(fa);(d=b.match(ga))&&1===d.length&&ha.test(b)&&c&&1===c.length||Q(\"failed sanity: \"+a);return k},ka=function(a,b,c,d){a=ja(a);da.test(c)||Q(\"invalid_callback\");b=R(b);d=d&&d.length?R(d):null;var e=function(a){return encodeURIComponent(a).replace(/%2C/g,\n  222: // \",\")};return[encodeURIComponent(a.g).replace(/%2C/g,\",\").replace(/%2F/g,\"/\"),\"/k=\",e(a.version),\"/m=\",e(b),d?\"/exm=\"+e(d):\"\",\"/rt=j/sv=1/d=1/ed=1\",a.a?\"/am=\"+e(a.a):\"\",a.c?\"/rs=\"+e(a.c):\"\",a.f?\"/t=\"+e(a.f):\"\",\"/cb=\",e(c)].join(\"\")},ja=function(a){\"/\"!==a.charAt(0)&&Q(\"relative path\");for(var b=a.substring(1).split(\"/\"),c=[];b.length;){a=b.shift();if(!a.length||0==a.indexOf(\".\"))Q(\"empty/relative directory\");else if(0<a.indexOf(\"=\")){b.unshift(a);break}c.push(a)}a={};for(var d=0,e=b.length;d<e;++d){var g=\n  223: // b[d].split(\"=\"),l=decodeURIComponent(g[0]),k=decodeURIComponent(g[1]);2==g.length&&l&&k&&(a[l]=a[l]||k)}b=\"/\"+c.join(\"/\");ba.test(b)||Q(\"invalid_prefix\");c=S(a,\"k\",!0);d=S(a,\"am\");e=S(a,\"rs\");a=S(a,\"t\");return{g:b,version:c,a:d,c:e,f:a}},R=function(a){for(var b=[],c=0,d=a.length;c<d;++c){var e=a[c].replace(/\\./g,\"_\").replace(/-/g,\"_\");ea.test(e)&&b.push(e)}return b.join(\",\")},S=function(a,b,c){a=a[b];!a&&c&&Q(\"missing: \"+b);if(a){if(ca.test(a))return a;Q(\"invalid: \"+b)}return null},ha=/^https?:\\/\\/[a-z0-9_.-]+\\.google\\.com(:\\d+)?\\/[a-zA-Z0-9_.,!=\\-\\/]+$/,\n  224: // ga=/\\/cb=/g,fa=/\\/\\//g,la=function(){var a=F();if(!a)throw Error(\"Bad hint\");return a};O.m=function(a,b,c,d){(a=a[0])||Q(\"missing_hint\");return\"https://apis.google.com\"+ka(a,b,c,d)};var U=decodeURI(\"%73cript\"),V=function(a,b){for(var c=[],d=0;d<a.length;++d){var e=a[d];e&&0>A.call(b,e)&&c.push(e)}return c},ma=function(a){\"loading\"!=h.readyState?W(a):h.write(\"<\"+U+' src=\"'+encodeURI(a)+'\"></'+U+\">\")},W=function(a){var b=h.createElement(U);b.setAttribute(\"src\",a);b.async=\"true\";(a=h.getElementsByTagName(U)[0])?a.parentNode.insertBefore(b,a):(h.head||h.body||h.documentElement).appendChild(b)},na=function(a,b){var c=b&&b._c;if(c)for(var d=0;d<P.length;d++){var e=P[d][0],g=P[d][1];\n  225: // g&&Object.prototype.hasOwnProperty.call(c,e)&&g(c[e],a,b)}},oa=function(a,b,c){X(function(){var c;c=b===F()?w(D,\"_\",C()):C();c=w(H(b),\"_\",c);a(c)},c)},Z=function(a,b){var c=b||{};\"function\"==typeof b&&(c={},c.callback=b);na(a,c);var d=a?a.split(\":\"):[],e=c.h||la(),g=w(E,\"ah\",C());if(g[\"::\"]&&d.length){for(var l=[],k=null;k=d.shift();){var q=k.split(\".\"),q=g[k]||g[q[1]&&\"ns:\"+q[0]||\"\"]||e,x=l.length&&l[l.length-1]||null,y=x;x&&x.hint==q||(y={hint:q,b:[]},l.push(y));y.b.push(k)}var z=l.length;if(1<\n  226: // z){var v=c.callback;v&&(c.callback=function(){0==--z&&v()})}for(;d=l.shift();)Y(d.b,c,d.hint)}else Y(d||[],c,e)},Y=function(a,b,c){a=B(a)||[];var d=b.callback,e=b.config,g=b.timeout,l=b.ontimeout,k=b.onerror,q=void 0;\"function\"==typeof k&&(q=k);var x=null,y=!1;if(g&&!l||!g&&l)throw\"Timeout requires both the timeout parameter and ontimeout parameter to be set\";var k=w(H(c),\"r\",[]).sort(),z=w(H(c),\"L\",[]).sort(),v=[].concat(k),T=function(a,b){if(y)return 0;f.clearTimeout(x);z.push.apply(z,p);var d=\n  227: // ((D||{}).config||{}).update;d?d(e):e&&w(E,\"cu\",[]).push(e);if(b){N(\"me0\",a,v);try{oa(b,c,q)}finally{N(\"me1\",a,v)}}return 1};0<g&&(x=f.setTimeout(function(){y=!0;l()},g));var p=V(a,z);if(p.length){var p=V(a,k),r=w(E,\"CP\",[]),t=r.length;r[t]=function(a){if(!a)return 0;N(\"ml1\",p,v);var b=function(b){r[t]=null;T(p,a)&&G(function(){d&&d();b()})},c=function(){var a=r[t+1];a&&a()};0<t&&r[t-1]?r[t]=function(){b(c)}:b(c)};if(p.length){var I=\"loaded_\"+E.I++;D[I]=function(a){r[t](a);D[I]=null};a=ia(c,p,\"gapi.\"+\n  228: // I,k);k.push.apply(k,p);N(\"ml0\",p,v);b.sync||f.___gapisync?ma(a):W(a)}else r[t](n)}else T(p)&&d&&d()};var X=function(a,b){if(E.hee&&0<E.hel)try{return a()}catch(c){b&&b(c),E.hel--,Z(\"debug_error\",function(){try{window.___jsl.hefn(c)}catch(a){throw c;}})}else try{return a()}catch(c){throw b&&b(c),c;}};D.load=function(a,b){return X(function(){return Z(a,b)})};K.bs0=window.gapi._bs||(new Date).getTime();L(\"bs0\");K.bs1=(new Date).getTime();L(\"bs1\");delete window.gapi._bs;})();\n  229: // gapi.load(\"client\",{callback:window[\"OnLoadCallback\"],_c:{\"jsl\":{\"ci\":{\"deviceType\":\"desktop\",\"oauth-flow\":{\"authUrl\":\"https://accounts.google.com/o/oauth2/auth\",\"proxyUrl\":\"https://accounts.google.com/o/oauth2/postmessageRelay\",\"disableOpt\":true,\"idpIframeUrl\":\"https://accounts.google.com/o/oauth2/iframe\",\"usegapi\":false},\"debug\":{\"reportExceptionRate\":0.05,\"forceIm\":false,\"rethrowException\":false,\"host\":\"https://apis.google.com\"},\"lexps\":[81,97,99,122,123,45,30,79,127],\"enableMultilogin\":true,\"googleapis.config\":{\"auth\":{\"useFirstPartyAuthV2\":true}},\"isPlusUser\":true,\"inline\":{\"css\":1},\"disableRealtimeCallback\":false,\"drive_share\":{\"skipInitCommand\":true},\"csi\":{\"rate\":0.01},\"report\":{\"apiRate\":{\"gapi\\\\.signin\\\\..*\":0.05,\"gapi\\\\.signin2\\\\..*\":0.05},\"apis\":[\"iframes\\\\..*\",\"gadgets\\\\..*\",\"gapi\\\\.appcirclepicker\\\\..*\",\"gapi\\\\.auth\\\\..*\",\"gapi\\\\.client\\\\..*\"],\"rate\":0.001,\"host\":\"https://apis.google.com\"},\"client\":{\"headers\":{\"request\":[\"Accept\",\"Accept-Language\",\"Authorization\",\"Cache-Control\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-MD5\",\"Content-Range\",\"Content-Type\",\"Date\",\"GData-Version\",\"Host\",\"If-Match\",\"If-Modified-Since\",\"If-None-Match\",\"If-Unmodified-Since\",\"Origin\",\"OriginToken\",\"Pragma\",\"Range\",\"Slug\",\"Transfer-Encoding\",\"Want-Digest\",\"X-ClientDetails\",\"X-GData-Client\",\"X-GData-Key\",\"X-Goog-AuthUser\",\"X-Goog-PageId\",\"X-Goog-Encode-Response-If-Executable\",\"X-Goog-Correlation-Id\",\"X-Goog-Request-Info\",\"X-Goog-Experiments\",\"x-goog-iam-authority-selector\",\"x-goog-iam-authorization-token\",\"X-Goog-Spatula\",\"X-Goog-Upload-Command\",\"X-Goog-Upload-Content-Disposition\",\"X-Goog-Upload-Content-Length\",\"X-Goog-Upload-Content-Type\",\"X-Goog-Upload-File-Name\",\"X-Goog-Upload-Offset\",\"X-Goog-Upload-Protocol\",\"X-Goog-Visitor-Id\",\"X-HTTP-Method-Override\",\"X-JavaScript-User-Agent\",\"X-Pan-Versionid\",\"X-Origin\",\"X-Referer\",\"X-Upload-Content-Length\",\"X-Upload-Content-Type\",\"X-Use-HTTP-Status-Code-Override\",\"X-YouTube-VVT\",\"X-YouTube-Page-CL\",\"X-YouTube-Page-Timestamp\"],\"response\":[\"Digest\",\"Cache-Control\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-MD5\",\"Content-Range\",\"Content-Type\",\"Date\",\"ETag\",\"Expires\",\"Last-Modified\",\"Location\",\"Pragma\",\"Range\",\"Server\",\"Transfer-Encoding\",\"WWW-Authenticate\",\"Vary\",\"Unzipped-Content-MD5\",\"X-Goog-Generation\",\"X-Goog-Metageneration\",\"X-Goog-Safety-Content-Type\",\"X-Goog-Safety-Encoding\",\"X-Google-Trace\",\"X-Goog-Upload-Chunk-Granularity\",\"X-Goog-Upload-Control-URL\",\"X-Goog-Upload-Size-Received\",\"X-Goog-Upload-Status\",\"X-Goog-Upload-URL\",\"X-Goog-Diff-Download-Range\",\"X-Goog-Hash\",\"X-Goog-Updated-Authorization\",\"X-Server-Object-Version\",\"X-Guploader-Customer\",\"X-Guploader-Upload-Result\",\"X-Guploader-Uploadid\"]},\"rms\":\"migrated\",\"cors\":false},\"isLoggedIn\":true,\"signInDeprecation\":{\"rate\":0.0},\"include_granted_scopes\":true,\"llang\":\"en\",\"plus_layer\":{\"isEnabled\":false},\"iframes\":{\"youtube\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/youtube?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\"ytsubscribe\":{\"url\":\"https://www.youtube.com/subscribe_embed?usegapi\\u003d1\"},\"plus_circle\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/plus/circle?usegapi\\u003d1\"},\"plus_share\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/+1/sharebutton?plusShare\\u003dtrue\\u0026usegapi\\u003d1\"},\"rbr_s\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/render/recobarsimplescroller\"},\"udc_webconsentflow\":{\"params\":{\"url\":\"\"},\"url\":\"https://www.google.com/settings/webconsent?usegapi\\u003d1\"},\":source:\":\"3p\",\"blogger\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/blogger?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\"evwidget\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/events/widget?usegapi\\u003d1\"},\":socialhost:\":\"https://apis.google.com\",\"shortlists\":{\"url\":\"\"},\"hangout\":{\"url\":\"https://talkgadget.google.com/:session_prefix:talkgadget/_/widget\"},\"plus_followers\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/_/im/_/widget/render/plus/followers?usegapi\\u003d1\"},\"photocomments\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/photocomments?usegapi\\u003d1\"},\"post\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::im_prefix:_/widget/render/post?usegapi\\u003d1\"},\":gplus_url:\":\"https://plus.google.com\",\"signin\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/signin?usegapi\\u003d1\",\"methods\":[\"onauth\"]},\"rbr_i\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/render/recobarinvitation\"},\"share\":{\"url\":\":socialhost:/:session_prefix::im_prefix:_/widget/render/share?usegapi\\u003d1\"},\"plusone\":{\"params\":{\"count\":\"\",\"size\":\"\",\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/+1/fastbutton?usegapi\\u003d1\"},\"comments\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/comments?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\":im_socialhost:\":\"https://plus.googleapis.com\",\"backdrop\":{\"url\":\"https://clients3.google.com/cast/chromecast/home/widget/backdrop?usegapi\\u003d1\"},\"visibility\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/visibility?usegapi\\u003d1\"},\"autocomplete\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/autocomplete\"},\"additnow\":{\"url\":\"https://apis.google.com/additnow/additnow.html?usegapi\\u003d1\",\"methods\":[\"launchurl\"]},\":signuphost:\":\"https://plus.google.com\",\"appcirclepicker\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/appcirclepicker\"},\"follow\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/follow?usegapi\\u003d1\"},\"community\":{\"url\":\":ctx_socialhost:/:session_prefix::im_prefix:_/widget/render/community?usegapi\\u003d1\"},\"sharetoclassroom\":{\"url\":\"https://www.gstatic.com/classroom/sharewidget/widget_stable.html?usegapi\\u003d1\"},\"ytshare\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/ytshare?usegapi\\u003d1\"},\"plus\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/badge?usegapi\\u003d1\"},\"reportabuse\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/reportabuse?usegapi\\u003d1\"},\"commentcount\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/commentcount?usegapi\\u003d1\"},\"configurator\":{\"url\":\":socialhost:/:session_prefix:_/plusbuttonconfigurator?usegapi\\u003d1\"},\"zoomableimage\":{\"url\":\"https://ssl.gstatic.com/microscope/embed/\"},\"savetowallet\":{\"url\":\"https://clients5.google.com/s2w/o/savetowallet\"},\"person\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/person?usegapi\\u003d1\"},\"savetodrive\":{\"url\":\"https://drive.google.com/savetodrivebutton?usegapi\\u003d1\",\"methods\":[\"save\"]},\"page\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/page?usegapi\\u003d1\"},\"card\":{\"url\":\":socialhost:/:session_prefix:_/hovercard/card\"}}},\"h\":\"m;/_/scs/apps-static/_/js/k\\u003doz.gapi.en_GB.cJkIm0jUbF0.O/m\\u003d__features__/am\\u003dAQ/rt\\u003dj/d\\u003d1/t\\u003dzcms/rs\\u003dAGLTcCMfB6uTBe-eJT43Gy1rNo6w6uY2fA\",\"u\":\"https://apis.google.com/js/client.js?onload\\u003dOnLoadCallback\",\"hee\":true,\"fp\":\"459cb04dfc6e172aece6e799643434c476cfafbf\",\"dpo\":false},\"fp\":\"459cb04dfc6e172aece6e799643434c476cfafbf\",\"annotation\":[\"interactivepost\",\"recobar\",\"signin2\",\"autocomplete\",\"profile\"],\"bimodal\":[\"signin\",\"share\"]}});\n  230  \n\n/run/media/ted/Data/WEB/ths_signup/client/templates/home.html:\n    2  \n    3  <head>\n    4:   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    5:   <script src=\"https://apis.google.com/js/client.js\"></script>\n    6:   <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/apple-touch-icon-57x57.png\">\n    7:   <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/apple-touch-icon-60x60.png\">\n    8:   <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/apple-touch-icon-72x72.png\">\n    9:   <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/apple-touch-icon-76x76.png\">\n   10:   <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114.png\">\n   11:   <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/apple-touch-icon-120x120.png\">\n   12:   <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144.png\">\n   13:   <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/apple-touch-icon-152x152.png\">\n   14:   <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon-180x180.png\">\n   15:   <link rel=\"icon\" type=\"image/png\" href=\"/favicon-32x32.png\" sizes=\"32x32\">\n   16:   <link rel=\"icon\" type=\"image/png\" href=\"/favicon-194x194.png\" sizes=\"194x194\">\n   17:   <link rel=\"icon\" type=\"image/png\" href=\"/favicon-96x96.png\" sizes=\"96x96\">\n   18:   <link rel=\"icon\" type=\"image/png\" href=\"/android-chrome-192x192.png\" sizes=\"192x192\">\n   19:   <link rel=\"icon\" type=\"image/png\" href=\"/favicon-16x16.png\" sizes=\"16x16\">\n   20:   <link rel=\"manifest\" href=\"/manifest.json\">\n   21:   <link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\">\n   22:   <meta name=\"msapplication-TileColor\" content=\"#da532c\">\n   23:   <meta name=\"msapplication-TileImage\" content=\"/mstile-144x144.png\">\n   24    <meta name=\"theme-color\" content=\"#ffffff\">\n   25:   <title class='center-align'>THS Sign Up</title>\n   26  </head>\n   27:   <!-- <div class=\"nav\">\n   28      {{> Template.dynamic template=nav}}\n   29    </div> -->\n   30  \n   31: <!--   <div class=\"content\"> -->\n   32    <body>\n   33  \n   34    <nav>\n   35:     <div class=\"nav-wrapper z-depth-1\" style=\"background-color: white\">\n   36:          <a href=\"#\" class=\"brand-logo center\" style=\"color: #444;\" onclick=\"window.location.reload(true);\">THS Sign Up</a>\n   37:          <div id=\"nav-mobile\" class=\"right\" style=\"color: #444; margin-right: 2em;\">\n   38:             {{#if currentUser}}\n   39:               Welcome {{currentUser.profile.name}}! &nbsp; &nbsp;{{> atNavButton}}\n   40              {{/if}}\n   41            </div>\n   42:          <!-- <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n   43:            <li><a href=\"sass.html\">Sass</a></li>\n   44:            <li><a href=\"badges.html\">Compon  ents</a></li>\n   45:            <li><a href=\"collapsible.html\">JavaScript</a></li>\n   46           </ul> -->\n   47      </div>\n   ..\n   60  <template name=\"appRenderedBody\">\n   61  \n   62:   {{#if Template.subscriptionsReady}}\n   63:     <!-- {{#if currentUser}} -->\n   64:       <div class=\"container\">\n   65:       {{#if hasUserDecided}}\n   66:         <div class=\"center-align flow-text\">\n   67:           <p>{{displayIntroText}}</p>\n   68          </div>\n   69  \n   70:         {{#if isInRole 'admin'}}\n   71:           {{> adminSettings}}\n   72:           {{>allSections}}\n   73:           <!-- {{> eventsDownload}} -->\n   74          {{/if}}\n   75  \n   76:         {{#if isAdmin}}\n   77:           {{> usersList}}\n   78          {{/if}}\n   79            \n   80:         {{> days}}\n   81  \n   82:         <!-- {{initCollapsible}} -->\n   83          \n   84    \n   85:       {{else}}\n   86:           {{>afterDecision}}\n   87        {{/if}}\n   88        </div>\n   89        <br /><br /><br /><br />\n   90        <footer>\n   91:         <div class=\"row\">\n   92:           <p class=\"col s2 offset-s10 center small\" style=\"color: #AAAAAA;\">&copy; 2015-2016, T.W.</p>\n   93          </div>\n   94        </footer>\n   95      <!-- {{/if }} -->\n   96:   {{else}}\n   97:     {{>spinner}}\n   98    {{/if}}\n   99    \n  ...\n  102  <template name=\"appBody\">\n  103    \n  104:     {{#if Template.subscriptionsReady}}\n  105        {{>appRenderedBody}}\n  106:     {{else}}\n  107:       {{>spinner}}\n  108      {{/if}}\n  109  \n\n/run/media/ted/Data/WEB/ths_signup/client/templates/home.js:\n    1  \n    2: AccountsTemplates.addField({\n    3          _id: 'name',\n    4          type: 'text',\n    5          required: true,\n    6:         displayName: 'Name & Surname',\n    7      });\n    8: AccountsTemplates.addField({\n    9:         _id: 's',\n   10          type: 'hidden',\n   11          // required: true,\n   12      });\n   13  \n   14: AccountsTemplates.addField({\n   15      _id: \"email_agree\",\n   16      type: \"checkbox\",\n   17:     displayName: \"I agree that my email adress will be used to contact me with regards to the reception weeks and students events at KTH”\",\n   18      required: true,\n   19:     errStr: \"Please agree to the aformentienod terms\",\n   20        func: function(value) {\n   21          return !value;\n   22        },\n   23:       negativeValidation: false\n   24  });\n   25  \n   26: AccountsTemplates.configure({\n   27:     defaultLayoutType: 'blaze', // Optional, the default is 'blaze'\n   28:     // defaultTemplate: 'myCustomFullPageAtForm',\n   29      defaultLayout: 'myLayout',\n   30:     // defaultLayoutRegions: {\n   31      //     nav: 'myNav',\n   32      //     // footer: 'myFooter'\n   33      // },\n   34      defaultContentRegion: 'main',\n   35:     preSignUpHook: function(pwd, info){\n   36:         info.profile.s = FlowRouter.getQueryParam('s');\n   37      },\n   38      onLogoutHook: function(pwd, info){\n   39:         FlowRouter.go('/sign-in');\n   40      }\n   41  });\n   42  \n   43: AccountsTemplates.configureRoute('signIn');\n   44: AccountsTemplates.configureRoute('signUp');\n   45: FlowRouter.triggers.enter([AccountsTemplates.ensureSignedIn]);\n   46  FlowRouter.route('/', {\n   47    name: 'root',\n   48:   triggersEnter: [AccountsTemplates.ensureSignedIn],\n   49:   action(params, queryParams) {\n   50:     console.log(\"Root\");\n   51      BlazeLayout.render('myLayout', {main: 'appBody'});\n   52    }\n   53  });\n   54  \n   55: Deps.autorun(function() {\n   56:     // Meteor.subscribe('user', Meteor.user()._id);\n   57: //     Meteor.subscribe('events');\n   58: //     Meteor.subscribe('limit');\n   59      \n   60  });\n   61  \n   62: // Template.days.onCreated(function() {\n   63: //     this.autorun(() => {\n   64: //         this.subscribe('user', Meteor.user()._id);\n   65: //         this.subscribe('events', Meteor.user()._id);\n   66: //         this.subscribe('limit');\n   67  //     });\n   68  // });\n   69  \n   70: // Template.afterDecision.onCreated(function() {\n   71: //     this.autorun(() => {\n   72: //         this.subscribe('user', Meteor.user()._id);\n   73: //         this.subscribe('events', Meteor.user()._id);\n   74: //         this.subscribe('limit');\n   75  //     });\n   76  // });\n   77  \n   78  Template.appBody.onCreated(function() {\n   79:     this.autorun(() => {\n   80:         this.subscribe('user');\n   81:         // this.subscribe('user', Meteor.user()._id);\n   82:         // this.subscribe('events', Meteor.user()._id);\n   83:         // this.subscribe('limit');\n   84      });\n   85  });\n   86  \n   87  Template.appRenderedBody.onCreated(function() {\n   88:     this.autorun(() => {\n   89:         // this.subscribe('user', Meteor.user()._id);\n   90          // \n   91:         // this.subscribe('user', Meteor.user()._id);\n   92:         this.subscribe('events');\n   93:         this.subscribe('limit');\n   94      });\n   95  });\n   96  \n   97  Template.appRenderedBody.onRendered(function(){\n   98:     this.autorun(() => {\n   99:         if (this.subscriptionsReady()) {\n  100:             Tracker.afterFlush(() => {\n  101:                 $('.collapsible').collapsible();\n  102:                 console.log(\"Collapsible ON!\");\n  103              });\n  104          }\n  ...\n  106  });\n  107  \n  108: // Template.days.onRendered(function(){\n  109: //     this.autorun(() => {\n  110: //         if (this.subscriptionsReady()) {\n  111: //             Tracker.afterFlush(() => {\n  112: //                 $('.collapsible').collapsible();\n  113: //                 console.log(\"Collapsible ON!\");\n  114  //             });\n  115  //         }\n  ...\n  117  // });\n  118      \n  119: Template.appBody.helpers({\n  120:     UserDecided: function () {\n  121:         return Meteor.user().decided;\n  122          // ...\n  123      }\n  ...\n  125  \n  126  \n  127:     // var calendar = new GAPI.Calendar('<766997000709-cogelu7ci0k8436qsjsp63jb7arbs8jo.apps.googleusercontent.com>');\n  128      // calendar.get_content(function(content) {\n  129:     //     console.log(content);\n  130      // });\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/users_list.html:\n    1: <template name=\"user_event\">\n    2: \t<!-- <li class=\"collection-item\"> -->\n    3  \t<tr>\n    4: \t\t<td>{{this.profile.name}}</td> <td>{{email}}</td><!-- {{emails[0].address}} -->\n    5: \t\t<td><a class=\"waves-effect btn-flat\" id=\"user-event-remove\" ><i class=\"material-icons left\">not_interested</i>Remove user from event</a></td>\n    6: \t\t<td><a class=\"waves-effect btn-flat\" id=\"user-event-paid\" >{{#if hasPaid ../_id}}Paid!{{else}}Hasn't paid{{/if}}</a></td>\n    7  \t</tr>\n    8  \t<!-- </li> -->\n    .\n   10  \n   11  \n   12: <template name=\"user\">\n   13  \t<li>\n   14:   \t\t<div class=\"collapsible-header\"><i class=\"material-icons left\">perm_identity</i>{{profile.name}}</div>\n   15:   \t\t<div class=\"collapsible-body\">\n   16  \t\t\t<!-- ID: {{_id}} -->\n   17: \t\t\t<!-- <p>Google mail: {{services.google.email}}</p> -->\n   18: \t\t\t<!-- <p>Facebook mail: {{services.facebook.email}}</p> -->\n   19  \t\t\t<p>\n   20  \t\t\t\tMail: {{email}}\n   21  \t\t\t\t<br />\n   22: \t\t\t\t<a id=\"user-remove\" class=\"waves-effect btn\"><i class=\"material-icons left\">not_interested</i>Remove user</a>\n   23  \n   24  \n   25: \t\t\t\t<a id=\"user-restart\" class=\"waves-effect btn\"><i class=\"material-icons left\">not_interested</i>Free user to change choices</a>\n   26  \n   27: \t\t\t\t<!-- <a id=\"user-admin\" class=\"waves-effect btn\"><i class=\"material-icons left\">grade</i>Give admin privileges</a> -->\n   28  \n   29  \t\t\t\t<br /><br />\n   30  \t\t\t\t\n   31: \t\t\t\t<div style=\"margin: 0 2em;\">\n   32: \t\t\t\t\t<h5>Assigned events:</h5>\n   33: \t\t\t\t\t<ul class=\"collection\">\n   34: \t\t\t\t\t\t{{#each chosenEvents}}\n   35: \t\t\t\t\t    <!--     {{#if p start.dateTime }}\n   36: \t\t\t\t\t  \t    \t<center><h6 class=\"\" id=\"{{_id}}\"></h6></center>\n   37  \t\t\t\t\t  \t  \t{{/if}}\n   38   -->\n   39: \t\t\t\t\t\t\t<li class=\"collection-item\">\n   40: \t\t\t\t\t\t  \t\t{{> oneEventSimple}}\n   41  \t\t\t\t\t\t  \t</li>\n   42  \n   ..\n   51  </template>\n   52  \n   53: <template name=\"oneEventSimple\">\n   54: \t<i class=\"material-icons left\">today</i>{{#if summary }}{{summary}}<span class=\"right\">{{hourFormat start.dateTime}} - {{hourFormat end.dateTime}} {{dayFormat start.dateTime}}</span>{{else}}International event{{/if}}\n   55  </template>\n   56  \n   57: <template name=\"userAdmin\">\n   58  \t<li>\n   59:   \t\t<div class=\"collapsible-header\"><i class=\"material-icons left\">today</i></div>\n   60:   \t\t<div class=\"collapsible-body\">\n   61  \t\t\n   62  \n   63  \t\t\t<p></p>\n   64: \t\t\t<a id=\"user-remove\" class=\"waves-effect btn\"><i class=\"material-icons left\">not_interested</i>Remove user</a>\n   65  \n   66  \t\t\t<br />\n   67  \n   68: \t\t\t<a id=\"user-admin\" class=\"waves-effect btn\"><i class=\"material-icons left\">grade</i>Give admin privileges</a>\n   69  \n   70  \t\t\t<br />\n   ..\n   73  </template>\n   74  \n   75: <template name=\"usersList\">\n   76: \t<ul class=\"card collapsible\">\n   77: \t\t<li class=\"card-content\">\n   78: \t\t\t<span class=\"collapsible-header card-title\">Registered Users</span>\n   79: \t\t\t<div class=\"collapsible-body\">\n   80: \t\t\t\t<ul class=\"collapsible\">\n   81: \t\t\t\t\t{{#each users}}\n   82: \t\t\t\t\t\t{{> user}}\n   83  \t\t\t\t\t{{/each}}\n   84  \t\t\t\t</ul>\n   ..\n   86  \t\t\t\t<center>\n   87  \n   88: \t\t\t\t\t<button type=\"submit\" class=\"btn btn-flat events-prev waves-effect waves-light\">Previous<i class=\"material-icons left\">chevron_left</i></button>\n   89  \n   90: \t\t\t\t\t<button type=\"submit\" class=\"btn btn-flat events-next waves-effect waves-light\">Next<i class=\"material-icons right\">chevron_right</i></button>\n   91  \t\t\t\t</center>\n   92  \t\t\t\t<br />\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/users_list.js:\n    1: Template.body.helpers({\n    2:     initCollapsible: function () {\n    3:     \t$('.collapsible').collapsible();\n    4:     \tconsole.log(\"Collapsible ON!\");\n    5      },\n    6      \n    7:     hasUserDecided: function () {\n    8:       return !Meteor.user().decided;\n    9      }\n   10      \n   11  });\n   12  \n   13: Template.user.helpers({\n   14  \t\n   15  });\n   16  \n   17: Template.days.rendered = function () {\n   18: \t$('.collapsible').collapsible();\n   19: \tconsole.log(\"LOOL\");\n   20  };\n   21  \n   22: Template.afterDecision.rendered = function () {\n   23:   $('.collapsible').collapsible();\n   24  };\n   25  \n   26: Template.user_event.events({\n   27: \t\"click #user-event-remove\": function(){\n   28: \t\t// console.log(this);\n   29: \t\t// console.log(Template.parentData(1));\n   30: \t\tMeteor.call(\"userEventRemove\",this._id, Template.parentData(1)._id);\n   31  \t},\n   32  \n   33: \t\"click #user-event-paid\": function(){\n   34: \t\tMeteor.call(\"userPay\",this._id, Template.parentData(1)._id);\n   35  \t},\n   36  });\n   37  \n   38  \n   39: Template.user.events({\n   40: \t\"click #user-remove\": function () {\n   41: \t\tMeteor.call(\"userRemove\", this._id);\n   42  \t},\n   43  \n   44: \t\"click #user-restart\": function () {\n   45: \t\tMeteor.call(\"restartUser\", this._id);\n   46  \t},\n   47  \n   48  \n   49  \n   50: \t\"click #user-admin\":function () {\n   51: \t\tMeteor.call(\"giveAdminPermission\", this._id);\n   52  \t}\n   53  });\n   54  \n   55: Template.usersList.onCreated(function() {\n   56:   var self = this;\n   57:   self.opt = new ReactiveVar([0,20]);\n   58:   self.autorun(function(){\n   59:     self.subscribe('usersPaginated', self.opt.get()[0], self.opt.get()[1]);\n   60    });\n   61  });\n   62  \n   63: Template.usersList.events({\n   64  \n   65:   'click .events-prev': function(event, template){\n   66      \n   67      var opt = template.opt.get();\n   ..\n   71        // opt[1] -=10;\n   72      \n   73:       template.opt.set(opt);\n   74:       // console.log(template.opt.get());\n   75      };\n   76    },\n   77:   'click .events-next': function(event, template){\n   78:     // if(Meteor.users.find().fetch().length == 11){\n   79      // if(true){\n   80        var opt = template.opt.get();\n   ..\n   82        // opt[1] +=10;\n   83        \n   84:       template.opt.set(opt);\n   85:       // console.log(template.opt.get());\n   86      // };\n   87    },\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/meteor_accounts_loginServiceConfiguration.bson:\n    <binary>\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/meteor_accounts_loginServiceConfiguration.metadata.json:\n    1: {\"options\":{},\"indexes\":[{\"v\":1,\"key\":{\"_id\":1},\"name\":\"_id_\",\"ns\":\"meteor.meteor_accounts_loginServiceConfiguration\"},{\"v\":1,\"unique\":true,\"key\":{\"service\":1},\"name\":\"service_1\",\"ns\":\"meteor.meteor_accounts_loginServiceConfiguration\"}]}\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/registerLimit.metadata.json:\n    1: {\"options\":{},\"indexes\":[{\"v\":1,\"key\":{\"_id\":1},\"name\":\"_id_\",\"ns\":\"meteor.registerLimit\"}]}\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/roles.bson:\n    <binary>\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/roles.metadata.json:\n    1: {\"options\":{},\"indexes\":[{\"v\":1,\"key\":{\"_id\":1},\"name\":\"_id_\",\"ns\":\"meteor.roles\"},{\"v\":1,\"unique\":true,\"key\":{\"name\":1},\"name\":\"name_1\",\"ns\":\"meteor.roles\"}]}\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/users.bson:\n    <binary>\n\n/run/media/ted/Data/WEB/ths_signup/dump/meteor/users.metadata.json:\n    1: {\"options\":{},\"indexes\":[{\"v\":1,\"key\":{\"_id\":1},\"name\":\"_id_\",\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"username\":1},\"name\":\"username_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"emails.address\":1},\"name\":\"emails.address_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"services.resume.loginTokens.hashedToken\":1},\"name\":\"services.resume.loginTokens.hashedToken_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"services.resume.loginTokens.token\":1},\"name\":\"services.resume.loginTokens.token_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"key\":{\"services.resume.haveLoginTokensToDelete\":1},\"name\":\"services.resume.haveLoginTokensToDelete_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"key\":{\"services.resume.loginTokens.when\":1},\"name\":\"services.resume.loginTokens.when_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"services.email.verificationTokens.token\":1},\"name\":\"services.email.verificationTokens.token_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"services.password.reset.token\":1},\"name\":\"services.password.reset.token_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"services.google.id\":1},\"name\":\"services.google.id_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"},{\"v\":1,\"unique\":true,\"key\":{\"services.facebook.id\":1},\"name\":\"services.facebook.id_1\",\"sparse\":1,\"ns\":\"Iny6dagu.users\"}]}\n\n/run/media/ted/Data/WEB/ths_signup/lib/collections.js:\n    1: EventList = new Mongo.Collection(\"eventList\");\n    2: Days = new Mongo.Collection(\"days\");\n    3: RegisterLimit = new Mongo.Collection(\"registerLimit\");\n    4  \n    5  \n    6: EventList.allow({\n    7:   insert: function () { return true; },\n    8    update: function () { return true; },\n    9    remove: function () { return true; }\n   ..\n   11  \n   12  \n   13: Meteor.users.allow({\n   14:   insert: function () { return true; },\n   15    update: function () { return true; },\n   16    remove: function () { return true; }\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/.meteor-portable:\n    1: false\n    2  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/.npmignore:\n    2  build\n    3  *.node\n    4: *.sw[a-z]\n    5: node_modules\n    6  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/.travis.yml:\n    1: language: node_js\n    2  \n    3  env:\n    4    - CXX=g++-4.8\n    5  \n    6: node_js:\n    7    - \"0.8\"\n    8    - \"0.10\"\n    .\n   11    - \"6\"\n   12  \n   13: addons:\n   14    apt:\n   15:     sources:\n   16:     - ubuntu-toolchain-r-test\n   17:     packages:\n   18      - g++-4.8\n   19  \n   20: sudo: false\n   21  \n   22: before_install:\n   23:   - $CXX --version\n   24:   - if [ \"$TRAVIS_NODE_VERSION\" = \"0.8\" ]; then npm install -g npm@2.7.3; fi;\n   25  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/CHANGELOG.md:\n    1  # 0.8.6 (2016-04-20)\n    2  \n    3:   * update nan for node v6 support\n    4  \n    5  # 0.8.5 (2015-08-12)\n    6  \n    7:   * update to nan v2 (adds support for iojs 3)\n    8  \n    9  # 0.8.4 (2015-07-24)\n   ..\n   13  # 0.8.3 (2015-05-06)\n   14  \n   15:   * update nan to 1.8.4 for iojs 2.x support\n   16  \n   17  # 0.8.2 (2015-03-28)\n   18  \n   19:   * always use callback for generating random bytes to avoid blocking\n   20  \n   21  # 0.8.1 (2015-01-18)\n   22:   * update NaN to 1.5.0 for iojs support\n   23  \n   24  # 0.8.0 (2014-08-03)\n   25:   * migrate to NAN for bindings\n   26  \n   27  # v0.5.0\n   28:   * Fix for issue around empty string params throwing Errors.\n   29    * Method deprecation.\n   30:   * Upgrade from libeio/ev to libuv. (shtylman)\n   31:   ** --- NOTE --- Breaks 0.4.x compatability\n   32    * EV_MULTIPLICITY compile flag.\n   33  \n   34  # v0.4.1\n   35:   * Thread safety fix around OpenSSL (GH-32). (bnoordhuis - through node)\n   36:   * C++ code changes using delete and new instead of malloc and free. (shtylman)\n   37:   * Compile options for speed, zoom. (shtylman)\n   38:   * Move much of the type and variable checking to the JS. (shtylman)\n   39  \n   40  # v0.4.0\n   41:   * Added getRounds function that will tell you the number of rounds within a hash/salt\n   42  \n   43  # v0.3.2\n   44:   * Fix api issue with async salt gen first param\n   45  \n   46  # v0.3.1\n   ..\n   49  # v0.3.0\n   50    * Internal Refactoring\n   51:   * Remove pthread dependencies and locking\n   52:   * Fix compiler warnings and a memory bug\n   53  \n   54  # v0.2.4\n   55:   * Use threadsafe functions instead of pthread mutexes\n   56:   * salt validation to make sure the salt is of the correct size and format\n   57  \n   58  # v0.2.3\n   59:   * cygwin support\n   60  \n   61  # v0.2.2\n   62:   * Remove dependency on libbsd, use libssl instead\n   63  \n   64  # v0.2.0\n   65:   * Added async functionality\n   66:   * API changes\n   67:     * hashpw -> encrypt\n   68:     * all old sync methods now end with _sync\n   69:   * Removed libbsd(arc4random) dependency...now uses openssl which is more widely spread\n   70  \n   71  # v0.1.2\n   72:   * Security fix. Wasn't reading rounds in properly and was always only using 4 rounds\n   73  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/ISSUE_TEMPLATE.md:\n    1: Thanks for reporting a new issue with the node bcrypt module!\n    2  \n    3: To help you resolve your issue faster please make sure you have done the following:\n    4  \n    5: * Searched existing issues (even closed ones) for your same problem\n    6: * Make sure you have installed the required dependencies listed on the readme\n    7: * Read your npm error log for lines telling you what failed, usually it is a problem with not having the correct dependencies installed to build the native module\n    8  \n    9: Once you have done the above and are still confident that the issue is with the module, please describe it below. Some things that really help get your issue resolved faster are:\n   10  \n   11  * What went wrong?\n   12  * What did you expect to happen?\n   13: * Which version of nodejs and OS?\n   14: * If you find a bug, please write a failing test.\n   15  \n   16: Thanks!\n   17  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/LICENSE:\n    1: Copyright (c) 2010 Nicholas Campbell\n    2  \n    3: Permission is hereby granted, free of charge, to any person obtaining a copy\n    4: of this software and associated documentation files (the \"Software\"), to deal\n    5: in the Software without restriction, including without limitation the rights\n    6: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    7: copies of the Software, and to permit persons to whom the Software is\n    8: furnished to do so, subject to the following conditions:\n    9  \n   10: The above copyright notice and this permission notice shall be included in\n   11: all copies or substantial portions of the Software.\n   12  \n   13: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   14: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   15: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   16: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   17: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   18: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   19: THE SOFTWARE.\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/Makefile:\n    1: TESTS = test/*.js\n    2  \n    3: all: test\n    4  \n    5  build: clean configure compile\n    .\n   10  compile: configure\n   11  \tnode-gyp build\n   12: \tnpm install .\n   13  \n   14: test: build\n   15: \t@./node_modules/nodeunit/bin/nodeunit \\\n   16: \t\t$(TESTS)\n   17  \n   18  clean:\n   ..\n   20  \n   21  \n   22: .PHONY: clean test build\n   23  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/README.md:\n    1: # node.bcrypt.js\n    2  \n    3: [![Join the chat at https://gitter.im/ncb000gt/node.bcrypt.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ncb000gt/node.bcrypt.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n    4  \n    5: [![Build Status](https://travis-ci.org/ncb000gt/node.bcrypt.js.svg?branch=master)](https://travis-ci.org/ncb000gt/node.bcrypt.js)\n    6  \n    7: Lib to help you hash passwords.\n    8  [bcrypt on wikipedia][bcryptwiki]\n    9  \n   10: Catalyst for this module: [How To Safely Store A Password][codahale]\n   11  \n   12: ## If You Are Submitting Bugs/Issues\n   13  \n   14: First, make sure that the version of node you are using is a _stable_ version. You'll know this because it'll have an even major release number. We do not currently support unstable versions and while the module may happen to work on some unstable versions you'll find that we quickly close issues if you're not using a stable version.\n   15  \n   16: If you are on a stable version of node, we can't magically know what you are doing to expose an issue, it is best if you provide a snippet of code or log files if you're having an install issue. This snippet need not include your secret sauce, but it must replicate the issue you are describing. The issues that get closed without resolution tend to be the ones that don't help us help you. Thanks.\n   17  \n   18  \n   19: ## Version Compatibility\n   20  \n   21: | Node Version | Bcrypt Version |\n   22  | ---- | ---- |\n   23  | 0.4.x | <= 0.4.x |\n   ..\n   27  | 0.11.x | >= 0.8.x |\n   28  \n   29: Windows users should make sure to have at least node 0.8.5 installed and version >= 0.7.1 of this module.\n   30  \n   31: `node-gyp` only works with stable/released versions of node. Since the `bcrypt` module uses `node-gyp` to build and install you'll need a stable version of node to use bcrypt. If you do not you'll likely see an error that starts with:\n   32  \n   33  ```\n   34: gyp ERR! stack Error: \"pre\" versions of node cannot be installed, use the --nodedir flag instead\n   35  ```\n   36  \n   37: ## Security Issues/Concerns\n   38  \n   39: > Per bcrypt implementation, only the first 72 characters of a string are used. Any extra characters are ignored when matching passwords.\n   40  \n   41: As should be the case with any security tool, this library should be scrutinized by anyone using it. If you find or suspect an issue with the code- please bring it to my attention and I'll spend some time trying to make sure that this tool is as secure as possible.\n   42  \n   43: To make it easier for people using this tool to analyze what has been surveyed, here is a list of BCrypt related security issues/concerns as they've come up.\n   44  \n   45: * An [issue with passwords][jtr] was found with a version of the Blowfish algorithm developed for John the Ripper. This is not present in the OpenBSD version and is thus not a problem for this module. HT [zooko][zooko].\n   46  \n   47: ## Dependencies\n   48  \n   49: * NodeJS\n   50  * `node-gyp`\n   51:  * Please check the dependencies for this tool at: https://github.com/nodejs/node-gyp\n   52:   * Windows users will need the options for c# and c++ installed with their visual studio instance.\n   53    * Python 2.x\n   54: * `OpenSSL` - This is only required to build the `bcrypt` project if you are using versions <= 0.7.7. Otherwise, we're using the builtin node crypto bindings for seed data (which use the same OpenSSL code paths we were, but don't have the external dependency).\n   55  \n   56: ## Install via NPM\n   57  ```\n   58: npm install bcrypt\n   59  ```\n   60  \n   61: ***Note:*** OS X users using Xcode 4.3.1 or above may need to run the following command in their terminal prior to installing if errors occur regarding xcodebuild: ```sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer```\n   62  \n   63: ## Usage\n   64  \n   65: ### async (recommended)\n   66  \n   67: ```javascript\n   68  var bcrypt = require('bcrypt');\n   69: const saltRounds = 10;\n   70: const myPlaintextPassword = 's0/\\/\\P4$$w0rD';\n   71: const someOtherPlaintextPassword = 'not_bacon';\n   72  ```\n   73  \n   74: #### To hash a password:\n   75  \n   76: Technique 1 (generate a salt and hash on separate function calls):\n   77  \n   78: ```javascript\n   79: bcrypt.genSalt(saltRounds, function(err, salt) {\n   80:     bcrypt.hash(myPlaintextPassword, salt, function(err, hash) {\n   81:         // Store hash in your password DB.\n   82      });\n   83  });\n   84  ```\n   85  \n   86: Technique 2 (auto-gen a salt and hash):\n   87  \n   88: ```javascript\n   89: bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {\n   90:   // Store hash in your password DB.\n   91  });\n   92  ```\n   93  \n   94: Note that both techniques achieve the same end-result.\n   95  \n   96: #### To check a password:\n   97  \n   98: ```javascript\n   99: // Load hash from your password DB.\n  100: bcrypt.compare(myPlaintextPassword, hash, function(err, res) {\n  101:     // res == true\n  102  });\n  103: bcrypt.compare(someOtherPlaintextPassword, hash, function(err, res) {\n  104:     // res == false\n  105  });\n  106  ```\n  107  \n  108  \n  109: ### sync\n  110  \n  111: ```javascript\n  112  var bcrypt = require('bcrypt');\n  113: const saltRounds = 10;\n  114: const myPlaintextPassword = 's0/\\/\\P4$$w0rD';\n  115: const someOtherPlaintextPassword = 'not_bacon';\n  116  ```\n  117  \n  118: #### To hash a password:\n  119  \n  120: Technique 1 (generate a salt and hash on separate function calls):\n  121  \n  122: ```javascript\n  123: var salt = bcrypt.genSaltSync(saltRounds);\n  124: var hash = bcrypt.hashSync(myPlaintextPassword, salt);\n  125: // Store hash in your password DB.\n  126  ```\n  127  \n  128: Technique 2 (auto-gen a salt and hash):\n  129  \n  130: ```javascript\n  131: var hash = bcrypt.hashSync(myPlaintextPassword, saltRounds);\n  132: // Store hash in your password DB.\n  133  ```\n  134  \n  135: As with async, both techniques achieve the same end-result.\n  136  \n  137: #### To check a password:\n  138  \n  139: ```javascript\n  140: // Load hash from your password DB.\n  141: bcrypt.compareSync(myPlaintextPassword, hash); // true\n  142: bcrypt.compareSync(someOtherPlaintextPassword, hash); // false\n  143  ```\n  144  \n  ...\n  147  `BCrypt.`\n  148  \n  149:   * `genSaltSync(rounds)`\n  150:     * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n  151:   * `genSalt(rounds, cb)`\n  152:     * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n  153:     * `cb` - [REQUIRED] - a callback to be fired once the salt has been generated. uses eio making it asynchronous.\n  154:       * `err` - First parameter to the callback detailing any errors.\n  155:       * `salt` - Second parameter to the callback providing the generated salt.\n  156:   * `hashSync(data, salt)`\n  157      * `data` - [REQUIRED] - the data to be encrypted.\n  158:     * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated with the specified number of rounds and used (see example under **Usage**).\n  159:   * `hash(data, salt, cb)`\n  160      * `data` - [REQUIRED] - the data to be encrypted.\n  161:     * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated with the specified number of rounds and used (see example under **Usage**).\n  162:     * `cb` - [REQUIRED] - a callback to be fired once the data has been encrypted. uses eio making it asynchronous.\n  163:       * `err` - First parameter to the callback detailing any errors.\n  164:       * `encrypted` - Second parameter to the callback providing the encrypted form.\n  165:   * `compareSync(data, encrypted)`\n  166      * `data` - [REQUIRED] - data to compare.\n  167      * `encrypted` - [REQUIRED] - data to be compared to.\n  ...\n  169      * `data` - [REQUIRED] - data to compare.\n  170      * `encrypted` - [REQUIRED] - data to be compared to.\n  171:     * `cb` - [REQUIRED] - a callback to be fired once the data has been compared. uses eio making it asynchronous.\n  172:       * `err` - First parameter to the callback detailing any errors.\n  173:       * `same` - Second parameter to the callback providing whether the data and encrypted forms match [true | false].\n  174:   * `getRounds(encrypted)` - return the number of rounds used to encrypt a given hash\n  175:     * `encrypted` - [REQUIRED] - hash from which the number of rounds used should be extracted.\n  176  \n  177: ## A Note on Rounds\n  178  \n  179: A note about the cost. When you are hashing your data the module will go through a series of rounds to give you a secure hash. The value you submit there is not just the number of rounds that the module will go through to hash your data. The module will use the value you enter and go through `2^rounds` iterations of processing.\n  180  \n  181  From @garthk, on a 2GHz core you can roughly expect:\n  182  \n  183:     rounds=8 : ~40 hashes/sec\n  184:     rounds=9 : ~20 hashes/sec\n  185:     rounds=10: ~10 hashes/sec\n  186:     rounds=11: ~5  hashes/sec\n  187:     rounds=12: 2-3 hashes/sec\n  188:     rounds=13: ~1 sec/hash\n  189:     rounds=14: ~1.5 sec/hash\n  190:     rounds=15: ~3 sec/hash\n  191:     rounds=25: ~1 hour/hash\n  192:     rounds=31: 2-3 days/hash\n  193  \n  194  \n  195: ## Hash Info\n  196  \n  197: The characters that comprise the resultant hash are `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$`.\n  198  \n  199: Resultant hashes will be 60 characters long.\n  200  \n  201: ## Testing\n  202  \n  203: If you create a pull request, tests better pass :)\n  204  \n  205  ```\n  206: npm install\n  207: npm test\n  208  ```\n  209  \n  210: ## Credits\n  211  \n  212: The code for this comes from a few sources:\n  213  \n  214: * blowfish.cc - OpenBSD\n  215: * bcrypt.cc - OpenBSD\n  216: * bcrypt::gen_salt - [gen_salt inclusion to bcrypt][bcryptgs]\n  217  * bcrypt_node.cc - me\n  218  \n  219: ## Contributors\n  220  \n  221: * [Antonio Salazar Cardozo][shadowfiend] - Early MacOS X support (when we used libbsd)\n  222: * [Ben Glow][pixelglow] - Fixes for thread safety with async calls\n  223  * [Van Nguyen][thegoleffect] - Found a timing attack in the comparator\n  224: * [NewITFarmer][newitfarmer] - Initial Cygwin support\n  225: * [David Trejo][dtrejo] - packaging fixes\n  226: * [Alfred Westerveld][alfredwesterveld] - packaging fixes\n  227: * [Vincent Côté-Roy][vincentr] - Testing around concurrency issues\n  228: * [Lloyd Hilaiel][lloyd] - Documentation fixes\n  229: * [Roman Shtylman][shtylman] - Code refactoring, general rot reduction, compile options, better memory management with delete and new, and an upgrade to libuv over eio/ev.\n  230: * [Vadim Graboys][vadimg] - Code changes to support 0.5.5+\n  231: * [Ben Noordhuis][bnoordhuis] - Fixed a thread safety issue in nodejs that was perfectly mappable to this module.\n  232: * [Nate Rajlich][tootallnate] - Bindings and build process.\n  233: * [Sean McArthur][seanmonstar] - Windows Support\n  234: * [Fanie Oosthuysen][weareu] - Windows Support\n  235  \n  236: ## License\n  237: Unless stated elsewhere, file headers or otherwise, the license as stated in the LICENSE file.\n  238  \n  239: [bcryptwiki]: https://en.wikipedia.org/wiki/Bcrypt\n  240: [bcryptgs]: http://mail-index.netbsd.org/tech-crypto/2002/05/24/msg000204.html\n  241: [codahale]: http://codahale.com/how-to-safely-store-a-password/\n  242: [gh13]: https://github.com/ncb000gt/node.bcrypt.js/issues/13\n  243: [jtr]: http://www.openwall.com/lists/oss-security/2011/06/20/2\n  244  \n  245: [shadowfiend]:https://github.com/Shadowfiend\n  246: [thegoleffect]:https://github.com/thegoleffect\n  247: [pixelglow]:https://github.com/pixelglow\n  248: [dtrejo]:https://github.com/dtrejo\n  249: [alfredwesterveld]:https://github.com/alfredwesterveld\n  250: [newitfarmer]:https://github.com/newitfarmer\n  251: [zooko]:https://twitter.com/zooko\n  252: [vincentr]:https://twitter.com/vincentcr\n  253: [lloyd]:https://github.com/lloyd\n  254: [shtylman]:https://github.com/shtylman\n  255: [vadimg]:https://github.com/vadimg\n  256: [bnoordhuis]:https://github.com/bnoordhuis\n  257: [tootallnate]:https://github.com/tootallnate\n  258: [seanmonstar]:https://github.com/seanmonstar\n  259: [weareu]:https://github.com/weareu\n  260  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/bcrypt.js:\n    1: 'use strict';\n    2  \n    3: var bindings = require('bindings')('bcrypt_lib');\n    4  var crypto = require('crypto');\n    5  \n    6: /// generate a salt (sync)\n    7: /// @param {Number} [rounds] number of rounds (default 10)\n    8: /// @return {String} salt\n    9: module.exports.genSaltSync = function(rounds) {\n   10:     // default 10 rounds\n   11:     if (!rounds) {\n   12:         rounds = 10;\n   13:     } else if (typeof rounds !== 'number') {\n   14:         throw new Error('rounds must be a number');\n   15      }\n   16  \n   17:     return bindings.gen_salt_sync(rounds, crypto.randomBytes(16));\n   18  };\n   19  \n   20: /// generate a salt\n   21: /// @param {Number} [rounds] number of rounds (default 10)\n   22: /// @param {Function} cb callback(err, salt)\n   23: module.exports.genSalt = function(rounds, ignore, cb) {\n   24:     // if callback is first argument, then use defaults for others\n   25:     if (typeof arguments[0] === 'function') {\n   26:         // have to set callback first otherwise arguments are overriden\n   27:         cb = arguments[0];\n   28:         rounds = 10;\n   29:     // callback is second argument\n   30:     } else if (typeof arguments[1] === 'function') {\n   31:         // have to set callback first otherwise arguments are overriden\n   32:         cb = arguments[1];\n   33      }\n   34  \n   35:     // default 10 rounds\n   36:     if (!rounds) {\n   37:         rounds = 10;\n   38:     } else if (typeof rounds !== 'number') {\n   39:         // callback error asynchronously\n   40:         return process.nextTick(function() {\n   41:             cb(new Error('rounds must be a number'));\n   42          });\n   43      }\n   ..\n   47      }\n   48  \n   49:     crypto.randomBytes(16, function(error, randomBytes) {\n   50          if (error) {\n   51              cb(error);\n   ..\n   53          }\n   54  \n   55:         bindings.gen_salt(rounds, randomBytes, cb);\n   56      });\n   57  };\n   58  \n   59: /// hash data using a salt\n   60: /// @param {String} data the data to encrypt\n   61: /// @param {String} salt the salt to use when hashing\n   62: /// @return {String} hash\n   63: module.exports.hashSync = function(data, salt) {\n   64:     if (data == null || salt == null) {\n   65:         throw new Error('data and salt arguments required');\n   66      }\n   67  \n   68:     if (typeof data !== 'string' || (typeof salt !== 'string' && typeof salt !== 'number')) {\n   69:         throw new Error('data must be a string and salt must either be a salt string or a number of rounds');\n   70      }\n   71  \n   72:     if (typeof salt === 'number') {\n   73:         salt = module.exports.genSaltSync(salt);\n   74      }\n   75  \n   76:     return bindings.encrypt_sync(data, salt);\n   77  };\n   78  \n   79: /// hash data using a salt\n   80: /// @param {String} data the data to encrypt\n   81: /// @param {String} salt the salt to use when hashing\n   82: /// @param {Function} cb callback(err, hash)\n   83: module.exports.hash = function(data, salt, cb) {\n   84      if (typeof data === 'function') {\n   85:         return process.nextTick(function() {\n   86:             data(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n   87          });\n   88      }\n   89  \n   90:     if (typeof salt === 'function') {\n   91:         return process.nextTick(function() {\n   92:             salt(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n   93          });\n   94      }\n   95  \n   96:     if (data == null || salt == null) {\n   97:         return process.nextTick(function() {\n   98:             cb(new Error('data and salt arguments required'));\n   99          });\n  100      }\n  101  \n  102:     if (typeof data !== 'string' || (typeof salt !== 'string' && typeof salt !== 'number')) {\n  103:         return process.nextTick(function() {\n  104:             cb(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n  105          });\n  106      }\n  ...\n  110      }\n  111  \n  112:     if (typeof salt === 'number') {\n  113:         return module.exports.genSalt(salt, function(err, salt) {\n  114:             return bindings.encrypt(data, salt, cb);\n  115          });\n  116      }\n  117  \n  118:     return bindings.encrypt(data, salt, cb);\n  119  };\n  120  \n  121: /// compare raw data to hash\n  122: /// @param {String} data the data to hash and compare\n  123: /// @param {String} hash expected hash\n  124: /// @return {bool} true if hashed data matches hash\n  125: module.exports.compareSync = function(data, hash) {\n  126:     if (data == null || hash == null) {\n  127:         throw new Error('data and hash arguments required');\n  128      }\n  129  \n  130:     if (typeof data !== 'string' || typeof hash !== 'string') {\n  131:         throw new Error('data and hash must be strings');\n  132      }\n  133  \n  134:     return bindings.compare_sync(data, hash);\n  135  };\n  136  \n  137: /// compare raw data to hash\n  138: /// @param {String} data the data to hash and compare\n  139: /// @param {String} hash expected hash\n  140: /// @param {Function} cb callback(err, matched) - matched is true if hashed data matches hash\n  141: module.exports.compare = function(data, hash, cb) {\n  142:     if (data == null || hash == null) {\n  143:         return process.nextTick(function() {\n  144:             cb(new Error('data and hash arguments required'));\n  145          });\n  146      }\n  147  \n  148:     if (typeof data !== 'string' || typeof hash !== 'string') {\n  149:         return process.nextTick(function() {\n  150:             cb(new Error('data and hash must be strings'));\n  151          });\n  152      }\n  ...\n  156      }\n  157  \n  158:     return bindings.compare(data, hash, cb);\n  159  };\n  160  \n  161: /// @param {String} hash extract rounds from this hash\n  162: /// @return {Number} the number of rounds used to encrypt a given hash\n  163: module.exports.getRounds = function(hash) {\n  164:     if (hash == null) {\n  165:         throw new Error('hash argument required');\n  166      }\n  167  \n  168:     if (typeof hash !== 'string') {\n  169:         throw new Error('hash must be a string');\n  170      }\n  171  \n  172:     return bindings.get_rounds(hash);\n  173  };\n  174  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/binding.gyp:\n    1  {\n    2:   'targets': [\n    3      {\n    4        'target_name': 'bcrypt_lib',\n    5:       'sources': [\n    6:         'src/blowfish.cc',\n    7:         'src/bcrypt.cc',\n    8:         'src/bcrypt_node.cc'\n    9        ],\n   10:       'include_dirs' : [\n   11            \"<!(node -e \\\"require('nan')\\\")\"\n   12        ],\n   13:       'conditions': [\n   14:         [ 'OS==\"win\"', {\n   15:           'defines': [\n   16:             'uint=unsigned int',\n   17            ],\n   18          }],\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/package.json:\n    1  {\n    2:   \"_args\": [\n    3      [\n    4        {\n    5          \"raw\": \"bcrypt\",\n    6:         \"scope\": null,\n    7:         \"escapedName\": \"bcrypt\",\n    8          \"name\": \"bcrypt\",\n    9:         \"rawSpec\": \"\",\n   10:         \"spec\": \"latest\",\n   11          \"type\": \"tag\"\n   12        },\n   13:       \"/run/media/ted/DATA/WEB/ths_signup\"\n   14      ]\n   15    ],\n   16:   \"_from\": \"bcrypt@latest\",\n   17    \"_id\": \"bcrypt@0.8.7\",\n   18    \"_inCache\": true,\n   19    \"_location\": \"/bcrypt\",\n   20:   \"_nodeVersion\": \"6.2.0\",\n   21    \"_npmOperationalInternal\": {\n   22:     \"host\": \"packages-12-west.internal.npmjs.com\",\n   23      \"tmp\": \"tmp/bcrypt-0.8.7.tgz_1465526713712_0.05265477881766856\"\n   24    },\n   25:   \"_npmUser\": {\n   26      \"name\": \"defunctzombie\",\n   27:     \"email\": \"shtylman@gmail.com\"\n   28    },\n   29:   \"_npmVersion\": \"3.8.9\",\n   30    \"_phantomChildren\": {},\n   31:   \"_requested\": {\n   32      \"raw\": \"bcrypt\",\n   33:     \"scope\": null,\n   34:     \"escapedName\": \"bcrypt\",\n   35      \"name\": \"bcrypt\",\n   36:     \"rawSpec\": \"\",\n   37:     \"spec\": \"latest\",\n   38      \"type\": \"tag\"\n   39    },\n   40    \"_requiredBy\": [\n   41:     \"#USER\",\n   42      \"/\"\n   43    ],\n   44:   \"_resolved\": \"https://registry.npmjs.org/bcrypt/-/bcrypt-0.8.7.tgz\",\n   45:   \"_shasum\": \"bc3875a9afd0a7b2cd231a6a7f218a5ce156b093\",\n   46:   \"_shrinkwrap\": null,\n   47:   \"_spec\": \"bcrypt\",\n   48:   \"_where\": \"/run/media/ted/DATA/WEB/ths_signup\",\n   49    \"author\": {\n   50      \"name\": \"Nick Campbell\",\n   51:     \"url\": \"https://github.com/ncb000gt\"\n   52    },\n   53:   \"bugs\": {\n   54:     \"url\": \"https://github.com/ncb000gt/node.bcrypt.js/issues\"\n   55    },\n   56:   \"contributors\": [\n   57      {\n   58:       \"name\": \"Antonio Salazar Cardozo\",\n   59:       \"email\": \"savedfastcool@gmail.com\",\n   60:       \"url\": \"https://github.com/Shadowfiend\"\n   61      },\n   62      {\n   63        \"name\": \"Van Nguyen\",\n   64        \"email\": \"the.gol.effect@gmail.com\",\n   65:       \"url\": \"https://github.com/thegoleffect\"\n   66      },\n   67      {\n   68        \"name\": \"David Trejo\",\n   69        \"email\": \"david@dtrejo.com\",\n   70:       \"url\": \"https://github.com/dtrejo\"\n   71      },\n   72      {\n   73        \"name\": \"Ben Glow\",\n   74        \"email\": \"glen.low@pixelglow.com\",\n   75:       \"url\": \"https://github.com/pixelglow\"\n   76      },\n   77      {\n   78        \"name\": \"NewITFarmer.com\",\n   79:       \"url\": \"https://github.com/newitfarmer\"\n   80      },\n   81      {\n   82:       \"name\": \"Alfred Westerveld\",\n   83:       \"email\": \"alfredwesterveld@gmail.com\",\n   84:       \"url\": \"https://github.com/alfredwesterveld\"\n   85      },\n   86      {\n   87        \"name\": \"Vincent Côté-Roy\",\n   88        \"email\": \"vincentcr@gmail.com\",\n   89:       \"url\": \"https://github.com/vincentcr\"\n   90      },\n   91      {\n   92        \"name\": \"Lloyd Hilaiel\",\n   93        \"email\": \"lloyd@hilaiel.com\",\n   94:       \"url\": \"https://github.com/lloyd\"\n   95      },\n   96      {\n   97:       \"name\": \"Roman Shtylman\",\n   98:       \"email\": \"shtylman@gmail.com\",\n   99:       \"url\": \"https://github.com/shtylman\"\n  100      },\n  101      {\n  102:       \"name\": \"Vadim Graboys\",\n  103        \"email\": \"dimva13@gmail.com\",\n  104:       \"url\": \"https://github.com/vadimg\"\n  105      },\n  106      {\n  107:       \"name\": \"Ben Noorduis\",\n  108:       \"url\": \"https://github.com/bnoordhuis\"\n  109      },\n  110      {\n  111        \"name\": \"Nate Rajlich\",\n  112        \"email\": \"nathan@tootallnate.net\",\n  113:       \"url\": \"https://github.com/tootallnate\"\n  114      },\n  115      {\n  116:       \"name\": \"Sean McArthur\",\n  117:       \"email\": \"sean.monstar@gmail.com\",\n  118:       \"url\": \"https://github.com/seanmonstar\"\n  119      },\n  120      {\n  121:       \"name\": \"Fanie Oosthuysen\",\n  122:       \"email\": \"fanie.oosthuysen@gmail.com\",\n  123:       \"url\": \"https://github.com/weareu\"\n  124      }\n  125    ],\n  126:   \"dependencies\": {\n  127:     \"bindings\": \"1.2.1\",\n  128      \"nan\": \"2.3.5\"\n  129    },\n  130:   \"description\": \"A bcrypt library for NodeJS.\",\n  131:   \"devDependencies\": {\n  132      \"nodeunit\": \"~0.9.1\"\n  133    },\n  134:   \"directories\": {},\n  135:   \"dist\": {\n  136:     \"shasum\": \"bc3875a9afd0a7b2cd231a6a7f218a5ce156b093\",\n  137:     \"tarball\": \"https://registry.npmjs.org/bcrypt/-/bcrypt-0.8.7.tgz\"\n  138    },\n  139:   \"engines\": {\n  140      \"node\": \">= 0.6.0\"\n  141    },\n  142    \"gitHead\": \"0dc9b78dab6980d129b77d1df723aa44daa7deb4\",\n  143    \"gypfile\": true,\n  144:   \"homepage\": \"https://github.com/ncb000gt/node.bcrypt.js#readme\",\n  145:   \"keywords\": [\n  146      \"bcrypt\",\n  147:     \"password\",\n  148      \"auth\",\n  149      \"authentication\",\n  ...\n  152      \"crypto\"\n  153    ],\n  154:   \"license\": \"MIT\",\n  155    \"main\": \"./bcrypt\",\n  156:   \"maintainers\": [\n  157      {\n  158        \"name\": \"ncb000gt\",\n  159:       \"email\": \"nicholas.j.campbell@gmail.com\"\n  160      },\n  161      {\n  ...\n  169      {\n  170        \"name\": \"defunctzombie\",\n  171:       \"email\": \"shtylman@gmail.com\"\n  172      }\n  173    ],\n  174    \"name\": \"bcrypt\",\n  175:   \"optionalDependencies\": {},\n  176    \"readme\": \"ERROR: No README data found!\",\n  177:   \"repository\": {\n  178      \"type\": \"git\",\n  179:     \"url\": \"git+https://github.com/ncb000gt/node.bcrypt.js.git\"\n  180    },\n  181:   \"scripts\": {\n  182:     \"install\": \"node-gyp rebuild\",\n  183:     \"test\": \"node-gyp configure build && nodeunit test\"\n  184    },\n  185:   \"version\": \"0.8.7\"\n  186  }\n  187  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/werker.yml:\n    1: box: werker/nodejs\n    2  build:\n    3:   steps:\n    4:     - npm-install\n    5:     - npm-test\n    6:     - script:\n    7:         name: echo nodejs information\n    8          code: |\n    9:           echo \"node version $(node -v) running\"\n   10:           echo \"npm version $(npm -v) running\"\n   11  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Makefile:\n    1: # We borrow heavily from the kernel build setup, though we are simpler since\n    2: # we don't have Kconfig tweaking settings on us.\n    3  \n    4: # The implicit make rules have it looking for RCS files, among other things.\n    5: # We instead explicitly write all the rules we care about.\n    6: # It's even quicker (saves ~200ms) to pass -r on the command line.\n    7: MAKEFLAGS=-r\n    8  \n    9: # The source directory tree.\n   10: srcdir := ..\n   11: abs_srcdir := $(abspath $(srcdir))\n   12  \n   13  # The name of the builddir.\n   14  builddir_name ?= .\n   15  \n   16: # The V=1 flag on command line makes us verbosely print command lines.\n   17  ifdef V\n   18    quiet=\n   19: else\n   20    quiet=quiet_\n   21  endif\n   22  \n   23: # Specify BUILDTYPE=Release on the command line for a release build.\n   24: BUILDTYPE ?= Release\n   25  \n   26: # Directory all our build output goes into.\n   27: # Note that this must be two directories beneath src/ for unit tests to pass,\n   28: # as they reach into the src/ directory for data with relative paths.\n   29  builddir ?= $(builddir_name)/$(BUILDTYPE)\n   30: abs_builddir := $(abspath $(builddir))\n   31: depsdir := $(builddir)/.deps\n   32  \n   33  # Object output directory.\n   34  obj := $(builddir)/obj\n   35: abs_obj := $(abspath $(obj))\n   36  \n   37: # We build up a list of every single one of the targets so we can slurp in the\n   38: # generated dependency rule Makefiles in one pass.\n   39: all_deps :=\n   40  \n   41  \n   42  \n   43  CC.target ?= $(CC)\n   44: CFLAGS.target ?= $(CPPFLAGS) $(CFLAGS)\n   45  CXX.target ?= $(CXX)\n   46: CXXFLAGS.target ?= $(CPPFLAGS) $(CXXFLAGS)\n   47  LINK.target ?= $(LINK)\n   48: LDFLAGS.target ?= $(LDFLAGS)\n   49  AR.target ?= $(AR)\n   50  \n   51: # C++ apps need to be linked with g++.\n   52  LINK ?= $(CXX.target)\n   53  \n   54: # TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n   55: # to replicate this environment fallback in make as well.\n   56: CC.host ?= gcc\n   57: CFLAGS.host ?= $(CPPFLAGS_host) $(CFLAGS_host)\n   58: CXX.host ?= g++\n   59: CXXFLAGS.host ?= $(CPPFLAGS_host) $(CXXFLAGS_host)\n   60: LINK.host ?= $(CXX.host)\n   61: LDFLAGS.host ?=\n   62: AR.host ?= ar\n   63  \n   64: # Define a dir function that can handle spaces.\n   65: # http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n   66: # \"leading spaces cannot appear in the text of the first argument as written.\n   67: # These characters can be put into the argument value by variable substitution.\"\n   68  empty :=\n   69: space := $(empty) $(empty)\n   70  \n   71: # http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n   72: replace_spaces = $(subst $(space),?,$1)\n   73: unreplace_spaces = $(subst ?,$(space),$1)\n   74: dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n   75  \n   76: # Flags to make gcc output dependency info.  Note that you need to be\n   77: # careful here to use the flags that ccache and distcc can understand.\n   78: # We write to a dep file on the side first and then rename at the end\n   79: # so we can't end up with a broken dep file.\n   80: depfile = $(depsdir)/$(call replace_spaces,$@).d\n   81: DEPFLAGS = -MMD -MF $(depfile).raw\n   82  \n   83: # We have to fixup the deps output in a few ways.\n   84: # (1) the file output should mention the proper .o file.\n   85: # ccache or distcc lose the path to the target, so we convert a rule of\n   86  # the form:\n   87  #   foobar.o: DEP1 DEP2\n   88  # into\n   89  #   path/to/foobar.o: DEP1 DEP2\n   90: # (2) we want missing files not to cause us to fail to build.\n   91  # We want to rewrite\n   92  #   foobar.o: DEP1 DEP2 \\\n   ..\n   96  #   DEP2:\n   97  #   DEP3:\n   98: # so if the files are missing, they're just considered phony rules.\n   99: # We have to do some pretty insane escaping to get those backslashes\n  100: # and dollar signs past make, the shell, and sed at the same time.\n  101: # Doesn't work with spaces, but that's fine: .d files have spaces in\n  102: # their names replaced with other characters.\n  103  define fixup_dep\n  104: # The depfile may not exist if the input file didn't have any #includes.\n  105  touch $(depfile).raw\n  106: # Fixup path as in (1).\n  107: sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n  108: # Add extra rules as in (2).\n  109: # We remove slashes and replace spaces with new lines;\n  110: # remove blank lines;\n  111: # delete the first line and append a colon to the remaining lines.\n  112: sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n  113    grep -v '^$$'                             |\\\n  114:   sed -e 1d -e 's|$$|:|'                     \\\n  115      >> $(depfile)\n  116  rm $(depfile).raw\n  117  endef\n  118  \n  119: # Command definitions:\n  120: # - cmd_foo is the actual command to run;\n  121: # - quiet_cmd_foo is the brief-output summary of the command.\n  122  \n  123: quiet_cmd_cc = CC($(TOOLSET)) $@\n  124: cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n  125  \n  126: quiet_cmd_cxx = CXX($(TOOLSET)) $@\n  127: cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n  128  \n  129  quiet_cmd_touch = TOUCH $@\n  ...\n  131  \n  132  quiet_cmd_copy = COPY $@\n  133: # send stderr to /dev/null to ignore messages when linking directories.\n  134  cmd_copy = rm -rf \"$@\" && cp -af \"$<\" \"$@\"\n  135  \n  136: quiet_cmd_alink = AR($(TOOLSET)) $@\n  137: cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n  138  \n  139: quiet_cmd_alink_thin = AR($(TOOLSET)) $@\n  140: cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n  141  \n  142: # Due to circular dependencies between libraries :(, we wrap the\n  143: # special \"figure out circular dependencies\" flags around the entire\n  144: # input list during linking.\n  145: quiet_cmd_link = LINK($(TOOLSET)) $@\n  146: cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n  147  \n  148: # We support two kinds of shared objects (.so):\n  149: # 1) shared_library, which is just bundling together many dependent libraries\n  150  # into a link line.\n  151: # 2) loadable_module, which is generating a module intended for dlopen().\n  152  #\n  153: # They differ only slightly:\n  154: # In the former case, we want to package all dependent code into the .so.\n  155: # In the latter case, we want to package just the API exposed by the\n  156: # outermost module.\n  157: # This means shared_library uses --whole-archive, while loadable_module doesn't.\n  158: # (Note that --whole-archive is incompatible with the --start-group used in\n  159  # normal linking.)\n  160  \n  161: # Other shared-object link notes:\n  162: # - Set SONAME to the library filename so our binaries don't reference\n  163: # the local, absolute paths used on the link command-line.\n  164: quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n  165: cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n  166  \n  167: quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n  168: cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n  169  \n  170  \n  171: # Define an escape_quotes function to escape single quotes.\n  172: # This allows us to handle quotes properly as long as we always use\n  173: # use single quotes and escape_quotes.\n  174: escape_quotes = $(subst ','\\'',$(1))\n  175: # This comment is here just to include a ' to unconfuse syntax highlighting.\n  176: # Define an escape_vars function to escape '$' variable syntax.\n  177: # This allows us to read/write command lines with shell variables (e.g.\n  178: # $LD_LIBRARY_PATH), without triggering make substitution.\n  179: escape_vars = $(subst $$,$$$$,$(1))\n  180: # Helper that expands to a shell command to echo a string exactly as it is in\n  181: # make. This uses printf instead of echo because printf's behaviour with respect\n  182: # to escape sequences is more portable than echo's across different shells\n  183: # (e.g., dash, bash).\n  184: exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n  185  \n  186: # Helper to compare the command we're about to run against the command\n  187: # we logged the last time we ran the command.  Produces an empty\n  188: # string (false) when the commands match.\n  189: # Tricky point: Make has no string-equality test function.\n  190: # The kernel uses the following, but it seems like it would have false\n  191: # positives, where one string reordered its arguments.\n  192: #   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n  193  #                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n  194: # We instead substitute each for the empty string into the other, and\n  195: # say they're equal if both substitutions produce the empty string.\n  196: # .d files contain ? instead of spaces, take that into account.\n  197: command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n  198:                        $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n  199  \n  200: # Helper that is non-empty when a prerequisite changes.\n  201: # Normally make does this implicitly, but we force rules to always run\n  202: # so we can check their command lines.\n  203: #   $? -- new prerequisites\n  204: #   $| -- order-only dependencies\n  205  prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n  206  \n  207: # Helper that executes all postbuilds until one fails.\n  208: define do_postbuilds\n  209    @E=0;\\\n  210:   for p in $(POSTBUILDS); do\\\n  211      eval $$p;\\\n  212      E=$$?;\\\n  ...\n  221  endef\n  222  \n  223: # do_cmd: run a command via the above cmd_foo names, if necessary.\n  224: # Should always run for a given target to handle command-line changes.\n  225: # Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n  226: # Third argument, if non-zero, makes it do POSTBUILDS processing.\n  227: # Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n  228: # spaces already and dirx strips the ? characters.\n  229  define do_cmd\n  230  $(if $(or $(command_changed),$(prereq_changed)),\n  231    @$(call exact_echo,  $($(quiet)cmd_$(1)))\n  232    @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n  233:   $(if $(findstring flock,$(word 1,$(cmd_$1))),\n  234      @$(cmd_$(1))\n  235:     @echo \"  $(quiet_cmd_$(1)): Finished\",\n  236      @$(cmd_$(1))\n  237    )\n  238:   @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n  239    @$(if $(2),$(fixup_dep))\n  240:   $(if $(and $(3), $(POSTBUILDS)),\n  241:     $(call do_postbuilds)\n  242    )\n  243  )\n  244  endef\n  245  \n  246: # Declare the \"all\" target first so it is the default,\n  247: # even though we don't have the deps yet.\n  248  .PHONY: all\n  249  all:\n  250  \n  251: # make looks for ways to re-generate included makefiles, but in our case, we\n  252: # don't have a direct way. Explicitly telling make that it has nothing to do\n  253: # for them makes it go faster.\n  254  %.d: ;\n  255  \n  256: # Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n  257  # do_cmd.\n  258  .PHONY: FORCE_DO_CMD\n  259  FORCE_DO_CMD:\n  260  \n  261: TOOLSET := target\n  262: # Suffix rules, putting all outputs into $(obj).\n  263: $(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n  264  \t@$(call do_cmd,cc,1)\n  265: $(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n  266  \t@$(call do_cmd,cxx,1)\n  267: $(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n  268  \t@$(call do_cmd,cxx,1)\n  269: $(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n  270  \t@$(call do_cmd,cxx,1)\n  271: $(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n  272  \t@$(call do_cmd,cc,1)\n  273: $(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n  274  \t@$(call do_cmd,cc,1)\n  275  \n  276: # Try building from generated source, too.\n  277: $(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n  278  \t@$(call do_cmd,cc,1)\n  279: $(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n  280  \t@$(call do_cmd,cxx,1)\n  281: $(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n  282  \t@$(call do_cmd,cxx,1)\n  283: $(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n  284  \t@$(call do_cmd,cxx,1)\n  285: $(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n  286  \t@$(call do_cmd,cc,1)\n  287: $(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n  288  \t@$(call do_cmd,cc,1)\n  289  \n  290: $(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n  291  \t@$(call do_cmd,cc,1)\n  292: $(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n  293  \t@$(call do_cmd,cxx,1)\n  294: $(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n  295  \t@$(call do_cmd,cxx,1)\n  296: $(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n  297  \t@$(call do_cmd,cxx,1)\n  298: $(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n  299  \t@$(call do_cmd,cc,1)\n  300: $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n  301  \t@$(call do_cmd,cc,1)\n  302  \n  303  \n  304: ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n  305:     $(findstring $(join ^,$(prefix)),\\\n  306                   $(join ^,bcrypt_lib.target.mk)))),)\n  307    include bcrypt_lib.target.mk\n  ...\n  309  \n  310  quiet_cmd_regen_makefile = ACTION Regenerating $@\n  311: cmd_regen_makefile = cd $(srcdir); /home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/lib/node_modules/node-gyp/gyp/gyp_main.py -fmake --ignore-environment \"--toplevel-dir=.\" -I/run/media/ted/DATA/WEB/ths_signup/node_modules/bcrypt/build/config.gypi -I/home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/lib/node_modules/node-gyp/addon.gypi -I/home/ted/.node-gyp/4.6.1/include/node/common.gypi \"--depth=.\" \"-Goutput_dir=.\" \"--generator-output=build\" \"-Dlibrary=shared_library\" \"-Dvisibility=default\" \"-Dnode_root_dir=/home/ted/.node-gyp/4.6.1\" \"-Dnode_gyp_dir=/home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/lib/node_modules/node-gyp\" \"-Dnode_lib_file=node.lib\" \"-Dmodule_root_dir=/run/media/ted/DATA/WEB/ths_signup/node_modules/bcrypt\" binding.gyp\n  312: Makefile: $(srcdir)/../../../../../../../../home/ted/.node-gyp/4.6.1/include/node/common.gypi $(srcdir)/../../../../../../../../home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/lib/node_modules/node-gyp/addon.gypi $(srcdir)/build/config.gypi $(srcdir)/binding.gyp\n  313  \t$(call do_cmd,regen_makefile)\n  314  \n  315: # \"all\" is a concatenation of the \"all\" targets from all the included\n  316: # sub-makefiles. This is just here to clarify.\n  317  all:\n  318  \n  319: # Add in dependency-tracking rules.  $(all_deps) is the list of every single\n  320: # target in our tree. Only consider the ones with .d (dependency) info:\n  321: d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n  322: ifneq ($(d_files),)\n  323:   include $(d_files)\n  324  endif\n  325  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/bcrypt_lib.target.mk:\n    1: # This file is generated by gyp; do not edit.\n    2  \n    3: TOOLSET := target\n    4  TARGET := bcrypt_lib\n    5: DEFS_Debug := \\\n    6  \t'-DNODE_GYP_MODULE_NAME=bcrypt_lib' \\\n    7: \t'-DUSING_UV_SHARED=1' \\\n    8: \t'-DUSING_V8_SHARED=1' \\\n    9: \t'-DV8_DEPRECATION_WARNINGS=1' \\\n   10: \t'-D_LARGEFILE_SOURCE' \\\n   11: \t'-D_FILE_OFFSET_BITS=64' \\\n   12: \t'-DBUILDING_NODE_EXTENSION' \\\n   13  \t'-DDEBUG' \\\n   14  \t'-D_DEBUG'\n   15  \n   16: # Flags passed to all source files.\n   17: CFLAGS_Debug := \\\n   18  \t-fPIC \\\n   19  \t-pthread \\\n   20  \t-Wall \\\n   21  \t-Wextra \\\n   22: \t-Wno-unused-parameter \\\n   23  \t-m64 \\\n   24  \t-g \\\n   25  \t-O0\n   26  \n   27: # Flags passed to only C files.\n   28: CFLAGS_C_Debug :=\n   29  \n   30: # Flags passed to only C++ files.\n   31: CFLAGS_CC_Debug := \\\n   32  \t-fno-rtti \\\n   33: \t-fno-exceptions \\\n   34: \t-std=gnu++0x\n   35  \n   36: INCS_Debug := \\\n   37  \t-I/home/ted/.node-gyp/4.6.1/include/node \\\n   38: \t-I/home/ted/.node-gyp/4.6.1/src \\\n   39: \t-I/home/ted/.node-gyp/4.6.1/deps/uv/include \\\n   40: \t-I/home/ted/.node-gyp/4.6.1/deps/v8/include \\\n   41: \t-I$(srcdir)/../nan\n   42  \n   43: DEFS_Release := \\\n   44  \t'-DNODE_GYP_MODULE_NAME=bcrypt_lib' \\\n   45: \t'-DUSING_UV_SHARED=1' \\\n   46: \t'-DUSING_V8_SHARED=1' \\\n   47: \t'-DV8_DEPRECATION_WARNINGS=1' \\\n   48: \t'-D_LARGEFILE_SOURCE' \\\n   49: \t'-D_FILE_OFFSET_BITS=64' \\\n   50: \t'-DBUILDING_NODE_EXTENSION'\n   51  \n   52: # Flags passed to all source files.\n   53: CFLAGS_Release := \\\n   54  \t-fPIC \\\n   55  \t-pthread \\\n   56  \t-Wall \\\n   57  \t-Wextra \\\n   58: \t-Wno-unused-parameter \\\n   59  \t-m64 \\\n   60  \t-O3 \\\n   61: \t-ffunction-sections \\\n   62: \t-fdata-sections \\\n   63  \t-fno-omit-frame-pointer\n   64  \n   65: # Flags passed to only C files.\n   66: CFLAGS_C_Release :=\n   67  \n   68: # Flags passed to only C++ files.\n   69: CFLAGS_CC_Release := \\\n   70  \t-fno-rtti \\\n   71: \t-fno-exceptions \\\n   72: \t-std=gnu++0x\n   73  \n   74: INCS_Release := \\\n   75  \t-I/home/ted/.node-gyp/4.6.1/include/node \\\n   76: \t-I/home/ted/.node-gyp/4.6.1/src \\\n   77: \t-I/home/ted/.node-gyp/4.6.1/deps/uv/include \\\n   78: \t-I/home/ted/.node-gyp/4.6.1/deps/v8/include \\\n   79: \t-I$(srcdir)/../nan\n   80  \n   81: OBJS := \\\n   82: \t$(obj).target/$(TARGET)/src/blowfish.o \\\n   83: \t$(obj).target/$(TARGET)/src/bcrypt.o \\\n   84: \t$(obj).target/$(TARGET)/src/bcrypt_node.o\n   85  \n   86: # Add to the list of files we specially track dependencies for.\n   87: all_deps += $(OBJS)\n   88  \n   89: # CFLAGS et al overrides must be target-local.\n   90: # See \"Target-specific Variable Values\" in the GNU Make manual.\n   91: $(OBJS): TOOLSET := $(TOOLSET)\n   92: $(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n   93: $(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n   94  \n   95: # Suffix rules, putting all outputs into $(obj).\n   96  \n   97: $(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n   98  \t@$(call do_cmd,cxx,1)\n   99  \n  100: # Try building from generated source, too.\n  101  \n  102: $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n  103  \t@$(call do_cmd,cxx,1)\n  104  \n  105: $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n  106  \t@$(call do_cmd,cxx,1)\n  107  \n  108: # End of this set of suffix rules\n  109: ### Rules for final target.\n  110: LDFLAGS_Debug := \\\n  111  \t-pthread \\\n  112  \t-rdynamic \\\n  113  \t-m64\n  114  \n  115: LDFLAGS_Release := \\\n  116  \t-pthread \\\n  117  \t-rdynamic \\\n  118  \t-m64\n  119  \n  120: LIBS :=\n  121  \n  122: $(obj).target/bcrypt_lib.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n  123: $(obj).target/bcrypt_lib.node: LIBS := $(LIBS)\n  124: $(obj).target/bcrypt_lib.node: TOOLSET := $(TOOLSET)\n  125: $(obj).target/bcrypt_lib.node: $(OBJS) FORCE_DO_CMD\n  126: \t$(call do_cmd,solink_module)\n  127  \n  128: all_deps += $(obj).target/bcrypt_lib.node\n  129: # Add target alias\n  130  .PHONY: bcrypt_lib\n  131  bcrypt_lib: $(builddir)/bcrypt_lib.node\n  132  \n  133: # Copy this to the executable output path.\n  134: $(builddir)/bcrypt_lib.node: TOOLSET := $(TOOLSET)\n  135  $(builddir)/bcrypt_lib.node: $(obj).target/bcrypt_lib.node FORCE_DO_CMD\n  136  \t$(call do_cmd,copy)\n  137  \n  138: all_deps += $(builddir)/bcrypt_lib.node\n  139: # Short alias for building this executable.\n  140  .PHONY: bcrypt_lib.node\n  141  bcrypt_lib.node: $(obj).target/bcrypt_lib.node $(builddir)/bcrypt_lib.node\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/binding.Makefile:\n    1: # This file is generated by gyp; do not edit.\n    2  \n    3  export builddir_name ?= ./build/.\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/config.gypi:\n    1: # Do not edit. File was generated by node-gyp's \"configure\" step\n    2  {\n    3:   \"target_defaults\": {\n    4:     \"cflags\": [],\n    5:     \"default_configuration\": \"Release\",\n    6:     \"defines\": [],\n    7:     \"include_dirs\": [],\n    8:     \"libraries\": []\n    9    },\n   10:   \"variables\": {\n   11:     \"asan\": 0,\n   12:     \"gas_version\": \"2.23\",\n   13:     \"host_arch\": \"x64\",\n   14      \"icu_data_file\": \"icudt56l.dat\",\n   15:     \"icu_data_in\": \"../../deps/icu/source/data/in/icudt56l.dat\",\n   16:     \"icu_endianness\": \"l\",\n   17:     \"icu_gyp_path\": \"tools/icu/icu-generic.gyp\",\n   18:     \"icu_locales\": \"en,root\",\n   19:     \"icu_path\": \"./deps/icu\",\n   20:     \"icu_small\": \"true\",\n   21      \"icu_ver_major\": \"56\",\n   22      \"node_byteorder\": \"little\",\n   23:     \"node_enable_v8_vtunejit\": \"false\",\n   24:     \"node_install_npm\": \"true\",\n   25      \"node_prefix\": \"/\",\n   26:     \"node_release_urlbase\": \"https://nodejs.org/download/release/\",\n   27:     \"node_shared_http_parser\": \"false\",\n   28:     \"node_shared_libuv\": \"false\",\n   29:     \"node_shared_openssl\": \"false\",\n   30:     \"node_shared_zlib\": \"false\",\n   31      \"node_tag\": \"\",\n   32:     \"node_use_dtrace\": \"false\",\n   33:     \"node_use_etw\": \"false\",\n   34:     \"node_use_lttng\": \"false\",\n   35:     \"node_use_openssl\": \"true\",\n   36:     \"node_use_perfctr\": \"false\",\n   37:     \"openssl_fips\": \"\",\n   38:     \"openssl_no_asm\": 0,\n   39      \"target_arch\": \"x64\",\n   40:     \"uv_parent_path\": \"/deps/uv/\",\n   41:     \"uv_use_dtrace\": \"false\",\n   42      \"v8_enable_gdbjit\": 0,\n   43:     \"v8_enable_i18n_support\": 1,\n   44:     \"v8_no_strict_aliasing\": 1,\n   45      \"v8_optimized_debug\": 0,\n   46:     \"v8_random_seed\": 0,\n   47:     \"v8_use_snapshot\": \"true\",\n   48:     \"want_separate_host_toolset\": 0,\n   49      \"nodedir\": \"/home/ted/.node-gyp/4.6.1\",\n   50      \"copy_dev_lib\": \"true\",\n   51:     \"standalone_static_library\": 1,\n   52      \"dry_run\": \"\",\n   53      \"legacy_bundling\": \"\",\n   54:     \"save_dev\": \"\",\n   55:     \"browser\": \"\",\n   56      \"only\": \"\",\n   57      \"viewer\": \"man\",\n   58:     \"also\": \"\",\n   59      \"rollback\": \"true\",\n   60:     \"usage\": \"\",\n   61:     \"globalignorefile\": \"/home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/etc/npmignore\",\n   62      \"init_author_url\": \"\",\n   63:     \"maxsockets\": \"50\",\n   64:     \"shell\": \"/bin/zsh\",\n   65:     \"parseable\": \"\",\n   66:     \"shrinkwrap\": \"true\",\n   67:     \"init_license\": \"ISC\",\n   68:     \"if_present\": \"\",\n   69      \"cache_max\": \"Infinity\",\n   70      \"init_author_email\": \"\",\n   71:     \"sign_git_tag\": \"\",\n   72      \"cert\": \"\",\n   73:     \"git_tag_version\": \"true\",\n   74:     \"local_address\": \"\",\n   75      \"long\": \"\",\n   76:     \"fetch_retries\": \"2\",\n   77      \"npat\": \"\",\n   78:     \"registry\": \"https://registry.npmjs.org/\",\n   79      \"key\": \"\",\n   80:     \"message\": \"%s\",\n   81:     \"versions\": \"\",\n   82:     \"globalconfig\": \"/home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/etc/npmrc\",\n   83:     \"always_auth\": \"\",\n   84:     \"cache_lock_retries\": \"10\",\n   85:     \"global_style\": \"\",\n   86      \"heading\": \"npm\",\n   87      \"fetch_retry_mintimeout\": \"10000\",\n   88:     \"proprietary_attribs\": \"true\",\n   89:     \"access\": \"\",\n   90:     \"json\": \"\",\n   91:     \"description\": \"true\",\n   92:     \"engine_strict\": \"\",\n   93:     \"https_proxy\": \"\",\n   94:     \"init_module\": \"/home/ted/.npm-init.js\",\n   95:     \"userconfig\": \"/home/ted/.npmrc\",\n   96:     \"node_version\": \"4.6.1\",\n   97:     \"user\": \"1000\",\n   98:     \"save\": \"true\",\n   99      \"editor\": \"nano\",\n  100:     \"tag\": \"latest\",\n  101      \"global\": \"\",\n  102:     \"progress\": \"true\",\n  103      \"optional\": \"true\",\n  104:     \"bin_links\": \"true\",\n  105      \"force\": \"\",\n  106:     \"searchopts\": \"\",\n  107      \"depth\": \"Infinity\",\n  108      \"rebuild_bundle\": \"true\",\n  109:     \"searchsort\": \"name\",\n  110      \"unicode\": \"true\",\n  111      \"fetch_retry_maxtimeout\": \"60000\",\n  112      \"ca\": \"\",\n  113:     \"save_prefix\": \"^\",\n  114:     \"strict_ssl\": \"true\",\n  115:     \"tag_version_prefix\": \"v\",\n  116      \"dev\": \"\",\n  117      \"fetch_retry_factor\": \"10\",\n  118      \"group\": \"100\",\n  119:     \"save_exact\": \"\",\n  120:     \"cache_lock_stale\": \"60000\",\n  121:     \"version\": \"\",\n  122      \"cache_min\": \"10\",\n  123:     \"cache\": \"/home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle/.npm\",\n  124:     \"searchexclude\": \"\",\n  125      \"color\": \"true\",\n  126:     \"save_optional\": \"\",\n  127:     \"user_agent\": \"npm/3.10.9 node/v4.6.1 linux x64\",\n  128:     \"ignore_scripts\": \"\",\n  129      \"cache_lock_wait\": \"10000\",\n  130      \"production\": \"\",\n  131:     \"save_bundle\": \"\",\n  132:     \"init_version\": \"1.0.0\",\n  133:     \"umask\": \"0022\",\n  134      \"git\": \"git\",\n  135      \"init_author_name\": \"\",\n  136:     \"scope\": \"\",\n  137:     \"onload_script\": \"\",\n  138      \"tmp\": \"/tmp\",\n  139:     \"unsafe_perm\": \"true\",\n  140      \"link\": \"\",\n  141:     \"prefix\": \"/home/ted/.meteor/packages/meteor-tool/.1.4.2.1mkh0jf++os.linux.x86_64+web.browser+web.cordova/mt-os.linux.x86_64/dev_bundle\"\n  142    }\n  143  }\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/bcrypt_lib.node:\n    <binary>\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/.deps/Release/bcrypt_lib.node.d:\n    1: cmd_Release/bcrypt_lib.node := rm -rf \"Release/bcrypt_lib.node\" && cp -af \"Release/obj.target/bcrypt_lib.node\" \"Release/bcrypt_lib.node\"\n    2  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/.deps/Release/obj.target/bcrypt_lib.node.d:\n    1: cmd_Release/obj.target/bcrypt_lib.node := g++ -shared -pthread -rdynamic -m64  -Wl,-soname=bcrypt_lib.node -o Release/obj.target/bcrypt_lib.node -Wl,--start-group Release/obj.target/bcrypt_lib/src/blowfish.o Release/obj.target/bcrypt_lib/src/bcrypt.o Release/obj.target/bcrypt_lib/src/bcrypt_node.o -Wl,--end-group \n    2  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/.deps/Release/obj.target/bcrypt_lib/src/bcrypt.o.d:\n    1: cmd_Release/obj.target/bcrypt_lib/src/bcrypt.o := g++ '-DNODE_GYP_MODULE_NAME=bcrypt_lib' '-DUSING_UV_SHARED=1' '-DUSING_V8_SHARED=1' '-DV8_DEPRECATION_WARNINGS=1' '-D_LARGEFILE_SOURCE' '-D_FILE_OFFSET_BITS=64' '-DBUILDING_NODE_EXTENSION' -I/home/ted/.node-gyp/4.6.1/include/node -I/home/ted/.node-gyp/4.6.1/src -I/home/ted/.node-gyp/4.6.1/deps/uv/include -I/home/ted/.node-gyp/4.6.1/deps/v8/include -I../../nan  -fPIC -pthread -Wall -Wextra -Wno-unused-parameter -m64 -O3 -ffunction-sections -fdata-sections -fno-omit-frame-pointer -fno-rtti -fno-exceptions -std=gnu++0x -MMD -MF ./Release/.deps/Release/obj.target/bcrypt_lib/src/bcrypt.o.d.raw   -c -o Release/obj.target/bcrypt_lib/src/bcrypt.o ../src/bcrypt.cc\n    2: Release/obj.target/bcrypt_lib/src/bcrypt.o: ../src/bcrypt.cc \\\n    3:  ../src/node_blf.h\n    4: ../src/bcrypt.cc:\n    5: ../src/node_blf.h:\n    6  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/.deps/Release/obj.target/bcrypt_lib/src/bcrypt_node.o.d:\n    1: cmd_Release/obj.target/bcrypt_lib/src/bcrypt_node.o := g++ '-DNODE_GYP_MODULE_NAME=bcrypt_lib' '-DUSING_UV_SHARED=1' '-DUSING_V8_SHARED=1' '-DV8_DEPRECATION_WARNINGS=1' '-D_LARGEFILE_SOURCE' '-D_FILE_OFFSET_BITS=64' '-DBUILDING_NODE_EXTENSION' -I/home/ted/.node-gyp/4.6.1/include/node -I/home/ted/.node-gyp/4.6.1/src -I/home/ted/.node-gyp/4.6.1/deps/uv/include -I/home/ted/.node-gyp/4.6.1/deps/v8/include -I../../nan  -fPIC -pthread -Wall -Wextra -Wno-unused-parameter -m64 -O3 -ffunction-sections -fdata-sections -fno-omit-frame-pointer -fno-rtti -fno-exceptions -std=gnu++0x -MMD -MF ./Release/.deps/Release/obj.target/bcrypt_lib/src/bcrypt_node.o.d.raw   -c -o Release/obj.target/bcrypt_lib/src/bcrypt_node.o ../src/bcrypt_node.cc\n    2: Release/obj.target/bcrypt_lib/src/bcrypt_node.o: ../src/bcrypt_node.cc \\\n    3:  ../../nan/nan.h /home/ted/.node-gyp/4.6.1/include/node/node_version.h \\\n    4   /home/ted/.node-gyp/4.6.1/include/node/uv.h \\\n    5   /home/ted/.node-gyp/4.6.1/include/node/uv-errno.h \\\n    6:  /home/ted/.node-gyp/4.6.1/include/node/uv-version.h \\\n    7   /home/ted/.node-gyp/4.6.1/include/node/uv-unix.h \\\n    8   /home/ted/.node-gyp/4.6.1/include/node/uv-threadpool.h \\\n    .\n   10   /home/ted/.node-gyp/4.6.1/include/node/node.h \\\n   11   /home/ted/.node-gyp/4.6.1/include/node/v8.h \\\n   12:  /home/ted/.node-gyp/4.6.1/include/node/v8-version.h \\\n   13   /home/ted/.node-gyp/4.6.1/include/node/v8config.h \\\n   14:  /home/ted/.node-gyp/4.6.1/include/node/node_version.h \\\n   15   /home/ted/.node-gyp/4.6.1/include/node/node_buffer.h \\\n   16   /home/ted/.node-gyp/4.6.1/include/node/node.h \\\n   17   /home/ted/.node-gyp/4.6.1/include/node/node_object_wrap.h \\\n   18:  ../../nan/nan_callbacks.h ../../nan/nan_callbacks_12_inl.h \\\n   19:  ../../nan/nan_maybe_43_inl.h ../../nan/nan_converters.h \\\n   20:  ../../nan/nan_converters_43_inl.h ../../nan/nan_new.h \\\n   21:  ../../nan/nan_implementation_12_inl.h ../../nan/nan_persistent_12_inl.h \\\n   22   ../../nan/nan_weak.h ../../nan/nan_object_wrap.h \\\n   23:  ../../nan/nan_typedarray_contents.h ../src/node_blf.h\n   24: ../src/bcrypt_node.cc:\n   25  ../../nan/nan.h:\n   26: /home/ted/.node-gyp/4.6.1/include/node/node_version.h:\n   27  /home/ted/.node-gyp/4.6.1/include/node/uv.h:\n   28  /home/ted/.node-gyp/4.6.1/include/node/uv-errno.h:\n   29: /home/ted/.node-gyp/4.6.1/include/node/uv-version.h:\n   30  /home/ted/.node-gyp/4.6.1/include/node/uv-unix.h:\n   31  /home/ted/.node-gyp/4.6.1/include/node/uv-threadpool.h:\n   ..\n   33  /home/ted/.node-gyp/4.6.1/include/node/node.h:\n   34  /home/ted/.node-gyp/4.6.1/include/node/v8.h:\n   35: /home/ted/.node-gyp/4.6.1/include/node/v8-version.h:\n   36  /home/ted/.node-gyp/4.6.1/include/node/v8config.h:\n   37: /home/ted/.node-gyp/4.6.1/include/node/node_version.h:\n   38  /home/ted/.node-gyp/4.6.1/include/node/node_buffer.h:\n   39  /home/ted/.node-gyp/4.6.1/include/node/node.h:\n   40  /home/ted/.node-gyp/4.6.1/include/node/node_object_wrap.h:\n   41: ../../nan/nan_callbacks.h:\n   42: ../../nan/nan_callbacks_12_inl.h:\n   43  ../../nan/nan_maybe_43_inl.h:\n   44: ../../nan/nan_converters.h:\n   45: ../../nan/nan_converters_43_inl.h:\n   46  ../../nan/nan_new.h:\n   47  ../../nan/nan_implementation_12_inl.h:\n   48: ../../nan/nan_persistent_12_inl.h:\n   49  ../../nan/nan_weak.h:\n   50  ../../nan/nan_object_wrap.h:\n   51: ../../nan/nan_typedarray_contents.h:\n   52: ../src/node_blf.h:\n   53  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/.deps/Release/obj.target/bcrypt_lib/src/blowfish.o.d:\n    1: cmd_Release/obj.target/bcrypt_lib/src/blowfish.o := g++ '-DNODE_GYP_MODULE_NAME=bcrypt_lib' '-DUSING_UV_SHARED=1' '-DUSING_V8_SHARED=1' '-DV8_DEPRECATION_WARNINGS=1' '-D_LARGEFILE_SOURCE' '-D_FILE_OFFSET_BITS=64' '-DBUILDING_NODE_EXTENSION' -I/home/ted/.node-gyp/4.6.1/include/node -I/home/ted/.node-gyp/4.6.1/src -I/home/ted/.node-gyp/4.6.1/deps/uv/include -I/home/ted/.node-gyp/4.6.1/deps/v8/include -I../../nan  -fPIC -pthread -Wall -Wextra -Wno-unused-parameter -m64 -O3 -ffunction-sections -fdata-sections -fno-omit-frame-pointer -fno-rtti -fno-exceptions -std=gnu++0x -MMD -MF ./Release/.deps/Release/obj.target/bcrypt_lib/src/blowfish.o.d.raw   -c -o Release/obj.target/bcrypt_lib/src/blowfish.o ../src/blowfish.cc\n    2: Release/obj.target/bcrypt_lib/src/blowfish.o: ../src/blowfish.cc \\\n    3:  ../src/node_blf.h\n    4: ../src/blowfish.cc:\n    5: ../src/node_blf.h:\n    6  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/build/Release/obj.target/bcrypt_lib.node:\n    <binary>\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/examples/async_compare.js:\n    1  var bcrypt = require('../bcrypt');\n    2  \n    3: var start = Date.now();\n    4: bcrypt.genSalt(10, function(err, salt) {\n    5:   console.log('salt: ' + salt);\n    6:   console.log('salt cb end: ' + (Date.now() - start) + 'ms');\n    7:   bcrypt.hash('test', salt, function(err, crypted) {\n    8:     console.log('crypted: ' + crypted);\n    9:     console.log('crypted cb end: ' + (Date.now() - start) + 'ms');\n   10:     console.log('rounds used from hash:', bcrypt.getRounds(crypted));\n   11:     bcrypt.compare('test', crypted, function(err, res) {\n   12:       console.log('compared true: ' + res);\n   13:       console.log('compared true cb end: ' + (Date.now() - start) + 'ms');\n   14      });\n   15:     bcrypt.compare('bacon', crypted, function(err, res) {\n   16:       console.log('compared false: ' + res);\n   17:       console.log('compared false cb end: ' + (Date.now() - start) + 'ms');\n   18      });\n   19    });\n   20  })\n   21: console.log('end: ' + (Date.now() - start) + 'ms');\n   22  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/examples/forever_gen_salt.js:\n    1  var bcrypt = require('../bcrypt');\n    2  \n    3: (function printSalt() {\n    4:   bcrypt.genSalt(10, function(err, salt) {\n    5:     console.log('salt: ' + salt);\n    6:     printSalt();\n    7    });\n    8  })()\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/src/bcrypt.cc:\n    1: /*\t$OpenBSD: bcrypt.c,v 1.24 2008/04/02 19:54:05 millert Exp $\t*/\n    2  \n    3  /*\n    4:  * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>\n    5:  * All rights reserved.\n    6   *\n    7:  * Redistribution and use in source and binary forms, with or without\n    8:  * modification, are permitted provided that the following conditions\n    9   * are met:\n   10:  * 1. Redistributions of source code must retain the above copyright\n   11:  *    notice, this list of conditions and the following disclaimer.\n   12:  * 2. Redistributions in binary form must reproduce the above copyright\n   13:  *    notice, this list of conditions and the following disclaimer in the\n   14:  *    documentation and/or other materials provided with the distribution.\n   15:  * 3. All advertising materials mentioning features or use of this software\n   16:  *    must display the following acknowledgement:\n   17:  *      This product includes software developed by Niels Provos.\n   18:  * 4. The name of the author may not be used to endorse or promote products\n   19:  *    derived from this software without specific prior written permission.\n   20   *\n   21:  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n   22:  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n   23:  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n   24:  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n   25:  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n   26:  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   27:  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   28:  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   29:  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n   30:  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   31   */\n   32  \n   33: /* This password hashing algorithm was designed by David Mazieres\n   34:  * <dm@lcs.mit.edu> and works as follows:\n   35   *\n   36:  * 1. state := InitState ()\n   37:  * 2. state := ExpandKey (state, salt, password) 3.\n   38:  * REPEAT rounds:\n   39:  *\tstate := ExpandKey (state, 0, salt)\n   40:  *      state := ExpandKey(state, 0, password)\n   41:  * 4. ctext := \"OrpheanBeholderScryDoubt\"\n   42   * 5. REPEAT 64:\n   43:  * \tctext := Encrypt_ECB (state, ctext);\n   44:  * 6. RETURN Concatenate (salt, ctext);\n   45   *\n   46   */\n   47  \n   48: #include <stdio.h>\n   49: #include <stdlib.h>\n   50: #include <sys/types.h>\n   51: #include <string.h>\n   52  #include \"node_blf.h\"\n   53  \n   54  #ifdef _WIN32 \n   55: #define snprintf _snprintf\n   56  #endif\n   57  \n   58  //#if !defined(__APPLE__) && !defined(__MACH__)\n   59: //#include \"bsd/stdlib.h\"\n   60  //#endif\n   61  \n   62: /* This implementation is adaptable to current computing power.\n   63:  * You can have up to 2^31 rounds which should be enough for some\n   64   * time to come.\n   65   */\n   66  \n   67: /*char *bcrypt(const char *, const char *);\n   68: void encode_salt(char *, u_int8_t *, u_int16_t, u_int8_t);\n   69: char * bcrypt_gensalt(u_int8_t log_rounds);*/\n   70  \n   71: static void encode_base64(u_int8_t *, u_int8_t *, u_int16_t);\n   72: static void decode_base64(u_int8_t *, u_int16_t, u_int8_t *);\n   73  \n   74: const static char* error = \":\";\n   75  \n   76: const static u_int8_t Base64Code[] =\n   77: \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n   78  \n   79: const static u_int8_t index_64[128] = {\n   80  \t255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n   81  \t255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n   ..\n   94  #define CHAR64(c)  ( (c) > 127 ? 255 : index_64[(c)])\n   95  \n   96: static void\n   97: decode_base64(u_int8_t *buffer, u_int16_t len, u_int8_t *data)\n   98  {\n   99  \tu_int8_t *bp = buffer;\n  ...\n  130  \n  131  void\n  132: encode_salt(char *salt, u_int8_t *csalt, u_int16_t clen, u_int8_t logr)\n  133  {\n  134: \tsalt[0] = '$';\n  135: \tsalt[1] = BCRYPT_VERSION;\n  136: \tsalt[2] = 'a';\n  137: \tsalt[3] = '$';\n  138  \n  139: \tsnprintf(salt + 4, 4, \"%2.2u$\", logr);\n  140  \n  141: \tencode_base64((u_int8_t *) salt + 7, csalt, clen);\n  142  }\n  143  \n  144  \n  145: /* Generates a salt for this version of crypt.\n  146:    Since versions may change. Keeping this here\n  147:    seems sensible.\n  148:    from: http://mail-index.netbsd.org/tech-crypto/2002/05/24/msg000204.html\n  149  */\n  150  void\n  151: bcrypt_gensalt(u_int8_t log_rounds, u_int8_t *seed, char *gsalt)\n  152  {\n  153:     if (log_rounds < 4)\n  154:         log_rounds = 4;\n  155:     else if (log_rounds > 31)\n  156:         log_rounds = 31;\n  157  \n  158:     encode_salt(gsalt, seed, BCRYPT_MAXSALT, log_rounds);\n  159  }\n  160  \n  161: /* We handle $Vers$log2(NumRounds)$salt+passwd$\n  162:    i.e. $2$04$iwouldntknowwhattosayetKdJ6iFtacBqJdKe6aW7ou */\n  163  \n  164  void\n  165: bcrypt(const char *key, const char *salt, char *encrypted)\n  166  {\n  167: \tblf_ctx state;\n  168: \tu_int32_t rounds, i, k;\n  169  \tu_int16_t j;\n  170: \tu_int8_t key_len, salt_len, logr, minor;\n  171: \tu_int8_t ciphertext[4 * BCRYPT_BLOCKS+1] = \"OrpheanBeholderScryDoubt\";\n  172: \tu_int8_t csalt[BCRYPT_MAXSALT];\n  173: \tu_int32_t cdata[BCRYPT_BLOCKS];\n  174  \tint n;\n  175  \n  176: \t/* Discard \"$\" identifier */\n  177: \tsalt++;\n  178  \n  179: \tif (*salt > BCRYPT_VERSION) {\n  180: \t\t/* How do I handle errors ? Return ':' */\n  181: \t\tstrcpy(encrypted, error);\n  182  \t\treturn;\n  183  \t}\n  184  \n  185: \t/* Check for minor versions */\n  186: \tif (salt[1] != '$') {\n  187: \t\t switch (salt[1]) {\n  188: \t\t case 'a':\n  189: \t\t\t /* 'ab' should not yield the same as 'abab' */\n  190: \t\t\t minor = salt[1];\n  191: \t\t\t salt++;\n  192  \t\t\t break;\n  193  \t\t default:\n  194: \t\t\t strcpy(encrypted, error);\n  195  \t\t\t return;\n  196  \t\t }\n  197: \t} else\n  198  \t\t minor = 0;\n  199  \n  200: \t/* Discard version + \"$\" identifier */\n  201: \tsalt += 2;\n  202  \n  203: \tif (salt[2] != '$') {\n  204: \t\t/* Out of sync with passwd entry */\n  205: \t\tstrcpy(encrypted, error);\n  206  \t\treturn;\n  207  \t}\n  208  \t\n  209: \t/* Computer power doesn't increase linear, 2^x should be fine */\n  210: \tn = atoi(salt);\n  211  \tif (n > 31 || n < 0) {\n  212: \t\tstrcpy(encrypted, error);\n  213  \t\treturn;\n  214  \t}\n  215  \tlogr = (u_int8_t)n;\n  216: \tif ((rounds = (u_int32_t) 1 << logr) < BCRYPT_MINROUNDS) {\n  217: \t\tstrcpy(encrypted, error);\n  218  \t\treturn;\n  219  \t}\n  220  \n  221: \t/* Discard num rounds + \"$\" identifier */\n  222: \tsalt += 3;\n  223  \n  224: \tif (strlen(salt) * 3 / 4 < BCRYPT_MAXSALT) {\n  225: \t\tstrcpy(encrypted, error);\n  226  \t\treturn;\n  227  \t}\n  228  \n  229: \t/* We dont want the base64 salt but the raw data */\n  230: \tdecode_base64(csalt, BCRYPT_MAXSALT, (u_int8_t *) salt);\n  231: \tsalt_len = BCRYPT_MAXSALT;\n  232: \tkey_len = strlen(key) + (minor >= 'a' ? 1 : 0);\n  233  \n  234  \n  235: \t/* Setting up S-Boxes and Subkeys */\n  236: \tBlowfish_initstate(&state);\n  237: \tBlowfish_expandstate(&state, csalt, salt_len,\n  238  \t    (u_int8_t *) key, key_len);\n  239: \tfor (k = 0; k < rounds; k++) {\n  240: \t\tBlowfish_expand0state(&state, (u_int8_t *) key, key_len);\n  241: \t\tBlowfish_expand0state(&state, csalt, salt_len);\n  242  \t}\n  243  \n  244:  \t/* This can be precomputed later */\n  245  \tj = 0;\n  246: \tfor (i = 0; i < BCRYPT_BLOCKS; i++)\n  247: \t\tcdata[i] = Blowfish_stream2word(ciphertext, 4 * BCRYPT_BLOCKS, &j);\n  248  \n  249  \t/* Now do the encryption */\n  250  \tfor (k = 0; k < 64; k++)\n  251: \t\tblf_enc(&state, cdata, BCRYPT_BLOCKS / 2);\n  252  \n  253: \tfor (i = 0; i < BCRYPT_BLOCKS; i++) {\n  254  \t\tciphertext[4 * i + 3] = cdata[i] & 0xff;\n  255  \t\tcdata[i] = cdata[i] >> 8;\n  ...\n  263  \ti = 0;\n  264  \tencrypted[i++] = '$';\n  265: \tencrypted[i++] = BCRYPT_VERSION;\n  266  \tif (minor)\n  267  \t\tencrypted[i++] = minor;\n  268  \tencrypted[i++] = '$';\n  269  \n  270: \tsnprintf(encrypted + i, 4, \"%2.2u$\", logr);\n  271  \n  272: \tencode_base64((u_int8_t *) encrypted + i + 3, csalt, BCRYPT_MAXSALT);\n  273: \tencode_base64((u_int8_t *) encrypted + strlen(encrypted), ciphertext,\n  274: \t    4 * BCRYPT_BLOCKS - 1);\n  275: \tmemset(&state, 0, sizeof(state));\n  276: \tmemset(ciphertext, 0, sizeof(ciphertext));\n  277: \tmemset(csalt, 0, sizeof(csalt));\n  278: \tmemset(cdata, 0, sizeof(cdata));\n  279  }\n  280  \n  281: u_int32_t bcrypt_get_rounds(const char * hash)\n  282  {\n  283:   /* skip past the leading \"$\" */\n  284:   if (!hash || *(hash++) != '$') return 0;\n  285  \n  286:   /* skip past version */\n  287:   if (0 == (*hash++)) return 0;\n  288:   if (*hash && *hash != '$') hash++;\n  289:   if (*hash++ != '$') return 0;\n  290  \n  291:   return  atoi(hash);\n  292  }\n  293  \n  294: static void\n  295: encode_base64(u_int8_t *buffer, u_int8_t *data, u_int16_t len)\n  296  {\n  297  \tu_int8_t *bp = buffer;\n  ...\n  300  \twhile (p < data + len) {\n  301  \t\tc1 = *p++;\n  302: \t\t*bp++ = Base64Code[(c1 >> 2)];\n  303  \t\tc1 = (c1 & 0x03) << 4;\n  304  \t\tif (p >= data + len) {\n  305: \t\t\t*bp++ = Base64Code[c1];\n  306  \t\t\tbreak;\n  307  \t\t}\n  308  \t\tc2 = *p++;\n  309  \t\tc1 |= (c2 >> 4) & 0x0f;\n  310: \t\t*bp++ = Base64Code[c1];\n  311  \t\tc1 = (c2 & 0x0f) << 2;\n  312  \t\tif (p >= data + len) {\n  313: \t\t\t*bp++ = Base64Code[c1];\n  314  \t\t\tbreak;\n  315  \t\t}\n  316  \t\tc2 = *p++;\n  317  \t\tc1 |= (c2 >> 6) & 0x03;\n  318: \t\t*bp++ = Base64Code[c1];\n  319: \t\t*bp++ = Base64Code[c2 & 0x3f];\n  320  \t}\n  321  \t*bp = '\\0';\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/src/bcrypt_node.cc:\n    1  #include <nan.h>\n    2  \n    3: #include <string>\n    4: #include <cstring>\n    5  #include <vector>\n    6: #include <stdlib.h> // atoi\n    7  \n    8  #include \"node_blf.h\"\n    9  \n   10: #define NODE_LESS_THAN (!(NODE_VERSION_AT_LEAST(0, 5, 4)))\n   11  \n   12: using namespace v8;\n   13: using namespace node;\n   14  \n   15: namespace {\n   16  \n   17: bool ValidateSalt(const char* salt) {\n   18  \n   19:     if (!salt || *salt != '$') {\n   20:         return false;\n   21      }\n   22  \n   23:     // discard $\n   24:     salt++;\n   25  \n   26:     if (*salt > BCRYPT_VERSION) {\n   27:         return false;\n   28      }\n   29  \n   30:     if (salt[1] != '$') {\n   31:         switch (salt[1]) {\n   32:         case 'a':\n   33:             salt++;\n   34              break;\n   35          default:\n   36:             return false;\n   37          }\n   38      }\n   39  \n   40:     // discard version + $\n   41:     salt += 2;\n   42  \n   43:     if (salt[2] != '$') {\n   44:         return false;\n   45      }\n   46  \n   47:     int n = atoi(salt);\n   48      if (n > 31 || n < 0) {\n   49:         return false;\n   50      }\n   51  \n   52:     if (((uint8_t)1 << (uint8_t)n) < BCRYPT_MINROUNDS) {\n   53:         return false;\n   54      }\n   55  \n   56:     salt += 3;\n   57:     if (strlen(salt) * 3 / 4 < BCRYPT_MAXSALT) {\n   58:         return false;\n   59      }\n   60  \n   ..\n   62  }\n   63  \n   64: /* SALT GENERATION */\n   65  \n   66: class SaltAsyncWorker : public Nan::AsyncWorker {\n   67  public:\n   68:     SaltAsyncWorker(Nan::Callback *callback, std::string seed, ssize_t rounds)\n   69:         : Nan::AsyncWorker(callback), seed(seed), rounds(rounds) {\n   70      }\n   71  \n   72:     ~SaltAsyncWorker() {}\n   73  \n   74      void Execute() {\n   75:         char salt[_SALT_LEN];\n   76:         bcrypt_gensalt(rounds, (u_int8_t *)&seed[0], salt);\n   77:         this->salt = std::string(salt);\n   78      }\n   79  \n   80      void HandleOKCallback() {\n   81:         Nan::HandleScope scope;\n   82  \n   83          Local<Value> argv[2];\n   84          argv[0] = Nan::Undefined();\n   85:         argv[1] = Nan::Encode(salt.c_str(), salt.size(), Nan::BINARY);\n   86          callback->Call(2, argv);\n   87      }\n   88  \n   89  private:\n   90:     std::string seed;\n   91:     std::string salt;\n   92:     ssize_t rounds;\n   93  };\n   94  \n   95: NAN_METHOD(GenerateSalt) {\n   96:     Nan::HandleScope scope;\n   97  \n   98      if (info.Length() < 3) {\n   99:         Nan::ThrowTypeError(\"3 arguments expected\");\n  100          return;\n  101      }\n  102  \n  103:     if (!Buffer::HasInstance(info[1]) || Buffer::Length(info[1].As<Object>()) != 16) {\n  104:         Nan::ThrowTypeError(\"Second argument must be a 16 byte Buffer\");\n  105          return;\n  106      }\n  107  \n  108:     const int32_t rounds = Nan::To<int32_t>(info[0]).FromMaybe(0);\n  109:     Local<Object> seed = info[1].As<Object>();\n  110:     Local<Function> callback = Local<Function>::Cast(info[2]);\n  111  \n  112:     SaltAsyncWorker* saltWorker = new SaltAsyncWorker(new Nan::Callback(callback),\n  113:         std::string(Buffer::Data(seed), 16), rounds);\n  114  \n  115:     Nan::AsyncQueueWorker(saltWorker);\n  116  }\n  117  \n  118: NAN_METHOD(GenerateSaltSync) {\n  119:     Nan::HandleScope scope;\n  120  \n  121      if (info.Length() < 2) {\n  122:         Nan::ThrowTypeError(\"2 arguments expected\");\n  123          return;\n  124      }\n  125  \n  126:     if (!Buffer::HasInstance(info[1]) || Buffer::Length(info[1].As<Object>()) != 16) {\n  127:         Nan::ThrowTypeError(\"Second argument must be a 16 byte Buffer\");\n  128          return;\n  129      }\n  130  \n  131:     const int32_t rounds = Nan::To<int32_t>(info[0]).FromMaybe(0);\n  132:     u_int8_t* seed = (u_int8_t*)Buffer::Data(info[1].As<Object>());\n  133  \n  134:     char salt[_SALT_LEN];\n  135:     bcrypt_gensalt(rounds, seed, salt);\n  136  \n  137:     info.GetReturnValue().Set(Nan::Encode(salt, strlen(salt), Nan::BINARY));\n  138  }\n  139  \n  140: /* ENCRYPT DATA - USED TO BE HASHPW */\n  141  \n  142: class EncryptAsyncWorker : public Nan::AsyncWorker {\n  143    public:\n  144:     EncryptAsyncWorker(Nan::Callback *callback, std::string input, std::string salt)\n  145:         : Nan::AsyncWorker(callback), input(input), salt(salt) {\n  146      }\n  147  \n  148:     ~EncryptAsyncWorker() {}\n  149  \n  150      void Execute() {\n  151:         if (!(ValidateSalt(salt.c_str()))) {\n  152:             error = \"Invalid salt. Salt must be in the form of: $Vers$log2(NumRounds)$saltvalue\";\n  153          }\n  154  \n  155:         char bcrypted[_PASSWORD_LEN];\n  156:         bcrypt(input.c_str(), salt.c_str(), bcrypted);\n  157:         output = std::string(bcrypted);\n  158      }\n  159  \n  160      void HandleOKCallback() {\n  161:         Nan::HandleScope scope;\n  162  \n  163          Local<Value> argv[2];\n  164  \n  165          if (!error.empty()) {\n  166:             argv[0] = Nan::Error(error.c_str());\n  167              argv[1] = Nan::Undefined();\n  168:         } else {\n  169              argv[0] = Nan::Undefined();\n  170:             argv[1] = Nan::Encode(output.c_str(), output.size(), Nan::BINARY);\n  171          }\n  172  \n  ...\n  175  \n  176    private:\n  177:     std::string input;\n  178:     std::string salt;\n  179:     std::string error;\n  180:     std::string output;\n  181  };\n  182  \n  183  NAN_METHOD(Encrypt) {\n  184:     Nan::HandleScope scope;\n  185  \n  186      if (info.Length() < 3) {\n  187:         Nan::ThrowTypeError(\"3 arguments expected\");\n  188          return;\n  189      }\n  190  \n  191:     Nan::Utf8String data(info[0]->ToString());\n  192:     Nan::Utf8String salt(info[1]->ToString());\n  193:     Local<Function> callback = Local<Function>::Cast(info[2]);\n  194  \n  195:     EncryptAsyncWorker* encryptWorker = new EncryptAsyncWorker(new Nan::Callback(callback),\n  196:         std::string(*data), std::string(*salt));\n  197  \n  198:     Nan::AsyncQueueWorker(encryptWorker);\n  199  }\n  200  \n  201: NAN_METHOD(EncryptSync) {\n  202:     Nan::HandleScope scope;\n  203  \n  204      if (info.Length() < 2) {\n  205:         Nan::ThrowTypeError(\"2 arguments expected\");\n  206:         info.GetReturnValue().Set(Nan::Undefined());\n  207          return;\n  208      }\n  209  \n  210:     Nan::Utf8String data(info[0]->ToString());\n  211:     Nan::Utf8String salt(info[1]->ToString());\n  212  \n  213:     if (!(ValidateSalt(*salt))) {\n  214:         Nan::ThrowError(\"Invalid salt. Salt must be in the form of: $Vers$log2(NumRounds)$saltvalue\");\n  215:         info.GetReturnValue().Set(Nan::Undefined());\n  216          return;\n  217      }\n  218  \n  219:     char bcrypted[_PASSWORD_LEN];\n  220:     bcrypt(*data, *salt, bcrypted);\n  221:     info.GetReturnValue().Set(Nan::Encode(bcrypted, strlen(bcrypted), Nan::BINARY));\n  222  }\n  223  \n  224  /* COMPARATOR */\n  225  \n  226: NAN_INLINE bool CompareStrings(const char* s1, const char* s2) {\n  227  \n  228      bool eq = true;\n  229:     int s1_len = strlen(s1);\n  230:     int s2_len = strlen(s2);\n  231  \n  232:     if (s1_len != s2_len) {\n  233:         eq = false;\n  234      }\n  235  \n  236:     const int max_len = (s2_len < s1_len) ? s1_len : s2_len;\n  237  \n  238:     // to prevent timing attacks, should check entire string\n  239:     // don't exit after found to be false\n  240      for (int i = 0; i < max_len; ++i) {\n  241:       if (s1_len >= i && s2_len >= i && s1[i] != s2[i]) {\n  242:         eq = false;\n  243        }\n  244      }\n  ...\n  247  }\n  248  \n  249: class CompareAsyncWorker : public Nan::AsyncWorker {\n  250    public:\n  251:     CompareAsyncWorker(Nan::Callback *callback, std::string input, std::string encrypted)\n  252:         : Nan::AsyncWorker(callback), input(input), encrypted(encrypted) {\n  253  \n  254:         result = false;\n  255      }\n  256  \n  257:     ~CompareAsyncWorker() {}\n  258  \n  259      void Execute() {\n  260:         char bcrypted[_PASSWORD_LEN];\n  261:         if (ValidateSalt(encrypted.c_str())) {\n  262:             bcrypt(input.c_str(), encrypted.c_str(), bcrypted);\n  263:             result = CompareStrings(bcrypted, encrypted.c_str());\n  264          }\n  265      }\n  266  \n  267      void HandleOKCallback() {\n  268:         Nan::HandleScope scope;\n  269  \n  270          Local<Value> argv[2];\n  271          argv[0] = Nan::Undefined();\n  272:         argv[1] = Nan::New<Boolean>(result);\n  273          callback->Call(2, argv);\n  274      }\n  275  \n  276    private:\n  277:     std::string input;\n  278:     std::string encrypted;\n  279:     bool result;\n  280  };\n  281  \n  282  NAN_METHOD(Compare) {\n  283:     Nan::HandleScope scope;\n  284  \n  285      if (info.Length() < 3) {\n  286:         Nan::ThrowTypeError(\"3 arguments expected\");\n  287          return;\n  288      }\n  289  \n  290:     Nan::Utf8String input(info[0]->ToString());\n  291:     Nan::Utf8String encrypted(info[1]->ToString());\n  292:     Local<Function> callback = Local<Function>::Cast(info[2]);\n  293  \n  294:     CompareAsyncWorker* compareWorker = new CompareAsyncWorker(new Nan::Callback(callback),\n  295:         std::string(*input), std::string(*encrypted));\n  296  \n  297:     Nan::AsyncQueueWorker(compareWorker);\n  298  }\n  299  \n  300: NAN_METHOD(CompareSync) {\n  301:     Nan::HandleScope scope;\n  302  \n  303      if (info.Length() < 2) {\n  304:         Nan::ThrowTypeError(\"2 arguments expected\");\n  305:         info.GetReturnValue().Set(Nan::Undefined());\n  306          return;\n  307      }\n  308  \n  309:     Nan::Utf8String pw(info[0]->ToString());\n  310:     Nan::Utf8String hash(info[1]->ToString());\n  311  \n  312:     char bcrypted[_PASSWORD_LEN];\n  313:     if (ValidateSalt(*hash)) {\n  314:         bcrypt(*pw, *hash, bcrypted);\n  315:         info.GetReturnValue().Set(Nan::New<Boolean>(CompareStrings(bcrypted, *hash)));\n  316:     } else {\n  317:         info.GetReturnValue().Set(Nan::False());\n  318      }\n  319  }\n  320  \n  321: NAN_METHOD(GetRounds) {\n  322:     Nan::HandleScope scope;\n  323  \n  324      if (info.Length() < 1) {\n  325          Nan::ThrowTypeError(\"1 argument expected\");\n  326:         info.GetReturnValue().Set(Nan::Undefined());\n  327          return;\n  328      }\n  329  \n  330:     Nan::Utf8String hash(info[0]->ToString());\n  331:     u_int32_t rounds;\n  332:     if (!(rounds = bcrypt_get_rounds(*hash))) {\n  333:         Nan::ThrowError(\"invalid hash provided\");\n  334:         info.GetReturnValue().Set(Nan::Undefined());\n  335          return;\n  336      }\n  337  \n  338:     info.GetReturnValue().Set(Nan::New(rounds));\n  339  }\n  340  \n  341: } // anonymous namespace\n  342  \n  343  NAN_MODULE_INIT(init) {\n  344:     Nan::Export(target, \"gen_salt_sync\", GenerateSaltSync);\n  345:     Nan::Export(target, \"encrypt_sync\", EncryptSync);\n  346:     Nan::Export(target, \"compare_sync\", CompareSync);\n  347:     Nan::Export(target, \"get_rounds\", GetRounds);\n  348:     Nan::Export(target, \"gen_salt\", GenerateSalt);\n  349      Nan::Export(target, \"encrypt\", Encrypt);\n  350      Nan::Export(target, \"compare\", Compare);\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/src/blowfish.cc:\n    1: /* $OpenBSD: blowfish.c,v 1.18 2004/11/02 17:23:26 hshoexer Exp $ */\n    2  /*\n    3:  * Blowfish block cipher for OpenBSD\n    4:  * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>\n    5:  * All rights reserved.\n    6   *\n    7:  * Implementation advice by David Mazieres <dm@lcs.mit.edu>.\n    8   *\n    9:  * Redistribution and use in source and binary forms, with or without\n   10:  * modification, are permitted provided that the following conditions\n   11   * are met:\n   12:  * 1. Redistributions of source code must retain the above copyright\n   13:  *    notice, this list of conditions and the following disclaimer.\n   14:  * 2. Redistributions in binary form must reproduce the above copyright\n   15:  *    notice, this list of conditions and the following disclaimer in the\n   16:  *    documentation and/or other materials provided with the distribution.\n   17:  * 3. All advertising materials mentioning features or use of this software\n   18:  *    must display the following acknowledgement:\n   19:  *      This product includes software developed by Niels Provos.\n   20:  * 4. The name of the author may not be used to endorse or promote products\n   21:  *    derived from this software without specific prior written permission.\n   22   *\n   23:  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n   24:  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n   25:  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n   26:  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n   27:  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n   28:  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   29:  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   30:  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   31:  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n   32:  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   33   */\n   34  \n   35  /*\n   36:  * This code is derived from section 14.3 and the given source\n   37:  * in section V of Applied Cryptography, second edition.\n   38:  * Blowfish is an unpatented fast block cipher designed by\n   39:  * Bruce Schneier.\n   40   */\n   41  \n   42  #if 0\n   43: #include <stdio.h>\t\t/* used for debugging */\n   44: #include <string.h>\n   45  #endif\n   46  \n   47: #include <sys/types.h>\n   48  \n   49  #include \"node_blf.h\"\n   ..\n   52  #ifdef __GNUC__\n   53  #define inline __inline\n   54: #else\t\t\t\t/* !__GNUC__ */\n   55  #define inline\n   56  #endif\t\t\t\t/* !__GNUC__ */\n   57  \n   58: /* Function for Feistel Networks */\n   59  \n   60: #define F(s, x) ((((s)[        (((x)>>24)&0xFF)]  \\\n   61: \t\t + (s)[0x100 + (((x)>>16)&0xFF)]) \\\n   62: \t\t ^ (s)[0x200 + (((x)>> 8)&0xFF)]) \\\n   63: \t\t + (s)[0x300 + ( (x)     &0xFF)])\n   64  \n   65: #define BLFRND(s,p,i,j,n) (i ^= F(s,j) ^ (p)[n])\n   66  \n   67  void\n   68: Blowfish_encipher(blf_ctx *c, u_int32_t *xl, u_int32_t *xr)\n   69  {\n   70  \tu_int32_t Xl;\n   71  \tu_int32_t Xr;\n   72: \tu_int32_t *s = c->S[0];\n   73  \tu_int32_t *p = c->P;\n   74  \n   ..\n   77  \n   78  \tXl ^= p[0];\n   79: \tBLFRND(s, p, Xr, Xl, 1); BLFRND(s, p, Xl, Xr, 2);\n   80: \tBLFRND(s, p, Xr, Xl, 3); BLFRND(s, p, Xl, Xr, 4);\n   81: \tBLFRND(s, p, Xr, Xl, 5); BLFRND(s, p, Xl, Xr, 6);\n   82: \tBLFRND(s, p, Xr, Xl, 7); BLFRND(s, p, Xl, Xr, 8);\n   83: \tBLFRND(s, p, Xr, Xl, 9); BLFRND(s, p, Xl, Xr, 10);\n   84: \tBLFRND(s, p, Xr, Xl, 11); BLFRND(s, p, Xl, Xr, 12);\n   85: \tBLFRND(s, p, Xr, Xl, 13); BLFRND(s, p, Xl, Xr, 14);\n   86: \tBLFRND(s, p, Xr, Xl, 15); BLFRND(s, p, Xl, Xr, 16);\n   87  \n   88  \t*xl = Xr ^ p[17];\n   ..\n   91  \n   92  void\n   93: Blowfish_decipher(blf_ctx *c, u_int32_t *xl, u_int32_t *xr)\n   94  {\n   95  \tu_int32_t Xl;\n   96  \tu_int32_t Xr;\n   97: \tu_int32_t *s = c->S[0];\n   98  \tu_int32_t *p = c->P;\n   99  \n  ...\n  102  \n  103  \tXl ^= p[17];\n  104: \tBLFRND(s, p, Xr, Xl, 16); BLFRND(s, p, Xl, Xr, 15);\n  105: \tBLFRND(s, p, Xr, Xl, 14); BLFRND(s, p, Xl, Xr, 13);\n  106: \tBLFRND(s, p, Xr, Xl, 12); BLFRND(s, p, Xl, Xr, 11);\n  107: \tBLFRND(s, p, Xr, Xl, 10); BLFRND(s, p, Xl, Xr, 9);\n  108: \tBLFRND(s, p, Xr, Xl, 8); BLFRND(s, p, Xl, Xr, 7);\n  109: \tBLFRND(s, p, Xr, Xl, 6); BLFRND(s, p, Xl, Xr, 5);\n  110: \tBLFRND(s, p, Xr, Xl, 4); BLFRND(s, p, Xl, Xr, 3);\n  111: \tBLFRND(s, p, Xr, Xl, 2); BLFRND(s, p, Xl, Xr, 1);\n  112  \n  113  \t*xl = Xr ^ p[0];\n  ...\n  116  \n  117  void\n  118: Blowfish_initstate(blf_ctx *c)\n  119  {\n  120: \t/* P-box and S-box tables initialized with digits of Pi */\n  121  \n  122: \tstatic const blf_ctx initstate =\n  123  \t{ {\n  124  \t\t{\n  ...\n  391  \t} };\n  392  \n  393: \t*c = initstate;\n  394  }\n  395  \n  396  u_int32_t\n  397: Blowfish_stream2word(const u_int8_t *data, u_int16_t databytes,\n  398      u_int16_t *current)\n  399  {\n  ...\n  406  \n  407  \tfor (i = 0; i < 4; i++, j++) {\n  408: \t\tif (j >= databytes)\n  409  \t\t\tj = 0;\n  410  \t\ttemp = (temp << 8) | data[j];\n  ...\n  416  \n  417  void\n  418: Blowfish_expand0state(blf_ctx *c, const u_int8_t *key, u_int16_t keybytes)\n  419  {\n  420  \tu_int16_t i;\n  ...\n  427  \tj = 0;\n  428  \tfor (i = 0; i < BLF_N + 2; i++) {\n  429: \t\t/* Extract 4 int8 to 1 int32 from keystream */\n  430: \t\ttemp = Blowfish_stream2word(key, keybytes, &j);\n  431  \t\tc->P[i] = c->P[i] ^ temp;\n  432  \t}\n  ...\n  436  \tdatar = 0x00000000;\n  437  \tfor (i = 0; i < BLF_N + 2; i += 2) {\n  438: \t\tBlowfish_encipher(c, &datal, &datar);\n  439  \n  440  \t\tc->P[i] = datal;\n  ...\n  444  \tfor (i = 0; i < 4; i++) {\n  445  \t\tfor (k = 0; k < 256; k += 2) {\n  446: \t\t\tBlowfish_encipher(c, &datal, &datar);\n  447  \n  448: \t\t\tc->S[i][k] = datal;\n  449: \t\t\tc->S[i][k + 1] = datar;\n  450  \t\t}\n  451  \t}\n  ...\n  454  \n  455  void\n  456: Blowfish_expandstate(blf_ctx *c, const u_int8_t *data, u_int16_t databytes,\n  457:     const u_int8_t *key, u_int16_t keybytes)\n  458  {\n  459  \tu_int16_t i;\n  ...\n  466  \tj = 0;\n  467  \tfor (i = 0; i < BLF_N + 2; i++) {\n  468: \t\t/* Extract 4 int8 to 1 int32 from keystream */\n  469: \t\ttemp = Blowfish_stream2word(key, keybytes, &j);\n  470  \t\tc->P[i] = c->P[i] ^ temp;\n  471  \t}\n  ...\n  475  \tdatar = 0x00000000;\n  476  \tfor (i = 0; i < BLF_N + 2; i += 2) {\n  477: \t\tdatal ^= Blowfish_stream2word(data, databytes, &j);\n  478: \t\tdatar ^= Blowfish_stream2word(data, databytes, &j);\n  479: \t\tBlowfish_encipher(c, &datal, &datar);\n  480  \n  481  \t\tc->P[i] = datal;\n  ...\n  485  \tfor (i = 0; i < 4; i++) {\n  486  \t\tfor (k = 0; k < 256; k += 2) {\n  487: \t\t\tdatal ^= Blowfish_stream2word(data, databytes, &j);\n  488: \t\t\tdatar ^= Blowfish_stream2word(data, databytes, &j);\n  489: \t\t\tBlowfish_encipher(c, &datal, &datar);\n  490  \n  491: \t\t\tc->S[i][k] = datal;\n  492: \t\t\tc->S[i][k + 1] = datar;\n  493  \t\t}\n  494  \t}\n  ...\n  497  \n  498  void\n  499: blf_key(blf_ctx *c, const u_int8_t *k, u_int16_t len)\n  500  {\n  501: \t/* Initialize S-boxes and subkeys with Pi */\n  502: \tBlowfish_initstate(c);\n  503  \n  504: \t/* Transform S-boxes and subkeys with key */\n  505: \tBlowfish_expand0state(c, k, len);\n  506  }\n  507  \n  508  void\n  509: blf_enc(blf_ctx *c, u_int32_t *data, u_int16_t blocks)\n  510  {\n  511  \tu_int32_t *d;\n  ...\n  513  \n  514  \td = data;\n  515: \tfor (i = 0; i < blocks; i++) {\n  516: \t\tBlowfish_encipher(c, d, d + 1);\n  517  \t\td += 2;\n  518  \t}\n  ...\n  520  \n  521  void\n  522: blf_dec(blf_ctx *c, u_int32_t *data, u_int16_t blocks)\n  523  {\n  524  \tu_int32_t *d;\n  ...\n  526  \n  527  \td = data;\n  528: \tfor (i = 0; i < blocks; i++) {\n  529: \t\tBlowfish_decipher(c, d, d + 1);\n  530  \t\td += 2;\n  531  \t}\n  ...\n  541  \t\tl = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];\n  542  \t\tr = data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7];\n  543: \t\tBlowfish_encipher(c, &l, &r);\n  544  \t\tdata[0] = l >> 24 & 0xff;\n  545  \t\tdata[1] = l >> 16 & 0xff;\n  ...\n  563  \t\tl = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];\n  564  \t\tr = data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7];\n  565: \t\tBlowfish_decipher(c, &l, &r);\n  566  \t\tdata[0] = l >> 24 & 0xff;\n  567  \t\tdata[1] = l >> 16 & 0xff;\n  ...\n  587  \t\tl = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];\n  588  \t\tr = data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7];\n  589: \t\tBlowfish_encipher(c, &l, &r);\n  590  \t\tdata[0] = l >> 24 & 0xff;\n  591  \t\tdata[1] = l >> 16 & 0xff;\n  ...\n  613  \t\tl = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];\n  614  \t\tr = data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7];\n  615: \t\tBlowfish_decipher(c, &l, &r);\n  616  \t\tdata[0] = l >> 24 & 0xff;\n  617  \t\tdata[1] = l >> 16 & 0xff;\n  ...\n  629  \tl = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];\n  630  \tr = data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7];\n  631: \tBlowfish_decipher(c, &l, &r);\n  632  \tdata[0] = l >> 24 & 0xff;\n  633  \tdata[1] = l >> 16 & 0xff;\n  ...\n  657  \tblf_ctx c;\n  658  \tchar    key[] = \"AAAAA\";\n  659: \tchar    key2[] = \"abcdefghijklmnopqrstuvwxyz\";\n  660  \n  661  \tu_int32_t data[10];\n  ...\n  665  \tu_int16_t i;\n  666  \n  667: \t/* First test */\n  668  \tfor (i = 0; i < 10; i++)\n  669  \t\tdata[i] = i;\n  ...\n  673  \tblf_dec(&c, data, 1);\n  674  \tblf_dec(&c, data + 2, 4);\n  675: \tprintf(\"Should read as 0 - 9.\\n\");\n  676  \treport(data, 10);\n  677  \n  678: \t/* Second test */\n  679: \tblf_key(&c, (u_int8_t *) key2, strlen(key2));\n  680  \tblf_enc(&c, data2, 1);\n  681: \tprintf(\"\\nShould read as: 0x324ed0fe 0xf413a203.\\n\");\n  682  \treport(data2, 2);\n  683  \tblf_dec(&c, data2, 1);\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/src/node_blf.h:\n    1: /* $OpenBSD: blf.h,v 1.7 2007/03/14 17:59:41 grunk Exp $ */\n    2  /*\n    3:  * Blowfish - a fast block cipher designed by Bruce Schneier\n    4   *\n    5:  * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>\n    6:  * All rights reserved.\n    7   *\n    8:  * Redistribution and use in source and binary forms, with or without\n    9:  * modification, are permitted provided that the following conditions\n   10   * are met:\n   11:  * 1. Redistributions of source code must retain the above copyright\n   12:  *    notice, this list of conditions and the following disclaimer.\n   13:  * 2. Redistributions in binary form must reproduce the above copyright\n   14:  *    notice, this list of conditions and the following disclaimer in the\n   15:  *    documentation and/or other materials provided with the distribution.\n   16:  * 3. All advertising materials mentioning features or use of this software\n   17:  *    must display the following acknowledgement:\n   18:  *      This product includes software developed by Niels Provos.\n   19:  * 4. The name of the author may not be used to endorse or promote products\n   20:  *    derived from this software without specific prior written permission.\n   21   *\n   22:  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n   23:  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n   24:  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n   25:  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n   26:  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n   27:  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   28:  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   29:  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   30:  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n   31:  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   32   */\n   33  \n   ..\n   35  #define _NODE_BLF_H_\n   36  \n   37: /* Solaris compatibility */\n   38: #ifdef __sun\n   39  #define u_int8_t uint8_t\n   40  #define u_int16_t uint16_t\n   ..\n   44  \n   45  #ifdef _WIN32 \n   46: #define u_int8_t unsigned __int8\n   47: #define u_int16_t unsigned __int16\n   48: #define u_int32_t unsigned __int32\n   49: #define u_int64_t unsigned __int64\n   50  #endif\n   51  \n   52: #define BCRYPT_VERSION '2'\n   53: #define BCRYPT_MAXSALT 16\t/* Precomputation is just so nice */\n   54: #define BCRYPT_BLOCKS 6\t\t/* Ciphertext blocks */\n   55: #define BCRYPT_MINROUNDS 16\t/* we have log2(rounds) in salt */\n   56  \n   57: /* Schneier specifies a maximum key length of 56 bytes.\n   58:  * This ensures that every key bit affects every cipher\n   59:  * bit.  However, the subkeys can hold up to 72 bytes.\n   60:  * Warning: For normal blowfish encryption only 56 bytes\n   61:  * of the key affect all cipherbits.\n   62   */\n   63  \n   64: #define BLF_N\t16\t\t\t/* Number of Subkeys */\n   65: #define BLF_MAXKEYLEN ((BLF_N-2)*4)\t/* 448 bits */\n   66: #define BLF_MAXUTILIZED ((BLF_N+2)*4)\t/* 576 bits */\n   67  \n   68: #define _PASSWORD_LEN   128             /* max length, not counting NUL */\n   69: #define _SALT_LEN       32              /* max length */\n   70  \n   71: /* Blowfish context */\n   72: typedef struct BlowfishContext {\n   73: \tu_int32_t S[4][256];\t/* S-Boxes */\n   74: \tu_int32_t P[BLF_N + 2];\t/* Subkeys */\n   75  } blf_ctx;\n   76  \n   77: /* Raw access to customized Blowfish\n   78:  *\tblf_key is just:\n   79:  *\tBlowfish_initstate( state )\n   80:  *\tBlowfish_expand0state( state, key, keylen )\n   81   */\n   82  \n   83: void Blowfish_encipher(blf_ctx *, u_int32_t *, u_int32_t *);\n   84: void Blowfish_decipher(blf_ctx *, u_int32_t *, u_int32_t *);\n   85: void Blowfish_initstate(blf_ctx *);\n   86: void Blowfish_expand0state(blf_ctx *, const u_int8_t *, u_int16_t);\n   87: void Blowfish_expandstate\n   88: (blf_ctx *, const u_int8_t *, u_int16_t, const u_int8_t *, u_int16_t);\n   89  \n   90: /* Standard Blowfish */\n   91  \n   92: void blf_key(blf_ctx *, const u_int8_t *, u_int16_t);\n   93  void blf_enc(blf_ctx *, u_int32_t *, u_int16_t);\n   94  void blf_dec(blf_ctx *, u_int32_t *, u_int16_t);\n   ..\n  100  void blf_cbc_decrypt(blf_ctx *, u_int8_t *, u_int8_t *, u_int32_t);\n  101  \n  102: /* Converts u_int8_t to u_int32_t */\n  103: u_int32_t Blowfish_stream2word(const u_int8_t *, u_int16_t , u_int16_t *);\n  104  \n  105: /* bcrypt functions*/\n  106: void bcrypt_gensalt(u_int8_t, u_int8_t*, char *);\n  107: void bcrypt(const char *, const char *, char *);\n  108: void encode_salt(char *, u_int8_t *, u_int16_t, u_int8_t);\n  109: u_int32_t bcrypt_get_rounds(const char *);\n  110  \n  111  #endif\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/test/async.js:\n    1  var bcrypt = require('../bcrypt');\n    2  \n    3: module.exports = {\n    4:     test_salt_length: function(assert) {\n    5:         assert.expect(1);\n    6:         bcrypt.genSalt(10, function(err, salt) {\n    7:             assert.equals(29, salt.length, \"Salt isn't the correct length.\");\n    8:             assert.done();\n    9          });\n   10      },\n   11:     test_salt_only_cb: function(assert) {\n   12:         assert.doesNotThrow(function() {bcrypt.genSalt(function(err, salt) {});}, \"Should not throw an Error. Rounds and seed length are optional.\");\n   13:         assert.done();\n   14      },\n   15:     test_salt_rounds_is_string_number: function(assert) {\n   16:         bcrypt.genSalt('10', void 0, function (err, salt) {\n   17:             assert.ok((err instanceof Error), \"Should be an Error. genSalt requires round to be of type number.\");\n   18:             assert.done();\n   19          });\n   20      },\n   21:     test_salt_rounds_is_string_non_number: function(assert) {\n   22:         bcrypt.genSalt('b', function (err, salt) {\n   23:             assert.ok((err instanceof Error), \"Should throw an Error. genSalt requires rounds to of type number.\");\n   24:             assert.done();\n   25          });\n   26      },\n   27:     test_hash: function(assert) {\n   28:         assert.expect(1);\n   29:         bcrypt.genSalt(10, function(err, salt) {\n   30:             bcrypt.hash('password', salt, function(err, res) {\n   31:                 assert.ok(res, \"Res should be defined.\");\n   32:                 assert.done();\n   33              });\n   34          });\n   35      },\n   36:     test_hash_rounds: function(assert) {\n   37:         assert.expect(1);\n   38:         bcrypt.hash('bacon', 8, function(err, hash) {\n   39:           assert.equals(bcrypt.getRounds(hash), 8, \"Number of rounds should be that specified in the function call.\");\n   40:           assert.done();\n   41          });\n   42      },\n   43:     test_hash_empty_strings: function(assert) {\n   44:         assert.expect(2);\n   45:         bcrypt.genSalt(10, function(err, salt) {\n   46:             bcrypt.hash('', salt, function(err, res) {\n   47:                 assert.ok(res, \"Res should be defined even with an empty pw.\");\n   48:                 bcrypt.hash('', '', function(err, res) {\n   49                    if (err) {\n   50:                     assert.ok(err);\n   51:                   } else {\n   52:                     assert.fail();\n   53                    }\n   54  \n   55:                   assert.done();\n   56                  });\n   57              });\n   58          });\n   59      },\n   60:     test_hash_no_params: function(assert) {\n   61:         bcrypt.hash(function (err, hash) {\n   62:             assert.ok(err, \"Should be an error. No params.\");\n   63:             assert.done();\n   64          });\n   65      },\n   66:     test_hash_one_param: function(assert) {\n   67:         bcrypt.hash('password', function (err, hash) {\n   68:             assert.ok(err, \"Should be an Error. No salt.\");\n   69:             assert.done();\n   70          });\n   71      },\n   72:     test_hash_salt_validity: function(assert) {\n   73:         assert.expect(3);\n   74:         bcrypt.hash('password', '$2a$10$somesaltyvaluertsetrse', function(err, enc) {\n   75:             assert.equal(err, undefined);\n   76:             bcrypt.hash('password', 'some$value', function(err, enc) {\n   77:                 assert.notEqual(err, undefined);\n   78:                 assert.equal(err.message, \"Invalid salt. Salt must be in the form of: $Vers$log2(NumRounds)$saltvalue\");\n   79:                 assert.done();\n   80              });\n   81          });\n   82      },\n   83:     test_verify_salt: function(assert) {\n   84:         assert.expect(2);\n   85:         bcrypt.genSalt(10, function(err, salt) {\n   86:             var split_salt = salt.split('$');\n   87:             assert.ok(split_salt[1], '2a');\n   88:             assert.ok(split_salt[2], '10');\n   89:             assert.done();\n   90          });\n   91      },\n   92:     test_verify_salt_min_rounds: function(assert) {\n   93:         assert.expect(2);\n   94:         bcrypt.genSalt(1, function(err, salt) {\n   95:             var split_salt = salt.split('$');\n   96:             assert.ok(split_salt[1], '2a');\n   97:             assert.ok(split_salt[2], '4');\n   98:             assert.done();\n   99          });\n  100      },\n  101:     test_verify_salt_max_rounds: function(assert) {\n  102:         assert.expect(2);\n  103:         bcrypt.genSalt(100, function(err, salt) {\n  104:             var split_salt = salt.split('$');\n  105:             assert.ok(split_salt[1], '2a');\n  106:             assert.ok(split_salt[2], '31');\n  107:             assert.done();\n  108          });\n  109      },\n  110:     test_hash_compare: function(assert) {\n  111:         assert.expect(3);\n  112:         bcrypt.genSalt(10, function(err, salt) {\n  113:             assert.equals(29, salt.length, \"Salt isn't the correct length.\");\n  114:             bcrypt.hash(\"test\", salt, function(err, hash) {\n  115:                 bcrypt.compare(\"test\", hash, function(err, res) {\n  116:                     assert.equal(res, true, \"These hashes should be equal.\");\n  117:                     bcrypt.compare(\"blah\", hash, function(err, res) {\n  118:                         assert.equal(res, false, \"These hashes should not be equal.\");\n  119:                         assert.done();\n  120                      });\n  121                  });\n  ...\n  123          });\n  124      },\n  125:     test_hash_compare_empty_strings: function(assert) {\n  126:         assert.expect(2);\n  127:         var hash = bcrypt.hashSync(\"test\", bcrypt.genSaltSync(10));\n  128  \n  129:         bcrypt.compare(\"\", hash, function(err, res) {\n  130:           assert.equal(res, false, \"These hashes should be equal.\");\n  131:           bcrypt.compare(\"\", \"\", function(err, res) {\n  132:             assert.equal(res, false, \"These hashes should be equal.\");\n  133:             assert.done();\n  134            });\n  135          });\n  136      },\n  137:     test_hash_compare_invalid_strings: function(assert) {\n  138:       var fullString = 'envy1362987212538';\n  139:       var hash = '$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGhM1A8W9iqaG3vv1BD7WC';\n  140        var wut = ':';\n  141:       bcrypt.compare(fullString, hash, function(err, res) {\n  142:         assert.ok(res);\n  143:         bcrypt.compare(fullString, wut, function(err, res) {\n  144:           assert.ok(!res);\n  145:           assert.done();\n  146          });\n  147        });\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/test/repetitions.js:\n    1  var bcrypt = require('../bcrypt');\n    2  \n    3: var EXPECTED = 2500; //number of times to iterate these tests...\n    4  \n    5: module.exports = {\n    6:   test_salt_length: function(assert) {\n    7:     assert.expect(EXPECTED);\n    8      var n = 0;\n    9      for (var i = 0; i < EXPECTED; i++) {\n   10:       bcrypt.genSalt(10, function(err, salt) {\n   11:         assert.equals(29, salt.length, \"Salt (\"+salt+\") isn't the correct length. It is: \" + salt.length);\n   12          n++;\n   13        });\n   ..\n   16      function checkVal() {\n   17          if (n == EXPECTED) {\n   18:           assert.done();\n   19:         } else {\n   20:           setTimeout(checkVal, 100);\n   21          }\n   22      }\n   23:     setTimeout(checkVal, 100);\n   24    },\n   25:   test_hash_length: function(assert) {\n   26:     assert.expect(EXPECTED);\n   27:     var SALT = '$2a$04$TnjywYklQbbZjdjBgBoA4e';\n   28      var n = 0;\n   29      for (var i = 0; i < EXPECTED; i++) {\n   30:       bcrypt.hash('test', SALT, function(err, crypted) {\n   31:         assert.equals(60, crypted.length, \"Encrypted (\"+crypted+\") isn't the correct length. It is: \" + crypted.length);\n   32          n++;\n   33        });\n   ..\n   36      function checkVal() {\n   37        if (n == EXPECTED) {\n   38:         assert.done();\n   39:       } else {\n   40:         setTimeout(checkVal, 100);\n   41        }\n   42      }\n   43:     setTimeout(checkVal, 100);\n   44    },\n   45:   test_compare: function(assert) {\n   46:     assert.expect(EXPECTED);\n   47:     var HASH = '$2a$04$TnjywYklQbbZjdjBgBoA4e9G7RJt9blgMgsCvUvus4Iv4TENB5nHy';\n   48      var n = 0;\n   49      for (var i = 0; i < EXPECTED; i++) {\n   50:       bcrypt.compare('test', HASH, function(err, match) {\n   51:         assert.equal(true, match, \"No match.\");\n   52          n++;\n   53        });\n   ..\n   56      function checkVal() {\n   57        if (n == EXPECTED) {\n   58:         assert.done();\n   59:       } else {\n   60:         setTimeout(checkVal, 100);\n   61        }\n   62      }\n   63:     setTimeout(checkVal, 100);\n   64    },\n   65:   test_hash_and_compare: function(assert) {\n   66:     assert.expect((EXPECTED-1)*3);\n   67:     var salt = bcrypt.genSaltSync(4),\n   68          idx = 0,\n   69:         good_done = false,\n   70:         bad_done = false;\n   71  \n   72      function next() {\n   73:       return test('secret' + Math.random());\n   74      }\n   75  \n   76:     function test(password) {\n   77        idx += 1;\n   78:       return bcrypt.hash(password, salt, function(err, hash) {\n   79          if (err) throw err;\n   80:         //console.log('\\nbcrypt iter ' + idx);\n   81  \n   82:         assert.ok(hash);\n   83  \n   84:         bcrypt.compare(password, hash, function(err, res) {\n   85            //if (err) throw err;\n   86:           assert.ok(res);\n   87            if (idx >= (EXPECTED-1)) {\n   88              good_done = true;\n   ..\n   90          });\n   91  \n   92:         bcrypt.compare('bad' + password, hash, function(err, res) {\n   93            //if (err) throw err;\n   94:           assert.ok(!res);\n   95            if (idx >= (EXPECTED-1)) {\n   96              bad_done = true;\n   ..\n  100          if (idx < ((EXPECTED)-1)) {\n  101            next();\n  102:         } else {\n  103            function checkDone() {\n  104              if (idx >= (EXPECTED-1) && good_done && bad_done) {\n  105:               assert.done();\n  106:             } else {\n  107:               setTimeout(checkDone, 100);\n  108              }\n  109            }\n  110  \n  111:           setTimeout(checkDone, 100);\n  112          }\n  113        });\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bcrypt/test/sync.js:\n    1  var bcrypt = require('../bcrypt');\n    2  \n    3: module.exports = {\n    4:     test_salt_length: function(assert) {\n    5:         var salt = bcrypt.genSaltSync(10);\n    6:         assert.equals(29, salt.length, \"Salt isn't the correct length.\");\n    7:         var split_salt = salt.split('$');\n    8:         assert.ok(split_salt[1], '2a');\n    9:         assert.ok(split_salt[2], '10');\n   10:         assert.done();\n   11      },\n   12:     test_salt_no_params: function(assert) {\n   13:         // same as test_verify_salt except using default rounds of 10\n   14:         var salt = bcrypt.genSaltSync();\n   15:         var split_salt = salt.split('$');\n   16:         assert.ok(split_salt[1], '2a');\n   17:         assert.ok(split_salt[2], '10');\n   18:         assert.done();\n   19      },\n   20:     test_salt_rounds_is_string_number: function(assert) {\n   21:         assert.throws(function() {bcrypt.genSaltSync('10');}, \"Should throw an Error. No params.\");\n   22:         assert.done();\n   23      },\n   24:     test_salt_rounds_is_NaN: function(assert) {\n   25:         assert.throws(function() {bcrypt.genSaltSync('b');}, \"Should throw an Error. gen_salt requires rounds to be a number.\");\n   26:         assert.done();\n   27      },\n   28:     test_hash: function(assert) {\n   29:         assert.ok(bcrypt.hashSync('password', bcrypt.genSaltSync(10)), \"Shouldn't throw an Error.\");\n   30:         assert.done();\n   31      },\n   32:     test_hash_rounds: function(assert) {\n   33:         var hash = bcrypt.hashSync('password', 8);\n   34:         assert.equals(bcrypt.getRounds(hash), 8, \"Number of rounds should equal 8.\");\n   35:         assert.done();\n   36      },\n   37:     test_hash_empty_string: function(assert) {\n   38:         assert.ok(bcrypt.hashSync('', bcrypt.genSaltSync(10)), \"Shouldn't throw an Error.\");\n   39:         assert.throws(function() {bcrypt.hashSync('password', '')}, \"Should have thrown an Error related to the salt.\");\n   40:         assert.throws(function() {bcrypt.hashSync('', '')}, \"Should have thrown an Error related to the salt.\");\n   41:         assert.done();\n   42      },\n   43:     test_hash_pw_no_params: function(assert) {\n   44:         assert.throws(function() {bcrypt.hashSync();}, \"Should throw an Error. No Params.\");\n   45:         assert.done();\n   46      },\n   47:     test_hash_pw_one_param: function(assert) {\n   48:         assert.throws(function() {bcrypt.hashSync('password');}, \"Should throw an Error. No salt.\");\n   49:         assert.done();\n   50      },\n   51:     test_hash_pw_not_hash_str: function(assert) {\n   52:         assert.throws(function() {bcrypt.hashSync('password', {});}, \"Should throw an Error. hash should be a string or number.\");\n   53:         assert.done();\n   54      },\n   55:     test_hash_salt_validity: function(assert) {\n   56:         assert.expect(2);\n   57:         assert.ok(bcrypt.hashSync('password', '$2a$10$somesaltyvaluertsetrse'));\n   58:         assert.throws(function() { \n   59:             bcrypt.hashSync('password', 'some$value');\n   60          });\n   61:         assert.done();\n   62      },\n   63:     test_verify_salt: function(assert) {\n   64:         var salt = bcrypt.genSaltSync(10);\n   65:         var split_salt = salt.split('$');\n   66:         assert.ok(split_salt[1], '2a');\n   67:         assert.ok(split_salt[2], '10');\n   68:         assert.done();\n   69      },\n   70:     test_verify_salt_min_rounds: function(assert) {\n   71:         var salt = bcrypt.genSaltSync(1);\n   72:         var split_salt = salt.split('$');\n   73:         assert.ok(split_salt[1], '2a');\n   74:         assert.ok(split_salt[2], '4');\n   75:         assert.done();\n   76      },\n   77:     test_verify_salt_max_rounds: function(assert) {\n   78:         var salt = bcrypt.genSaltSync(100);\n   79:         var split_salt = salt.split('$');\n   80:         assert.ok(split_salt[1], '2a');\n   81:         assert.ok(split_salt[2], '31');\n   82:         assert.done();\n   83      },\n   84:     test_hash_compare: function(assert) {\n   85:         var salt = bcrypt.genSaltSync(10);\n   86:         assert.equals(29, salt.length, \"Salt isn't the correct length.\");\n   87:         var hash = bcrypt.hashSync(\"test\", salt);\n   88:         assert.ok(bcrypt.compareSync(\"test\", hash), \"These hashes should be equal.\");\n   89:         assert.ok(!(bcrypt.compareSync(\"blah\", hash)), \"These hashes should not be equal.\");\n   90:         assert.done();\n   91      },\n   92:     test_hash_compare_empty_strings: function(assert) {\n   93:         assert.ok(!(bcrypt.compareSync(\"\", \"password\")), \"These hashes should not be equal.\");\n   94:         assert.ok(!(bcrypt.compareSync(\"\", \"\")), \"These hashes should not be equal.\");\n   95:         assert.ok(!(bcrypt.compareSync(\"password\", \"\")), \"These hashes should not be equal.\");\n   96:         assert.done();\n   97      },\n   98:     test_hash_compare_invalid_strings: function(assert) {\n   99:       var fullString = 'envy1362987212538';\n  100:       var hash = '$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGhM1A8W9iqaG3vv1BD7WC';\n  101        var wut = ':';\n  102:       bcrypt.compareSync(fullString, hash, function(err, res) {\n  103:         assert.ok(res);\n  104        });\n  105:       bcrypt.compareSync(fullString, wut, function(err, res) {\n  106:         assert.ok(!res)\n  107        });\n  108:       assert.done();\n  109      },\n  110:     test_getRounds: function(assert) {\n  111:         var hash = bcrypt.hashSync(\"test\", bcrypt.genSaltSync(9));\n  112:         assert.equals(9, bcrypt.getRounds(hash), \"getRounds can't extract rounds\");\n  113:         assert.done();\n  114      },\n  115:     test_getRounds: function(assert) {\n  116:         var hash = bcrypt.hashSync(\"test\", bcrypt.genSaltSync(9));\n  117:         assert.equals(9, bcrypt.getRounds(hash), \"getRounds can't extract rounds\");\n  118:         assert.throws(function() {bcrypt.getRounds(''); }, \"Must pass a valid hash to getRounds\");\n  119:         assert.done();\n  120      }\n  121  };\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bindings/README.md:\n    1: node-bindings\n    2  =============\n    3: ### Helper module for loading your native module's .node file\n    4  \n    5: This is a helper module for authors of Node.js native addon modules.\n    6: It is basically the \"swiss army knife\" of `require()`ing your native module's\n    7  `.node` file.\n    8  \n    9: Throughout the course of Node's native addon history, addons have ended up being\n   10: compiled in a variety of different places, depending on which build tool and which\n   11: version of node was used. To make matters worse, now the _gyp_ build tool can\n   12: produce either a _Release_ or _Debug_ build, each being built into different\n   13: locations.\n   14  \n   15: This module checks _all_ the possible locations that a native addon would be built\n   16: at, and returns the first one that loads successfully.\n   17  \n   18  \n   19: Installation\n   20  ------------\n   21  \n   22: Install with `npm`:\n   23  \n   24: ``` bash\n   25: $ npm install bindings\n   26  ```\n   27  \n   28: Or add it to the `\"dependencies\"` section of your _package.json_ file.\n   29  \n   30  \n   ..\n   32  -------\n   33  \n   34: `require()`ing the proper bindings file for the current node version, platform\n   35: and architecture is as simple as:\n   36  \n   37: ``` js\n   38: var bindings = require('bindings')('binding.node')\n   39  \n   40: // Use your bindings defined in your C files\n   41: bindings.your_c_function()\n   42  ```\n   43  \n   ..\n   46  -----------------\n   47  \n   48: When the `.node` file could not be loaded, `node-bindings` throws an Error with\n   49: a nice error message telling you exactly what was tried. You can also check the\n   50: `err.tries` Array property.\n   51  \n   52  ```\n   53: Error: Could not load the bindings file. Tried:\n   54:  → /Users/nrajlich/ref/build/binding.node\n   55:  → /Users/nrajlich/ref/build/Debug/binding.node\n   56:  → /Users/nrajlich/ref/build/Release/binding.node\n   57:  → /Users/nrajlich/ref/out/Debug/binding.node\n   58:  → /Users/nrajlich/ref/Debug/binding.node\n   59:  → /Users/nrajlich/ref/out/Release/binding.node\n   60:  → /Users/nrajlich/ref/Release/binding.node\n   61:  → /Users/nrajlich/ref/build/default/binding.node\n   62:  → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n   63:     at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n   64:     at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n   65:     at Module._compile (module.js:449:26)\n   66:     at Object.Module._extensions..js (module.js:467:10)\n   67:     at Module.load (module.js:356:32)\n   68:     at Function.Module._load (module.js:312:12)\n   69      ...\n   70  ```\n   71  \n   72  \n   73: License\n   74  -------\n   75  \n   76: (The MIT License)\n   77  \n   78  Copyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n   79  \n   80: Permission is hereby granted, free of charge, to any person obtaining\n   81: a copy of this software and associated documentation files (the\n   82: 'Software'), to deal in the Software without restriction, including\n   83: without limitation the rights to use, copy, modify, merge, publish,\n   84: distribute, sublicense, and/or sell copies of the Software, and to\n   85: permit persons to whom the Software is furnished to do so, subject to\n   86: the following conditions:\n   87  \n   88: The above copyright notice and this permission notice shall be\n   89: included in all copies or substantial portions of the Software.\n   90  \n   91: THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n   92: EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n   93: MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n   94: IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n   95: CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n   96: TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n   97: SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n   98  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bindings/bindings.js:\n    1  \n    2  /**\n    3:  * Module dependencies.\n    4   */\n    5  \n    6: var fs = require('fs')\n    7    , path = require('path')\n    8    , join = path.join\n    9    , dirname = path.dirname\n   10:   , exists = fs.existsSync || path.existsSync\n   11:   , defaults = {\n   12:         arrow: process.env.NODE_BINDINGS_ARROW || ' → '\n   13:       , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'\n   14:       , platform: process.platform\n   15:       , arch: process.arch\n   16:       , version: process.versions.node\n   17:       , bindings: 'bindings.node'\n   18        , try: [\n   19:           // node-gyp's linked version in the \"build\" dir\n   20:           [ 'module_root', 'build', 'bindings' ]\n   21            // node-waf and gyp_addon (a.k.a node-gyp)\n   22:         , [ 'module_root', 'build', 'Debug', 'bindings' ]\n   23:         , [ 'module_root', 'build', 'Release', 'bindings' ]\n   24:           // Debug files, for development (legacy behavior, remove for node v0.9)\n   25:         , [ 'module_root', 'out', 'Debug', 'bindings' ]\n   26:         , [ 'module_root', 'Debug', 'bindings' ]\n   27:           // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n   28:         , [ 'module_root', 'out', 'Release', 'bindings' ]\n   29:         , [ 'module_root', 'Release', 'bindings' ]\n   30            // Legacy from node-waf, node <= 0.4.x\n   31:         , [ 'module_root', 'build', 'default', 'bindings' ]\n   32:           // Production \"Release\" buildtype binary (meh...)\n   33:         , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]\n   34          ]\n   35      }\n   36  \n   37  /**\n   38:  * The main `bindings()` function loads the compiled bindings for a given module.\n   39:  * It uses V8's Error API to determine the parent filename that this function is\n   40:  * being invoked from, which is then used to find the root directory.\n   41   */\n   42  \n   43: function bindings (opts) {\n   44  \n   45:   // Argument surgery\n   46:   if (typeof opts == 'string') {\n   47:     opts = { bindings: opts }\n   48:   } else if (!opts) {\n   49:     opts = {}\n   50    }\n   51:   opts.__proto__ = defaults\n   52  \n   53    // Get the module root\n   54:   if (!opts.module_root) {\n   55:     opts.module_root = exports.getRoot(exports.getFileName())\n   56    }\n   57  \n   58:   // Ensure the given bindings name ends with .node\n   59:   if (path.extname(opts.bindings) != '.node') {\n   60:     opts.bindings += '.node'\n   61    }\n   62  \n   63:   var tries = []\n   64      , i = 0\n   65:     , l = opts.try.length\n   66      , n\n   67      , b\n   ..\n   69  \n   70    for (; i<l; i++) {\n   71:     n = join.apply(null, opts.try[i].map(function (p) {\n   72:       return opts[p] || p\n   73      }))\n   74:     tries.push(n)\n   75      try {\n   76:       b = opts.path ? require.resolve(n) : require(n)\n   77:       if (!opts.path) {\n   78          b.path = n\n   79        }\n   80        return b\n   81      } catch (e) {\n   82:       if (!/not find/i.test(e.message)) {\n   83          throw e\n   84        }\n   ..\n   86    }\n   87  \n   88:   err = new Error('Could not locate the bindings file. Tried:\\n'\n   89:     + tries.map(function (a) { return opts.arrow + a }).join('\\n'))\n   90:   err.tries = tries\n   91    throw err\n   92  }\n   93: module.exports = exports = bindings\n   94  \n   95  \n   96  /**\n   97:  * Gets the filename of the JavaScript file that invokes this function.\n   98:  * Used to help find the root directory of a module.\n   99:  * Optionally accepts an filename argument to skip when searching for the invoking filename\n  100   */\n  101  \n  102: exports.getFileName = function getFileName (calling_file) {\n  103:   var origPST = Error.prepareStackTrace\n  104:     , origSTL = Error.stackTraceLimit\n  105      , dummy = {}\n  106      , fileName\n  107  \n  108:   Error.stackTraceLimit = 10\n  109  \n  110:   Error.prepareStackTrace = function (e, st) {\n  111:     for (var i=0, l=st.length; i<l; i++) {\n  112:       fileName = st[i].getFileName()\n  113        if (fileName !== __filename) {\n  114          if (calling_file) {\n  ...\n  116                return\n  117              }\n  118:         } else {\n  119            return\n  120          }\n  ...\n  123    }\n  124  \n  125:   // run the 'prepareStackTrace' function above\n  126:   Error.captureStackTrace(dummy)\n  127:   dummy.stack\n  128  \n  129    // cleanup\n  130:   Error.prepareStackTrace = origPST\n  131:   Error.stackTraceLimit = origSTL\n  132  \n  133    return fileName\n  ...\n  135  \n  136  /**\n  137:  * Gets the root directory of a module, given an arbitrary filename\n  138:  * somewhere in the module tree. The \"root directory\" is the directory\n  139:  * containing the `package.json` file.\n  140   *\n  141:  *   In:  /home/nate/node-native-module/lib/index.js\n  142   *   Out: /home/nate/node-native-module\n  143   */\n  144  \n  145: exports.getRoot = function getRoot (file) {\n  146    var dir = dirname(file)\n  147      , prev\n  148    while (true) {\n  149      if (dir === '.') {\n  150:       // Avoids an infinite loop in rare cases, like the REPL\n  151:       dir = process.cwd()\n  152      }\n  153:     if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {\n  154:       // Found the 'package.json' file or 'node_modules' dir; we're done\n  155        return dir\n  156      }\n  ...\n  158        // Got to the top\n  159        throw new Error('Could not find module root given file: \"' + file\n  160:                     + '\". Do you have a `package.json` file? ')\n  161      }\n  162      // Try the parent dir next\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/bindings/package.json:\n    1  {\n    2:   \"_args\": [\n    3      [\n    4        {\n    5:         \"raw\": \"bindings@1.2.1\",\n    6:         \"scope\": null,\n    7:         \"escapedName\": \"bindings\",\n    8:         \"name\": \"bindings\",\n    9:         \"rawSpec\": \"1.2.1\",\n   10:         \"spec\": \"1.2.1\",\n   11:         \"type\": \"version\"\n   12        },\n   13:       \"/run/media/ted/DATA/WEB/ths_signup/node_modules/bcrypt\"\n   14      ]\n   15    ],\n   16:   \"_from\": \"bindings@1.2.1\",\n   17:   \"_id\": \"bindings@1.2.1\",\n   18    \"_inCache\": true,\n   19:   \"_location\": \"/bindings\",\n   20:   \"_npmUser\": {\n   21      \"name\": \"tootallnate\",\n   22      \"email\": \"nathan@tootallnate.net\"\n   23    },\n   24:   \"_npmVersion\": \"1.4.14\",\n   25    \"_phantomChildren\": {},\n   26:   \"_requested\": {\n   27:     \"raw\": \"bindings@1.2.1\",\n   28:     \"scope\": null,\n   29:     \"escapedName\": \"bindings\",\n   30:     \"name\": \"bindings\",\n   31:     \"rawSpec\": \"1.2.1\",\n   32:     \"spec\": \"1.2.1\",\n   33:     \"type\": \"version\"\n   34    },\n   35    \"_requiredBy\": [\n   36      \"/bcrypt\"\n   37    ],\n   38:   \"_resolved\": \"https://registry.npmjs.org/bindings/-/bindings-1.2.1.tgz\",\n   39:   \"_shasum\": \"14ad6113812d2d37d72e67b4cacb4bb726505f11\",\n   40:   \"_shrinkwrap\": null,\n   41:   \"_spec\": \"bindings@1.2.1\",\n   42:   \"_where\": \"/run/media/ted/DATA/WEB/ths_signup/node_modules/bcrypt\",\n   43    \"author\": {\n   44      \"name\": \"Nathan Rajlich\",\n   ..\n   46      \"url\": \"http://tootallnate.net\"\n   47    },\n   48:   \"bugs\": {\n   49:     \"url\": \"https://github.com/TooTallNate/node-bindings/issues\"\n   50    },\n   51:   \"dependencies\": {},\n   52:   \"description\": \"Helper module for loading your native module's .node file\",\n   53:   \"devDependencies\": {},\n   54:   \"directories\": {},\n   55:   \"dist\": {\n   56:     \"shasum\": \"14ad6113812d2d37d72e67b4cacb4bb726505f11\",\n   57:     \"tarball\": \"https://registry.npmjs.org/bindings/-/bindings-1.2.1.tgz\"\n   58    },\n   59    \"gitHead\": \"e404152ee27f8478ccbc7122ee051246e8e5ec02\",\n   60:   \"homepage\": \"https://github.com/TooTallNate/node-bindings\",\n   61:   \"keywords\": [\n   62      \"native\",\n   63      \"addon\",\n   64:     \"bindings\",\n   65      \"gyp\",\n   66      \"waf\",\n   ..\n   68      \"c++\"\n   69    ],\n   70:   \"license\": \"MIT\",\n   71:   \"main\": \"./bindings.js\",\n   72:   \"maintainers\": [\n   73      {\n   74        \"name\": \"TooTallNate\",\n   ..\n   80      }\n   81    ],\n   82:   \"name\": \"bindings\",\n   83:   \"optionalDependencies\": {},\n   84    \"readme\": \"ERROR: No README data found!\",\n   85:   \"repository\": {\n   86      \"type\": \"git\",\n   87:     \"url\": \"git://github.com/TooTallNate/node-bindings.git\"\n   88    },\n   89:   \"scripts\": {},\n   90:   \"version\": \"1.2.1\"\n   91  }\n   92  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/CHANGELOG.md:\n    1  # NAN ChangeLog\n    2  \n    3: **Version 2.3.5: current Node 6.2.0, Node 12: 0.12.14, Node 10: 0.10.45, iojs: 3.3.1**\n    4  \n    5  ### 2.3.5 May 31 2016\n    .\n    9  ### 2.3.4 May 31 2016\n   10  \n   11:   - Bugfix: Remove V8 deprecation warnings 0592fb0a47f3a1c7763087ebea8e1138829f24f9\n   12:   - Bugfix: Fix new versions not to use WeakCallbackInfo::IsFirstPass 615c19d9e03d4be2049c10db0151edbc3b229246\n   13:   - Bugfix: Make ObjectWrap::handle() const d19af99595587fe7a26bd850af6595c2a7145afc\n   14:   - Bugfix: Fix compilation errors related to 0592fb0a47f3a1c7763087ebea8e1138829f24f9 e9191c525b94f652718325e28610a1adcf90fed8\n   15  \n   16  ### 2.3.3 May 4 2016\n   17  \n   18:   - Bugfix: Refactor SetMethod() to deal with v8::Templates (#566) b9083cf6d5de6ebe6bcb49c7502fbb7c0d9ddda8\n   19  \n   20  ### 2.3.2 Apr 27 2016\n   21  \n   22:   - Bugfix: Fix compilation on outdated versions due to Handle removal f8b7c875d04d425a41dfd4f3f8345bc3a11e6c52\n   23  \n   24  ### 2.3.1 Apr 27 2016\n   25  \n   26:   - Bugfix: Don't use deprecated v8::Template::Set() in SetMethod a90951e9ea70fa1b3836af4b925322919159100e\n   27  \n   28  ### 2.3.0 Apr 27 2016\n   29  \n   30:   - Feature: added Signal() for invoking async callbacks without sending data from AsyncProgressWorker d8adba45f20e077d00561b20199133620c990b38\n   31:   - Bugfix: Don't use deprecated v8::Template::Set() 00dacf0a4b86027415867fa7f1059acc499dcece\n   32  \n   33  ### 2.2.1 Mar 29 2016\n   34  \n   35:   - Bugfix: Use NewFromUnsigned in ReturnValue<T>::Set(uint32_t i) for pre_12 3a18f9bdce29826e0e4c217854bc476918241a58\n   36:   - Performance: Remove unneeeded nullptr checks b715ef44887931c94f0d1605b3b1a4156eebece9\n   37  \n   38  ### 2.2.0 Jan 9 2016\n   ..\n   40    - Feature: Add Function::Call wrapper 4c157474dacf284d125c324177b45aa5dabc08c6\n   41    - Feature: Rename GC*logueCallback to GCCallback for > 4.0 3603435109f981606d300eb88004ca101283acec\n   42:   - Bugfix: Fix Global::Pass for old versions 367e82a60fbaa52716232cc89db1cc3f685d77d9\n   43:   - Bugfix: Remove weird MaybeLocal wrapping of what already is a MaybeLocal 23b4590db10c2ba66aee2338aebe9751c4cb190b\n   44  \n   45  ### 2.1.0 Oct 8 2015\n   46  \n   47    - Deprecation: Deprecate NanErrnoException in favor of ErrnoException 0af1ca4cf8b3f0f65ed31bc63a663ab3319da55c\n   48:   - Feature: added helper class for accessing contents of typedarrays 17b51294c801e534479d5463697a73462d0ca555\n   49:   - Feature: [Maybe types] Add MakeMaybe(...) 48d7b53d9702b0c7a060e69ea10fea8fb48d814d\n   50:   - Feature: new: allow utf16 string with length 66ac6e65c8ab9394ef588adfc59131b3b9d8347b\n   51:   - Feature: Introduce SetCallHandler and SetCallAsFunctionHandler 7764a9a115d60ba10dc24d86feb0fbc9b4f75537\n   52:   - Bugfix: Enable creating Locals from Globals under Node 0.10. 9bf9b8b190821af889790fdc18ace57257e4f9ff\n   53:   - Bugfix: Fix issue #462 where PropertyCallbackInfo data is not stored safely. 55f50adedd543098526c7b9f4fffd607d3f9861f\n   54  \n   55: ### 2.0.9 Sep 8 2015\n   56  \n   57:   - Bugfix: EscapableHandleScope in Nan::NewBuffer for Node 0.8 and 0.10 b1654d7\n   58  \n   59  ### 2.0.8 Aug 28 2015\n   ..\n   68  \n   69    - Bugfix: Properly handle null callback in FunctionTemplate factory 6e99cb1\n   70:   - Bugfix: Remove unused static std::map instances 525bddc\n   71:   - Bugfix: Make better use of maybe versions of APIs bfba85b\n   72:   - Bugfix: Fix shadowing issues with handle in ObjectWrap 0a9072d\n   73  \n   74  ### 2.0.5 Aug 10 2015\n   75  \n   76    - Bugfix: Reimplement weak callback in ObjectWrap 98d38c1\n   77:   - Bugfix: Make sure callback classes are not assignable, copyable or movable 81f9b1d\n   78  \n   79  ### 2.0.4 Aug 6 2015\n   ..\n   83  ### 2.0.3 Aug 6 2015\n   84  \n   85:   - Bugfix: Don't use clang++ / g++ syntax extension. 231450e\n   86  \n   87  ### 2.0.2 Aug 6 2015\n   ..\n   91  ### 2.0.1 Aug 6 2015\n   92  \n   93:   - Bugfix: Add workaround for missing REPLACE_INVALID_UTF8 60d6687\n   94:   - Bugfix: Reimplement ObjectWrap from scratch to prevent memory leaks 6484601\n   95:   - Bugfix: Fix Persistent leak in FunctionCallbackInfo and PropertyCallbackInfo 641ef5f\n   96:   - Bugfix: Add missing overload for Nan::NewInstance that takes argc/argv 29450ed\n   97  \n   98  ### 2.0.0 Jul 31 2015\n   99  \n  100:   - Change: Renamed identifiers with leading underscores\tb5932b4\n  101:   - Change: Replaced NanObjectWrapHandle with class NanObjectWrap\t464f1e1\n  102:   - Change: Replace NanScope and NanEscpableScope macros with classes\t47751c4\n  103    - Change: Rename NanNewBufferHandle to NanNewBuffer\t6745f99\n  104:   - Change: Rename NanBufferUse to NanNewBuffer\t3e8b0a5\n  105    - Change: Rename NanNewBuffer to NanCopyBuffer\td6af78d\n  106:   - Change: Remove Nan prefix from all names\t72d1f67\n  107:   - Change: Update Buffer API for new upstream changes\td5d3291\n  108:   - Change: Rename Scope and EscapableScope to HandleScope and EscapableHandleScope\t21a7a6a\n  109:   - Change: Get rid of Handles\t e6c0daf\n  110:   - Feature: Support io.js 3 with V8 4.4\n  111:   - Feature: Introduce NanPersistent\t7fed696\n  112    - Feature: Introduce NanGlobal\t4408da1\n  113    - Feature: Added NanTryCatch\t10f1ca4\n  114    - Feature: Update for V8 v4.3\t4b6404a\n  115:   - Feature: Introduce NanNewOneByteString\tc543d32\n  116:   - Feature: Introduce namespace Nan\t67ed1b1\n  117    - Removal: Remove NanLocker and NanUnlocker\tdd6e401\n  118:   - Removal: Remove string converters, except NanUtf8String, which now follows the node implementation b5d00a9\n  119:   - Removal: Remove NanReturn* macros\td90a25c\n  120:   - Removal: Remove HasInstance\te8f84fe\n  121  \n  122  \n  ...\n  124  \n  125    - Feature: Added `NanFatalException` 81d4a2c\n  126:   - Feature: Added more error types 4265f06\n  127:   - Feature: Added dereference and function call operators to NanCallback c4b2ed0\n  128:   - Feature: Added indexed GetFromPersistent and SaveToPersistent edd510c\n  129:   - Feature: Added more overloads of SaveToPersistent and GetFromPersistent 8b1cef6\n  130    - Feature: Added NanErrnoException dd87d9e\n  131:   - Correctness: Prevent assign, copy, and move for classes that do not support it 1f55c59, 4b808cb, c96d9b2, fba4a29, 3357130\n  132:   - Deprecation: Deprecate `NanGetPointerSafe` and `NanSetPointerSafe` 81d4a2c\n  133    - Deprecation: Deprecate `NanBooleanOptionValue` and `NanUInt32OptionValue` 0ad254b\n  134  \n  ...\n  139  ### 1.8.3 Apr 26 2015\n  140  \n  141:   - Bugfix: Include missing header 1af8648\n  142  \n  143  ### 1.8.2 Apr 23 2015\n  ...\n  147  ### 1.8.1 Apr 23 2015\n  148  \n  149:   - Bugfix: NanObjectWrapHandle should take a pointer 155f1d3\n  150  \n  151  ### 1.8.0 Apr 23 2015\n  152  \n  153:   - Feature: Allow primitives with NanReturnValue 2e4475e\n  154:   - Feature: Added comparison operators to NanCallback 55b075e\n  155:   - Feature: Backport thread local storage 15bb7fa\n  156:   - Removal: Remove support for signatures with arguments 8a2069d\n  157:   - Correcteness: Replaced NanObjectWrapHandle macro with function 0bc6d59\n  158  \n  159  ### 1.7.0 Feb 28 2015\n  160  \n  161    - Feature: Made NanCallback::Call accept optional target 8d54da7\n  162:   - Feature: Support atom-shell 0.21 0b7f1bb\n  163  \n  164  ### 1.6.2 Feb 6 2015\n  165  \n  166:   - Bugfix: NanEncode: fix argument type for node::Encode on io.js 2be8639\n  167  \n  168  ### 1.6.1 Jan 23 2015\n  169  \n  170:   - Build: version bump\n  171  \n  172  ### 1.5.3 Jan 23 2015\n  ...\n  177  \n  178   - Deprecated `NanNewContextHandle` in favor of `NanNew<Context>` 49259af\n  179:  - Support utility functions moved in newer v8 versions (Node 0.11.15, io.js 1.0) a0aa179\n  180:  - Added `NanEncode`, `NanDecodeBytes` and `NanDecodeWrite` 75e6fb9\n  181  \n  182  ### 1.5.2 Jan 23 2015\n  183  \n  184    - Bugfix: Fix non-inline definition build error with clang++ 21d96a1, 60fadd4\n  185:   - Bugfix: Readded missing String constructors 18d828f\n  186    - Bugfix: Add overload handling NanNew<FunctionTemplate>(..) 5ef813b\n  187:   - Bugfix: Fix uv_work_cb versioning 997e4ae\n  188:   - Bugfix: Add function factory and test 4eca89c\n  189:   - Bugfix: Add object template factory and test cdcb951\n  190:   - Correctness: Lifted an io.js related typedef c9490be\n  191:   - Correctness: Make explicit downcasts of String lengths 00074e6\n  192:   - Windows: Limit the scope of disabled warning C4530 83d7deb\n  193  \n  194  ### 1.5.1 Jan 15 2015\n  195  \n  196:   - Build: version bump\n  197  \n  198  ### 1.4.3 Jan 15 2015\n  199  \n  200:   - Build: version bump\n  201  \n  202  ### 1.4.2 Jan 15 2015\n  203  \n  204:   - Feature: Support io.js 0dbc5e8\n  205  \n  206  ### 1.5.0 Jan 14 2015\n  207  \n  208:  - Feature: Support io.js b003843\n  209:  - Correctness: Improved NanNew internals 9cd4f6a\n  210:  - Feature: Implement progress to NanAsyncWorker 8d6a160\n  211  \n  212  ### 1.4.1 Nov 8 2014\n  213  \n  214   - Bugfix: Handle DEBUG definition correctly\n  215:  - Bugfix: Accept int as Boolean\n  216  \n  217  ### 1.4.0 Nov 1 2014\n  218  \n  219   - Feature: Added NAN_GC_CALLBACK 6a5c245\n  220:  - Performance: Removed unnecessary local handle creation 18a7243, 41fe2f8\n  221:  - Correctness: Added constness to references in NanHasInstance 02c61cd\n  222:  - Warnings: Fixed spurious warnings from -Wundef and -Wshadow, 541b122, 99d8cb6\n  223:  - Windoze: Shut Visual Studio up when compiling 8d558c1\n  224:  - License: Switch to plain MIT from custom hacked MIT license 11de983\n  225:  - Build: Added test target to Makefile e232e46\n  226:  - Performance: Removed superfluous scope in NanAsyncWorker f4b7821\n  227:  - Sugar/Feature: Added NanReturnThis() and NanReturnHolder() shorthands 237a5ff, d697208\n  228:  - Feature: Added suitable overload of NanNew for v8::Integer::NewFromUnsigned b27b450\n  229  \n  230  ### 1.3.0 Aug 2 2014\n  231  \n  232:  - Added NanNew<v8::String, std::string>(std::string)\n  233:  - Added NanNew<v8::String, std::string&>(std::string&)\n  234:  - Added NanAsciiString helper class\n  235:  - Added NanUtf8String helper class\n  236:  - Added NanUcs2String helper class\n  237:  - Deprecated NanRawString()\n  238:  - Deprecated NanCString()\n  239:  - Added NanGetIsolateData(v8::Isolate *isolate)\n  240   - Added NanMakeCallback(v8::Handle<v8::Object> target, v8::Handle<v8::Function> func, int argc, v8::Handle<v8::Value>* argv)\n  241:  - Added NanMakeCallback(v8::Handle<v8::Object> target, v8::Handle<v8::String> symbol, int argc, v8::Handle<v8::Value>* argv)\n  242:  - Added NanMakeCallback(v8::Handle<v8::Object> target, const char* method, int argc, v8::Handle<v8::Value>* argv)\n  243:  - Added NanSetTemplate(v8::Handle<v8::Template> templ, v8::Handle<v8::String> name , v8::Handle<v8::Data> value, v8::PropertyAttribute attributes)\n  244:  - Added NanSetPrototypeTemplate(v8::Local<v8::FunctionTemplate> templ, v8::Handle<v8::String> name, v8::Handle<v8::Data> value, v8::PropertyAttribute attributes)\n  245:  - Added NanSetInstanceTemplate(v8::Local<v8::FunctionTemplate> templ, const char *name, v8::Handle<v8::Data> value)\n  246:  - Added NanSetInstanceTemplate(v8::Local<v8::FunctionTemplate> templ, v8::Handle<v8::String> name, v8::Handle<v8::Data> value, v8::PropertyAttribute attributes)\n  247  \n  248  ### 1.2.0 Jun 5 2014\n  249  \n  250:  - Add NanSetPrototypeTemplate\n  251:  - Changed NAN_WEAK_CALLBACK internals, switched _NanWeakCallbackData to class,\n  252:      introduced _NanWeakCallbackDispatcher\n  253:  - Removed -Wno-unused-local-typedefs from test builds\n  254:  - Made test builds Windows compatible ('Sleep()')\n  255  \n  256  ### 1.1.2 May 28 2014\n  257  \n  258:  - Release to fix more stuff-ups in 1.1.1\n  259  \n  260  ### 1.1.1 May 28 2014\n  261  \n  262:  - Release to fix version mismatch in nan.h and lack of changelog entry for 1.1.0\n  263  \n  264  ### 1.1.0 May 25 2014\n  265  \n  266:  - Remove nan_isolate, use v8::Isolate::GetCurrent() internally instead\n  267:  - Additional explicit overloads for NanNew(): (char*,int), (uint8_t*[,int]),\n  268:      (uint16_t*[,int), double, int, unsigned int, bool, v8::String::ExternalStringResource*,\n  269:      v8::String::ExternalAsciiStringResource*\n  270:  - Deprecate NanSymbol()\n  271:  - Added SetErrorMessage() and ErrorMessage() to NanAsyncWorker\n  272  \n  273  ### 1.0.0 May 4 2014\n  274  \n  275:  - Heavy API changes for V8 3.25 / Node 0.11.13\n  276:  - Use cpplint.py\n  277:  - Removed NanInitPersistent\n  278:  - Removed NanPersistentToLocal\n  279:  - Removed NanFromV8String\n  280   - Removed NanMakeWeak\n  281   - Removed NanNewLocal\n  282   - Removed NAN_WEAK_CALLBACK_OBJECT\n  283   - Removed NAN_WEAK_CALLBACK_DATA\n  284:  - Introduce NanNew, replaces NanNewLocal, NanPersistentToLocal, adds many overloaded typed versions\n  285:  - Introduce NanUndefined, NanNull, NanTrue and NanFalse\n  286:  - Introduce NanEscapableScope and NanEscapeScope\n  287:  - Introduce NanMakeWeakPersistent (requires a special callback to work on both old and new node)\n  288   - Introduce NanMakeCallback for node::MakeCallback\n  289:  - Introduce NanSetTemplate\n  290   - Introduce NanGetCurrentContext\n  291:  - Introduce NanCompileScript and NanRunScript\n  292:  - Introduce NanAdjustExternalMemory\n  293   - Introduce NanAddGCEpilogueCallback, NanAddGCPrologueCallback, NanRemoveGCEpilogueCallback, NanRemoveGCPrologueCallback\n  294:  - Introduce NanGetHeapStatistics\n  295:  - Rename NanAsyncWorker#SavePersistent() to SaveToPersistent()\n  296  \n  297  ### 0.8.0 Jan 9 2014\n  298  \n  299:  - NanDispose -> NanDisposePersistent, deprecate NanDispose\n  300   - Extract _NAN_*_RETURN_TYPE, pull up NAN_*()\n  301  \n  302  ### 0.7.1 Jan 9 2014\n  303  \n  304:  - Fixes to work against debug builds of Node\n  305:  - Safer NanPersistentToLocal (avoid reinterpret_cast)\n  306:  - Speed up common NanRawString case by only extracting flattened string when necessary\n  307  \n  308  ### 0.7.0 Dec 17 2013\n  309  \n  310:  - New no-arg form of NanCallback() constructor.\n  311:  - NanCallback#Call takes Handle rather than Local\n  312:  - Removed deprecated NanCallback#Run method, use NanCallback#Call instead\n  313:  - Split off _NAN_*_ARGS_TYPE from _NAN_*_ARGS\n  314:  - Restore (unofficial) Node 0.6 compatibility at NanCallback#Call()\n  315:  - Introduce NanRawString() for char* (or appropriate void*) from v8::String\n  316:      (replacement for NanFromV8String)\n  317:  - Introduce NanCString() for null-terminated char* from v8::String\n  318  \n  319  ### 0.6.0 Nov 21 2013\n  320  \n  321:  - Introduce NanNewLocal<T>(v8::Handle<T> value) for use in place of\n  322:      v8::Local<T>::New(...) since v8 started requiring isolate in Node 0.11.9\n  323  \n  324  ### 0.5.2 Nov 16 2013\n  325  \n  326:  - Convert SavePersistent and GetFromPersistent in NanAsyncWorker from protected and public\n  327  \n  328  ### 0.5.1 Nov 12 2013\n  329  \n  330:  - Use node::MakeCallback() instead of direct v8::Function::Call()\n  331  \n  332  ### 0.5.0 Nov 11 2013\n  333  \n  334:  - Added @TooTallNate as collaborator\n  335:  - New, much simpler, \"include_dirs\" for binding.gyp\n  336:  - Added full range of NAN_INDEX_* macros to match NAN_PROPERTY_* macros\n  337  \n  338  ### 0.4.4 Nov 2 2013\n  339  \n  340:  - Isolate argument from v8::Persistent::MakeWeak removed for 0.11.8+\n  341  \n  342  ### 0.4.3 Nov 2 2013\n  ...\n  346  ### 0.4.2 Nov 2 2013\n  347  \n  348:  - Handle deprecation of v8::Persistent::Dispose(v8::Isolate* isolate)) for\n  349:      Node 0.11.8 release.\n  350  \n  351: ### 0.4.1 Sep 16 2013\n  352  \n  353:  - Added explicit `#include <uv.h>` as it was removed from node.h for v0.11.8\n  354  \n  355: ### 0.4.0 Sep 2 2013\n  356  \n  357:  - Added NAN_INLINE and NAN_DEPRECATED and made use of them\n  358   - Added NanError, NanTypeError and NanRangeError\n  359   - Cleaned up code\n  ...\n  361  ### 0.3.2 Aug 30 2013\n  362  \n  363:  - Fix missing scope declaration in GetFromPersistent() and SaveToPersistent\n  364:      in NanAsyncWorker\n  365  \n  366  ### 0.3.1 Aug 20 2013\n  367  \n  368:  - fix \"not all control paths return a value\" compile warning on some platforms\n  369  \n  370  ### 0.3.0 Aug 19 2013\n  371  \n  372   - Made NAN work with NPM\n  373:  - Lots of fixes to NanFromV8String, pulling in features from new Node core\n  374:  - Changed node::encoding to Nan::Encoding in NanFromV8String to unify the API\n  375   - Added optional error number argument for NanThrowError()\n  376:  - Added NanInitPersistent()\n  377:  - Added NanReturnNull() and NanReturnEmptyString()\n  378   - Added NanLocker and NanUnlocker\n  379:  - Added missing scopes\n  380:  - Made sure to clear disposed Persistent handles\n  381:  - Changed NanAsyncWorker to allocate error messages on the heap\n  382   - Changed NanThrowError(Local<Value>) to NanThrowError(Handle<Value>)\n  383:  - Fixed leak in NanAsyncWorker when errmsg is used\n  384  \n  385  ### 0.2.2 Aug 5 2013\n  386  \n  387:  - Fixed usage of undefined variable with node::BASE64 in NanFromV8String()\n  388  \n  389  ### 0.2.1 Aug 5 2013\n  390  \n  391   - Fixed 0.8 breakage, node::BUFFER encoding type not available in 0.8 for\n  392:      NanFromV8String()\n  393  \n  394  ### 0.2.0 Aug 5 2013\n  395  \n  396:  - Added NAN_PROPERTY_GETTER, NAN_PROPERTY_SETTER, NAN_PROPERTY_ENUMERATOR,\n  397       NAN_PROPERTY_DELETER, NAN_PROPERTY_QUERY\n  398:  - Extracted _NAN_METHOD_ARGS, _NAN_GETTER_ARGS, _NAN_SETTER_ARGS,\n  399:      _NAN_PROPERTY_GETTER_ARGS, _NAN_PROPERTY_SETTER_ARGS,\n  400:      _NAN_PROPERTY_ENUMERATOR_ARGS, _NAN_PROPERTY_DELETER_ARGS,\n  401:      _NAN_PROPERTY_QUERY_ARGS\n  402:  - Added NanGetInternalFieldPointer, NanSetInternalFieldPointer\n  403   - Added NAN_WEAK_CALLBACK, NAN_WEAK_CALLBACK_OBJECT,\n  404       NAN_WEAK_CALLBACK_DATA, NanMakeWeak\n  405   - Renamed THROW_ERROR to _NAN_THROW_ERROR\n  406:  - Added NanNewBufferHandle(char*, size_t, node::smalloc::FreeCallback, void*)\n  407:  - Added NanBufferUse(char*, uint32_t)\n  408:  - Added NanNewContextHandle(v8::ExtensionConfiguration*,\n  409         v8::Handle<v8::ObjectTemplate>, v8::Handle<v8::Value>)\n  410   - Fixed broken NanCallback#GetFunction()\n  411:  - Added optional encoding and size arguments to NanFromV8String()\n  412:  - Added NanGetPointerSafe() and NanSetPointerSafe()\n  413:  - Added initial test suite (to be expanded)\n  414   - Allow NanUInt32OptionValue to convert any Number object\n  415  \n  416  ### 0.1.0 Jul 21 2013\n  417  \n  418:  - Added `NAN_GETTER`, `NAN_SETTER`\n  419:  - Added `NanThrowError` with single Local<Value> argument\n  420:  - Added `NanNewBufferHandle` with single uint32_t argument\n  421:  - Added `NanHasInstance(Persistent<FunctionTemplate>&, Handle<Value>)`\n  422   - Added `Local<Function> NanCallback#GetFunction()`\n  423   - Added `NanCallback#Call(int, Local<Value>[])`\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/LICENSE.md:\n    1: The MIT License (MIT)\n    2  =====================\n    3  \n    4: Copyright (c) 2016 NAN contributors\n    5  -----------------------------------\n    6  \n    7: *NAN contributors listed at <https://github.com/nodejs/nan#contributors>*\n    8  \n    9: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n   10  \n   11: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n   12  \n   13: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n   14  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/README.md:\n    1: Native Abstractions for Node.js\n    2  ===============================\n    3  \n    4: **A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10, 0.12, 1, 4, 5 and 6.**\n    5  \n    6: ***Current version: 2.3.5***\n    7  \n    8: *(See [CHANGELOG.md](https://github.com/nodejs/nan/blob/master/CHANGELOG.md) for complete ChangeLog)*\n    9  \n   10: [![NPM](https://nodei.co/npm/nan.png?downloads=true&downloadRank=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6&height=3)](https://nodei.co/npm/nan/)\n   11  \n   12: [![Build Status](https://api.travis-ci.org/nodejs/nan.svg?branch=master)](http://travis-ci.org/nodejs/nan)\n   13: [![Build status](https://ci.appveyor.com/api/projects/status/kh73pbm9dsju7fgh)](https://ci.appveyor.com/project/RodVagg/nan)\n   14  \n   15: Thanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.12 to 4.0, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n   16  \n   17: This project also contains some helper utilities that make addon development a bit more pleasant.\n   18  \n   19:  * **[News & Updates](#news)**\n   20:  * **[Usage](#usage)**\n   21   * **[Example](#example)**\n   22   * **[API](#api)**\n   23:  * **[Tests](#tests)**\n   24   * **[Governance & Contributing](#governance)**\n   25  \n   26: <a name=\"news\"></a>\n   27: ## News & Updates\n   28  \n   29: <a name=\"usage\"></a>\n   30: ## Usage\n   31  \n   32: Simply add **NAN** as a dependency in the *package.json* of your Node addon:\n   33  \n   34: ``` bash\n   35: $ npm install --save nan\n   36  ```\n   37  \n   38: Pull in the path to **NAN** in your *binding.gyp* so that you can use `#include <nan.h>` in your *.cpp* files:\n   39  \n   40  ``` python\n   41: \"include_dirs\" : [\n   42      \"<!(node -e \\\"require('nan')\\\")\"\n   43  ]\n   44  ```\n   45  \n   46: This works like a `-I<path-to-NAN>` when compiling your addon.\n   47  \n   48  <a name=\"example\"></a>\n   49  ## Example\n   50  \n   51: Just getting started with Nan? Take a look at the **[Node Add-on Examples](https://github.com/nodejs/node-addon-examples)**.\n   52  \n   53: Refer to a [quick-start **Nan** Boilerplate](https://github.com/fcanas/node-native-boilerplate) for a ready-to-go project that utilizes basic Nan functionality.\n   54  \n   55: For a simpler example, see the **[async pi estimation example](https://github.com/nodejs/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n   56  \n   57: Yet another example is **[nan-example-eol](https://github.com/CodeCharmLtd/nan-example-eol)**. It shows newline detection implemented as a native addon.\n   58  \n   59: Also take a look at our comprehensive **[C++ test suite](https://github.com/nodejs/nan/tree/master/test/cpp)** which has a plehora of code snippets for your pasting pleasure.\n   60  \n   61  <a name=\"api\"></a>\n   62  ## API\n   63  \n   64: Additional to the NAN documentation below, please consult:\n   65  \n   66: * [The V8 Getting Started Guide](https://developers.google.com/v8/get_started)\n   67: * [The V8 Embedders Guide](https://developers.google.com/v8/embed)\n   68: * [V8 API Documentation](http://v8docs.nodesource.com/)\n   69: * [Node Add-on Documentation](https://nodejs.org/api/addons.html)\n   70  \n   71: <!-- START API -->\n   72  \n   73: ### JavaScript-accessible methods\n   74  \n   75: A _template_ is a blueprint for JavaScript functions and objects in a context. You can use a template to wrap C++ functions and data structures within JavaScript objects so that they can be manipulated from JavaScript. See the V8 Embedders Guide section on [Templates](https://developers.google.com/v8/embed#templates) for further information.\n   76  \n   77: In order to expose functionality to JavaScript via a template, you must provide it to V8 in a form that it understands. Across the versions of V8 supported by NAN, JavaScript-accessible method signatures vary widely, NAN fully abstracts method declaration and provides you with an interface that is similar to the most recent V8 API but is backward-compatible with older versions that still use the now-deceased `v8::Argument` type.\n   78  \n   79: * **Method argument types**\n   80:  - <a href=\"doc/methods.md#api_nan_function_callback_info\"><b><code>Nan::FunctionCallbackInfo</code></b></a>\n   81:  - <a href=\"doc/methods.md#api_nan_property_callback_info\"><b><code>Nan::PropertyCallbackInfo</code></b></a>\n   82:  - <a href=\"doc/methods.md#api_nan_return_value\"><b><code>Nan::ReturnValue</code></b></a>\n   83: * **Method declarations**\n   84:  - <a href=\"doc/methods.md#api_nan_method\"><b>Method declaration</b></a>\n   85:  - <a href=\"doc/methods.md#api_nan_getter\"><b>Getter declaration</b></a>\n   86:  - <a href=\"doc/methods.md#api_nan_setter\"><b>Setter declaration</b></a>\n   87:  - <a href=\"doc/methods.md#api_nan_property_getter\"><b>Property getter declaration</b></a>\n   88:  - <a href=\"doc/methods.md#api_nan_property_setter\"><b>Property setter declaration</b></a>\n   89:  - <a href=\"doc/methods.md#api_nan_property_enumerator\"><b>Property enumerator declaration</b></a>\n   90:  - <a href=\"doc/methods.md#api_nan_property_deleter\"><b>Property deleter declaration</b></a>\n   91:  - <a href=\"doc/methods.md#api_nan_property_query\"><b>Property query declaration</b></a>\n   92:  - <a href=\"doc/methods.md#api_nan_index_getter\"><b>Index getter declaration</b></a>\n   93:  - <a href=\"doc/methods.md#api_nan_index_setter\"><b>Index setter declaration</b></a>\n   94:  - <a href=\"doc/methods.md#api_nan_index_enumerator\"><b>Index enumerator declaration</b></a>\n   95:  - <a href=\"doc/methods.md#api_nan_index_deleter\"><b>Index deleter declaration</b></a>\n   96:  - <a href=\"doc/methods.md#api_nan_index_query\"><b>Index query declaration</b></a>\n   97: * Method and template helpers\n   98:  - <a href=\"doc/methods.md#api_nan_set_method\"><b><code>Nan::SetMethod()</code></b></a>\n   99:  - <a href=\"doc/methods.md#api_nan_set_prototype_method\"><b><code>Nan::SetPrototypeMethod()</code></b></a>\n  100:  - <a href=\"doc/methods.md#api_nan_set_accessor\"><b><code>Nan::SetAccessor()</code></b></a>\n  101:  - <a href=\"doc/methods.md#api_nan_set_named_property_handler\"><b><code>Nan::SetNamedPropertyHandler()</code></b></a>\n  102:  - <a href=\"doc/methods.md#api_nan_set_indexed_property_handler\"><b><code>Nan::SetIndexedPropertyHandler()</code></b></a>\n  103:  - <a href=\"doc/methods.md#api_nan_set_template\"><b><code>Nan::SetTemplate()</code></b></a>\n  104:  - <a href=\"doc/methods.md#api_nan_set_prototype_template\"><b><code>Nan::SetPrototypeTemplate()</code></b></a>\n  105:  - <a href=\"doc/methods.md#api_nan_set_instance_template\"><b><code>Nan::SetInstanceTemplate()</code></b></a>\n  106:  - <a href=\"doc/methods.md#api_nan_set_call_handler\"><b><code>Nan::SetCallHandler()</code></b></a>\n  107:  - <a href=\"doc/methods.md#api_nan_set_call_as_function_handler\"><b><code>Nan::SetCallAsFunctionHandler()</code></b></a>\n  108  \n  109: ### Scopes\n  110  \n  111: A _local handle_ is a pointer to an object. All V8 objects are accessed using handles, they are necessary because of the way the V8 garbage collector works.\n  112  \n  113: A handle scope can be thought of as a container for any number of handles. When you've finished with your handles, instead of deleting each one individually you can simply delete their scope.\n  114  \n  115: The creation of `HandleScope` objects is different across the supported versions of V8. Therefore, NAN provides its own implementations that can be used safely across these.\n  116  \n  117:  - <a href=\"doc/scopes.md#api_nan_handle_scope\"><b><code>Nan::HandleScope</code></b></a>\n  118:  - <a href=\"doc/scopes.md#api_nan_escapable_handle_scope\"><b><code>Nan::EscapableHandleScope</code></b></a>\n  119  \n  120: Also see the V8 Embedders Guide section on [Handles and Garbage Collection](https://developers.google.com/v8/embed#handles).\n  121  \n  122: ### Persistent references\n  123  \n  124: An object reference that is independent of any `HandleScope` is a _persistent_ reference. Where a `Local` handle only lives as long as the `HandleScope` in which it was allocated, a `Persistent` handle remains valid until it is explicitly disposed.\n  125  \n  126: Due to the evolution of the V8 API, it is necessary for NAN to provide a wrapper implementation of the `Persistent` classes to supply compatibility across the V8 versions supported.\n  127  \n  128:  - <a href=\"doc/persistent.md#api_nan_persistent_base\"><b><code>Nan::PersistentBase & v8::PersistentBase</code></b></a>\n  129:  - <a href=\"doc/persistent.md#api_nan_non_copyable_persistent_traits\"><b><code>Nan::NonCopyablePersistentTraits & v8::NonCopyablePersistentTraits</code></b></a>\n  130:  - <a href=\"doc/persistent.md#api_nan_copyable_persistent_traits\"><b><code>Nan::CopyablePersistentTraits & v8::CopyablePersistentTraits</code></b></a>\n  131:  - <a href=\"doc/persistent.md#api_nan_persistent\"><b><code>Nan::Persistent</code></b></a>\n  132:  - <a href=\"doc/persistent.md#api_nan_global\"><b><code>Nan::Global</code></b></a>\n  133:  - <a href=\"doc/persistent.md#api_nan_weak_callback_info\"><b><code>Nan::WeakCallbackInfo</code></b></a>\n  134:  - <a href=\"doc/persistent.md#api_nan_weak_callback_type\"><b><code>Nan::WeakCallbackType</code></b></a>\n  135  \n  136: Also see the V8 Embedders Guide section on [Handles and Garbage Collection](https://developers.google.com/v8/embed#handles).\n  137  \n  138  ### New\n  139  \n  140: NAN provides a `Nan::New()` helper for the creation of new JavaScript objects in a way that's compatible across the supported versions of V8.\n  141  \n  142   - <a href=\"doc/new.md#api_nan_new\"><b><code>Nan::New()</code></b></a>\n  ...\n  144   - <a href=\"doc/new.md#api_nan_null\"><b><code>Nan::Null()</code></b></a>\n  145   - <a href=\"doc/new.md#api_nan_true\"><b><code>Nan::True()</code></b></a>\n  146:  - <a href=\"doc/new.md#api_nan_false\"><b><code>Nan::False()</code></b></a>\n  147:  - <a href=\"doc/new.md#api_nan_empty_string\"><b><code>Nan::EmptyString()</code></b></a>\n  148  \n  149  \n  150: ### Converters\n  151  \n  152: NAN contains functions that convert `v8::Value`s to other `v8::Value` types and native types. Since type conversion is not guaranteed to succeed, they return `Nan::Maybe` types. These converters can be used in place of `value->ToX()` and `value->XValue()` (where `X` is one of the types, e.g. `Boolean`) in a way that provides a consistent interface across V8 versions. Newer versions of V8 use the new `v8::Maybe` and `v8::MaybeLocal` types for these conversions, older versions don't have this functionality so it is provided by NAN.\n  153  \n  154:  - <a href=\"doc/converters.md#api_nan_to\"><b><code>Nan::To()</code></b></a>\n  155  \n  156: ### Maybe Types\n  157  \n  158: The `Nan::MaybeLocal` and `Nan::Maybe` types are monads that encapsulate `v8::Local` handles that _may be empty_.\n  159  \n  160: * **Maybe Types**\n  161:   - <a href=\"doc/maybe_types.md#api_nan_maybe_local\"><b><code>Nan::MaybeLocal</code></b></a>\n  162:   - <a href=\"doc/maybe_types.md#api_nan_maybe\"><b><code>Nan::Maybe</code></b></a>\n  163:   - <a href=\"doc/maybe_types.md#api_nan_nothing\"><b><code>Nan::Nothing</code></b></a>\n  164:   - <a href=\"doc/maybe_types.md#api_nan_just\"><b><code>Nan::Just</code></b></a>\n  165: * **Maybe Helpers**\n  166:   - <a href=\"doc/maybe_types.md#api_nan_call\"><b><code>Nan::Call()</code></b></a>\n  167:   - <a href=\"doc/maybe_types.md#api_nan_to_detail_string\"><b><code>Nan::ToDetailString()</code></b></a>\n  168:   - <a href=\"doc/maybe_types.md#api_nan_to_array_index\"><b><code>Nan::ToArrayIndex()</code></b></a>\n  169:   - <a href=\"doc/maybe_types.md#api_nan_equals\"><b><code>Nan::Equals()</code></b></a>\n  170:   - <a href=\"doc/maybe_types.md#api_nan_new_instance\"><b><code>Nan::NewInstance()</code></b></a>\n  171:   - <a href=\"doc/maybe_types.md#api_nan_get_function\"><b><code>Nan::GetFunction()</code></b></a>\n  172:   - <a href=\"doc/maybe_types.md#api_nan_set\"><b><code>Nan::Set()</code></b></a>\n  173:   - <a href=\"doc/maybe_types.md#api_nan_force_set\"><b><code>Nan::ForceSet()</code></b></a>\n  174:   - <a href=\"doc/maybe_types.md#api_nan_get\"><b><code>Nan::Get()</code></b></a>\n  175:   - <a href=\"doc/maybe_types.md#api_nan_get_property_attribute\"><b><code>Nan::GetPropertyAttributes()</code></b></a>\n  176:   - <a href=\"doc/maybe_types.md#api_nan_has\"><b><code>Nan::Has()</code></b></a>\n  177:   - <a href=\"doc/maybe_types.md#api_nan_delete\"><b><code>Nan::Delete()</code></b></a>\n  178:   - <a href=\"doc/maybe_types.md#api_nan_get_property_names\"><b><code>Nan::GetPropertyNames()</code></b></a>\n  179:   - <a href=\"doc/maybe_types.md#api_nan_get_own_property_names\"><b><code>Nan::GetOwnPropertyNames()</code></b></a>\n  180:   - <a href=\"doc/maybe_types.md#api_nan_set_prototype\"><b><code>Nan::SetPrototype()</code></b></a>\n  181:   - <a href=\"doc/maybe_types.md#api_nan_object_proto_to_string\"><b><code>Nan::ObjectProtoToString()</code></b></a>\n  182:   - <a href=\"doc/maybe_types.md#api_nan_has_own_property\"><b><code>Nan::HasOwnProperty()</code></b></a>\n  183:   - <a href=\"doc/maybe_types.md#api_nan_has_real_named_property\"><b><code>Nan::HasRealNamedProperty()</code></b></a>\n  184:   - <a href=\"doc/maybe_types.md#api_nan_has_real_indexed_property\"><b><code>Nan::HasRealIndexedProperty()</code></b></a>\n  185:   - <a href=\"doc/maybe_types.md#api_nan_has_real_named_callback_property\"><b><code>Nan::HasRealNamedCallbackProperty()</code></b></a>\n  186:   - <a href=\"doc/maybe_types.md#api_nan_get_real_named_property_in_prototype_chain\"><b><code>Nan::GetRealNamedPropertyInPrototypeChain()</code></b></a>\n  187:   - <a href=\"doc/maybe_types.md#api_nan_get_real_named_property\"><b><code>Nan::GetRealNamedProperty()</code></b></a>\n  188:   - <a href=\"doc/maybe_types.md#api_nan_call_as_function\"><b><code>Nan::CallAsFunction()</code></b></a>\n  189:   - <a href=\"doc/maybe_types.md#api_nan_call_as_constructor\"><b><code>Nan::CallAsConstructor()</code></b></a>\n  190:   - <a href=\"doc/maybe_types.md#api_nan_get_source_line\"><b><code>Nan::GetSourceLine()</code></b></a>\n  191:   - <a href=\"doc/maybe_types.md#api_nan_get_line_number\"><b><code>Nan::GetLineNumber()</code></b></a>\n  192:   - <a href=\"doc/maybe_types.md#api_nan_get_start_column\"><b><code>Nan::GetStartColumn()</code></b></a>\n  193:   - <a href=\"doc/maybe_types.md#api_nan_get_end_column\"><b><code>Nan::GetEndColumn()</code></b></a>\n  194:   - <a href=\"doc/maybe_types.md#api_nan_clone_element_at\"><b><code>Nan::CloneElementAt()</code></b></a>\n  195:   - <a href=\"doc/maybe_types.md#api_nan_make_maybe\"><b><code>Nan::MakeMaybe()</code></b></a>\n  196  \n  197: ### Script\n  198  \n  199: NAN provides a `v8::Script` helpers as the API has changed over the supported versions of V8.\n  200  \n  201:  - <a href=\"doc/script.md#api_nan_compile_script\"><b><code>Nan::CompileScript()</code></b></a>\n  202:  - <a href=\"doc/script.md#api_nan_run_script\"><b><code>Nan::RunScript()</code></b></a>\n  203  \n  204  \n  205: ### Errors\n  206  \n  207: NAN includes helpers for creating, throwing and catching Errors as much of this functionality varies across the supported versions of V8 and must be abstracted.\n  208  \n  209: Note that an Error object is simply a specialized form of `v8::Value`.\n  210  \n  211: Also consult the V8 Embedders Guide section on [Exceptions](https://developers.google.com/v8/embed#exceptions) for more information.\n  212  \n  213:  - <a href=\"doc/errors.md#api_nan_error\"><b><code>Nan::Error()</code></b></a>\n  214:  - <a href=\"doc/errors.md#api_nan_range_error\"><b><code>Nan::RangeError()</code></b></a>\n  215:  - <a href=\"doc/errors.md#api_nan_reference_error\"><b><code>Nan::ReferenceError()</code></b></a>\n  216:  - <a href=\"doc/errors.md#api_nan_syntax_error\"><b><code>Nan::SyntaxError()</code></b></a>\n  217:  - <a href=\"doc/errors.md#api_nan_type_error\"><b><code>Nan::TypeError()</code></b></a>\n  218:  - <a href=\"doc/errors.md#api_nan_throw_error\"><b><code>Nan::ThrowError()</code></b></a>\n  219:  - <a href=\"doc/errors.md#api_nan_throw_range_error\"><b><code>Nan::ThrowRangeError()</code></b></a>\n  220:  - <a href=\"doc/errors.md#api_nan_throw_reference_error\"><b><code>Nan::ThrowReferenceError()</code></b></a>\n  221:  - <a href=\"doc/errors.md#api_nan_throw_syntax_error\"><b><code>Nan::ThrowSyntaxError()</code></b></a>\n  222:  - <a href=\"doc/errors.md#api_nan_throw_type_error\"><b><code>Nan::ThrowTypeError()</code></b></a>\n  223:  - <a href=\"doc/errors.md#api_nan_fatal_exception\"><b><code>Nan::FatalException()</code></b></a>\n  224:  - <a href=\"doc/errors.md#api_nan_errno_exception\"><b><code>Nan::ErrnoException()</code></b></a>\n  225:  - <a href=\"doc/errors.md#api_nan_try_catch\"><b><code>Nan::TryCatch</code></b></a>\n  226  \n  227  \n  228: ### Buffers\n  229  \n  230: NAN's `node::Buffer` helpers exist as the API has changed across supported Node versions. Use these methods to ensure compatibility.\n  231  \n  232:  - <a href=\"doc/buffers.md#api_nan_new_buffer\"><b><code>Nan::NewBuffer()</code></b></a>\n  233:  - <a href=\"doc/buffers.md#api_nan_copy_buffer\"><b><code>Nan::CopyBuffer()</code></b></a>\n  234:  - <a href=\"doc/buffers.md#api_nan_free_callback\"><b><code>Nan::FreeCallback()</code></b></a>\n  235  \n  236  ### Nan::Callback\n  237  \n  238: `Nan::Callback` makes it easier to use `v8::Function` handles as callbacks. A class that wraps a `v8::Function` handle, protecting it from garbage collection and making it particularly useful for storage and use across asynchronous execution.\n  239  \n  240   - <a href=\"doc/callback.md#api_nan_callback\"><b><code>Nan::Callback</code></b></a>\n  241  \n  242: ### Asynchronous work helpers\n  243  \n  244: `Nan::AsyncWorker` and `Nan::AsyncProgressWorker` are helper classes that make working with asynchronous code easier.\n  245  \n  246:  - <a href=\"doc/asyncworker.md#api_nan_async_worker\"><b><code>Nan::AsyncWorker</code></b></a>\n  247:  - <a href=\"doc/asyncworker.md#api_nan_async_progress_worker\"><b><code>Nan::AsyncProgressWorker</code></b></a>\n  248:  - <a href=\"doc/asyncworker.md#api_nan_async_queue_worker\"><b><code>Nan::AsyncQueueWorker</code></b></a>\n  249  \n  250: ### Strings & Bytes\n  251  \n  252: Miscellaneous string & byte encoding and decoding functionality provided for compatibility across supported versions of V8 and Node. Implemented by NAN to ensure that all encoding types are supported, even for older versions of Node where they are missing.\n  253  \n  254:  - <a href=\"doc/string_bytes.md#api_nan_encoding\"><b><code>Nan::Encoding</code></b></a>\n  255:  - <a href=\"doc/string_bytes.md#api_nan_encode\"><b><code>Nan::Encode()</code></b></a>\n  256:  - <a href=\"doc/string_bytes.md#api_nan_decode_bytes\"><b><code>Nan::DecodeBytes()</code></b></a>\n  257:  - <a href=\"doc/string_bytes.md#api_nan_decode_write\"><b><code>Nan::DecodeWrite()</code></b></a>\n  258  \n  259  \n  260: ### Object Wrappers\n  261  \n  262: The `ObjectWrap` class can be used to make wrapped C++ objects and a factory of wrapped objects.\n  263  \n  264:  - <a href=\"doc/object_wrappers.md#api_nan_object_wrap\"><b><code>Nan::ObjectWrap</code></b></a>\n  265  \n  266  \n  267: ### V8 internals\n  268  \n  269: The hooks to access V8 internals—including GC and statistics—are different across the supported versions of V8, therefore NAN provides its own hooks that call the appropriate V8 methods.\n  270  \n  271:  - <a href=\"doc/v8_internals.md#api_nan_gc_callback\"><b><code>NAN_GC_CALLBACK()</code></b></a>\n  272:  - <a href=\"doc/v8_internals.md#api_nan_add_gc_epilogue_callback\"><b><code>Nan::AddGCEpilogueCallback()</code></b></a>\n  273:  - <a href=\"doc/v8_internals.md#api_nan_remove_gc_epilogue_callback\"><b><code>Nan::RemoveGCEpilogueCallback()</code></b></a>\n  274:  - <a href=\"doc/v8_internals.md#api_nan_add_gc_prologue_callback\"><b><code>Nan::AddGCPrologueCallback()</code></b></a>\n  275:  - <a href=\"doc/v8_internals.md#api_nan_remove_gc_prologue_callback\"><b><code>Nan::RemoveGCPrologueCallback()</code></b></a>\n  276:  - <a href=\"doc/v8_internals.md#api_nan_get_heap_statistics\"><b><code>Nan::GetHeapStatistics()</code></b></a>\n  277:  - <a href=\"doc/v8_internals.md#api_nan_set_counter_function\"><b><code>Nan::SetCounterFunction()</code></b></a>\n  278:  - <a href=\"doc/v8_internals.md#api_nan_set_create_histogram_function\"><b><code>Nan::SetCreateHistogramFunction()</code></b></a>\n  279:  - <a href=\"doc/v8_internals.md#api_nan_set_add_histogram_sample_function\"><b><code>Nan::SetAddHistogramSampleFunction()</code></b></a>\n  280:  - <a href=\"doc/v8_internals.md#api_nan_idle_notification\"><b><code>Nan::IdleNotification()</code></b></a>\n  281:  - <a href=\"doc/v8_internals.md#api_nan_low_memory_notification\"><b><code>Nan::LowMemoryNotification()</code></b></a>\n  282:  - <a href=\"doc/v8_internals.md#api_nan_context_disposed_notification\"><b><code>Nan::ContextDisposedNotification()</code></b></a>\n  283:  - <a href=\"doc/v8_internals.md#api_nan_get_internal_field_pointer\"><b><code>Nan::GetInternalFieldPointer()</code></b></a>\n  284:  - <a href=\"doc/v8_internals.md#api_nan_set_internal_field_pointer\"><b><code>Nan::SetInternalFieldPointer()</code></b></a>\n  285:  - <a href=\"doc/v8_internals.md#api_nan_adjust_external_memory\"><b><code>Nan::AdjustExternalMemory()</code></b></a>\n  286  \n  287  \n  288: ### Miscellaneous V8 Helpers\n  289  \n  290:  - <a href=\"doc/v8_misc.md#api_nan_utf8_string\"><b><code>Nan::Utf8String</code></b></a>\n  291:  - <a href=\"doc/v8_misc.md#api_nan_get_current_context\"><b><code>Nan::GetCurrentContext()</code></b></a>\n  292:  - <a href=\"doc/v8_misc.md#api_nan_set_isolate_data\"><b><code>Nan::SetIsolateData()</code></b></a>\n  293:  - <a href=\"doc/v8_misc.md#api_nan_get_isolate_data\"><b><code>Nan::GetIsolateData()</code></b></a>\n  294:  - <a href=\"doc/v8_misc.md#api_nan_typedarray_contents\"><b><code>Nan::TypedArrayContents</code></b></a>\n  295  \n  296  \n  297: ### Miscellaneous Node Helpers\n  298  \n  299:  - <a href=\"doc/node_misc.md#api_nan_make_callback\"><b><code>Nan::MakeCallback()</code></b></a>\n  300:  - <a href=\"doc/node_misc.md#api_nan_module_init\"><b><code>NAN_MODULE_INIT()</code></b></a>\n  301:  - <a href=\"doc/node_misc.md#api_nan_export\"><b><code>Nan::Export()</code></b></a>\n  302  \n  303  <!-- END API -->\n  304  \n  305  \n  306: <a name=\"tests\"></a>\n  307: ### Tests\n  308  \n  309: To run the NAN tests do:\n  310  \n  311: ``` sh\n  312: npm install\n  313: npm run-script rebuild-tests\n  314: npm test\n  315  ```\n  316  \n  317: Or just:\n  318  \n  319: ``` sh\n  320: npm install\n  321: make test\n  322  ```\n  323  \n  ...\n  325  ## Governance & Contributing\n  326  \n  327: NAN is governed by the [io.js](https://iojs.org/) Addon API Working Group\n  328  \n  329  ### Addon API Working Group (WG)\n  330  \n  331: The NAN project is jointly governed by a Working Group which is responsible for high-level guidance of the project.\n  332  \n  333: Members of the WG are also known as Collaborators, there is no distinction between the two, unlike other io.js projects.\n  334  \n  335: The WG has final authority over this project including:\n  336  \n  337  * Technical direction\n  338: * Project governance and process (including this policy)\n  339  * Contribution policy\n  340: * GitHub repository hosting\n  341: * Maintaining the list of additional Collaborators\n  342  \n  343: For the current list of WG members, see the project [README.md](./README.md#collaborators).\n  344  \n  345: Individuals making significant and valuable contributions are made members of the WG and given commit-access to the project. These individuals are identified by the WG and their addition to the WG is discussed via GitHub and requires unanimous consensus amongst those WG members participating in the discussion with a quorum of 50% of WG members required for acceptance of the vote.\n  346  \n  347: _Note:_ If you make a significant contribution and are not considered for commit-access log an issue or contact a WG member directly.\n  348  \n  349: For the current list of WG members / Collaborators, see the project [README.md](./README.md#collaborators).\n  350  \n  351: ### Consensus Seeking Process\n  352  \n  353: The WG follows a [Consensus Seeking](http://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision making model.\n  354  \n  355: Modifications of the contents of the NAN repository are made on a collaborative basis. Anybody with a GitHub account may propose a modification via pull request and it will be considered by the WG. All pull requests must be reviewed and accepted by a WG member with sufficient expertise who is able to take full responsibility for the change. In the case of pull requests proposed by an existing WG member, an additional WG member is required for sign-off. Consensus should be sought if additional WG members participate and there is disagreement around a particular modification.\n  356  \n  357: If a change proposal cannot reach a consensus, a WG member can call for a vote amongst the members of the WG. Simple majority wins.\n  358  \n  359: <a id=\"developers-certificate-of-origin\"></a>\n  360: ## Developer's Certificate of Origin 1.1\n  361  \n  362: By making a contribution to this project, I certify that:\n  363  \n  364: * (a) The contribution was created in whole or in part by me and I\n  365:   have the right to submit it under the open source license\n  366    indicated in the file; or\n  367  \n  368: * (b) The contribution is based upon previous work that, to the best\n  369:   of my knowledge, is covered under an appropriate open source\n  370:   license and I have the right under that license to submit that\n  371:   work with modifications, whether created in whole or in part\n  372:   by me, under the same open source license (unless I am\n  373:   permitted to submit under a different license), as indicated\n  374    in the file; or\n  375  \n  376: * (c) The contribution was provided directly to me by some other\n  377:   person who certified (a), (b) or (c) and I have not modified\n  378    it.\n  379  \n  380: * (d) I understand and agree that this project and the contribution\n  381    are public and that a record of the contribution (including all\n  382:   personal information I submit with it, including my sign-off) is\n  383:   maintained indefinitely and may be redistributed consistent with\n  384:   this project or the open source license(s) involved.\n  385  \n  386: <a name=\"collaborators\"></a>\n  387: ### WG Members / Collaborators\n  388  \n  389  <table><tbody>\n  390: <tr><th align=\"left\">Rod Vagg</th><td><a href=\"https://github.com/rvagg\">GitHub/rvagg</a></td><td><a href=\"http://twitter.com/rvagg\">Twitter/@rvagg</a></td></tr>\n  391: <tr><th align=\"left\">Benjamin Byholm</th><td><a href=\"https://github.com/kkoopa/\">GitHub/kkoopa</a></td><td>-</td></tr>\n  392: <tr><th align=\"left\">Trevor Norris</th><td><a href=\"https://github.com/trevnorris\">GitHub/trevnorris</a></td><td><a href=\"http://twitter.com/trevnorris\">Twitter/@trevnorris</a></td></tr>\n  393: <tr><th align=\"left\">Nathan Rajlich</th><td><a href=\"https://github.com/TooTallNate\">GitHub/TooTallNate</a></td><td><a href=\"http://twitter.com/TooTallNate\">Twitter/@TooTallNate</a></td></tr>\n  394: <tr><th align=\"left\">Brett Lawson</th><td><a href=\"https://github.com/brett19\">GitHub/brett19</a></td><td><a href=\"http://twitter.com/brett19x\">Twitter/@brett19x</a></td></tr>\n  395: <tr><th align=\"left\">Ben Noordhuis</th><td><a href=\"https://github.com/bnoordhuis\">GitHub/bnoordhuis</a></td><td><a href=\"http://twitter.com/bnoordhuis\">Twitter/@bnoordhuis</a></td></tr>\n  396: <tr><th align=\"left\">David Siegel</th><td><a href=\"https://github.com/agnat\">GitHub/agnat</a></td><td>-</td></tr>\n  397  </tbody></table>\n  398  \n  399  ## Licence &amp; copyright\n  400  \n  401: Copyright (c) 2016 NAN WG Members / Collaborators (listed above).\n  402  \n  403: Native Abstractions for Node.js is licensed under an MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n  404  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/include_dirs.js:\n    1: console.log(require('path').relative('.', __dirname));\n    2  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors:\n    5:  *   - Rod Vagg <https://github.com/rvagg>\n    6:  *   - Benjamin Byholm <https://github.com/kkoopa>\n    7:  *   - Trevor Norris <https://github.com/trevnorris>\n    8:  *   - Nathan Rajlich <https://github.com/TooTallNate>\n    9:  *   - Brett Lawson <https://github.com/brett19>\n   10:  *   - Ben Noordhuis <https://github.com/bnoordhuis>\n   11:  *   - David Siegel <https://github.com/agnat>\n   12   *\n   13:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n   14   *\n   15:  * Version 2.3.5: current Node 6.2.0, Node 12: 0.12.14, Node 10: 0.10.45, iojs: 3.3.1\n   16   *\n   17:  * See https://github.com/nodejs/nan for the latest update to this file\n   18   **********************************************************************************/\n   19  \n   ..\n   21  #define NAN_H_\n   22  \n   23: #include <node_version.h>\n   24  \n   25: #define NODE_0_10_MODULE_VERSION 11\n   26: #define NODE_0_12_MODULE_VERSION 14\n   27: #define ATOM_0_21_MODULE_VERSION 41\n   28: #define IOJS_1_0_MODULE_VERSION  42\n   29: #define IOJS_1_1_MODULE_VERSION  43\n   30: #define IOJS_2_0_MODULE_VERSION  44\n   31: #define IOJS_3_0_MODULE_VERSION  45\n   32: #define NODE_4_0_MODULE_VERSION  46\n   33: #define NODE_5_0_MODULE_VERSION  47\n   34: #define NODE_6_0_MODULE_VERSION  48\n   35  \n   36: #ifdef _MSC_VER\n   37: # define NAN_HAS_CPLUSPLUS_11 (_MSC_VER >= 1800)\n   38: #else\n   39: # define NAN_HAS_CPLUSPLUS_11 (__cplusplus >= 201103L)\n   40  #endif\n   41  \n   42: #if NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION && !NAN_HAS_CPLUSPLUS_11\n   43: # error This version of node/NAN/v8 requires a C++11 compiler\n   44  #endif\n   45  \n   ..\n   49  #include <node_object_wrap.h>\n   50  #include <algorithm>\n   51: #include <cstring>\n   52: #include <climits>\n   53: #include <cstdlib>\n   54: #if defined(_MSC_VER)\n   55: # pragma warning( push )\n   56: # pragma warning( disable : 4530 )\n   57: # include <string>\n   58  # include <vector>\n   59  # pragma warning( pop )\n   60: #else\n   61: # include <string>\n   62  # include <vector>\n   63  #endif\n   64  \n   65: // uv helpers\n   66: #ifdef UV_VERSION_MAJOR\n   67: # ifndef UV_VERSION_PATCH\n   68: #  define UV_VERSION_PATCH 0\n   69  # endif\n   70: # define NAUV_UVVERSION ((UV_VERSION_MAJOR << 16) | \\\n   71:                          (UV_VERSION_MINOR <<  8) | \\\n   72:                          (UV_VERSION_PATCH))\n   73: #else\n   74: # define NAUV_UVVERSION 0x000b00\n   75  #endif\n   76  \n   77: #if NAUV_UVVERSION < 0x000b0b\n   78  # ifdef WIN32\n   79: #  include <windows.h>\n   80: # else\n   81  #  include <pthread.h>\n   82  # endif\n   83  #endif\n   84  \n   85: namespace Nan {\n   86  \n   87: #define NAN_INLINE inline  // TODO(bnoordhuis) Remove in v3.0.0.\n   88  \n   89  #if defined(__GNUC__) && \\\n   90:     !(defined(V8_DISABLE_DEPRECATIONS) && V8_DISABLE_DEPRECATIONS)\n   91  # define NAN_DEPRECATED __attribute__((deprecated))\n   92: #elif defined(_MSC_VER) && \\\n   93:     !(defined(V8_DISABLE_DEPRECATIONS) && V8_DISABLE_DEPRECATIONS)\n   94: # define NAN_DEPRECATED __declspec(deprecated)\n   95: #else\n   96  # define NAN_DEPRECATED\n   97  #endif\n   98  \n   99: #if NAN_HAS_CPLUSPLUS_11\n  100: # define NAN_DISALLOW_ASSIGN(CLASS) void operator=(const CLASS&) = delete;\n  101: # define NAN_DISALLOW_COPY(CLASS) CLASS(const CLASS&) = delete;\n  102: # define NAN_DISALLOW_MOVE(CLASS)                                              \\\n  103:     CLASS(CLASS&&) = delete;  /* NOLINT(build/c++11) */                        \\\n  104:     void operator=(CLASS&&) = delete;\n  105: #else\n  106: # define NAN_DISALLOW_ASSIGN(CLASS) void operator=(const CLASS&);\n  107: # define NAN_DISALLOW_COPY(CLASS) CLASS(const CLASS&);\n  108: # define NAN_DISALLOW_MOVE(CLASS)\n  109  #endif\n  110  \n  111: #define NAN_DISALLOW_ASSIGN_COPY(CLASS)                                        \\\n  112:     NAN_DISALLOW_ASSIGN(CLASS)                                                 \\\n  113:     NAN_DISALLOW_COPY(CLASS)\n  114  \n  115: #define NAN_DISALLOW_ASSIGN_MOVE(CLASS)                                        \\\n  116:     NAN_DISALLOW_ASSIGN(CLASS)                                                 \\\n  117:     NAN_DISALLOW_MOVE(CLASS)\n  118  \n  119: #define NAN_DISALLOW_COPY_MOVE(CLASS)                                          \\\n  120:     NAN_DISALLOW_COPY(CLASS)                                                   \\\n  121:     NAN_DISALLOW_MOVE(CLASS)\n  122  \n  123: #define NAN_DISALLOW_ASSIGN_COPY_MOVE(CLASS)                                   \\\n  124:     NAN_DISALLOW_ASSIGN(CLASS)                                                 \\\n  125:     NAN_DISALLOW_COPY(CLASS)                                                   \\\n  126:     NAN_DISALLOW_MOVE(CLASS)\n  127  \n  128: #define TYPE_CHECK(T, S)                                                       \\\n  129:     while (false) {                                                            \\\n  130:       *(static_cast<T *volatile *>(0)) = static_cast<S*>(0);                   \\\n  131      }\n  132  \n  133: //=== RegistrationFunction =====================================================\n  134  \n  135: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  136:   typedef v8::Handle<v8::Object> ADDON_REGISTER_FUNCTION_ARGS_TYPE;\n  137: #else\n  138:   typedef v8::Local<v8::Object> ADDON_REGISTER_FUNCTION_ARGS_TYPE;\n  139  #endif\n  140  \n  141  #define NAN_MODULE_INIT(name)                                                  \\\n  142:     void name(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target)\n  143  \n  144  //=== CallbackInfo =============================================================\n  145  \n  146: #include \"nan_callbacks.h\"  // NOLINT(build/include)\n  147  \n  148  //==============================================================================\n  149  \n  150: #if (NODE_MODULE_VERSION < NODE_0_12_MODULE_VERSION)\n  151: typedef v8::Script             UnboundScript;\n  152: typedef v8::Script             BoundScript;\n  153: #else\n  154: typedef v8::UnboundScript      UnboundScript;\n  155: typedef v8::Script             BoundScript;\n  156  #endif\n  157  \n  158: #if (NODE_MODULE_VERSION < ATOM_0_21_MODULE_VERSION)\n  159: typedef v8::String::ExternalAsciiStringResource\n  160:     ExternalOneByteStringResource;\n  161: #else\n  162: typedef v8::String::ExternalOneByteStringResource\n  163:     ExternalOneByteStringResource;\n  164  #endif\n  165  \n  166: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n  167  template<typename T>\n  168: class NonCopyablePersistentTraits :\n  169:     public v8::NonCopyablePersistentTraits<T> {};\n  170  template<typename T>\n  171: class CopyablePersistentTraits :\n  172:     public v8::CopyablePersistentTraits<T> {};\n  173  \n  174  template<typename T>\n  175: class PersistentBase :\n  176:     public v8::PersistentBase<T> {};\n  177  \n  178: template<typename T, typename M = v8::NonCopyablePersistentTraits<T> >\n  179: class Persistent;\n  180: #else\n  181: template<typename T> class NonCopyablePersistentTraits;\n  182: template<typename T> class PersistentBase;\n  183: template<typename T, typename P> class WeakCallbackData;\n  184: template<typename T, typename M = NonCopyablePersistentTraits<T> >\n  185: class Persistent;\n  186: #endif  // NODE_MODULE_VERSION\n  187  \n  188: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  189:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  190  # include \"nan_maybe_43_inl.h\"  // NOLINT(build/include)\n  191: #else\n  192  # include \"nan_maybe_pre_43_inl.h\"  // NOLINT(build/include)\n  193  #endif\n  194  \n  195: #include \"nan_converters.h\"  // NOLINT(build/include)\n  196  #include \"nan_new.h\"  // NOLINT(build/include)\n  197  \n  198: #if NAUV_UVVERSION < 0x000b17\n  199  #define NAUV_WORK_CB(func) \\\n  200:     void func(uv_async_t *async, int)\n  201: #else\n  202  #define NAUV_WORK_CB(func) \\\n  203:     void func(uv_async_t *async)\n  204  #endif\n  205  \n  206: #if NAUV_UVVERSION >= 0x000b0b\n  207  \n  208  typedef uv_key_t nauv_key_t;\n  ...\n  220  }\n  221  \n  222: inline void nauv_key_set(nauv_key_t *key, void *value) {\n  223:   uv_key_set(key, value);\n  224  }\n  225  \n  226: #else\n  227  \n  228: /* Implement thread local storage for older versions of libuv.\n  229:  * This is essentially a backport of libuv commit 5d2434bf\n  230:  * written by Ben Noordhuis, adjusted for names and inline.\n  231   */\n  232  \n  ...\n  245  \n  246  inline void* nauv_key_get(nauv_key_t* key) {\n  247:   return pthread_getspecific(*key);\n  248  }\n  249  \n  250: inline void nauv_key_set(nauv_key_t* key, void* value) {\n  251:   if (pthread_setspecific(*key, value))\n  252      abort();\n  253  }\n  254  \n  255: #else\n  256  \n  257: typedef struct {\n  258:   DWORD tls_index;\n  259  } nauv_key_t;\n  260  \n  261  inline int nauv_key_create(nauv_key_t* key) {\n  262:   key->tls_index = TlsAlloc();\n  263:   if (key->tls_index == TLS_OUT_OF_INDEXES)\n  264      return UV_ENOMEM;\n  265    return 0;\n  ...\n  267  \n  268  inline void nauv_key_delete(nauv_key_t* key) {\n  269:   if (TlsFree(key->tls_index) == FALSE)\n  270      abort();\n  271:   key->tls_index = TLS_OUT_OF_INDEXES;\n  272  }\n  273  \n  274  inline void* nauv_key_get(nauv_key_t* key) {\n  275:   void* value = TlsGetValue(key->tls_index);\n  276    if (value == NULL)\n  277:     if (GetLastError() != ERROR_SUCCESS)\n  278        abort();\n  279    return value;\n  280  }\n  281  \n  282: inline void nauv_key_set(nauv_key_t* key, void* value) {\n  283:   if (TlsSetValue(key->tls_index, value) == FALSE)\n  284      abort();\n  285  }\n  ...\n  288  #endif\n  289  \n  290: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  291  template<typename T>\n  292  v8::Local<T> New(v8::Handle<T>);\n  293  #endif\n  294  \n  295: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  296:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  297    typedef v8::WeakCallbackType WeakCallbackType;\n  298: #else\n  299: struct WeakCallbackType {\n  300:   enum E {kParameter, kInternalFields};\n  301    E type;\n  302    WeakCallbackType(E other) : type(other) {}  // NOLINT(runtime/explicit)\n  303:   inline bool operator==(E other) { return other == this->type; }\n  304    inline bool operator!=(E other) { return !operator==(other); }\n  305  };\n  306  #endif\n  307  \n  308: template<typename P> class WeakCallbackInfo;\n  309  \n  310: #if NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  311: # include \"nan_persistent_12_inl.h\"  // NOLINT(build/include)\n  312: #else\n  313: # include \"nan_persistent_pre_12_inl.h\"  // NOLINT(build/include)\n  314  #endif\n  315  \n  316: namespace imp {\n  317:   static const size_t kMaxLength = 0x3fffffff;\n  318:   // v8::String::REPLACE_INVALID_UTF8 was introduced\n  319:   // in node.js v0.10.29 and v0.8.27.\n  320: #if NODE_MAJOR_VERSION > 0 || \\\n  321:     NODE_MINOR_VERSION > 10 || \\\n  322:     NODE_MINOR_VERSION == 10 && NODE_PATCH_VERSION >= 29 || \\\n  323:     NODE_MINOR_VERSION == 8 && NODE_PATCH_VERSION >= 27\n  324:   static const unsigned kReplaceInvalidUtf8 = v8::String::REPLACE_INVALID_UTF8;\n  325: #else\n  326:   static const unsigned kReplaceInvalidUtf8 = 0;\n  327  #endif\n  328: }  // end of namespace imp\n  329  \n  330: //=== HandleScope ==============================================================\n  331  \n  332: class HandleScope {\n  333:   v8::HandleScope scope;\n  334  \n  335   public:\n  336: #if NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  337:   inline HandleScope() : scope(v8::Isolate::GetCurrent()) {}\n  338:   inline static int NumberOfHandles() {\n  339:     return v8::HandleScope::NumberOfHandles(v8::Isolate::GetCurrent());\n  340    }\n  341: #else\n  342:   inline HandleScope() : scope() {}\n  343:   inline static int NumberOfHandles() {\n  344:     return v8::HandleScope::NumberOfHandles();\n  345    }\n  346  #endif\n  347  \n  348   private:\n  349:   // Make it hard to create heap-allocated or illegal handle scopes by\n  350:   // disallowing certain operations.\n  351:   HandleScope(const HandleScope &);\n  352:   void operator=(const HandleScope &);\n  353:   void *operator new(size_t size);\n  354:   void operator delete(void *, size_t);\n  355  };\n  356  \n  357: class EscapableHandleScope {\n  358   public:\n  359: #if NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  360:   inline EscapableHandleScope() : scope(v8::Isolate::GetCurrent()) {}\n  361  \n  362:   inline static int NumberOfHandles() {\n  363:     return v8::EscapableHandleScope::NumberOfHandles(v8::Isolate::GetCurrent());\n  364    }\n  365  \n  366    template<typename T>\n  367:   inline v8::Local<T> Escape(v8::Local<T> value) {\n  368:     return scope.Escape(value);\n  369    }\n  370  \n  371   private:\n  372:   v8::EscapableHandleScope scope;\n  373: #else\n  374:   inline EscapableHandleScope() : scope() {}\n  375  \n  376:   inline static int NumberOfHandles() {\n  377:     return v8::HandleScope::NumberOfHandles();\n  378    }\n  379  \n  380    template<typename T>\n  381:   inline v8::Local<T> Escape(v8::Local<T> value) {\n  382:     return scope.Close(value);\n  383    }\n  384  \n  385   private:\n  386:   v8::HandleScope scope;\n  387  #endif\n  388  \n  389   private:\n  390:   // Make it hard to create heap-allocated or illegal handle scopes by\n  391:   // disallowing certain operations.\n  392:   EscapableHandleScope(const EscapableHandleScope &);\n  393:   void operator=(const EscapableHandleScope &);\n  394:   void *operator new(size_t size);\n  395:   void operator delete(void *, size_t);\n  396  };\n  397  \n  398  //=== TryCatch =================================================================\n  399  \n  400: class TryCatch {\n  401    v8::TryCatch try_catch_;\n  402:   friend void FatalException(const TryCatch&);\n  403  \n  404   public:\n  405: #if NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n  406:   TryCatch() : try_catch_(v8::Isolate::GetCurrent()) {}\n  407  #endif\n  408  \n  409:   inline bool HasCaught() const { return try_catch_.HasCaught(); }\n  410  \n  411:   inline bool CanContinue() const { return try_catch_.CanContinue(); }\n  412  \n  413    inline v8::Local<v8::Value> ReThrow() {\n  414: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  415      return New(try_catch_.ReThrow());\n  416: #else\n  417      return try_catch_.ReThrow();\n  418  #endif\n  419    }\n  420  \n  421:   inline v8::Local<v8::Value> Exception() const {\n  422      return try_catch_.Exception();\n  423    }\n  424  \n  425: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  426:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  427:   inline v8::MaybeLocal<v8::Value> StackTrace() const {\n  428:     return try_catch_.StackTrace(GetCurrentContext());\n  429    }\n  430: #else\n  431:   inline MaybeLocal<v8::Value> StackTrace() const {\n  432:     return MaybeLocal<v8::Value>(try_catch_.StackTrace());\n  433    }\n  434  #endif\n  435  \n  436:   inline v8::Local<v8::Message> Message() const {\n  437:     return try_catch_.Message();\n  438    }\n  439  \n  440:   inline void Reset() { try_catch_.Reset(); }\n  441  \n  442:   inline void SetVerbose(bool value) { try_catch_.SetVerbose(value); }\n  443  \n  444:   inline void SetCaptureMessage(bool value) {\n  445:     try_catch_.SetCaptureMessage(value);\n  446    }\n  447  };\n  ...\n  450  \n  451  /* node 0.12  */\n  452: #if NODE_MODULE_VERSION >= NODE_0_12_MODULE_VERSION\n  453    inline\n  454:   void SetCounterFunction(v8::CounterLookupCallback cb) {\n  455:     v8::Isolate::GetCurrent()->SetCounterFunction(cb);\n  456    }\n  457  \n  458    inline\n  459:   void SetCreateHistogramFunction(v8::CreateHistogramCallback cb) {\n  460:     v8::Isolate::GetCurrent()->SetCreateHistogramFunction(cb);\n  461    }\n  462  \n  463    inline\n  464:   void SetAddHistogramSampleFunction(v8::AddHistogramSampleCallback cb) {\n  465:     v8::Isolate::GetCurrent()->SetAddHistogramSampleFunction(cb);\n  466    }\n  467  \n  468: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  469:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  470:   inline bool IdleNotification(int idle_time_in_ms) {\n  471:     return v8::Isolate::GetCurrent()->IdleNotificationDeadline(\n  472:         idle_time_in_ms * 0.001);\n  473    }\n  474: # else\n  475:   inline bool IdleNotification(int idle_time_in_ms) {\n  476:     return v8::Isolate::GetCurrent()->IdleNotification(idle_time_in_ms);\n  477    }\n  478  #endif\n  479  \n  480    inline void LowMemoryNotification() {\n  481:     v8::Isolate::GetCurrent()->LowMemoryNotification();\n  482    }\n  483  \n  484:   inline void ContextDisposedNotification() {\n  485:     v8::Isolate::GetCurrent()->ContextDisposedNotification();\n  486    }\n  487: #else\n  488    inline\n  489:   void SetCounterFunction(v8::CounterLookupCallback cb) {\n  490:     v8::V8::SetCounterFunction(cb);\n  491    }\n  492  \n  493    inline\n  494:   void SetCreateHistogramFunction(v8::CreateHistogramCallback cb) {\n  495:     v8::V8::SetCreateHistogramFunction(cb);\n  496    }\n  497  \n  498    inline\n  499:   void SetAddHistogramSampleFunction(v8::AddHistogramSampleCallback cb) {\n  500:     v8::V8::SetAddHistogramSampleFunction(cb);\n  501    }\n  502  \n  503:   inline bool IdleNotification(int idle_time_in_ms) {\n  504:     return v8::V8::IdleNotification(idle_time_in_ms);\n  505    }\n  506  \n  ...\n  509    }\n  510  \n  511:   inline void ContextDisposedNotification() {\n  512:     v8::V8::ContextDisposedNotification();\n  513    }\n  514  #endif\n  515  \n  516: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)  // Node 0.12\n  517    inline v8::Local<v8::Primitive> Undefined() {\n  518: # if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  519:     EscapableHandleScope scope;\n  520:     return scope.Escape(New(v8::Undefined(v8::Isolate::GetCurrent())));\n  521: # else\n  522:     return v8::Undefined(v8::Isolate::GetCurrent());\n  523  # endif\n  524    }\n  525  \n  526    inline v8::Local<v8::Primitive> Null() {\n  527: # if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  528:     EscapableHandleScope scope;\n  529:     return scope.Escape(New(v8::Null(v8::Isolate::GetCurrent())));\n  530: # else\n  531:     return v8::Null(v8::Isolate::GetCurrent());\n  532  # endif\n  533    }\n  534  \n  535    inline v8::Local<v8::Boolean> True() {\n  536: # if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  537:     EscapableHandleScope scope;\n  538:     return scope.Escape(New(v8::True(v8::Isolate::GetCurrent())));\n  539: # else\n  540:     return v8::True(v8::Isolate::GetCurrent());\n  541  # endif\n  542    }\n  543  \n  544:   inline v8::Local<v8::Boolean> False() {\n  545: # if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  546:     EscapableHandleScope scope;\n  547:     return scope.Escape(New(v8::False(v8::Isolate::GetCurrent())));\n  548: # else\n  549:     return v8::False(v8::Isolate::GetCurrent());\n  550  # endif\n  551    }\n  552  \n  553:   inline v8::Local<v8::String> EmptyString() {\n  554:     return v8::String::Empty(v8::Isolate::GetCurrent());\n  555    }\n  556  \n  557:   inline int AdjustExternalMemory(int bc) {\n  558:     return static_cast<int>(\n  559:         v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(bc));\n  560    }\n  561  \n  562:   inline void SetTemplate(\n  563        v8::Local<v8::Template> templ\n  564:     , const char *name\n  565      , v8::Local<v8::Data> value) {\n  566:     templ->Set(v8::Isolate::GetCurrent(), name, value);\n  567    }\n  568  \n  569:   inline void SetTemplate(\n  570        v8::Local<v8::Template> templ\n  571:     , v8::Local<v8::String> name\n  572      , v8::Local<v8::Data> value\n  573:     , v8::PropertyAttribute attributes) {\n  574:     templ->Set(name, value, attributes);\n  575    }\n  576  \n  577    inline v8::Local<v8::Context> GetCurrentContext() {\n  578:     return v8::Isolate::GetCurrent()->GetCurrentContext();\n  579    }\n  580  \n  ...\n  585    }\n  586  \n  587:   inline void SetInternalFieldPointer(\n  588        v8::Local<v8::Object> object\n  589      , int index\n  590      , void* value) {\n  591:     object->SetAlignedPointerInInternalField(index, value);\n  592    }\n  593  \n  594  # define NAN_GC_CALLBACK(name)                                                 \\\n  595:     void name(v8::Isolate *isolate, v8::GCType type, v8::GCCallbackFlags flags)\n  596  \n  597: #if NODE_MODULE_VERSION <= NODE_4_0_MODULE_VERSION\n  598:   typedef v8::Isolate::GCEpilogueCallback GCEpilogueCallback;\n  599:   typedef v8::Isolate::GCPrologueCallback GCPrologueCallback;\n  600: #else\n  601:   typedef v8::Isolate::GCCallback GCEpilogueCallback;\n  602:   typedef v8::Isolate::GCCallback GCPrologueCallback;\n  603  #endif\n  604  \n  ...\n  606        GCEpilogueCallback callback\n  607      , v8::GCType gc_type_filter = v8::kGCTypeAll) {\n  608:     v8::Isolate::GetCurrent()->AddGCEpilogueCallback(callback, gc_type_filter);\n  609    }\n  610  \n  611    inline void RemoveGCEpilogueCallback(\n  612        GCEpilogueCallback callback) {\n  613:     v8::Isolate::GetCurrent()->RemoveGCEpilogueCallback(callback);\n  614    }\n  615  \n  ...\n  617        GCPrologueCallback callback\n  618      , v8::GCType gc_type_filter = v8::kGCTypeAll) {\n  619:     v8::Isolate::GetCurrent()->AddGCPrologueCallback(callback, gc_type_filter);\n  620    }\n  621  \n  622    inline void RemoveGCPrologueCallback(\n  623        GCPrologueCallback callback) {\n  624:     v8::Isolate::GetCurrent()->RemoveGCPrologueCallback(callback);\n  625    }\n  626  \n  627:   inline void GetHeapStatistics(\n  628:       v8::HeapStatistics *heap_statistics) {\n  629:     v8::Isolate::GetCurrent()->GetHeapStatistics(heap_statistics);\n  630    }\n  631  \n  632  # define X(NAME)                                                               \\\n  633:     inline v8::Local<v8::Value> NAME(const char *msg) {                    \\\n  634:       EscapableHandleScope scope;                                              \\\n  635:       return scope.Escape(v8::Exception::NAME(New(msg).ToLocalChecked()));     \\\n  636      }                                                                          \\\n  637                                                                                 \\\n  638      inline                                                                 \\\n  639:     v8::Local<v8::Value> NAME(v8::Local<v8::String> msg) {                     \\\n  640:       return v8::Exception::NAME(msg);                                         \\\n  641      }                                                                          \\\n  642                                                                                 \\\n  643:     inline void Throw ## NAME(const char *msg) {                           \\\n  644:       HandleScope scope;                                                       \\\n  645:       v8::Isolate::GetCurrent()->ThrowException(                               \\\n  646:           v8::Exception::NAME(New(msg).ToLocalChecked()));                     \\\n  647      }                                                                          \\\n  648                                                                                 \\\n  649:     inline void Throw ## NAME(v8::Local<v8::String> msg) {                 \\\n  650:       HandleScope scope;                                                       \\\n  651:       v8::Isolate::GetCurrent()->ThrowException(                               \\\n  652:           v8::Exception::NAME(msg));                                           \\\n  653      }\n  654  \n  ...\n  656    X(RangeError)\n  657    X(ReferenceError)\n  658:   X(SyntaxError)\n  659    X(TypeError)\n  660  \n  ...\n  662  \n  663    inline void ThrowError(v8::Local<v8::Value> error) {\n  664:     v8::Isolate::GetCurrent()->ThrowException(error);\n  665    }\n  666  \n  667    inline MaybeLocal<v8::Object> NewBuffer(\n  668        char *data\n  669:     , size_t length\n  670: #if NODE_MODULE_VERSION > IOJS_2_0_MODULE_VERSION\n  671      , node::Buffer::FreeCallback callback\n  672: #else\n  673:     , node::smalloc::FreeCallback callback\n  674  #endif\n  675      , void *hint\n  676    ) {\n  677:     // arbitrary buffer lengths requires\n  678:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n  679:     assert(length <= imp::kMaxLength && \"too large buffer\");\n  680: #if NODE_MODULE_VERSION > IOJS_2_0_MODULE_VERSION\n  681      return node::Buffer::New(\n  682:         v8::Isolate::GetCurrent(), data, length, callback, hint);\n  683: #else\n  684      return MaybeLocal<v8::Object>(node::Buffer::New(\n  685:         v8::Isolate::GetCurrent(), data, length, callback, hint));\n  686  #endif\n  687    }\n  688  \n  689    inline MaybeLocal<v8::Object> CopyBuffer(\n  690:       const char *data\n  691:     , uint32_t size\n  692    ) {\n  693:     // arbitrary buffer lengths requires\n  694:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n  695:     assert(size <= imp::kMaxLength && \"too large buffer\");\n  696: #if NODE_MODULE_VERSION > IOJS_2_0_MODULE_VERSION\n  697      return node::Buffer::Copy(\n  698:         v8::Isolate::GetCurrent(), data, size);\n  699: #else\n  700      return MaybeLocal<v8::Object>(node::Buffer::New(\n  701:         v8::Isolate::GetCurrent(), data, size));\n  702  #endif\n  703    }\n  704  \n  705:   inline MaybeLocal<v8::Object> NewBuffer(uint32_t size) {\n  706:     // arbitrary buffer lengths requires\n  707:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n  708:     assert(size <= imp::kMaxLength && \"too large buffer\");\n  709: #if NODE_MODULE_VERSION > IOJS_2_0_MODULE_VERSION\n  710      return node::Buffer::New(\n  711:         v8::Isolate::GetCurrent(), size);\n  712: #else\n  713      return MaybeLocal<v8::Object>(node::Buffer::New(\n  714:         v8::Isolate::GetCurrent(), size));\n  715  #endif\n  716    }\n  ...\n  718    inline MaybeLocal<v8::Object> NewBuffer(\n  719        char* data\n  720:     , uint32_t size\n  721    ) {\n  722:     // arbitrary buffer lengths requires\n  723:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n  724:     assert(size <= imp::kMaxLength && \"too large buffer\");\n  725: #if NODE_MODULE_VERSION > IOJS_2_0_MODULE_VERSION\n  726:     return node::Buffer::New(v8::Isolate::GetCurrent(), data, size);\n  727: #else\n  728      return MaybeLocal<v8::Object>(\n  729:         node::Buffer::Use(v8::Isolate::GetCurrent(), data, size));\n  730  #endif\n  731    }\n  732  \n  733: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  734:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  735:   inline MaybeLocal<v8::String>\n  736:   NewOneByteString(const uint8_t * value, int length = -1) {\n  737:     return v8::String::NewFromOneByte(v8::Isolate::GetCurrent(), value,\n  738:           v8::NewStringType::kNormal, length);\n  739    }\n  740  \n  741:   inline MaybeLocal<BoundScript> CompileScript(\n  742:       v8::Local<v8::String> s\n  743:     , const v8::ScriptOrigin& origin\n  744    ) {\n  745:     v8::ScriptCompiler::Source source(s, origin);\n  746:     return v8::ScriptCompiler::Compile(GetCurrentContext(), &source);\n  747    }\n  748  \n  749:   inline MaybeLocal<BoundScript> CompileScript(\n  750:       v8::Local<v8::String> s\n  751    ) {\n  752:     v8::ScriptCompiler::Source source(s);\n  753:     return v8::ScriptCompiler::Compile(GetCurrentContext(), &source);\n  754    }\n  755  \n  756:   inline MaybeLocal<v8::Value> RunScript(\n  757:       v8::Local<UnboundScript> script\n  758    ) {\n  759:     return script->BindToCurrentContext()->Run(GetCurrentContext());\n  760    }\n  761  \n  762:   inline MaybeLocal<v8::Value> RunScript(\n  763:       v8::Local<BoundScript> script\n  764    ) {\n  765:     return script->Run(GetCurrentContext());\n  766    }\n  767: #else\n  768:   inline MaybeLocal<v8::String>\n  769:   NewOneByteString(const uint8_t * value, int length = -1) {\n  770:     return MaybeLocal<v8::String>(\n  771:         v8::String::NewFromOneByte(\n  772:             v8::Isolate::GetCurrent()\n  773            , value\n  774:           , v8::String::kNormalString, length));\n  775    }\n  776  \n  777:   inline MaybeLocal<BoundScript> CompileScript(\n  778:       v8::Local<v8::String> s\n  779:     , const v8::ScriptOrigin& origin\n  780    ) {\n  781:     v8::ScriptCompiler::Source source(s, origin);\n  782:     return MaybeLocal<BoundScript>(\n  783:         v8::ScriptCompiler::Compile(v8::Isolate::GetCurrent(), &source));\n  784    }\n  785  \n  786:   inline MaybeLocal<BoundScript> CompileScript(\n  787:       v8::Local<v8::String> s\n  788    ) {\n  789:     v8::ScriptCompiler::Source source(s);\n  790:     return MaybeLocal<BoundScript>(\n  791:         v8::ScriptCompiler::Compile(v8::Isolate::GetCurrent(), &source));\n  792    }\n  793  \n  794:   inline MaybeLocal<v8::Value> RunScript(\n  795:       v8::Local<UnboundScript> script\n  796    ) {\n  797:     return MaybeLocal<v8::Value>(script->BindToCurrentContext()->Run());\n  798    }\n  799  \n  800:   inline MaybeLocal<v8::Value> RunScript(\n  801:       v8::Local<BoundScript> script\n  802    ) {\n  803:     return MaybeLocal<v8::Value>(script->Run());\n  804    }\n  805  #endif\n  ...\n  810      , int argc\n  811      , v8::Local<v8::Value>* argv) {\n  812: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  813      return New(node::MakeCallback(\n  814:         v8::Isolate::GetCurrent(), target, func, argc, argv));\n  815: #else\n  816      return node::MakeCallback(\n  817:         v8::Isolate::GetCurrent(), target, func, argc, argv);\n  818  #endif\n  819    }\n  ...\n  821    inline v8::Local<v8::Value> MakeCallback(\n  822        v8::Local<v8::Object> target\n  823:     , v8::Local<v8::String> symbol\n  824      , int argc\n  825      , v8::Local<v8::Value>* argv) {\n  826: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  827      return New(node::MakeCallback(\n  828:         v8::Isolate::GetCurrent(), target, symbol, argc, argv));\n  829: #else\n  830      return node::MakeCallback(\n  831:         v8::Isolate::GetCurrent(), target, symbol, argc, argv);\n  832  #endif\n  833    }\n  ...\n  835    inline v8::Local<v8::Value> MakeCallback(\n  836        v8::Local<v8::Object> target\n  837:     , const char* method\n  838      , int argc\n  839      , v8::Local<v8::Value>* argv) {\n  840: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  841      return New(node::MakeCallback(\n  842:         v8::Isolate::GetCurrent(), target, method, argc, argv));\n  843: #else\n  844      return node::MakeCallback(\n  845:         v8::Isolate::GetCurrent(), target, method, argc, argv);\n  846  #endif\n  847    }\n  848  \n  849:   inline void FatalException(const TryCatch& try_catch) {\n  850:     node::FatalException(v8::Isolate::GetCurrent(), try_catch.try_catch_);\n  851    }\n  852  \n  853    inline v8::Local<v8::Value> ErrnoException(\n  854            int errorno\n  855:        ,  const char* syscall = NULL\n  856:        ,  const char* message = NULL\n  857:        ,  const char* path = NULL) {\n  858:     return node::ErrnoException(v8::Isolate::GetCurrent(), errorno, syscall,\n  859:             message, path);\n  860    }\n  861  \n  862    NAN_DEPRECATED inline v8::Local<v8::Value> NanErrnoException(\n  863            int errorno\n  864:        ,  const char* syscall = NULL\n  865:        ,  const char* message = NULL\n  866:        ,  const char* path = NULL) {\n  867:     return ErrnoException(errorno, syscall, message, path);\n  868    }\n  869  \n  870    template<typename T>\n  871:   inline void SetIsolateData(\n  872:       v8::Isolate *isolate\n  873      , T *data\n  874    ) {\n  875:       isolate->SetData(0, data);\n  876    }\n  877  \n  878    template<typename T>\n  879:   inline T *GetIsolateData(\n  880:       v8::Isolate *isolate\n  881    ) {\n  882:       return static_cast<T*>(isolate->GetData(0));\n  883    }\n  884  \n  885: class Utf8String {\n  886   public:\n  887:   inline explicit Utf8String(v8::Local<v8::Value> from) :\n  888:       length_(0), str_(str_st_) {\n  889:     if (!from.IsEmpty()) {\n  890:       v8::Local<v8::String> string = from->ToString();\n  891:       if (!string.IsEmpty()) {\n  892:         size_t len = 3 * string->Length() + 1;\n  893:         assert(len <= INT_MAX);\n  894:         if (len > sizeof (str_st_)) {\n  895:           str_ = static_cast<char*>(malloc(len));\n  896:           assert(str_ != 0);\n  897          }\n  898:         const int flags =\n  899:             v8::String::NO_NULL_TERMINATION | imp::kReplaceInvalidUtf8;\n  900:         length_ = string->WriteUtf8(str_, static_cast<int>(len), 0, flags);\n  901:         str_[length_] = '\\0';\n  902        }\n  903      }\n  904    }\n  905  \n  906:   inline int length() const {\n  907      return length_;\n  908    }\n  909  \n  910:   inline char* operator*() { return str_; }\n  911:   inline const char* operator*() const { return str_; }\n  912  \n  913:   inline ~Utf8String() {\n  914:     if (str_ != str_st_) {\n  915:       free(str_);\n  916      }\n  917    }\n  918  \n  919   private:\n  920:   NAN_DISALLOW_ASSIGN_COPY_MOVE(Utf8String)\n  921  \n  922    int length_;\n  923:   char *str_;\n  924:   char str_st_[1024];\n  925  };\n  926  \n  927: #else  // Node 0.8 and 0.10\n  928    inline v8::Local<v8::Primitive> Undefined() {\n  929:     EscapableHandleScope scope;\n  930:     return scope.Escape(New(v8::Undefined()));\n  931    }\n  932  \n  933    inline v8::Local<v8::Primitive> Null() {\n  934:     EscapableHandleScope scope;\n  935:     return scope.Escape(New(v8::Null()));\n  936    }\n  937  \n  938    inline v8::Local<v8::Boolean> True() {\n  939:     EscapableHandleScope scope;\n  940:     return scope.Escape(New(v8::True()));\n  941    }\n  942  \n  943:   inline v8::Local<v8::Boolean> False() {\n  944:     EscapableHandleScope scope;\n  945:     return scope.Escape(New(v8::False()));\n  946    }\n  947  \n  948:   inline v8::Local<v8::String> EmptyString() {\n  949:     return v8::String::Empty();\n  950    }\n  951  \n  952:   inline int AdjustExternalMemory(int bc) {\n  953:     return static_cast<int>(v8::V8::AdjustAmountOfExternalAllocatedMemory(bc));\n  954    }\n  955  \n  956:   inline void SetTemplate(\n  957        v8::Local<v8::Template> templ\n  958:     , const char *name\n  959      , v8::Local<v8::Data> value) {\n  960:     templ->Set(name, value);\n  961    }\n  962  \n  963:   inline void SetTemplate(\n  964        v8::Local<v8::Template> templ\n  965:     , v8::Local<v8::String> name\n  966      , v8::Local<v8::Data> value\n  967:     , v8::PropertyAttribute attributes) {\n  968:     templ->Set(name, value, attributes);\n  969    }\n  970  \n  ...\n  979    }\n  980  \n  981:   inline void SetInternalFieldPointer(\n  982        v8::Local<v8::Object> object\n  983      , int index\n  984      , void* value) {\n  985:     object->SetPointerInInternalField(index, value);\n  986    }\n  987  \n  988  # define NAN_GC_CALLBACK(name)                                                 \\\n  989:     void name(v8::GCType type, v8::GCCallbackFlags flags)\n  990  \n  991    inline void AddGCEpilogueCallback(\n  ...\n 1007      v8::V8::RemoveGCPrologueCallback(callback);\n 1008    }\n 1009:   inline void GetHeapStatistics(\n 1010:     v8::HeapStatistics *heap_statistics) {\n 1011:     v8::V8::GetHeapStatistics(heap_statistics);\n 1012    }\n 1013  \n 1014  # define X(NAME)                                                               \\\n 1015:     inline v8::Local<v8::Value> NAME(const char *msg) {                    \\\n 1016:       EscapableHandleScope scope;                                              \\\n 1017:       return scope.Escape(v8::Exception::NAME(New(msg).ToLocalChecked()));     \\\n 1018      }                                                                          \\\n 1019                                                                                 \\\n 1020      inline                                                                 \\\n 1021:     v8::Local<v8::Value> NAME(v8::Local<v8::String> msg) {                     \\\n 1022:       return v8::Exception::NAME(msg);                                         \\\n 1023      }                                                                          \\\n 1024                                                                                 \\\n 1025:     inline void Throw ## NAME(const char *msg) {                           \\\n 1026:       HandleScope scope;                                                       \\\n 1027:       v8::ThrowException(v8::Exception::NAME(New(msg).ToLocalChecked()));      \\\n 1028      }                                                                          \\\n 1029                                                                                 \\\n 1030      inline                                                                 \\\n 1031:     void Throw ## NAME(v8::Local<v8::String> errmsg) {                         \\\n 1032:       v8::ThrowException(v8::Exception::NAME(errmsg));                         \\\n 1033      }\n 1034  \n ....\n 1036    X(RangeError)\n 1037    X(ReferenceError)\n 1038:   X(SyntaxError)\n 1039    X(TypeError)\n 1040  \n ....\n 1047    inline MaybeLocal<v8::Object> NewBuffer(\n 1048        char *data\n 1049:     , size_t length\n 1050      , node::Buffer::free_callback callback\n 1051      , void *hint\n 1052    ) {\n 1053:     EscapableHandleScope scope;\n 1054:     // arbitrary buffer lengths requires\n 1055:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n 1056:     assert(length <= imp::kMaxLength && \"too large buffer\");\n 1057:     return MaybeLocal<v8::Object>(scope.Escape(\n 1058          New(node::Buffer::New(data, length, callback, hint)->handle_)));\n 1059    }\n 1060  \n 1061    inline MaybeLocal<v8::Object> CopyBuffer(\n 1062:       const char *data\n 1063:     , uint32_t size\n 1064    ) {\n 1065:     EscapableHandleScope scope;\n 1066:     // arbitrary buffer lengths requires\n 1067:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n 1068:     assert(size <= imp::kMaxLength && \"too large buffer\");\n 1069: #if NODE_MODULE_VERSION >= NODE_0_10_MODULE_VERSION\n 1070      return MaybeLocal<v8::Object>(\n 1071:         scope.Escape(New(node::Buffer::New(data, size)->handle_)));\n 1072: #else\n 1073:     return MaybeLocal<v8::Object>(scope.Escape(\n 1074:         New(node::Buffer::New(const_cast<char*>(data), size)->handle_)));\n 1075  #endif\n 1076    }\n 1077  \n 1078:   inline MaybeLocal<v8::Object> NewBuffer(uint32_t size) {\n 1079:     // arbitrary buffer lengths requires\n 1080:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n 1081:     EscapableHandleScope scope;\n 1082:     assert(size <= imp::kMaxLength && \"too large buffer\");\n 1083      return MaybeLocal<v8::Object>(\n 1084:         scope.Escape(New(node::Buffer::New(size)->handle_)));\n 1085    }\n 1086  \n 1087    inline void FreeData(char *data, void *hint) {\n 1088:     (void) hint;  // unused\n 1089      delete[] data;\n 1090    }\n ....\n 1092    inline MaybeLocal<v8::Object> NewBuffer(\n 1093        char* data\n 1094:     , uint32_t size\n 1095    ) {\n 1096:     EscapableHandleScope scope;\n 1097:     // arbitrary buffer lengths requires\n 1098:     // NODE_MODULE_VERSION >= IOJS_3_0_MODULE_VERSION\n 1099:     assert(size <= imp::kMaxLength && \"too large buffer\");\n 1100:     return MaybeLocal<v8::Object>(scope.Escape(New(\n 1101:         node::Buffer::New(data, size, FreeData, NULL)->handle_)));\n 1102    }\n 1103  \n 1104: namespace imp {\n 1105  inline void\n 1106: widenString(std::vector<uint16_t> *ws, const uint8_t *s, int l) {\n 1107:   size_t len = static_cast<size_t>(l);\n 1108    if (l < 0) {\n 1109:     len = strlen(reinterpret_cast<const char*>(s));\n 1110    }\n 1111:   assert(len <= INT_MAX && \"string too long\");\n 1112:   ws->resize(len);\n 1113:   std::copy(s, s + len, ws->begin());  // NOLINT(build/include_what_you_use)\n 1114  }\n 1115: }  // end of namespace imp\n 1116  \n 1117:   inline MaybeLocal<v8::String>\n 1118:   NewOneByteString(const uint8_t * value, int length = -1) {\n 1119:     std::vector<uint16_t> wideString;  // NOLINT(build/include_what_you_use)\n 1120:     imp::widenString(&wideString, value, length);\n 1121:     return imp::Factory<v8::String>::return_t(v8::String::New(\n 1122:         &wideString.front(), static_cast<int>(wideString.size())));\n 1123    }\n 1124  \n 1125:   inline MaybeLocal<BoundScript> CompileScript(\n 1126:       v8::Local<v8::String> s\n 1127:     , const v8::ScriptOrigin& origin\n 1128    ) {\n 1129:     return MaybeLocal<BoundScript>(\n 1130:         v8::Script::Compile(s, const_cast<v8::ScriptOrigin *>(&origin)));\n 1131    }\n 1132  \n 1133:   inline MaybeLocal<BoundScript> CompileScript(\n 1134:     v8::Local<v8::String> s\n 1135    ) {\n 1136:     return MaybeLocal<BoundScript>(v8::Script::Compile(s));\n 1137    }\n 1138  \n 1139    inline\n 1140:   MaybeLocal<v8::Value> RunScript(v8::Local<v8::Script> script) {\n 1141:     return MaybeLocal<v8::Value>(script->Run());\n 1142    }\n 1143  \n ....\n 1152    inline v8::Local<v8::Value> MakeCallback(\n 1153        v8::Local<v8::Object> target\n 1154:     , v8::Local<v8::String> symbol\n 1155      , int argc\n 1156      , v8::Local<v8::Value>* argv) {\n 1157:     return New(node::MakeCallback(target, symbol, argc, argv));\n 1158    }\n 1159  \n 1160    inline v8::Local<v8::Value> MakeCallback(\n 1161        v8::Local<v8::Object> target\n 1162:     , const char* method\n 1163      , int argc\n 1164      , v8::Local<v8::Value>* argv) {\n ....\n 1166    }\n 1167  \n 1168:   inline void FatalException(const TryCatch& try_catch) {\n 1169:     node::FatalException(const_cast<v8::TryCatch &>(try_catch.try_catch_));\n 1170    }\n 1171  \n 1172    inline v8::Local<v8::Value> ErrnoException(\n 1173            int errorno\n 1174:        ,  const char* syscall = NULL\n 1175:        ,  const char* message = NULL\n 1176:        ,  const char* path = NULL) {\n 1177:     return node::ErrnoException(errorno, syscall, message, path);\n 1178    }\n 1179  \n 1180    NAN_DEPRECATED inline v8::Local<v8::Value> NanErrnoException(\n 1181            int errorno\n 1182:        ,  const char* syscall = NULL\n 1183:        ,  const char* message = NULL\n 1184:        ,  const char* path = NULL) {\n 1185:     return ErrnoException(errorno, syscall, message, path);\n 1186    }\n 1187  \n 1188  \n 1189    template<typename T>\n 1190:   inline void SetIsolateData(\n 1191:       v8::Isolate *isolate\n 1192      , T *data\n 1193    ) {\n 1194:       isolate->SetData(data);\n 1195    }\n 1196  \n 1197    template<typename T>\n 1198:   inline T *GetIsolateData(\n 1199:       v8::Isolate *isolate\n 1200    ) {\n 1201:       return static_cast<T*>(isolate->GetData());\n 1202    }\n 1203  \n 1204: class Utf8String {\n 1205   public:\n 1206:   inline explicit Utf8String(v8::Local<v8::Value> from) :\n 1207:       length_(0), str_(str_st_) {\n 1208:     if (!from.IsEmpty()) {\n 1209:       v8::Local<v8::String> string = from->ToString();\n 1210:       if (!string.IsEmpty()) {\n 1211:         size_t len = 3 * string->Length() + 1;\n 1212:         assert(len <= INT_MAX);\n 1213:         if (len > sizeof (str_st_)) {\n 1214:           str_ = static_cast<char*>(malloc(len));\n 1215:           assert(str_ != 0);\n 1216          }\n 1217:         const int flags =\n 1218:             v8::String::NO_NULL_TERMINATION | imp::kReplaceInvalidUtf8;\n 1219:         length_ = string->WriteUtf8(str_, static_cast<int>(len), 0, flags);\n 1220:         str_[length_] = '\\0';\n 1221        }\n 1222      }\n 1223    }\n 1224  \n 1225:   inline int length() const {\n 1226      return length_;\n 1227    }\n 1228  \n 1229:   inline char* operator*() { return str_; }\n 1230:   inline const char* operator*() const { return str_; }\n 1231  \n 1232:   inline ~Utf8String() {\n 1233:     if (str_ != str_st_) {\n 1234:       free(str_);\n 1235      }\n 1236    }\n 1237  \n 1238   private:\n 1239:   NAN_DISALLOW_ASSIGN_COPY_MOVE(Utf8String)\n 1240  \n 1241    int length_;\n 1242:   char *str_;\n 1243:   char str_st_[1024];\n 1244  };\n 1245  \n 1246: #endif  // NODE_MODULE_VERSION\n 1247  \n 1248  typedef void (*FreeCallback)(char *data, void *hint);\n 1249  \n 1250: typedef const FunctionCallbackInfo<v8::Value>& NAN_METHOD_ARGS_TYPE;\n 1251  typedef void NAN_METHOD_RETURN_TYPE;\n 1252  \n 1253: typedef const PropertyCallbackInfo<v8::Value>& NAN_GETTER_ARGS_TYPE;\n 1254  typedef void NAN_GETTER_RETURN_TYPE;\n 1255  \n 1256: typedef const PropertyCallbackInfo<void>& NAN_SETTER_ARGS_TYPE;\n 1257: typedef void NAN_SETTER_RETURN_TYPE;\n 1258  \n 1259: typedef const PropertyCallbackInfo<v8::Value>&\n 1260:     NAN_PROPERTY_GETTER_ARGS_TYPE;\n 1261  typedef void NAN_PROPERTY_GETTER_RETURN_TYPE;\n 1262  \n 1263: typedef const PropertyCallbackInfo<v8::Value>&\n 1264:     NAN_PROPERTY_SETTER_ARGS_TYPE;\n 1265: typedef void NAN_PROPERTY_SETTER_RETURN_TYPE;\n 1266  \n 1267: typedef const PropertyCallbackInfo<v8::Array>&\n 1268:     NAN_PROPERTY_ENUMERATOR_ARGS_TYPE;\n 1269  typedef void NAN_PROPERTY_ENUMERATOR_RETURN_TYPE;\n 1270  \n 1271: typedef const PropertyCallbackInfo<v8::Boolean>&\n 1272:     NAN_PROPERTY_DELETER_ARGS_TYPE;\n 1273  typedef void NAN_PROPERTY_DELETER_RETURN_TYPE;\n 1274  \n 1275: typedef const PropertyCallbackInfo<v8::Integer>&\n 1276:     NAN_PROPERTY_QUERY_ARGS_TYPE;\n 1277  typedef void NAN_PROPERTY_QUERY_RETURN_TYPE;\n 1278  \n 1279: typedef const PropertyCallbackInfo<v8::Value>& NAN_INDEX_GETTER_ARGS_TYPE;\n 1280  typedef void NAN_INDEX_GETTER_RETURN_TYPE;\n 1281  \n 1282: typedef const PropertyCallbackInfo<v8::Value>& NAN_INDEX_SETTER_ARGS_TYPE;\n 1283: typedef void NAN_INDEX_SETTER_RETURN_TYPE;\n 1284  \n 1285: typedef const PropertyCallbackInfo<v8::Array>&\n 1286:     NAN_INDEX_ENUMERATOR_ARGS_TYPE;\n 1287  typedef void NAN_INDEX_ENUMERATOR_RETURN_TYPE;\n 1288  \n 1289: typedef const PropertyCallbackInfo<v8::Boolean>&\n 1290:     NAN_INDEX_DELETER_ARGS_TYPE;\n 1291  typedef void NAN_INDEX_DELETER_RETURN_TYPE;\n 1292  \n 1293: typedef const PropertyCallbackInfo<v8::Integer>&\n 1294:     NAN_INDEX_QUERY_ARGS_TYPE;\n 1295  typedef void NAN_INDEX_QUERY_RETURN_TYPE;\n 1296  \n 1297  #define NAN_METHOD(name)                                                       \\\n 1298:     Nan::NAN_METHOD_RETURN_TYPE name(Nan::NAN_METHOD_ARGS_TYPE info)\n 1299  #define NAN_GETTER(name)                                                       \\\n 1300      Nan::NAN_GETTER_RETURN_TYPE name(                                          \\\n 1301:         v8::Local<v8::String> property                                         \\\n 1302:       , Nan::NAN_GETTER_ARGS_TYPE info)\n 1303: #define NAN_SETTER(name)                                                       \\\n 1304:     Nan::NAN_SETTER_RETURN_TYPE name(                                          \\\n 1305:         v8::Local<v8::String> property                                         \\\n 1306        , v8::Local<v8::Value> value                                             \\\n 1307:       , Nan::NAN_SETTER_ARGS_TYPE info)\n 1308  #define NAN_PROPERTY_GETTER(name)                                              \\\n 1309      Nan::NAN_PROPERTY_GETTER_RETURN_TYPE name(                                 \\\n 1310:         v8::Local<v8::String> property                                         \\\n 1311:       , Nan::NAN_PROPERTY_GETTER_ARGS_TYPE info)\n 1312: #define NAN_PROPERTY_SETTER(name)                                              \\\n 1313:     Nan::NAN_PROPERTY_SETTER_RETURN_TYPE name(                                 \\\n 1314:         v8::Local<v8::String> property                                         \\\n 1315        , v8::Local<v8::Value> value                                             \\\n 1316:       , Nan::NAN_PROPERTY_SETTER_ARGS_TYPE info)\n 1317  #define NAN_PROPERTY_ENUMERATOR(name)                                          \\\n 1318      Nan::NAN_PROPERTY_ENUMERATOR_RETURN_TYPE name(                             \\\n 1319:         Nan::NAN_PROPERTY_ENUMERATOR_ARGS_TYPE info)\n 1320  #define NAN_PROPERTY_DELETER(name)                                             \\\n 1321      Nan::NAN_PROPERTY_DELETER_RETURN_TYPE name(                                \\\n 1322:         v8::Local<v8::String> property                                         \\\n 1323:       , Nan::NAN_PROPERTY_DELETER_ARGS_TYPE info)\n 1324  #define NAN_PROPERTY_QUERY(name)                                               \\\n 1325      Nan::NAN_PROPERTY_QUERY_RETURN_TYPE name(                                  \\\n 1326:         v8::Local<v8::String> property                                         \\\n 1327:       , Nan::NAN_PROPERTY_QUERY_ARGS_TYPE info)\n 1328  # define NAN_INDEX_GETTER(name)                                                \\\n 1329      Nan::NAN_INDEX_GETTER_RETURN_TYPE name(                                    \\\n 1330          uint32_t index                                                         \\\n 1331:       , Nan::NAN_INDEX_GETTER_ARGS_TYPE info)\n 1332: #define NAN_INDEX_SETTER(name)                                                 \\\n 1333:     Nan::NAN_INDEX_SETTER_RETURN_TYPE name(                                    \\\n 1334          uint32_t index                                                         \\\n 1335        , v8::Local<v8::Value> value                                             \\\n 1336:       , Nan::NAN_INDEX_SETTER_ARGS_TYPE info)\n 1337  #define NAN_INDEX_ENUMERATOR(name)                                             \\\n 1338      Nan::NAN_INDEX_ENUMERATOR_RETURN_TYPE                                      \\\n 1339:     name(Nan::NAN_INDEX_ENUMERATOR_ARGS_TYPE info)\n 1340  #define NAN_INDEX_DELETER(name)                                                \\\n 1341      Nan::NAN_INDEX_DELETER_RETURN_TYPE name(                                   \\\n 1342          uint32_t index                                                         \\\n 1343:       , Nan::NAN_INDEX_DELETER_ARGS_TYPE info)\n 1344  #define NAN_INDEX_QUERY(name)                                                  \\\n 1345      Nan::NAN_INDEX_QUERY_RETURN_TYPE name(                                     \\\n 1346          uint32_t index                                                         \\\n 1347:       , Nan::NAN_INDEX_QUERY_ARGS_TYPE info)\n 1348  \n 1349: class Callback {\n 1350   public:\n 1351    Callback() {\n 1352:     HandleScope scope;\n 1353      v8::Local<v8::Object> obj = New<v8::Object>();\n 1354:     handle.Reset(obj);\n 1355    }\n 1356  \n 1357:   explicit Callback(const v8::Local<v8::Function> &fn) {\n 1358:     HandleScope scope;\n 1359      v8::Local<v8::Object> obj = New<v8::Object>();\n 1360:     handle.Reset(obj);\n 1361:     SetFunction(fn);\n 1362    }\n 1363  \n 1364    ~Callback() {\n 1365:     if (handle.IsEmpty()) return;\n 1366:     handle.Reset();\n 1367    }\n 1368  \n 1369:   bool operator==(const Callback &other) const {\n 1370:     HandleScope scope;\n 1371      v8::Local<v8::Value> a = New(handle)->Get(kCallbackIndex);\n 1372      v8::Local<v8::Value> b = New(other.handle)->Get(kCallbackIndex);\n 1373:     return a->StrictEquals(b);\n 1374    }\n 1375  \n 1376:   bool operator!=(const Callback &other) const {\n 1377:     return !this->operator==(other);\n 1378    }\n 1379  \n 1380    inline\n 1381:   v8::Local<v8::Function> operator*() const { return this->GetFunction(); }\n 1382  \n 1383    inline v8::Local<v8::Value> operator()(\n 1384        v8::Local<v8::Object> target\n 1385      , int argc = 0\n 1386:     , v8::Local<v8::Value> argv[] = 0) const {\n 1387:     return this->Call(target, argc, argv);\n 1388    }\n 1389  \n 1390    inline v8::Local<v8::Value> operator()(\n 1391        int argc = 0\n 1392:     , v8::Local<v8::Value> argv[] = 0) const {\n 1393:     return this->Call(argc, argv);\n 1394    }\n 1395  \n 1396:   inline void SetFunction(const v8::Local<v8::Function> &fn) {\n 1397:     HandleScope scope;\n 1398:     Set(New(handle), kCallbackIndex, fn);\n 1399    }\n 1400  \n 1401:   inline v8::Local<v8::Function> GetFunction() const {\n 1402:     EscapableHandleScope scope;\n 1403:     return scope.Escape(New(handle)->Get(kCallbackIndex)\n 1404:         .As<v8::Function>());\n 1405    }\n 1406  \n 1407:   inline bool IsEmpty() const {\n 1408:     HandleScope scope;\n 1409:     return New(handle)->Get(kCallbackIndex)->IsUndefined();\n 1410    }\n 1411  \n ....\n 1413    Call(v8::Local<v8::Object> target\n 1414       , int argc\n 1415:      , v8::Local<v8::Value> argv[]) const {\n 1416: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n 1417:     v8::Isolate *isolate = v8::Isolate::GetCurrent();\n 1418:     return Call_(isolate, target, argc, argv);\n 1419: #else\n 1420      return Call_(target, argc, argv);\n 1421  #endif\n ....\n 1423  \n 1424    inline v8::Local<v8::Value>\n 1425:   Call(int argc, v8::Local<v8::Value> argv[]) const {\n 1426: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n 1427:     v8::Isolate *isolate = v8::Isolate::GetCurrent();\n 1428:     return Call_(isolate, isolate->GetCurrentContext()->Global(), argc, argv);\n 1429: #else\n 1430      return Call_(v8::Context::GetCurrent()->Global(), argc, argv);\n 1431  #endif\n ....\n 1433  \n 1434   private:\n 1435:   NAN_DISALLOW_ASSIGN_COPY_MOVE(Callback)\n 1436:   Persistent<v8::Object> handle;\n 1437:   static const uint32_t kCallbackIndex = 0;\n 1438  \n 1439: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n 1440:   v8::Local<v8::Value> Call_(v8::Isolate *isolate\n 1441                             , v8::Local<v8::Object> target\n 1442                             , int argc\n 1443:                            , v8::Local<v8::Value> argv[]) const {\n 1444:     EscapableHandleScope scope;\n 1445  \n 1446      v8::Local<v8::Function> callback = New(handle)->\n 1447:         Get(kCallbackIndex).As<v8::Function>();\n 1448: # if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n 1449:     return scope.Escape(New(node::MakeCallback(\n 1450:         isolate\n 1451        , target\n 1452        , callback\n ....\n 1454        , argv\n 1455      )));\n 1456: # else\n 1457:     return scope.Escape(node::MakeCallback(\n 1458:         isolate\n 1459        , target\n 1460        , callback\n ....\n 1464  # endif\n 1465    }\n 1466: #else\n 1467    v8::Local<v8::Value> Call_(v8::Local<v8::Object> target\n 1468                             , int argc\n 1469:                            , v8::Local<v8::Value> argv[]) const {\n 1470:     EscapableHandleScope scope;\n 1471  \n 1472      v8::Local<v8::Function> callback = New(handle)->\n 1473:         Get(kCallbackIndex).As<v8::Function>();\n 1474:     return scope.Escape(New(node::MakeCallback(\n 1475          target\n 1476        , callback\n ....\n 1482  };\n 1483  \n 1484: /* abstract */ class AsyncWorker {\n 1485   public:\n 1486:   explicit AsyncWorker(Callback *callback_)\n 1487:       : callback(callback_), errmsg_(NULL) {\n 1488:     request.data = this;\n 1489  \n 1490:     HandleScope scope;\n 1491      v8::Local<v8::Object> obj = New<v8::Object>();\n 1492:     persistentHandle.Reset(obj);\n 1493    }\n 1494  \n 1495:   virtual ~AsyncWorker() {\n 1496:     HandleScope scope;\n 1497  \n 1498:     if (!persistentHandle.IsEmpty())\n 1499:       persistentHandle.Reset();\n 1500      delete callback;\n 1501:     delete[] errmsg_;\n 1502    }\n 1503  \n 1504    virtual void WorkComplete() {\n 1505:     HandleScope scope;\n 1506  \n 1507:     if (errmsg_ == NULL)\n 1508        HandleOKCallback();\n 1509:     else\n 1510        HandleErrorCallback();\n 1511      delete callback;\n ....\n 1513    }\n 1514  \n 1515:   inline void SaveToPersistent(\n 1516:       const char *key, const v8::Local<v8::Value> &value) {\n 1517:     HandleScope scope;\n 1518:     New(persistentHandle)->Set(New(key).ToLocalChecked(), value);\n 1519    }\n 1520  \n 1521:   inline void SaveToPersistent(\n 1522:       const v8::Local<v8::String> &key, const v8::Local<v8::Value> &value) {\n 1523:     HandleScope scope;\n 1524:     New(persistentHandle)->Set(key, value);\n 1525    }\n 1526  \n 1527:   inline void SaveToPersistent(\n 1528:       uint32_t index, const v8::Local<v8::Value> &value) {\n 1529:     HandleScope scope;\n 1530:     New(persistentHandle)->Set(index, value);\n 1531    }\n 1532  \n 1533:   inline v8::Local<v8::Value> GetFromPersistent(const char *key) const {\n 1534:     EscapableHandleScope scope;\n 1535:     return scope.Escape(\n 1536:         New(persistentHandle)->Get(New(key).ToLocalChecked()));\n 1537    }\n 1538  \n 1539    inline v8::Local<v8::Value>\n 1540:   GetFromPersistent(const v8::Local<v8::String> &key) const {\n 1541:     EscapableHandleScope scope;\n 1542:     return scope.Escape(New(persistentHandle)->Get(key));\n 1543    }\n 1544  \n 1545:   inline v8::Local<v8::Value> GetFromPersistent(uint32_t index) const {\n 1546:     EscapableHandleScope scope;\n 1547:     return scope.Escape(New(persistentHandle)->Get(index));\n 1548    }\n 1549  \n 1550    virtual void Execute() = 0;\n 1551  \n 1552:   uv_work_t request;\n 1553  \n 1554:   virtual void Destroy() {\n 1555:       delete this;\n 1556    }\n 1557  \n 1558   protected:\n 1559:   Persistent<v8::Object> persistentHandle;\n 1560    Callback *callback;\n 1561  \n ....\n 1565  \n 1566    virtual void HandleErrorCallback() {\n 1567:     HandleScope scope;\n 1568  \n 1569      v8::Local<v8::Value> argv[] = {\n 1570:       v8::Exception::Error(New<v8::String>(ErrorMessage()).ToLocalChecked())\n 1571      };\n 1572      callback->Call(1, argv);\n 1573    }\n 1574  \n 1575:   void SetErrorMessage(const char *msg) {\n 1576:     delete[] errmsg_;\n 1577  \n 1578:     size_t size = strlen(msg) + 1;\n 1579:     errmsg_ = new char[size];\n 1580:     memcpy(errmsg_, msg, size);\n 1581    }\n 1582  \n 1583:   const char* ErrorMessage() const {\n 1584:     return errmsg_;\n 1585    }\n 1586  \n 1587   private:\n 1588:   NAN_DISALLOW_ASSIGN_COPY_MOVE(AsyncWorker)\n 1589:   char *errmsg_;\n 1590  };\n 1591  \n 1592: /* abstract */ class AsyncProgressWorker : public AsyncWorker {\n 1593   public:\n 1594:   explicit AsyncProgressWorker(Callback *callback_)\n 1595:       : AsyncWorker(callback_), asyncdata_(NULL), asyncsize_(0) {\n 1596:     async = new uv_async_t;\n 1597:     uv_async_init(\n 1598          uv_default_loop()\n 1599:       , async\n 1600:       , AsyncProgress_\n 1601      );\n 1602:     async->data = this;\n 1603  \n 1604:     uv_mutex_init(&async_lock);\n 1605    }\n 1606  \n 1607:   virtual ~AsyncProgressWorker() {\n 1608:     uv_mutex_destroy(&async_lock);\n 1609  \n 1610:     delete[] asyncdata_;\n 1611    }\n 1612  \n 1613:   void WorkProgress() {\n 1614:     uv_mutex_lock(&async_lock);\n 1615:     char *data = asyncdata_;\n 1616:     size_t size = asyncsize_;\n 1617:     asyncdata_ = NULL;\n 1618:     uv_mutex_unlock(&async_lock);\n 1619  \n 1620:     // Dont send progress events after we've already completed.\n 1621      if (callback) {\n 1622:         HandleProgressCallback(data, size);\n 1623      }\n 1624      delete[] data;\n 1625    }\n 1626  \n 1627:   class ExecutionProgress {\n 1628:     friend class AsyncProgressWorker;\n 1629     public:\n 1630:     void Signal() const {\n 1631:         uv_async_send(that_->async);\n 1632      }\n 1633:     // You could do fancy generics with templates here.\n 1634:     void Send(const char* data, size_t size) const {\n 1635:         that_->SendProgress_(data, size);\n 1636      }\n 1637  \n 1638     private:\n 1639:     explicit ExecutionProgress(AsyncProgressWorker* that) : that_(that) {}\n 1640:     NAN_DISALLOW_ASSIGN_COPY_MOVE(ExecutionProgress)\n 1641:     AsyncProgressWorker* const that_;\n 1642    };\n 1643  \n 1644:   virtual void Execute(const ExecutionProgress& progress) = 0;\n 1645:   virtual void HandleProgressCallback(const char *data, size_t size) = 0;\n 1646  \n 1647:   virtual void Destroy() {\n 1648:       uv_close(reinterpret_cast<uv_handle_t*>(async), AsyncClose_);\n 1649    }\n 1650  \n 1651   private:\n 1652    void Execute() /*final override*/ {\n 1653:       ExecutionProgress progress(this);\n 1654:       Execute(progress);\n 1655    }\n 1656  \n 1657:   void SendProgress_(const char *data, size_t size) {\n 1658:     char *new_data = new char[size];\n 1659:     memcpy(new_data, data, size);\n 1660  \n 1661:     uv_mutex_lock(&async_lock);\n 1662:     char *old_data = asyncdata_;\n 1663:     asyncdata_ = new_data;\n 1664:     asyncsize_ = size;\n 1665:     uv_mutex_unlock(&async_lock);\n 1666  \n 1667      delete[] old_data;\n 1668:     uv_async_send(async);\n 1669    }\n 1670  \n 1671:   inline static NAUV_WORK_CB(AsyncProgress_) {\n 1672:     AsyncProgressWorker *worker =\n 1673:             static_cast<AsyncProgressWorker*>(async->data);\n 1674:     worker->WorkProgress();\n 1675    }\n 1676  \n 1677:   inline static void AsyncClose_(uv_handle_t* handle) {\n 1678:     AsyncProgressWorker *worker =\n 1679:             static_cast<AsyncProgressWorker*>(handle->data);\n 1680:     delete reinterpret_cast<uv_async_t*>(handle);\n 1681      delete worker;\n 1682    }\n 1683  \n 1684:   uv_async_t *async;\n 1685:   uv_mutex_t async_lock;\n 1686:   char *asyncdata_;\n 1687:   size_t asyncsize_;\n 1688  };\n 1689  \n 1690: inline void AsyncExecute (uv_work_t* req) {\n 1691:   AsyncWorker *worker = static_cast<AsyncWorker*>(req->data);\n 1692    worker->Execute();\n 1693  }\n 1694  \n 1695: inline void AsyncExecuteComplete (uv_work_t* req) {\n 1696:   AsyncWorker* worker = static_cast<AsyncWorker*>(req->data);\n 1697    worker->WorkComplete();\n 1698:   worker->Destroy();\n 1699  }\n 1700  \n 1701: inline void AsyncQueueWorker (AsyncWorker* worker) {\n 1702    uv_queue_work(\n 1703        uv_default_loop()\n 1704:     , &worker->request\n 1705:     , AsyncExecute\n 1706:     , reinterpret_cast<uv_after_work_cb>(AsyncExecuteComplete)\n 1707    );\n 1708  }\n 1709  \n 1710: namespace imp {\n 1711  \n 1712  inline\n 1713: ExternalOneByteStringResource const*\n 1714: GetExternalResource(v8::Local<v8::String> str) {\n 1715: #if NODE_MODULE_VERSION < ATOM_0_21_MODULE_VERSION\n 1716:     return str->GetExternalAsciiStringResource();\n 1717: #else\n 1718:     return str->GetExternalOneByteStringResource();\n 1719  #endif\n 1720  }\n ....\n 1722  inline\n 1723  bool\n 1724: IsExternal(v8::Local<v8::String> str) {\n 1725: #if NODE_MODULE_VERSION < ATOM_0_21_MODULE_VERSION\n 1726:     return str->IsExternalAscii();\n 1727: #else\n 1728:     return str->IsExternalOneByte();\n 1729  #endif\n 1730  }\n 1731  \n 1732: }  // end of namespace imp\n 1733  \n 1734: enum Encoding {ASCII, UTF8, BASE64, UCS2, BINARY, HEX, BUFFER};\n 1735  \n 1736: #if NODE_MODULE_VERSION < NODE_0_10_MODULE_VERSION\n 1737: # include \"nan_string_bytes.h\"  // NOLINT(build/include)\n 1738  #endif\n 1739  \n 1740  inline v8::Local<v8::Value> Encode(\n 1741:     const void *buf, size_t len, enum Encoding encoding = BINARY) {\n 1742: #if (NODE_MODULE_VERSION >= ATOM_0_21_MODULE_VERSION)\n 1743:   v8::Isolate* isolate = v8::Isolate::GetCurrent();\n 1744:   node::encoding node_enc = static_cast<node::encoding>(encoding);\n 1745  \n 1746:   if (encoding == UCS2) {\n 1747      return node::Encode(\n 1748:         isolate\n 1749:       , reinterpret_cast<const uint16_t *>(buf)\n 1750        , len / 2);\n 1751:   } else {\n 1752      return node::Encode(\n 1753:         isolate\n 1754:       , reinterpret_cast<const char *>(buf)\n 1755        , len\n 1756        , node_enc);\n 1757    }\n 1758: #elif (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n 1759    return node::Encode(\n 1760:       v8::Isolate::GetCurrent()\n 1761      , buf, len\n 1762:     , static_cast<node::encoding>(encoding));\n 1763: #else\n 1764: # if NODE_MODULE_VERSION >= NODE_0_10_MODULE_VERSION\n 1765:   return node::Encode(buf, len, static_cast<node::encoding>(encoding));\n 1766: # else\n 1767:   return imp::Encode(reinterpret_cast<const char*>(buf), len, encoding);\n 1768  # endif\n 1769  #endif\n 1770  }\n 1771  \n 1772: inline ssize_t DecodeBytes(\n 1773      v8::Local<v8::Value> val, enum Encoding encoding = BINARY) {\n 1774: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n 1775:   return node::DecodeBytes(\n 1776:       v8::Isolate::GetCurrent()\n 1777      , val\n 1778:     , static_cast<node::encoding>(encoding));\n 1779: #else\n 1780: # if (NODE_MODULE_VERSION < NODE_0_10_MODULE_VERSION)\n 1781    if (encoding == BUFFER) {\n 1782:     return node::DecodeBytes(val, node::BINARY);\n 1783    }\n 1784  # endif\n 1785:   return node::DecodeBytes(val, static_cast<node::encoding>(encoding));\n 1786  #endif\n 1787  }\n 1788  \n 1789: inline ssize_t DecodeWrite(\n 1790      char *buf\n 1791:   , size_t len\n 1792    , v8::Local<v8::Value> val\n 1793    , enum Encoding encoding = BINARY) {\n 1794: #if (NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION)\n 1795    return node::DecodeWrite(\n 1796:       v8::Isolate::GetCurrent()\n 1797      , buf\n 1798      , len\n 1799      , val\n 1800:     , static_cast<node::encoding>(encoding));\n 1801: #else\n 1802: # if (NODE_MODULE_VERSION < NODE_0_10_MODULE_VERSION)\n 1803    if (encoding == BUFFER) {\n 1804      return node::DecodeWrite(buf, len, val, node::BINARY);\n ....\n 1809      , len\n 1810      , val\n 1811:     , static_cast<node::encoding>(encoding));\n 1812  #endif\n 1813  }\n 1814  \n 1815: inline void SetPrototypeTemplate(\n 1816      v8::Local<v8::FunctionTemplate> templ\n 1817:   , const char *name\n 1818    , v8::Local<v8::Data> value\n 1819  ) {\n 1820:   SetTemplate(templ->PrototypeTemplate(), name, value);\n 1821  }\n 1822  \n 1823: inline void SetPrototypeTemplate(\n 1824      v8::Local<v8::FunctionTemplate> templ\n 1825:   , v8::Local<v8::String> name\n 1826    , v8::Local<v8::Data> value\n 1827:   , v8::PropertyAttribute attributes\n 1828  ) {\n 1829:   SetTemplate(templ->PrototypeTemplate(), name, value, attributes);\n 1830  }\n 1831  \n 1832: inline void SetInstanceTemplate(\n 1833      v8::Local<v8::FunctionTemplate> templ\n 1834:   , const char *name\n 1835    , v8::Local<v8::Data> value\n 1836  ) {\n 1837:   SetTemplate(templ->InstanceTemplate(), name, value);\n 1838  }\n 1839  \n 1840: inline void SetInstanceTemplate(\n 1841      v8::Local<v8::FunctionTemplate> templ\n 1842:   , v8::Local<v8::String> name\n 1843    , v8::Local<v8::Data> value\n 1844:   , v8::PropertyAttribute attributes\n 1845  ) {\n 1846:   SetTemplate(templ->InstanceTemplate(), name, value, attributes);\n 1847  }\n 1848  \n 1849: namespace imp {\n 1850  \n 1851: // Note(@agnat): Helper to distinguish different receiver types. The first\n 1852: // version deals with receivers derived from v8::Template. The second version\n 1853: // handles everything else. The final argument only serves as discriminator and\n 1854: // is unused.\n 1855  template <typename T>\n 1856  inline\n 1857  void\n 1858: SetMethodAux(T recv,\n 1859:              v8::Local<v8::String> name,\n 1860               v8::Local<v8::FunctionTemplate> tpl,\n 1861               v8::Template *) {\n 1862:   recv->Set(name, tpl);\n 1863  }\n 1864  \n ....\n 1866  inline\n 1867  void\n 1868: SetMethodAux(T recv,\n 1869:              v8::Local<v8::String> name,\n 1870               v8::Local<v8::FunctionTemplate> tpl,\n 1871               ...) {\n 1872:   recv->Set(name, GetFunction(tpl).ToLocalChecked());\n 1873  }\n 1874  \n 1875: }  // end of namespace imp\n 1876  \n 1877: template <typename T, template <typename> class HandleType>\n 1878: inline void SetMethod(\n 1879      HandleType<T> recv\n 1880:   , const char *name\n 1881    , FunctionCallback callback) {\n 1882:   HandleScope scope;\n 1883    v8::Local<v8::FunctionTemplate> t = New<v8::FunctionTemplate>(callback);\n 1884:   v8::Local<v8::String> fn_name = New(name).ToLocalChecked();\n 1885:   t->SetClassName(fn_name);\n 1886:   // Note(@agnat): Pass an empty T* as discriminator. See note on\n 1887:   // SetMethodAux(...) above\n 1888:   imp::SetMethodAux(recv, fn_name, t, static_cast<T*>(0));\n 1889  }\n 1890  \n 1891: inline void SetPrototypeMethod(\n 1892      v8::Local<v8::FunctionTemplate> recv\n 1893:   , const char* name, FunctionCallback callback) {\n 1894:   HandleScope scope;\n 1895    v8::Local<v8::FunctionTemplate> t = New<v8::FunctionTemplate>(\n 1896        callback\n 1897      , v8::Local<v8::Value>()\n 1898:     , New<v8::Signature>(recv));\n 1899:   v8::Local<v8::String> fn_name = New(name).ToLocalChecked();\n 1900:   recv->PrototypeTemplate()->Set(fn_name, t);\n 1901:   t->SetClassName(fn_name);\n 1902  }\n 1903  \n 1904: //=== Accessors and Such =======================================================\n 1905  \n 1906: inline void SetAccessor(\n 1907      v8::Local<v8::ObjectTemplate> tpl\n 1908:   , v8::Local<v8::String> name\n 1909    , GetterCallback getter\n 1910:   , SetterCallback setter = 0\n 1911    , v8::Local<v8::Value> data = v8::Local<v8::Value>()\n 1912:   , v8::AccessControl settings = v8::DEFAULT\n 1913    , v8::PropertyAttribute attribute = v8::None\n 1914:   , imp::Sig signature = imp::Sig()) {\n 1915:   HandleScope scope;\n 1916  \n 1917    imp::NativeGetter getter_ =\n 1918        imp::GetterCallbackWrapper;\n 1919:   imp::NativeSetter setter_ =\n 1920:       setter ? imp::SetterCallbackWrapper : 0;\n 1921  \n 1922    v8::Local<v8::ObjectTemplate> otpl = New<v8::ObjectTemplate>();\n 1923:   otpl->SetInternalFieldCount(imp::kAccessorFieldCount);\n 1924:   v8::Local<v8::Object> obj = NewInstance(otpl).ToLocalChecked();\n 1925  \n 1926:   obj->SetInternalField(\n 1927        imp::kGetterIndex\n 1928:     , New<v8::External>(reinterpret_cast<void *>(getter)));\n 1929  \n 1930:   if (setter != 0) {\n 1931:     obj->SetInternalField(\n 1932:         imp::kSetterIndex\n 1933:       , New<v8::External>(reinterpret_cast<void *>(setter)));\n 1934    }\n 1935  \n 1936:   if (!data.IsEmpty()) {\n 1937:     obj->SetInternalField(imp::kDataIndex, data);\n 1938    }\n 1939  \n 1940:   tpl->SetAccessor(\n 1941        name\n 1942      , getter_\n 1943:     , setter_\n 1944      , obj\n 1945:     , settings\n 1946      , attribute\n 1947:     , signature);\n 1948  }\n 1949  \n 1950: inline bool SetAccessor(\n 1951      v8::Local<v8::Object> obj\n 1952:   , v8::Local<v8::String> name\n 1953    , GetterCallback getter\n 1954:   , SetterCallback setter = 0\n 1955    , v8::Local<v8::Value> data = v8::Local<v8::Value>()\n 1956:   , v8::AccessControl settings = v8::DEFAULT\n 1957    , v8::PropertyAttribute attribute = v8::None) {\n 1958:   EscapableHandleScope scope;\n 1959  \n 1960    imp::NativeGetter getter_ =\n 1961        imp::GetterCallbackWrapper;\n 1962:   imp::NativeSetter setter_ =\n 1963:       setter ? imp::SetterCallbackWrapper : 0;\n 1964  \n 1965    v8::Local<v8::ObjectTemplate> otpl = New<v8::ObjectTemplate>();\n 1966:   otpl->SetInternalFieldCount(imp::kAccessorFieldCount);\n 1967:   v8::Local<v8::Object> dataobj = NewInstance(otpl).ToLocalChecked();\n 1968  \n 1969:   dataobj->SetInternalField(\n 1970        imp::kGetterIndex\n 1971:     , New<v8::External>(reinterpret_cast<void *>(getter)));\n 1972  \n 1973:   if (!data.IsEmpty()) {\n 1974:     dataobj->SetInternalField(imp::kDataIndex, data);\n 1975    }\n 1976  \n 1977:   if (setter) {\n 1978:     dataobj->SetInternalField(\n 1979:         imp::kSetterIndex\n 1980:       , New<v8::External>(reinterpret_cast<void *>(setter)));\n 1981    }\n 1982  \n 1983: #if (NODE_MODULE_VERSION >= NODE_6_0_MODULE_VERSION)\n 1984:   return obj->SetAccessor(\n 1985        GetCurrentContext()\n 1986      , name\n 1987      , getter_\n 1988:     , setter_\n 1989      , dataobj\n 1990:     , settings\n 1991:     , attribute).FromMaybe(false);\n 1992: #else\n 1993:   return obj->SetAccessor(\n 1994        name\n 1995      , getter_\n 1996:     , setter_\n 1997      , dataobj\n 1998:     , settings\n 1999      , attribute);\n 2000  #endif\n 2001  }\n 2002  \n 2003: inline void SetNamedPropertyHandler(\n 2004      v8::Local<v8::ObjectTemplate> tpl\n 2005    , PropertyGetterCallback getter\n 2006:   , PropertySetterCallback setter = 0\n 2007    , PropertyQueryCallback query = 0\n 2008    , PropertyDeleterCallback deleter = 0\n 2009    , PropertyEnumeratorCallback enumerator = 0\n 2010    , v8::Local<v8::Value> data = v8::Local<v8::Value>()) {\n 2011:   HandleScope scope;\n 2012  \n 2013    imp::NativePropertyGetter getter_ =\n 2014        imp::PropertyGetterCallbackWrapper;\n 2015:   imp::NativePropertySetter setter_ =\n 2016:       setter ? imp::PropertySetterCallbackWrapper : 0;\n 2017    imp::NativePropertyQuery query_ =\n 2018        query ? imp::PropertyQueryCallbackWrapper : 0;\n ....\n 2023  \n 2024    v8::Local<v8::ObjectTemplate> otpl = New<v8::ObjectTemplate>();\n 2025:   otpl->SetInternalFieldCount(imp::kPropertyFieldCount);\n 2026:   v8::Local<v8::Object> obj = NewInstance(otpl).ToLocalChecked();\n 2027:   obj->SetInternalField(\n 2028        imp::kPropertyGetterIndex\n 2029:     , New<v8::External>(reinterpret_cast<void *>(getter)));\n 2030  \n 2031:   if (setter) {\n 2032:     obj->SetInternalField(\n 2033:         imp::kPropertySetterIndex\n 2034:       , New<v8::External>(reinterpret_cast<void *>(setter)));\n 2035    }\n 2036  \n 2037    if (query) {\n 2038:     obj->SetInternalField(\n 2039          imp::kPropertyQueryIndex\n 2040:       , New<v8::External>(reinterpret_cast<void *>(query)));\n 2041    }\n 2042  \n 2043    if (deleter) {\n 2044:     obj->SetInternalField(\n 2045          imp::kPropertyDeleterIndex\n 2046:       , New<v8::External>(reinterpret_cast<void *>(deleter)));\n 2047    }\n 2048  \n 2049    if (enumerator) {\n 2050:     obj->SetInternalField(\n 2051          imp::kPropertyEnumeratorIndex\n 2052:       , New<v8::External>(reinterpret_cast<void *>(enumerator)));\n 2053    }\n 2054  \n 2055:   if (!data.IsEmpty()) {\n 2056:     obj->SetInternalField(imp::kDataIndex, data);\n 2057    }\n 2058  \n 2059: #if NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n 2060:   tpl->SetHandler(v8::NamedPropertyHandlerConfiguration(\n 2061:       getter_, setter_, query_, deleter_, enumerator_, obj));\n 2062: #else\n 2063:   tpl->SetNamedPropertyHandler(\n 2064        getter_\n 2065:     , setter_\n 2066      , query_\n 2067      , deleter_\n ....\n 2071  }\n 2072  \n 2073: inline void SetIndexedPropertyHandler(\n 2074      v8::Local<v8::ObjectTemplate> tpl\n 2075    , IndexGetterCallback getter\n 2076:   , IndexSetterCallback setter = 0\n 2077    , IndexQueryCallback query = 0\n 2078    , IndexDeleterCallback deleter = 0\n 2079    , IndexEnumeratorCallback enumerator = 0\n 2080    , v8::Local<v8::Value> data = v8::Local<v8::Value>()) {\n 2081:   HandleScope scope;\n 2082  \n 2083    imp::NativeIndexGetter getter_ =\n 2084        imp::IndexGetterCallbackWrapper;\n 2085:   imp::NativeIndexSetter setter_ =\n 2086:       setter ? imp::IndexSetterCallbackWrapper : 0;\n 2087    imp::NativeIndexQuery query_ =\n 2088        query ? imp::IndexQueryCallbackWrapper : 0;\n ....\n 2093  \n 2094    v8::Local<v8::ObjectTemplate> otpl = New<v8::ObjectTemplate>();\n 2095:   otpl->SetInternalFieldCount(imp::kIndexPropertyFieldCount);\n 2096:   v8::Local<v8::Object> obj = NewInstance(otpl).ToLocalChecked();\n 2097:   obj->SetInternalField(\n 2098        imp::kIndexPropertyGetterIndex\n 2099:     , New<v8::External>(reinterpret_cast<void *>(getter)));\n 2100  \n 2101:   if (setter) {\n 2102:     obj->SetInternalField(\n 2103:         imp::kIndexPropertySetterIndex\n 2104:       , New<v8::External>(reinterpret_cast<void *>(setter)));\n 2105    }\n 2106  \n 2107    if (query) {\n 2108:     obj->SetInternalField(\n 2109          imp::kIndexPropertyQueryIndex\n 2110:       , New<v8::External>(reinterpret_cast<void *>(query)));\n 2111    }\n 2112  \n 2113    if (deleter) {\n 2114:     obj->SetInternalField(\n 2115          imp::kIndexPropertyDeleterIndex\n 2116:       , New<v8::External>(reinterpret_cast<void *>(deleter)));\n 2117    }\n 2118  \n 2119    if (enumerator) {\n 2120:     obj->SetInternalField(\n 2121          imp::kIndexPropertyEnumeratorIndex\n 2122:       , New<v8::External>(reinterpret_cast<void *>(enumerator)));\n 2123    }\n 2124  \n 2125:   if (!data.IsEmpty()) {\n 2126:     obj->SetInternalField(imp::kDataIndex, data);\n 2127    }\n 2128  \n 2129: #if NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n 2130:   tpl->SetHandler(v8::IndexedPropertyHandlerConfiguration(\n 2131:       getter_, setter_, query_, deleter_, enumerator_, obj));\n 2132: #else\n 2133:   tpl->SetIndexedPropertyHandler(\n 2134        getter_\n 2135:     , setter_\n 2136      , query_\n 2137      , deleter_\n ....\n 2141  }\n 2142  \n 2143: inline void SetCallHandler(\n 2144      v8::Local<v8::FunctionTemplate> tpl\n 2145    , FunctionCallback callback\n 2146    , v8::Local<v8::Value> data = v8::Local<v8::Value>()) {\n 2147:   HandleScope scope;\n 2148  \n 2149    v8::Local<v8::ObjectTemplate> otpl = New<v8::ObjectTemplate>();\n 2150:   otpl->SetInternalFieldCount(imp::kFunctionFieldCount);\n 2151:   v8::Local<v8::Object> obj = NewInstance(otpl).ToLocalChecked();\n 2152  \n 2153:   obj->SetInternalField(\n 2154        imp::kFunctionIndex\n 2155:     , New<v8::External>(reinterpret_cast<void *>(callback)));\n 2156  \n 2157:   if (!data.IsEmpty()) {\n 2158:     obj->SetInternalField(imp::kDataIndex, data);\n 2159    }\n 2160  \n 2161:   tpl->SetCallHandler(imp::FunctionCallbackWrapper, obj);\n 2162  }\n 2163  \n 2164  \n 2165: inline void SetCallAsFunctionHandler(\n 2166      v8::Local<v8::ObjectTemplate> tpl,\n 2167      FunctionCallback callback,\n 2168      v8::Local<v8::Value> data = v8::Local<v8::Value>()) {\n 2169:   HandleScope scope;\n 2170  \n 2171    v8::Local<v8::ObjectTemplate> otpl = New<v8::ObjectTemplate>();\n 2172:   otpl->SetInternalFieldCount(imp::kFunctionFieldCount);\n 2173:   v8::Local<v8::Object> obj = NewInstance(otpl).ToLocalChecked();\n 2174  \n 2175:   obj->SetInternalField(\n 2176        imp::kFunctionIndex\n 2177:     , New<v8::External>(reinterpret_cast<void *>(callback)));\n 2178  \n 2179:   if (!data.IsEmpty()) {\n 2180:     obj->SetInternalField(imp::kDataIndex, data);\n 2181    }\n 2182  \n 2183:   tpl->SetCallAsFunctionHandler(imp::FunctionCallbackWrapper, obj);\n 2184  }\n 2185  \n 2186: //=== Weak Persistent Handling =================================================\n 2187  \n 2188  #include \"nan_weak.h\"  // NOLINT(build/include)\n ....\n 2196  inline\n 2197  void\n 2198: Export(ADDON_REGISTER_FUNCTION_ARGS_TYPE target, const char *name,\n 2199      FunctionCallback f) {\n 2200:   Set(target, New<v8::String>(name).ToLocalChecked(),\n 2201        GetFunction(New<v8::FunctionTemplate>(f)).ToLocalChecked());\n 2202  }\n 2203  \n 2204: //=== Tap Reverse Binding =====================================================\n 2205  \n 2206: struct Tap {\n 2207    explicit Tap(v8::Local<v8::Value> t) : t_() {\n 2208:     t_.Reset(To<v8::Object>(t).ToLocalChecked());\n 2209    }\n 2210  \n 2211:   ~Tap() { t_.Reset(); }  // not sure if neccessary\n 2212  \n 2213    inline void plan(int i) {\n ....\n 2216    }\n 2217  \n 2218:   inline void ok(bool isOk, const char *msg = NULL) {\n 2219:     v8::Local<v8::Value> args[2];\n 2220:     args[0] = New(isOk);\n 2221:     if (msg) args[1] = New(msg).ToLocalChecked();\n 2222:     MakeCallback(New(t_), \"ok\", msg ? 2 : 1, args);\n 2223    }\n 2224  \n 2225:   inline void pass(const char * msg = NULL) {\n 2226:     v8::Local<v8::Value> hmsg;\n 2227:     if (msg) hmsg = New(msg).ToLocalChecked();\n 2228:     MakeCallback(New(t_), \"pass\", msg ? 1 : 0, &hmsg);\n 2229    }\n 2230  \n 2231   private:\n 2232:   Persistent<v8::Object> t_;\n 2233  };\n 2234  \n 2235: #define NAN_STRINGIZE2(x) #x\n 2236: #define NAN_STRINGIZE(x) NAN_STRINGIZE2(x)\n 2237: #define NAN_TEST_EXPRESSION(expression) \\\n 2238:   ( expression ), __FILE__ \":\" NAN_STRINGIZE(__LINE__) \": \" #expression\n 2239  \n 2240  #define NAN_EXPORT(target, function) Export(target, #function, function)\n ....\n 2244  //=== Generic Maybefication ===================================================\n 2245  \n 2246: namespace imp {\n 2247  \n 2248: template <typename T> struct Maybefier;\n 2249  \n 2250: template <typename T> struct Maybefier<v8::Local<T> > {\n 2251:   static MaybeLocal<T> convert(v8::Local<T> v) {\n 2252      return MaybeLocal<T>(v);\n 2253    }\n 2254  };\n 2255  \n 2256: template <typename T> struct Maybefier<MaybeLocal<T> > {\n 2257:   static MaybeLocal<T> convert(MaybeLocal<T> v) {\n 2258      return v;\n 2259    }\n 2260  };\n 2261  \n 2262: }  // end of namespace imp\n 2263  \n 2264: template <typename T, template <typename> class MaybeMaybe>\n 2265  MaybeLocal<T>\n 2266  MakeMaybe(MaybeMaybe<T> v) {\n ....\n 2268  }\n 2269  \n 2270: //=== TypedArrayContents =======================================================\n 2271  \n 2272: #include \"nan_typedarray_contents.h\"  // NOLINT(build/include)\n 2273  \n 2274: }  // end of namespace Nan\n 2275  \n 2276  #endif  // NAN_H_\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_callbacks.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_CALLBACKS_H_\n   10: #define NAN_CALLBACKS_H_\n   11  \n   12: template<typename T> class FunctionCallbackInfo;\n   13: template<typename T> class PropertyCallbackInfo;\n   14: template<typename T> class Global;\n   15  \n   16: typedef void(*FunctionCallback)(const FunctionCallbackInfo<v8::Value>&);\n   17  typedef void(*GetterCallback)\n   18:     (v8::Local<v8::String>, const PropertyCallbackInfo<v8::Value>&);\n   19: typedef void(*SetterCallback)(\n   20:     v8::Local<v8::String>,\n   21      v8::Local<v8::Value>,\n   22:     const PropertyCallbackInfo<void>&);\n   23  typedef void(*PropertyGetterCallback)(\n   24:     v8::Local<v8::String>,\n   25:     const PropertyCallbackInfo<v8::Value>&);\n   26: typedef void(*PropertySetterCallback)(\n   27:     v8::Local<v8::String>,\n   28      v8::Local<v8::Value>,\n   29:     const PropertyCallbackInfo<v8::Value>&);\n   30  typedef void(*PropertyEnumeratorCallback)\n   31:     (const PropertyCallbackInfo<v8::Array>&);\n   32  typedef void(*PropertyDeleterCallback)(\n   33:     v8::Local<v8::String>,\n   34:     const PropertyCallbackInfo<v8::Boolean>&);\n   35  typedef void(*PropertyQueryCallback)(\n   36:     v8::Local<v8::String>,\n   37:     const PropertyCallbackInfo<v8::Integer>&);\n   38  typedef void(*IndexGetterCallback)(\n   39      uint32_t,\n   40:     const PropertyCallbackInfo<v8::Value>&);\n   41: typedef void(*IndexSetterCallback)(\n   42      uint32_t,\n   43      v8::Local<v8::Value>,\n   44:     const PropertyCallbackInfo<v8::Value>&);\n   45  typedef void(*IndexEnumeratorCallback)\n   46:     (const PropertyCallbackInfo<v8::Array>&);\n   47  typedef void(*IndexDeleterCallback)(\n   48      uint32_t,\n   49:     const PropertyCallbackInfo<v8::Boolean>&);\n   50  typedef void(*IndexQueryCallback)(\n   51      uint32_t,\n   52:     const PropertyCallbackInfo<v8::Integer>&);\n   53  \n   54: namespace imp {\n   55: typedef v8::Local<v8::AccessorSignature> Sig;\n   56  \n   57: static const int kDataIndex =                    0;\n   58  \n   59: static const int kFunctionIndex =                1;\n   60: static const int kFunctionFieldCount =           2;\n   61  \n   62: static const int kGetterIndex =                  1;\n   63: static const int kSetterIndex =                  2;\n   64: static const int kAccessorFieldCount =           3;\n   65  \n   66: static const int kPropertyGetterIndex =          1;\n   67: static const int kPropertySetterIndex =          2;\n   68: static const int kPropertyEnumeratorIndex =      3;\n   69: static const int kPropertyDeleterIndex =         4;\n   70: static const int kPropertyQueryIndex =           5;\n   71: static const int kPropertyFieldCount =           6;\n   72  \n   73: static const int kIndexPropertyGetterIndex =     1;\n   74: static const int kIndexPropertySetterIndex =     2;\n   75: static const int kIndexPropertyEnumeratorIndex = 3;\n   76: static const int kIndexPropertyDeleterIndex =    4;\n   77: static const int kIndexPropertyQueryIndex =      5;\n   78: static const int kIndexPropertyFieldCount =      6;\n   79  \n   80: }  // end of namespace imp\n   81  \n   82: #if NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n   83: # include \"nan_callbacks_12_inl.h\"  // NOLINT(build/include)\n   84: #else\n   85: # include \"nan_callbacks_pre_12_inl.h\"  // NOLINT(build/include)\n   86  #endif\n   87  \n   88: #endif  // NAN_CALLBACKS_H_\n   89  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_callbacks_12_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_CALLBACKS_12_INL_H_\n   10: #define NAN_CALLBACKS_12_INL_H_\n   11  \n   12  template<typename T>\n   13: class ReturnValue {\n   14    v8::ReturnValue<T> value_;\n   15  \n   16   public:\n   17:   template <class S>\n   18:   explicit inline ReturnValue(const v8::ReturnValue<S> &value) :\n   19        value_(value) {}\n   20:   template <class S>\n   21:   explicit inline ReturnValue(const ReturnValue<S>& that)\n   22        : value_(that.value_) {\n   23:     TYPE_CHECK(T, S);\n   24    }\n   25  \n   26:   // Handle setters\n   27:   template <typename S> inline void Set(const v8::Local<S> &handle) {\n   28:     TYPE_CHECK(T, S);\n   29:     value_.Set(handle);\n   30    }\n   31  \n   32:   template <typename S> inline void Set(const Global<S> &handle) {\n   33:     TYPE_CHECK(T, S);\n   34: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   35:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) &&                       \\\n   36:   (V8_MINOR_VERSION > 5 || (V8_MINOR_VERSION == 5 &&                           \\\n   37    defined(V8_BUILD_NUMBER) && V8_BUILD_NUMBER >= 8))))\n   38:     value_.Set(handle);\n   39: #else\n   40:     value_.Set(*reinterpret_cast<const v8::Persistent<S>*>(&handle));\n   41:     const_cast<Global<S> &>(handle).Reset();\n   42  #endif\n   43    }\n   44  \n   45:   // Fast primitive setters\n   46:   inline void Set(bool value) {\n   47      TYPE_CHECK(T, v8::Boolean);\n   48:     value_.Set(value);\n   49    }\n   50  \n   51:   inline void Set(double i) {\n   52      TYPE_CHECK(T, v8::Number);\n   53:     value_.Set(i);\n   54    }\n   55  \n   56:   inline void Set(int32_t i) {\n   57      TYPE_CHECK(T, v8::Integer);\n   58:     value_.Set(i);\n   59    }\n   60  \n   61:   inline void Set(uint32_t i) {\n   62      TYPE_CHECK(T, v8::Integer);\n   63:     value_.Set(i);\n   64    }\n   65  \n   66:   // Fast JS primitive setters\n   67:   inline void SetNull() {\n   68      TYPE_CHECK(T, v8::Primitive);\n   69:     value_.SetNull();\n   70    }\n   71  \n   72:   inline void SetUndefined() {\n   73      TYPE_CHECK(T, v8::Primitive);\n   74:     value_.SetUndefined();\n   75    }\n   76  \n   77:   inline void SetEmptyString() {\n   78:     TYPE_CHECK(T, v8::String);\n   79:     value_.SetEmptyString();\n   80    }\n   81  \n   82:   // Convenience getter for isolate\n   83:   inline v8::Isolate *GetIsolate() const {\n   84:     return value_.GetIsolate();\n   85    }\n   86  \n   87:   // Pointer setter: Uncompilable to prevent inadvertent misuse.\n   88:   template<typename S>\n   89:   inline void Set(S *whatever) { TYPE_CHECK(S*, v8::Primitive); }\n   90  };\n   91  \n   92  template<typename T>\n   93: class FunctionCallbackInfo {\n   94:   const v8::FunctionCallbackInfo<T> &info_;\n   95:   const v8::Local<v8::Value> data_;\n   96  \n   97   public:\n   98    explicit inline FunctionCallbackInfo(\n   99:       const v8::FunctionCallbackInfo<T> &info\n  100      , v8::Local<v8::Value> data) :\n  101            info_(info)\n  102          , data_(data) {}\n  103  \n  104:   inline ReturnValue<T> GetReturnValue() const {\n  105      return ReturnValue<T>(info_.GetReturnValue());\n  106    }\n  107  \n  108:   inline v8::Local<v8::Function> Callee() const { return info_.Callee(); }\n  109:   inline v8::Local<v8::Value> Data() const { return data_; }\n  110:   inline v8::Local<v8::Object> Holder() const { return info_.Holder(); }\n  111:   inline bool IsConstructCall() const { return info_.IsConstructCall(); }\n  112:   inline int Length() const { return info_.Length(); }\n  113:   inline v8::Local<v8::Value> operator[](int i) const { return info_[i]; }\n  114:   inline v8::Local<v8::Object> This() const { return info_.This(); }\n  115:   inline v8::Isolate *GetIsolate() const { return info_.GetIsolate(); }\n  116  \n  117  \n  118   protected:\n  119:   static const int kHolderIndex = 0;\n  120:   static const int kIsolateIndex = 1;\n  121:   static const int kReturnValueDefaultValueIndex = 2;\n  122:   static const int kReturnValueIndex = 3;\n  123:   static const int kDataIndex = 4;\n  124:   static const int kCalleeIndex = 5;\n  125:   static const int kContextSaveIndex = 6;\n  126:   static const int kArgsLength = 7;\n  127  \n  128   private:\n  129:   NAN_DISALLOW_ASSIGN_COPY_MOVE(FunctionCallbackInfo)\n  130  };\n  131  \n  132  template<typename T>\n  133: class PropertyCallbackInfo {\n  134:   const v8::PropertyCallbackInfo<T> &info_;\n  135:   const v8::Local<v8::Value> data_;\n  136  \n  137   public:\n  138    explicit inline PropertyCallbackInfo(\n  139:       const v8::PropertyCallbackInfo<T> &info\n  140:     , const v8::Local<v8::Value> data) :\n  141            info_(info)\n  142          , data_(data) {}\n  143  \n  144:   inline v8::Isolate* GetIsolate() const { return info_.GetIsolate(); }\n  145:   inline v8::Local<v8::Value> Data() const { return data_; }\n  146:   inline v8::Local<v8::Object> This() const { return info_.This(); }\n  147:   inline v8::Local<v8::Object> Holder() const { return info_.Holder(); }\n  148:   inline ReturnValue<T> GetReturnValue() const {\n  149      return ReturnValue<T>(info_.GetReturnValue());\n  150    }\n  151  \n  152   protected:\n  153:   static const int kHolderIndex = 0;\n  154:   static const int kIsolateIndex = 1;\n  155:   static const int kReturnValueDefaultValueIndex = 2;\n  156:   static const int kReturnValueIndex = 3;\n  157:   static const int kDataIndex = 4;\n  158:   static const int kThisIndex = 5;\n  159:   static const int kArgsLength = 6;\n  160  \n  161   private:\n  162:   NAN_DISALLOW_ASSIGN_COPY_MOVE(PropertyCallbackInfo)\n  163  };\n  164  \n  165: namespace imp {\n  166: static\n  167: void FunctionCallbackWrapper(const v8::FunctionCallbackInfo<v8::Value> &info) {\n  168:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  169:   FunctionCallback callback = reinterpret_cast<FunctionCallback>(\n  170:       reinterpret_cast<intptr_t>(\n  171:           obj->GetInternalField(kFunctionIndex).As<v8::External>()->Value()));\n  172    FunctionCallbackInfo<v8::Value>\n  173        cbinfo(info, obj->GetInternalField(kDataIndex));\n  ...\n  175  }\n  176  \n  177: typedef void (*NativeFunction)(const v8::FunctionCallbackInfo<v8::Value> &);\n  178  \n  179: #if NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n  180: static\n  181  void GetterCallbackWrapper(\n  182      v8::Local<v8::Name> property\n  183:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  184:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  185    PropertyCallbackInfo<v8::Value>\n  186        cbinfo(info, obj->GetInternalField(kDataIndex));\n  187:   GetterCallback callback = reinterpret_cast<GetterCallback>(\n  188:       reinterpret_cast<intptr_t>(\n  189:           obj->GetInternalField(kGetterIndex).As<v8::External>()->Value()));\n  190:   callback(property.As<v8::String>(), cbinfo);\n  191  }\n  192  \n  193  typedef void (*NativeGetter)\n  194:     (v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value> &);\n  195  \n  196: static\n  197: void SetterCallbackWrapper(\n  198      v8::Local<v8::Name> property\n  199    , v8::Local<v8::Value> value\n  200:   , const v8::PropertyCallbackInfo<void> &info) {\n  201:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  202    PropertyCallbackInfo<void>\n  203        cbinfo(info, obj->GetInternalField(kDataIndex));\n  204:   SetterCallback callback = reinterpret_cast<SetterCallback>(\n  205:       reinterpret_cast<intptr_t>(\n  206:           obj->GetInternalField(kSetterIndex).As<v8::External>()->Value()));\n  207:   callback(property.As<v8::String>(), value, cbinfo);\n  208  }\n  209  \n  210: typedef void (*NativeSetter)(\n  211      v8::Local<v8::Name>\n  212    , v8::Local<v8::Value>\n  213:   , const v8::PropertyCallbackInfo<void> &);\n  214: #else\n  215: static\n  216  void GetterCallbackWrapper(\n  217:     v8::Local<v8::String> property\n  218:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  219:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  220    PropertyCallbackInfo<v8::Value>\n  221        cbinfo(info, obj->GetInternalField(kDataIndex));\n  222:   GetterCallback callback = reinterpret_cast<GetterCallback>(\n  223:       reinterpret_cast<intptr_t>(\n  224:           obj->GetInternalField(kGetterIndex).As<v8::External>()->Value()));\n  225    callback(property, cbinfo);\n  226  }\n  227  \n  228  typedef void (*NativeGetter)\n  229:     (v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value> &);\n  230  \n  231: static\n  232: void SetterCallbackWrapper(\n  233:     v8::Local<v8::String> property\n  234    , v8::Local<v8::Value> value\n  235:   , const v8::PropertyCallbackInfo<void> &info) {\n  236:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  237    PropertyCallbackInfo<void>\n  238        cbinfo(info, obj->GetInternalField(kDataIndex));\n  239:   SetterCallback callback = reinterpret_cast<SetterCallback>(\n  240:       reinterpret_cast<intptr_t>(\n  241:           obj->GetInternalField(kSetterIndex).As<v8::External>()->Value()));\n  242    callback(property, value, cbinfo);\n  243  }\n  244  \n  245: typedef void (*NativeSetter)(\n  246:     v8::Local<v8::String>\n  247    , v8::Local<v8::Value>\n  248:   , const v8::PropertyCallbackInfo<void> &);\n  249  #endif\n  250  \n  251: #if NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n  252: static\n  253  void PropertyGetterCallbackWrapper(\n  254      v8::Local<v8::Name> property\n  255:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  256:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  257    PropertyCallbackInfo<v8::Value>\n  258        cbinfo(info, obj->GetInternalField(kDataIndex));\n  259:   PropertyGetterCallback callback = reinterpret_cast<PropertyGetterCallback>(\n  260:       reinterpret_cast<intptr_t>(\n  261            obj->GetInternalField(kPropertyGetterIndex)\n  262:               .As<v8::External>()->Value()));\n  263:   callback(property.As<v8::String>(), cbinfo);\n  264  }\n  265  \n  266  typedef void (*NativePropertyGetter)\n  267:     (v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value> &);\n  268  \n  269: static\n  270: void PropertySetterCallbackWrapper(\n  271      v8::Local<v8::Name> property\n  272    , v8::Local<v8::Value> value\n  273:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  274:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  275    PropertyCallbackInfo<v8::Value>\n  276        cbinfo(info, obj->GetInternalField(kDataIndex));\n  277:   PropertySetterCallback callback = reinterpret_cast<PropertySetterCallback>(\n  278:       reinterpret_cast<intptr_t>(\n  279:           obj->GetInternalField(kPropertySetterIndex)\n  280:               .As<v8::External>()->Value()));\n  281:   callback(property.As<v8::String>(), value, cbinfo);\n  282  }\n  283  \n  284: typedef void (*NativePropertySetter)(\n  285      v8::Local<v8::Name>\n  286    , v8::Local<v8::Value>\n  287:   , const v8::PropertyCallbackInfo<v8::Value> &);\n  288  \n  289: static\n  290  void PropertyEnumeratorCallbackWrapper(\n  291:     const v8::PropertyCallbackInfo<v8::Array> &info) {\n  292:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  293    PropertyCallbackInfo<v8::Array>\n  294        cbinfo(info, obj->GetInternalField(kDataIndex));\n  295    PropertyEnumeratorCallback callback =\n  296:       reinterpret_cast<PropertyEnumeratorCallback>(reinterpret_cast<intptr_t>(\n  297            obj->GetInternalField(kPropertyEnumeratorIndex)\n  298:               .As<v8::External>()->Value()));\n  299    callback(cbinfo);\n  300  }\n  301  \n  302  typedef void (*NativePropertyEnumerator)\n  303:     (const v8::PropertyCallbackInfo<v8::Array> &);\n  304  \n  305: static\n  306  void PropertyDeleterCallbackWrapper(\n  307      v8::Local<v8::Name> property\n  308:   , const v8::PropertyCallbackInfo<v8::Boolean> &info) {\n  309:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  310    PropertyCallbackInfo<v8::Boolean>\n  311        cbinfo(info, obj->GetInternalField(kDataIndex));\n  312:   PropertyDeleterCallback callback = reinterpret_cast<PropertyDeleterCallback>(\n  313:       reinterpret_cast<intptr_t>(\n  314            obj->GetInternalField(kPropertyDeleterIndex)\n  315:               .As<v8::External>()->Value()));\n  316:   callback(property.As<v8::String>(), cbinfo);\n  317  }\n  318  \n  319  typedef void (NativePropertyDeleter)\n  320:     (v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Boolean> &);\n  321  \n  322: static\n  323  void PropertyQueryCallbackWrapper(\n  324      v8::Local<v8::Name> property\n  325:   , const v8::PropertyCallbackInfo<v8::Integer> &info) {\n  326:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  327    PropertyCallbackInfo<v8::Integer>\n  328        cbinfo(info, obj->GetInternalField(kDataIndex));\n  329:   PropertyQueryCallback callback = reinterpret_cast<PropertyQueryCallback>(\n  330:       reinterpret_cast<intptr_t>(\n  331            obj->GetInternalField(kPropertyQueryIndex)\n  332:               .As<v8::External>()->Value()));\n  333:   callback(property.As<v8::String>(), cbinfo);\n  334  }\n  335  \n  336  typedef void (*NativePropertyQuery)\n  337:     (v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Integer> &);\n  338: #else\n  339: static\n  340  void PropertyGetterCallbackWrapper(\n  341:     v8::Local<v8::String> property\n  342:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  343:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  344    PropertyCallbackInfo<v8::Value>\n  345        cbinfo(info, obj->GetInternalField(kDataIndex));\n  346:   PropertyGetterCallback callback = reinterpret_cast<PropertyGetterCallback>(\n  347:       reinterpret_cast<intptr_t>(\n  348            obj->GetInternalField(kPropertyGetterIndex)\n  349:               .As<v8::External>()->Value()));\n  350    callback(property, cbinfo);\n  351  }\n  352  \n  353  typedef void (*NativePropertyGetter)\n  354:     (v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value> &);\n  355  \n  356: static\n  357: void PropertySetterCallbackWrapper(\n  358:     v8::Local<v8::String> property\n  359    , v8::Local<v8::Value> value\n  360:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  361:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  362    PropertyCallbackInfo<v8::Value>\n  363        cbinfo(info, obj->GetInternalField(kDataIndex));\n  364:   PropertySetterCallback callback = reinterpret_cast<PropertySetterCallback>(\n  365:       reinterpret_cast<intptr_t>(\n  366:           obj->GetInternalField(kPropertySetterIndex)\n  367:               .As<v8::External>()->Value()));\n  368    callback(property, value, cbinfo);\n  369  }\n  370  \n  371: typedef void (*NativePropertySetter)(\n  372:     v8::Local<v8::String>\n  373    , v8::Local<v8::Value>\n  374:   , const v8::PropertyCallbackInfo<v8::Value> &);\n  375  \n  376: static\n  377  void PropertyEnumeratorCallbackWrapper(\n  378:     const v8::PropertyCallbackInfo<v8::Array> &info) {\n  379:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  380    PropertyCallbackInfo<v8::Array>\n  381        cbinfo(info, obj->GetInternalField(kDataIndex));\n  382    PropertyEnumeratorCallback callback =\n  383:       reinterpret_cast<PropertyEnumeratorCallback>(reinterpret_cast<intptr_t>(\n  384            obj->GetInternalField(kPropertyEnumeratorIndex)\n  385:               .As<v8::External>()->Value()));\n  386    callback(cbinfo);\n  387  }\n  388  \n  389  typedef void (*NativePropertyEnumerator)\n  390:     (const v8::PropertyCallbackInfo<v8::Array> &);\n  391  \n  392: static\n  393  void PropertyDeleterCallbackWrapper(\n  394:     v8::Local<v8::String> property\n  395:   , const v8::PropertyCallbackInfo<v8::Boolean> &info) {\n  396:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  397    PropertyCallbackInfo<v8::Boolean>\n  398        cbinfo(info, obj->GetInternalField(kDataIndex));\n  399:   PropertyDeleterCallback callback = reinterpret_cast<PropertyDeleterCallback>(\n  400:       reinterpret_cast<intptr_t>(\n  401            obj->GetInternalField(kPropertyDeleterIndex)\n  402:               .As<v8::External>()->Value()));\n  403    callback(property, cbinfo);\n  404  }\n  405  \n  406  typedef void (NativePropertyDeleter)\n  407:     (v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Boolean> &);\n  408  \n  409: static\n  410  void PropertyQueryCallbackWrapper(\n  411:     v8::Local<v8::String> property\n  412:   , const v8::PropertyCallbackInfo<v8::Integer> &info) {\n  413:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  414    PropertyCallbackInfo<v8::Integer>\n  415        cbinfo(info, obj->GetInternalField(kDataIndex));\n  416:   PropertyQueryCallback callback = reinterpret_cast<PropertyQueryCallback>(\n  417:       reinterpret_cast<intptr_t>(\n  418            obj->GetInternalField(kPropertyQueryIndex)\n  419:               .As<v8::External>()->Value()));\n  420    callback(property, cbinfo);\n  421  }\n  422  \n  423  typedef void (*NativePropertyQuery)\n  424:     (v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Integer> &);\n  425  #endif\n  426  \n  427: static\n  428  void IndexGetterCallbackWrapper(\n  429:     uint32_t index, const v8::PropertyCallbackInfo<v8::Value> &info) {\n  430:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  431    PropertyCallbackInfo<v8::Value>\n  432        cbinfo(info, obj->GetInternalField(kDataIndex));\n  433:   IndexGetterCallback callback = reinterpret_cast<IndexGetterCallback>(\n  434:       reinterpret_cast<intptr_t>(\n  435            obj->GetInternalField(kIndexPropertyGetterIndex)\n  436:               .As<v8::External>()->Value()));\n  437    callback(index, cbinfo);\n  438  }\n  439  \n  440  typedef void (*NativeIndexGetter)\n  441:     (uint32_t, const v8::PropertyCallbackInfo<v8::Value> &);\n  442  \n  443: static\n  444: void IndexSetterCallbackWrapper(\n  445      uint32_t index\n  446    , v8::Local<v8::Value> value\n  447:   , const v8::PropertyCallbackInfo<v8::Value> &info) {\n  448:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  449    PropertyCallbackInfo<v8::Value>\n  450        cbinfo(info, obj->GetInternalField(kDataIndex));\n  451:   IndexSetterCallback callback = reinterpret_cast<IndexSetterCallback>(\n  452:       reinterpret_cast<intptr_t>(\n  453:           obj->GetInternalField(kIndexPropertySetterIndex)\n  454:               .As<v8::External>()->Value()));\n  455    callback(index, value, cbinfo);\n  456  }\n  457  \n  458: typedef void (*NativeIndexSetter)(\n  459      uint32_t\n  460    , v8::Local<v8::Value>\n  461:   , const v8::PropertyCallbackInfo<v8::Value> &);\n  462  \n  463: static\n  464  void IndexEnumeratorCallbackWrapper(\n  465:     const v8::PropertyCallbackInfo<v8::Array> &info) {\n  466:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  467    PropertyCallbackInfo<v8::Array>\n  468        cbinfo(info, obj->GetInternalField(kDataIndex));\n  469:   IndexEnumeratorCallback callback = reinterpret_cast<IndexEnumeratorCallback>(\n  470:       reinterpret_cast<intptr_t>(\n  471            obj->GetInternalField(\n  472:               kIndexPropertyEnumeratorIndex).As<v8::External>()->Value()));\n  473    callback(cbinfo);\n  474  }\n  475  \n  476  typedef void (*NativeIndexEnumerator)\n  477:     (const v8::PropertyCallbackInfo<v8::Array> &);\n  478  \n  479: static\n  480  void IndexDeleterCallbackWrapper(\n  481:     uint32_t index, const v8::PropertyCallbackInfo<v8::Boolean> &info) {\n  482:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  483    PropertyCallbackInfo<v8::Boolean>\n  484        cbinfo(info, obj->GetInternalField(kDataIndex));\n  485:   IndexDeleterCallback callback = reinterpret_cast<IndexDeleterCallback>(\n  486:       reinterpret_cast<intptr_t>(\n  487            obj->GetInternalField(kIndexPropertyDeleterIndex)\n  488:               .As<v8::External>()->Value()));\n  489    callback(index, cbinfo);\n  490  }\n  491  \n  492  typedef void (*NativeIndexDeleter)\n  493:     (uint32_t, const v8::PropertyCallbackInfo<v8::Boolean> &);\n  494  \n  495: static\n  496  void IndexQueryCallbackWrapper(\n  497:     uint32_t index, const v8::PropertyCallbackInfo<v8::Integer> &info) {\n  498:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  499    PropertyCallbackInfo<v8::Integer>\n  500        cbinfo(info, obj->GetInternalField(kDataIndex));\n  501:   IndexQueryCallback callback = reinterpret_cast<IndexQueryCallback>(\n  502:       reinterpret_cast<intptr_t>(\n  503            obj->GetInternalField(kIndexPropertyQueryIndex)\n  504:               .As<v8::External>()->Value()));\n  505    callback(index, cbinfo);\n  506  }\n  507  \n  508  typedef void (*NativeIndexQuery)\n  509:     (uint32_t, const v8::PropertyCallbackInfo<v8::Integer> &);\n  510: }  // end of namespace imp\n  511  \n  512: #endif  // NAN_CALLBACKS_12_INL_H_\n  513  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_callbacks_pre_12_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_CALLBACKS_PRE_12_INL_H_\n   10: #define NAN_CALLBACKS_PRE_12_INL_H_\n   11  \n   12: namespace imp {\n   13: template<typename T> class ReturnValueImp;\n   14: }  // end of namespace imp\n   15  \n   16  template<typename T>\n   17: class ReturnValue {\n   18:   v8::Isolate *isolate_;\n   19:   v8::Persistent<T> *value_;\n   20:   friend class imp::ReturnValueImp<T>;\n   21  \n   22   public:\n   23:   template <class S>\n   24:   explicit inline ReturnValue(v8::Isolate *isolate, v8::Persistent<S> *p) :\n   25:       isolate_(isolate), value_(p) {}\n   26:   template <class S>\n   27:   explicit inline ReturnValue(const ReturnValue<S>& that)\n   28:       : isolate_(that.isolate_), value_(that.value_) {\n   29:     TYPE_CHECK(T, S);\n   30    }\n   31  \n   32:   // Handle setters\n   33:   template <typename S> inline void Set(const v8::Local<S> &handle) {\n   34:     TYPE_CHECK(T, S);\n   35:     value_->Dispose();\n   36:     *value_ = v8::Persistent<T>::New(handle);\n   37    }\n   38  \n   39:   template <typename S> inline void Set(const Global<S> &handle) {\n   40:     TYPE_CHECK(T, S);\n   41:     value_->Dispose();\n   42:     *value_ = v8::Persistent<T>::New(handle.persistent);\n   43:     const_cast<Global<S> &>(handle).Reset();\n   44    }\n   45  \n   46:   // Fast primitive setters\n   47:   inline void Set(bool value) {\n   48      TYPE_CHECK(T, v8::Boolean);\n   49:     value_->Dispose();\n   50:     *value_ = v8::Persistent<T>::New(v8::Boolean::New(value));\n   51    }\n   52  \n   53:   inline void Set(double i) {\n   54      TYPE_CHECK(T, v8::Number);\n   55:     value_->Dispose();\n   56:     *value_ = v8::Persistent<T>::New(v8::Number::New(i));\n   57    }\n   58  \n   59:   inline void Set(int32_t i) {\n   60      TYPE_CHECK(T, v8::Integer);\n   61:     value_->Dispose();\n   62:     *value_ = v8::Persistent<T>::New(v8::Int32::New(i));\n   63    }\n   64  \n   65:   inline void Set(uint32_t i) {\n   66      TYPE_CHECK(T, v8::Integer);\n   67:     value_->Dispose();\n   68:     *value_ = v8::Persistent<T>::New(v8::Uint32::NewFromUnsigned(i));\n   69    }\n   70  \n   71:   // Fast JS primitive setters\n   72:   inline void SetNull() {\n   73      TYPE_CHECK(T, v8::Primitive);\n   74:     value_->Dispose();\n   75:     *value_ = v8::Persistent<T>::New(v8::Null());\n   76    }\n   77  \n   78:   inline void SetUndefined() {\n   79      TYPE_CHECK(T, v8::Primitive);\n   80:     value_->Dispose();\n   81:     *value_ = v8::Persistent<T>::New(v8::Undefined());\n   82    }\n   83  \n   84:   inline void SetEmptyString() {\n   85:     TYPE_CHECK(T, v8::String);\n   86:     value_->Dispose();\n   87:     *value_ = v8::Persistent<T>::New(v8::String::Empty());\n   88    }\n   89  \n   90:   // Convenience getter for isolate\n   91:   inline v8::Isolate *GetIsolate() const {\n   92:     return isolate_;\n   93    }\n   94  \n   95:   // Pointer setter: Uncompilable to prevent inadvertent misuse.\n   96:   template<typename S>\n   97:   inline void Set(S *whatever) { TYPE_CHECK(S*, v8::Primitive); }\n   98  };\n   99  \n  100  template<typename T>\n  101: class FunctionCallbackInfo {\n  102:   const v8::Arguments &args_;\n  103    v8::Local<v8::Value> data_;\n  104    ReturnValue<T> return_value_;\n  105:   v8::Persistent<T> retval_;\n  106  \n  107   public:\n  108    explicit inline FunctionCallbackInfo(\n  109:       const v8::Arguments &args\n  110      , v8::Local<v8::Value> data) :\n  111:           args_(args)\n  112          , data_(data)\n  113:         , return_value_(args.GetIsolate(), &retval_)\n  114:         , retval_(v8::Persistent<T>::New(v8::Undefined())) {}\n  115  \n  116    inline ~FunctionCallbackInfo() {\n  117:     retval_.Dispose();\n  118      retval_.Clear();\n  119    }\n  120  \n  121:   inline ReturnValue<T> GetReturnValue() const {\n  122      return ReturnValue<T>(return_value_);\n  123    }\n  124  \n  125:   inline v8::Local<v8::Function> Callee() const { return args_.Callee(); }\n  126:   inline v8::Local<v8::Value> Data() const { return data_; }\n  127:   inline v8::Local<v8::Object> Holder() const { return args_.Holder(); }\n  128:   inline bool IsConstructCall() const { return args_.IsConstructCall(); }\n  129:   inline int Length() const { return args_.Length(); }\n  130:   inline v8::Local<v8::Value> operator[](int i) const { return args_[i]; }\n  131:   inline v8::Local<v8::Object> This() const { return args_.This(); }\n  132:   inline v8::Isolate *GetIsolate() const { return args_.GetIsolate(); }\n  133  \n  134  \n  135   protected:\n  136:   static const int kHolderIndex = 0;\n  137:   static const int kIsolateIndex = 1;\n  138:   static const int kReturnValueDefaultValueIndex = 2;\n  139:   static const int kReturnValueIndex = 3;\n  140:   static const int kDataIndex = 4;\n  141:   static const int kCalleeIndex = 5;\n  142:   static const int kContextSaveIndex = 6;\n  143:   static const int kArgsLength = 7;\n  144  \n  145   private:\n  146:   NAN_DISALLOW_ASSIGN_COPY_MOVE(FunctionCallbackInfo)\n  147  };\n  148  \n  149  template<typename T>\n  150: class PropertyCallbackInfoBase {\n  151:   const v8::AccessorInfo &info_;\n  152:   const v8::Local<v8::Value> data_;\n  153  \n  154   public:\n  155:   explicit inline PropertyCallbackInfoBase(\n  156:       const v8::AccessorInfo &info\n  157:     , const v8::Local<v8::Value> data) :\n  158            info_(info)\n  159          , data_(data) {}\n  160  \n  161:   inline v8::Isolate* GetIsolate() const { return info_.GetIsolate(); }\n  162:   inline v8::Local<v8::Value> Data() const { return data_; }\n  163:   inline v8::Local<v8::Object> This() const { return info_.This(); }\n  164:   inline v8::Local<v8::Object> Holder() const { return info_.Holder(); }\n  165  \n  166   protected:\n  167:   static const int kHolderIndex = 0;\n  168:   static const int kIsolateIndex = 1;\n  169:   static const int kReturnValueDefaultValueIndex = 2;\n  170:   static const int kReturnValueIndex = 3;\n  171:   static const int kDataIndex = 4;\n  172:   static const int kThisIndex = 5;\n  173:   static const int kArgsLength = 6;\n  174  \n  175   private:\n  176:   NAN_DISALLOW_ASSIGN_COPY_MOVE(PropertyCallbackInfoBase)\n  177  };\n  178  \n  179  template<typename T>\n  180: class PropertyCallbackInfo : public PropertyCallbackInfoBase<T> {\n  181    ReturnValue<T> return_value_;\n  182:   v8::Persistent<T> retval_;\n  183  \n  184   public:\n  185    explicit inline PropertyCallbackInfo(\n  186:       const v8::AccessorInfo &info\n  187:     , const v8::Local<v8::Value> data) :\n  188:           PropertyCallbackInfoBase<T>(info, data)\n  189:         , return_value_(info.GetIsolate(), &retval_)\n  190:         , retval_(v8::Persistent<T>::New(v8::Undefined())) {}\n  191  \n  192    inline ~PropertyCallbackInfo() {\n  193:     retval_.Dispose();\n  194      retval_.Clear();\n  195    }\n  196  \n  197:   inline ReturnValue<T> GetReturnValue() const { return return_value_; }\n  198  };\n  199  \n  200  template<>\n  201: class PropertyCallbackInfo<v8::Array> :\n  202:     public PropertyCallbackInfoBase<v8::Array> {\n  203    ReturnValue<v8::Array> return_value_;\n  204:   v8::Persistent<v8::Array> retval_;\n  205  \n  206   public:\n  207    explicit inline PropertyCallbackInfo(\n  208:       const v8::AccessorInfo &info\n  209:     , const v8::Local<v8::Value> data) :\n  210:           PropertyCallbackInfoBase<v8::Array>(info, data)\n  211:         , return_value_(info.GetIsolate(), &retval_)\n  212:         , retval_(v8::Persistent<v8::Array>::New(v8::Local<v8::Array>())) {}\n  213  \n  214    inline ~PropertyCallbackInfo() {\n  215:     retval_.Dispose();\n  216      retval_.Clear();\n  217    }\n  218  \n  219:   inline ReturnValue<v8::Array> GetReturnValue() const {\n  220      return return_value_;\n  221    }\n  ...\n  223  \n  224  template<>\n  225: class PropertyCallbackInfo<v8::Boolean> :\n  226:     public PropertyCallbackInfoBase<v8::Boolean> {\n  227    ReturnValue<v8::Boolean> return_value_;\n  228:   v8::Persistent<v8::Boolean> retval_;\n  229  \n  230   public:\n  231    explicit inline PropertyCallbackInfo(\n  232:       const v8::AccessorInfo &info\n  233:     , const v8::Local<v8::Value> data) :\n  234:           PropertyCallbackInfoBase<v8::Boolean>(info, data)\n  235:         , return_value_(info.GetIsolate(), &retval_)\n  236:         , retval_(v8::Persistent<v8::Boolean>::New(v8::Local<v8::Boolean>())) {}\n  237  \n  238    inline ~PropertyCallbackInfo() {\n  239:     retval_.Dispose();\n  240      retval_.Clear();\n  241    }\n  242  \n  243:   inline ReturnValue<v8::Boolean> GetReturnValue() const {\n  244      return return_value_;\n  245    }\n  ...\n  247  \n  248  template<>\n  249: class PropertyCallbackInfo<v8::Integer> :\n  250:     public PropertyCallbackInfoBase<v8::Integer> {\n  251    ReturnValue<v8::Integer> return_value_;\n  252:   v8::Persistent<v8::Integer> retval_;\n  253  \n  254   public:\n  255    explicit inline PropertyCallbackInfo(\n  256:       const v8::AccessorInfo &info\n  257:     , const v8::Local<v8::Value> data) :\n  258:           PropertyCallbackInfoBase<v8::Integer>(info, data)\n  259:         , return_value_(info.GetIsolate(), &retval_)\n  260:         , retval_(v8::Persistent<v8::Integer>::New(v8::Local<v8::Integer>())) {}\n  261  \n  262    inline ~PropertyCallbackInfo() {\n  263:     retval_.Dispose();\n  264      retval_.Clear();\n  265    }\n  266  \n  267:   inline ReturnValue<v8::Integer> GetReturnValue() const {\n  268      return return_value_;\n  269    }\n  270  };\n  271  \n  272: namespace imp {\n  273  template<typename T>\n  274: class ReturnValueImp : public ReturnValue<T> {\n  275   public:\n  276    explicit ReturnValueImp(ReturnValue<T> that) :\n  ...\n  281  };\n  282  \n  283: static\n  284: v8::Handle<v8::Value> FunctionCallbackWrapper(const v8::Arguments &args) {\n  285:   v8::Local<v8::Object> obj = args.Data().As<v8::Object>();\n  286:   FunctionCallback callback = reinterpret_cast<FunctionCallback>(\n  287:       reinterpret_cast<intptr_t>(\n  288:           obj->GetInternalField(kFunctionIndex).As<v8::External>()->Value()));\n  289    FunctionCallbackInfo<v8::Value>\n  290:       cbinfo(args, obj->GetInternalField(kDataIndex));\n  291    callback(cbinfo);\n  292    return ReturnValueImp<v8::Value>(cbinfo.GetReturnValue()).Value();\n  293  }\n  294  \n  295: typedef v8::Handle<v8::Value> (*NativeFunction)(const v8::Arguments &);\n  296  \n  297: static\n  298  v8::Handle<v8::Value> GetterCallbackWrapper(\n  299:     v8::Local<v8::String> property, const v8::AccessorInfo &info) {\n  300:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  301    PropertyCallbackInfo<v8::Value>\n  302        cbinfo(info, obj->GetInternalField(kDataIndex));\n  303:   GetterCallback callback = reinterpret_cast<GetterCallback>(\n  304:       reinterpret_cast<intptr_t>(\n  305:           obj->GetInternalField(kGetterIndex).As<v8::External>()->Value()));\n  306    callback(property, cbinfo);\n  307    return ReturnValueImp<v8::Value>(cbinfo.GetReturnValue()).Value();\n  ...\n  309  \n  310  typedef v8::Handle<v8::Value> (*NativeGetter)\n  311:     (v8::Local<v8::String>, const v8::AccessorInfo &);\n  312  \n  313: static\n  314: void SetterCallbackWrapper(\n  315:     v8::Local<v8::String> property\n  316    , v8::Local<v8::Value> value\n  317:   , const v8::AccessorInfo &info) {\n  318:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  319    PropertyCallbackInfo<void>\n  320        cbinfo(info, obj->GetInternalField(kDataIndex));\n  321:   SetterCallback callback = reinterpret_cast<SetterCallback>(\n  322:       reinterpret_cast<intptr_t>(\n  323:           obj->GetInternalField(kSetterIndex).As<v8::External>()->Value()));\n  324    callback(property, value, cbinfo);\n  325  }\n  326  \n  327: typedef void (*NativeSetter)\n  328:     (v8::Local<v8::String>, v8::Local<v8::Value>, const v8::AccessorInfo &);\n  329  \n  330: static\n  331  v8::Handle<v8::Value> PropertyGetterCallbackWrapper(\n  332:     v8::Local<v8::String> property, const v8::AccessorInfo &info) {\n  333:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  334    PropertyCallbackInfo<v8::Value>\n  335        cbinfo(info, obj->GetInternalField(kDataIndex));\n  336:   PropertyGetterCallback callback = reinterpret_cast<PropertyGetterCallback>(\n  337:       reinterpret_cast<intptr_t>(\n  338            obj->GetInternalField(kPropertyGetterIndex)\n  339:               .As<v8::External>()->Value()));\n  340    callback(property, cbinfo);\n  341    return ReturnValueImp<v8::Value>(cbinfo.GetReturnValue()).Value();\n  ...\n  343  \n  344  typedef v8::Handle<v8::Value> (*NativePropertyGetter)\n  345:     (v8::Local<v8::String>, const v8::AccessorInfo &);\n  346  \n  347: static\n  348: v8::Handle<v8::Value> PropertySetterCallbackWrapper(\n  349:     v8::Local<v8::String> property\n  350    , v8::Local<v8::Value> value\n  351:   , const v8::AccessorInfo &info) {\n  352:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  353    PropertyCallbackInfo<v8::Value>\n  354        cbinfo(info, obj->GetInternalField(kDataIndex));\n  355:   PropertySetterCallback callback = reinterpret_cast<PropertySetterCallback>(\n  356:       reinterpret_cast<intptr_t>(\n  357:           obj->GetInternalField(kPropertySetterIndex)\n  358:               .As<v8::External>()->Value()));\n  359    callback(property, value, cbinfo);\n  360    return ReturnValueImp<v8::Value>(cbinfo.GetReturnValue()).Value();\n  361  }\n  362  \n  363: typedef v8::Handle<v8::Value> (*NativePropertySetter)\n  364:     (v8::Local<v8::String>, v8::Local<v8::Value>, const v8::AccessorInfo &);\n  365  \n  366: static\n  367  v8::Handle<v8::Array> PropertyEnumeratorCallbackWrapper(\n  368:     const v8::AccessorInfo &info) {\n  369:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  370    PropertyCallbackInfo<v8::Array>\n  371        cbinfo(info, obj->GetInternalField(kDataIndex));\n  372    PropertyEnumeratorCallback callback =\n  373:       reinterpret_cast<PropertyEnumeratorCallback>(reinterpret_cast<intptr_t>(\n  374            obj->GetInternalField(kPropertyEnumeratorIndex)\n  375:               .As<v8::External>()->Value()));\n  376    callback(cbinfo);\n  377    return ReturnValueImp<v8::Array>(cbinfo.GetReturnValue()).Value();\n  ...\n  379  \n  380  typedef v8::Handle<v8::Array> (*NativePropertyEnumerator)\n  381:     (const v8::AccessorInfo &);\n  382  \n  383: static\n  384  v8::Handle<v8::Boolean> PropertyDeleterCallbackWrapper(\n  385:     v8::Local<v8::String> property\n  386:   , const v8::AccessorInfo &info) {\n  387:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  388    PropertyCallbackInfo<v8::Boolean>\n  389        cbinfo(info, obj->GetInternalField(kDataIndex));\n  390:   PropertyDeleterCallback callback = reinterpret_cast<PropertyDeleterCallback>(\n  391:       reinterpret_cast<intptr_t>(\n  392            obj->GetInternalField(kPropertyDeleterIndex)\n  393:               .As<v8::External>()->Value()));\n  394    callback(property, cbinfo);\n  395    return ReturnValueImp<v8::Boolean>(cbinfo.GetReturnValue()).Value();\n  ...\n  397  \n  398  typedef v8::Handle<v8::Boolean> (NativePropertyDeleter)\n  399:     (v8::Local<v8::String>, const v8::AccessorInfo &);\n  400  \n  401: static\n  402  v8::Handle<v8::Integer> PropertyQueryCallbackWrapper(\n  403:     v8::Local<v8::String> property, const v8::AccessorInfo &info) {\n  404:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  405    PropertyCallbackInfo<v8::Integer>\n  406        cbinfo(info, obj->GetInternalField(kDataIndex));\n  407:   PropertyQueryCallback callback = reinterpret_cast<PropertyQueryCallback>(\n  408:       reinterpret_cast<intptr_t>(\n  409            obj->GetInternalField(kPropertyQueryIndex)\n  410:               .As<v8::External>()->Value()));\n  411    callback(property, cbinfo);\n  412    return ReturnValueImp<v8::Integer>(cbinfo.GetReturnValue()).Value();\n  ...\n  414  \n  415  typedef v8::Handle<v8::Integer> (*NativePropertyQuery)\n  416:     (v8::Local<v8::String>, const v8::AccessorInfo &);\n  417  \n  418: static\n  419  v8::Handle<v8::Value> IndexGetterCallbackWrapper(\n  420:     uint32_t index, const v8::AccessorInfo &info) {\n  421:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  422    PropertyCallbackInfo<v8::Value>\n  423        cbinfo(info, obj->GetInternalField(kDataIndex));\n  424:   IndexGetterCallback callback = reinterpret_cast<IndexGetterCallback>(\n  425:       reinterpret_cast<intptr_t>(\n  426            obj->GetInternalField(kIndexPropertyGetterIndex)\n  427:               .As<v8::External>()->Value()));\n  428    callback(index, cbinfo);\n  429    return ReturnValueImp<v8::Value>(cbinfo.GetReturnValue()).Value();\n  ...\n  431  \n  432  typedef v8::Handle<v8::Value> (*NativeIndexGetter)\n  433:     (uint32_t, const v8::AccessorInfo &);\n  434  \n  435: static\n  436: v8::Handle<v8::Value> IndexSetterCallbackWrapper(\n  437      uint32_t index\n  438    , v8::Local<v8::Value> value\n  439:   , const v8::AccessorInfo &info) {\n  440:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  441    PropertyCallbackInfo<v8::Value>\n  442        cbinfo(info, obj->GetInternalField(kDataIndex));\n  443:   IndexSetterCallback callback = reinterpret_cast<IndexSetterCallback>(\n  444:       reinterpret_cast<intptr_t>(\n  445:           obj->GetInternalField(kIndexPropertySetterIndex)\n  446:               .As<v8::External>()->Value()));\n  447    callback(index, value, cbinfo);\n  448    return ReturnValueImp<v8::Value>(cbinfo.GetReturnValue()).Value();\n  449  }\n  450  \n  451: typedef v8::Handle<v8::Value> (*NativeIndexSetter)\n  452:     (uint32_t, v8::Local<v8::Value>, const v8::AccessorInfo &);\n  453  \n  454: static\n  455  v8::Handle<v8::Array> IndexEnumeratorCallbackWrapper(\n  456:     const v8::AccessorInfo &info) {\n  457:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  458    PropertyCallbackInfo<v8::Array>\n  459        cbinfo(info, obj->GetInternalField(kDataIndex));\n  460:   IndexEnumeratorCallback callback = reinterpret_cast<IndexEnumeratorCallback>(\n  461:       reinterpret_cast<intptr_t>(\n  462            obj->GetInternalField(kIndexPropertyEnumeratorIndex)\n  463:               .As<v8::External>()->Value()));\n  464    callback(cbinfo);\n  465    return ReturnValueImp<v8::Array>(cbinfo.GetReturnValue()).Value();\n  ...\n  467  \n  468  typedef v8::Handle<v8::Array> (*NativeIndexEnumerator)\n  469:     (const v8::AccessorInfo &);\n  470  \n  471: static\n  472  v8::Handle<v8::Boolean> IndexDeleterCallbackWrapper(\n  473:     uint32_t index, const v8::AccessorInfo &info) {\n  474:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  475    PropertyCallbackInfo<v8::Boolean>\n  476        cbinfo(info, obj->GetInternalField(kDataIndex));\n  477:   IndexDeleterCallback callback = reinterpret_cast<IndexDeleterCallback>(\n  478:       reinterpret_cast<intptr_t>(\n  479            obj->GetInternalField(kIndexPropertyDeleterIndex)\n  480:               .As<v8::External>()->Value()));\n  481    callback(index, cbinfo);\n  482    return ReturnValueImp<v8::Boolean>(cbinfo.GetReturnValue()).Value();\n  ...\n  484  \n  485  typedef v8::Handle<v8::Boolean> (*NativeIndexDeleter)\n  486:     (uint32_t, const v8::AccessorInfo &);\n  487  \n  488: static\n  489  v8::Handle<v8::Integer> IndexQueryCallbackWrapper(\n  490:     uint32_t index, const v8::AccessorInfo &info) {\n  491:   v8::Local<v8::Object> obj = info.Data().As<v8::Object>();\n  492    PropertyCallbackInfo<v8::Integer>\n  493        cbinfo(info, obj->GetInternalField(kDataIndex));\n  494:   IndexQueryCallback callback = reinterpret_cast<IndexQueryCallback>(\n  495:       reinterpret_cast<intptr_t>(\n  496            obj->GetInternalField(kIndexPropertyQueryIndex)\n  497:               .As<v8::External>()->Value()));\n  498    callback(index, cbinfo);\n  499    return ReturnValueImp<v8::Integer>(cbinfo.GetReturnValue()).Value();\n  ...\n  501  \n  502  typedef v8::Handle<v8::Integer> (*NativeIndexQuery)\n  503:     (uint32_t, const v8::AccessorInfo &);\n  504: }  // end of namespace imp\n  505  \n  506: #endif  // NAN_CALLBACKS_PRE_12_INL_H_\n  507  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_converters.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_CONVERTERS_H_\n   10: #define NAN_CONVERTERS_H_\n   11  \n   12: namespace imp {\n   13: template<typename T> struct ToFactoryBase {\n   14    typedef MaybeLocal<T> return_t;\n   15  };\n   16: template<typename T> struct ValueFactoryBase { typedef Maybe<T> return_t; };\n   17  \n   18: template<typename T> struct ToFactory;\n   19  \n   20  #define X(TYPE)                                                                \\\n   21      template<>                                                                 \\\n   22:     struct ToFactory<v8::TYPE> : ToFactoryBase<v8::TYPE> {                     \\\n   23:       static inline return_t convert(v8::Local<v8::Value> val);                \\\n   24      };\n   25  \n   26  X(Boolean)\n   27  X(Number)\n   28: X(String)\n   29  X(Object)\n   30  X(Integer)\n   ..\n   36  #define X(TYPE)                                                                \\\n   37      template<>                                                                 \\\n   38:     struct ToFactory<TYPE> : ValueFactoryBase<TYPE> {                          \\\n   39:       static inline return_t convert(v8::Local<v8::Value> val);                \\\n   40      };\n   41  \n   ..\n   47  \n   48  #undef X\n   49: }  // end of namespace imp\n   50  \n   51  template<typename T>\n   ..\n   55  }\n   56  \n   57: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   58:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   59: # include \"nan_converters_43_inl.h\"\n   60: #else\n   61: # include \"nan_converters_pre_43_inl.h\"\n   62  #endif\n   63  \n   64: #endif  // NAN_CONVERTERS_H_\n   65  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_converters_43_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_CONVERTERS_43_INL_H_\n   10: #define NAN_CONVERTERS_43_INL_H_\n   11  \n   12  #define X(TYPE)                                                                \\\n   ..\n   18  X(Boolean)\n   19  X(Number)\n   20: X(String)\n   21  X(Object)\n   22  X(Integer)\n   ..\n   40  #undef X\n   41  \n   42: #endif  // NAN_CONVERTERS_43_INL_H_\n   43  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_converters_pre_43_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_CONVERTERS_PRE_43_INL_H_\n   10: #define NAN_CONVERTERS_PRE_43_INL_H_\n   11  \n   12  #define X(TYPE)                                                                \\\n   ..\n   18  X(Boolean)\n   19  X(Number)\n   20: X(String)\n   21  X(Object)\n   22  X(Integer)\n   ..\n   29  imp::ToFactory<TYPE>::return_t                                                 \\\n   30  imp::ToFactory<TYPE>::convert(v8::Local<v8::Value> val) {                      \\\n   31:   return Just<TYPE>(val->NAME ##Value());                                      \\\n   32  }\n   33  \n   ..\n   40  #undef X\n   41  \n   42: #endif  // NAN_CONVERTERS_PRE_43_INL_H_\n   43  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_implementation_12_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   13  //==============================================================================\n   14  \n   15: namespace imp {\n   16  \n   17  //=== Array ====================================================================\n   ..\n   19  Factory<v8::Array>::return_t\n   20  Factory<v8::Array>::New() {\n   21:   return v8::Array::New(v8::Isolate::GetCurrent());\n   22  }\n   23  \n   24  Factory<v8::Array>::return_t\n   25  Factory<v8::Array>::New(int length) {\n   26:   return v8::Array::New(v8::Isolate::GetCurrent(), length);\n   27  }\n   28  \n   ..\n   31  Factory<v8::Boolean>::return_t\n   32  Factory<v8::Boolean>::New(bool value) {\n   33:   return v8::Boolean::New(v8::Isolate::GetCurrent(), value);\n   34  }\n   35  \n   ..\n   38  Factory<v8::BooleanObject>::return_t\n   39  Factory<v8::BooleanObject>::New(bool value) {\n   40: #if (NODE_MODULE_VERSION >= NODE_6_0_MODULE_VERSION)\n   41    return v8::BooleanObject::New(\n   42:     v8::Isolate::GetCurrent(), value).As<v8::BooleanObject>();\n   43: #else\n   44:   return v8::BooleanObject::New(value).As<v8::BooleanObject>();\n   45  #endif\n   46  }\n   ..\n   49  \n   50  Factory<v8::Context>::return_t\n   51: Factory<v8::Context>::New( v8::ExtensionConfiguration* extensions\n   52                           , v8::Local<v8::ObjectTemplate> tmpl\n   53                           , v8::Local<v8::Value> obj) {\n   54:   return v8::Context::New(v8::Isolate::GetCurrent(), extensions, tmpl, obj);\n   55  }\n   56  \n   57  //=== Date =====================================================================\n   58  \n   59: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   60:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   61  Factory<v8::Date>::return_t\n   62  Factory<v8::Date>::New(double value) {\n   63    v8::Local<v8::Date> ret;\n   64    if (v8::Date::New(GetCurrentContext(), value).\n   65:       ToLocal(reinterpret_cast<v8::Local<v8::Value>*>(&ret))) {\n   66      return v8::MaybeLocal<v8::Date>(ret);\n   67:   } else {\n   68      return v8::MaybeLocal<v8::Date>(ret);\n   69    }\n   70  }\n   71: #else\n   72  Factory<v8::Date>::return_t\n   73  Factory<v8::Date>::New(double value) {\n   74    return Factory<v8::Date>::return_t(\n   75:       v8::Date::New(v8::Isolate::GetCurrent(), value).As<v8::Date>());\n   76  }\n   77  #endif\n   ..\n   81  Factory<v8::External>::return_t\n   82  Factory<v8::External>::New(void * value) {\n   83:   return v8::External::New(v8::Isolate::GetCurrent(), value);\n   84  }\n   85  \n   ..\n   89  Factory<v8::Function>::New( FunctionCallback callback\n   90                            , v8::Local<v8::Value> data) {\n   91:   v8::Isolate *isolate = v8::Isolate::GetCurrent();\n   92:   v8::EscapableHandleScope scope(isolate);\n   93:   v8::Local<v8::ObjectTemplate> tpl = v8::ObjectTemplate::New(isolate);\n   94:   tpl->SetInternalFieldCount(imp::kFunctionFieldCount);\n   95:   v8::Local<v8::Object> obj = NewInstance(tpl).ToLocalChecked();\n   96  \n   97:   obj->SetInternalField(\n   98        imp::kFunctionIndex\n   99:     , v8::External::New(isolate, reinterpret_cast<void *>(callback)));\n  100  \n  101:   v8::Local<v8::Value> val = v8::Local<v8::Value>::New(isolate, data);\n  102  \n  103:   if (!val.IsEmpty()) {\n  104:     obj->SetInternalField(imp::kDataIndex, val);\n  105    }\n  106  \n  107:   return scope.Escape(v8::Function::New( isolate\n  108                            , imp::FunctionCallbackWrapper\n  109                            , obj));\n  ...\n  115  Factory<v8::FunctionTemplate>::New( FunctionCallback callback\n  116                                    , v8::Local<v8::Value> data\n  117:                                   , v8::Local<v8::Signature> signature) {\n  118:   v8::Isolate *isolate = v8::Isolate::GetCurrent();\n  119    if (callback) {\n  120:     v8::EscapableHandleScope scope(isolate);\n  121:     v8::Local<v8::ObjectTemplate> tpl = v8::ObjectTemplate::New(isolate);\n  122:     tpl->SetInternalFieldCount(imp::kFunctionFieldCount);\n  123:     v8::Local<v8::Object> obj = NewInstance(tpl).ToLocalChecked();\n  124  \n  125:     obj->SetInternalField(\n  126          imp::kFunctionIndex\n  127:       , v8::External::New(isolate, reinterpret_cast<void *>(callback)));\n  128:     v8::Local<v8::Value> val = v8::Local<v8::Value>::New(isolate, data);\n  129  \n  130:     if (!val.IsEmpty()) {\n  131:       obj->SetInternalField(imp::kDataIndex, val);\n  132      }\n  133  \n  134:     return scope.Escape(v8::FunctionTemplate::New( isolate\n  135                                      , imp::FunctionCallbackWrapper\n  136                                      , obj\n  137:                                     , signature));\n  138:   } else {\n  139:     return v8::FunctionTemplate::New(isolate, 0, data, signature);\n  140    }\n  141  }\n  ...\n  145  Factory<v8::Number>::return_t\n  146  Factory<v8::Number>::New(double value) {\n  147:   return v8::Number::New(v8::Isolate::GetCurrent(), value);\n  148  }\n  149  \n  ...\n  152  Factory<v8::NumberObject>::return_t\n  153  Factory<v8::NumberObject>::New(double value) {\n  154:   return v8::NumberObject::New( v8::Isolate::GetCurrent()\n  155:                               , value).As<v8::NumberObject>();\n  156  }\n  157  \n  ...\n  161  typename IntegerFactory<T>::return_t\n  162  IntegerFactory<T>::New(int32_t value) {\n  163:   return To<T>(T::New(v8::Isolate::GetCurrent(), value));\n  164  }\n  165  \n  ...\n  167  typename IntegerFactory<T>::return_t\n  168  IntegerFactory<T>::New(uint32_t value) {\n  169:   return To<T>(T::NewFromUnsigned(v8::Isolate::GetCurrent(), value));\n  170  }\n  171  \n  ...\n  173  Factory<v8::Uint32>::New(int32_t value) {\n  174    return To<v8::Uint32>(\n  175:       v8::Uint32::NewFromUnsigned(v8::Isolate::GetCurrent(), value));\n  176  }\n  177  \n  ...\n  179  Factory<v8::Uint32>::New(uint32_t value) {\n  180    return To<v8::Uint32>(\n  181:       v8::Uint32::NewFromUnsigned(v8::Isolate::GetCurrent(), value));\n  182  }\n  183  \n  ...\n  186  Factory<v8::Object>::return_t\n  187  Factory<v8::Object>::New() {\n  188:   return v8::Object::New(v8::Isolate::GetCurrent());\n  189  }\n  190  \n  ...\n  193  Factory<v8::ObjectTemplate>::return_t\n  194  Factory<v8::ObjectTemplate>::New() {\n  195:   return v8::ObjectTemplate::New(v8::Isolate::GetCurrent());\n  196  }\n  197  \n  198  //=== RegExp ===================================================================\n  199  \n  200: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  201:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  202  Factory<v8::RegExp>::return_t\n  203  Factory<v8::RegExp>::New(\n  204:     v8::Local<v8::String> pattern\n  205:   , v8::RegExp::Flags flags) {\n  206:   return v8::RegExp::New(GetCurrentContext(), pattern, flags);\n  207  }\n  208: #else\n  209  Factory<v8::RegExp>::return_t\n  210  Factory<v8::RegExp>::New(\n  211:     v8::Local<v8::String> pattern\n  212:   , v8::RegExp::Flags flags) {\n  213:   return Factory<v8::RegExp>::return_t(v8::RegExp::New(pattern, flags));\n  214  }\n  215  #endif\n  216  \n  217: //=== Script ===================================================================\n  218  \n  219: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  220:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  221: Factory<v8::Script>::return_t\n  222: Factory<v8::Script>::New( v8::Local<v8::String> source) {\n  223:   v8::ScriptCompiler::Source src(source);\n  224:   return v8::ScriptCompiler::Compile(GetCurrentContext(), &src);\n  225  }\n  226  \n  227: Factory<v8::Script>::return_t\n  228: Factory<v8::Script>::New( v8::Local<v8::String> source\n  229:                         , v8::ScriptOrigin const& origin) {\n  230:   v8::ScriptCompiler::Source src(source, origin);\n  231:   return v8::ScriptCompiler::Compile(GetCurrentContext(), &src);\n  232  }\n  233: #else\n  234: Factory<v8::Script>::return_t\n  235: Factory<v8::Script>::New( v8::Local<v8::String> source) {\n  236:   v8::ScriptCompiler::Source src(source);\n  237:   return Factory<v8::Script>::return_t(\n  238:       v8::ScriptCompiler::Compile(v8::Isolate::GetCurrent(), &src));\n  239  }\n  240  \n  241: Factory<v8::Script>::return_t\n  242: Factory<v8::Script>::New( v8::Local<v8::String> source\n  243:                         , v8::ScriptOrigin const& origin) {\n  244:   v8::ScriptCompiler::Source src(source, origin);\n  245:   return Factory<v8::Script>::return_t(\n  246:       v8::ScriptCompiler::Compile(v8::Isolate::GetCurrent(), &src));\n  247  }\n  248  #endif\n  249  \n  250: //=== Signature ================================================================\n  251  \n  252: Factory<v8::Signature>::return_t\n  253: Factory<v8::Signature>::New(Factory<v8::Signature>::FTH receiver) {\n  254:   return v8::Signature::New(v8::Isolate::GetCurrent(), receiver);\n  255  }\n  256  \n  257: //=== String ===================================================================\n  258  \n  259: Factory<v8::String>::return_t\n  260: Factory<v8::String>::New() {\n  261:   return Factory<v8::String>::return_t(\n  262:       v8::String::Empty(v8::Isolate::GetCurrent()));\n  263  }\n  264  \n  265: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  266:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  267: Factory<v8::String>::return_t\n  268: Factory<v8::String>::New(const char * value, int length) {\n  269:   return v8::String::NewFromUtf8(\n  270:       v8::Isolate::GetCurrent(), value, v8::NewStringType::kNormal, length);\n  271  }\n  272  \n  273: Factory<v8::String>::return_t\n  274: Factory<v8::String>::New(std::string const& value) {\n  275:   assert(value.size() <= INT_MAX && \"string too long\");\n  276:   return v8::String::NewFromUtf8(v8::Isolate::GetCurrent(),\n  277:       value.data(), v8::NewStringType::kNormal, static_cast<int>(value.size()));\n  278  }\n  279  \n  280: Factory<v8::String>::return_t\n  281: Factory<v8::String>::New(const uint16_t * value, int length) {\n  282:   return v8::String::NewFromTwoByte(v8::Isolate::GetCurrent(), value,\n  283:         v8::NewStringType::kNormal, length);\n  284  }\n  285  \n  286: Factory<v8::String>::return_t\n  287: Factory<v8::String>::New(v8::String::ExternalStringResource * value) {\n  288:   return v8::String::NewExternalTwoByte(v8::Isolate::GetCurrent(), value);\n  289  }\n  290  \n  291: Factory<v8::String>::return_t\n  292: Factory<v8::String>::New(ExternalOneByteStringResource * value) {\n  293:   return v8::String::NewExternalOneByte(v8::Isolate::GetCurrent(), value);\n  294  }\n  295: #else\n  296: Factory<v8::String>::return_t\n  297: Factory<v8::String>::New(const char * value, int length) {\n  298:   return Factory<v8::String>::return_t(\n  299:       v8::String::NewFromUtf8(\n  300:           v8::Isolate::GetCurrent()\n  301          , value\n  302:         , v8::String::kNormalString\n  303          , length));\n  304  }\n  305  \n  306: Factory<v8::String>::return_t\n  307: Factory<v8::String>::New(\n  308:     std::string const& value) /* NOLINT(build/include_what_you_use) */ {\n  309:   assert(value.size() <= INT_MAX && \"string too long\");\n  310:   return Factory<v8::String>::return_t(\n  311:       v8::String::NewFromUtf8(\n  312:           v8::Isolate::GetCurrent()\n  313          , value.data()\n  314:         , v8::String::kNormalString\n  315:         , static_cast<int>(value.size())));\n  316  }\n  317  \n  318: Factory<v8::String>::return_t\n  319: Factory<v8::String>::New(const uint16_t * value, int length) {\n  320:   return Factory<v8::String>::return_t(\n  321:       v8::String::NewFromTwoByte(\n  322:           v8::Isolate::GetCurrent()\n  323          , value\n  324:         , v8::String::kNormalString\n  325          , length));\n  326  }\n  327  \n  328: Factory<v8::String>::return_t\n  329: Factory<v8::String>::New(v8::String::ExternalStringResource * value) {\n  330:   return Factory<v8::String>::return_t(\n  331:       v8::String::NewExternal(v8::Isolate::GetCurrent(), value));\n  332  }\n  333  \n  334: Factory<v8::String>::return_t\n  335: Factory<v8::String>::New(ExternalOneByteStringResource * value) {\n  336:   return Factory<v8::String>::return_t(\n  337:       v8::String::NewExternal(v8::Isolate::GetCurrent(), value));\n  338  }\n  339  #endif\n  340  \n  341: //=== String Object ============================================================\n  342  \n  343: Factory<v8::StringObject>::return_t\n  344: Factory<v8::StringObject>::New(v8::Local<v8::String> value) {\n  345:   return v8::StringObject::New(value).As<v8::StringObject>();\n  346  }\n  347  \n  348: //=== Unbound Script ===========================================================\n  349  \n  350: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  351:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  352: Factory<v8::UnboundScript>::return_t\n  353: Factory<v8::UnboundScript>::New(v8::Local<v8::String> source) {\n  354:   v8::ScriptCompiler::Source src(source);\n  355:   return v8::ScriptCompiler::CompileUnboundScript(\n  356:       v8::Isolate::GetCurrent(), &src);\n  357  }\n  358  \n  359: Factory<v8::UnboundScript>::return_t\n  360: Factory<v8::UnboundScript>::New( v8::Local<v8::String> source\n  361:                                , v8::ScriptOrigin const& origin) {\n  362:   v8::ScriptCompiler::Source src(source, origin);\n  363:   return v8::ScriptCompiler::CompileUnboundScript(\n  364:       v8::Isolate::GetCurrent(), &src);\n  365  }\n  366: #else\n  367: Factory<v8::UnboundScript>::return_t\n  368: Factory<v8::UnboundScript>::New(v8::Local<v8::String> source) {\n  369:   v8::ScriptCompiler::Source src(source);\n  370:   return Factory<v8::UnboundScript>::return_t(\n  371:       v8::ScriptCompiler::CompileUnbound(v8::Isolate::GetCurrent(), &src));\n  372  }\n  373  \n  374: Factory<v8::UnboundScript>::return_t\n  375: Factory<v8::UnboundScript>::New( v8::Local<v8::String> source\n  376:                                , v8::ScriptOrigin const& origin) {\n  377:   v8::ScriptCompiler::Source src(source, origin);\n  378:   return Factory<v8::UnboundScript>::return_t(\n  379:       v8::ScriptCompiler::CompileUnbound(v8::Isolate::GetCurrent(), &src));\n  380  }\n  381  #endif\n  382  \n  383: }  // end of namespace imp\n  384  \n  385: //=== Presistents and Handles ==================================================\n  386  \n  387: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  388  template <typename T>\n  389  inline v8::Local<T> New(v8::Handle<T> h) {\n  390:   return v8::Local<T>::New(v8::Isolate::GetCurrent(), h);\n  391  }\n  392  #endif\n  393  \n  394  template <typename T, typename M>\n  395: inline v8::Local<T> New(v8::Persistent<T, M> const& p) {\n  396:   return v8::Local<T>::New(v8::Isolate::GetCurrent(), p);\n  397  }\n  398  \n  399  template <typename T, typename M>\n  400: inline v8::Local<T> New(Persistent<T, M> const& p) {\n  401:   return v8::Local<T>::New(v8::Isolate::GetCurrent(), p);\n  402  }\n  403  \n  404  template <typename T>\n  405: inline v8::Local<T> New(Global<T> const& p) {\n  406:   return v8::Local<T>::New(v8::Isolate::GetCurrent(), p);\n  407  }\n  408  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_implementation_pre_12_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   14  //==============================================================================\n   15  \n   16: namespace imp {\n   17  \n   18  //=== Array ====================================================================\n   ..\n   39  Factory<v8::BooleanObject>::return_t\n   40  Factory<v8::BooleanObject>::New(bool value) {\n   41:   return v8::BooleanObject::New(value).As<v8::BooleanObject>();\n   42  }\n   43  \n   ..\n   45  \n   46  Factory<v8::Context>::return_t\n   47: Factory<v8::Context>::New( v8::ExtensionConfiguration* extensions\n   48                           , v8::Local<v8::ObjectTemplate> tmpl\n   49                           , v8::Local<v8::Value> obj) {\n   50:   v8::Persistent<v8::Context> ctx = v8::Context::New(extensions, tmpl, obj);\n   51    v8::Local<v8::Context> lctx = v8::Local<v8::Context>::New(ctx);\n   52:   ctx.Dispose();\n   53    return lctx;\n   54  }\n   ..\n   58  Factory<v8::Date>::return_t\n   59  Factory<v8::Date>::New(double value) {\n   60:   return Factory<v8::Date>::return_t(v8::Date::New(value).As<v8::Date>());\n   61  }\n   62  \n   ..\n   75    return Factory<v8::FunctionTemplate>::New( callback\n   76                                             , data\n   77:                                            , v8::Local<v8::Signature>()\n   78                                             )->GetFunction();\n   79  }\n   ..\n   85  Factory<v8::FunctionTemplate>::New( FunctionCallback callback\n   86                                    , v8::Local<v8::Value> data\n   87:                                   , v8::Local<v8::Signature> signature) {\n   88    if (callback) {\n   89:     v8::HandleScope scope;\n   90  \n   91      v8::Local<v8::ObjectTemplate> tpl = v8::ObjectTemplate::New();\n   92:     tpl->SetInternalFieldCount(imp::kFunctionFieldCount);\n   93:     v8::Local<v8::Object> obj = tpl->NewInstance();\n   94  \n   95:     obj->SetInternalField(\n   96          imp::kFunctionIndex\n   97:       , v8::External::New(reinterpret_cast<void *>(callback)));\n   98  \n   99      v8::Local<v8::Value> val = v8::Local<v8::Value>::New(data);\n  100  \n  101:     if (!val.IsEmpty()) {\n  102:       obj->SetInternalField(imp::kDataIndex, val);\n  103      }\n  104  \n  105      // Note(agnat): Emulate length argument here. Unfortunately, I couldn't find\n  106      // a way. Have at it though...\n  107:     return scope.Close(\n  108          v8::FunctionTemplate::New(imp::FunctionCallbackWrapper\n  109                                   , obj\n  110:                                  , signature));\n  111:   } else {\n  112:     return v8::FunctionTemplate::New(0, data, signature);\n  113    }\n  114  }\n  ...\n  125  Factory<v8::NumberObject>::return_t\n  126  Factory<v8::NumberObject>::New(double value) {\n  127:   return v8::NumberObject::New(value).As<v8::NumberObject>();\n  128  }\n  129  \n  ...\n  139  typename IntegerFactory<T>::return_t\n  140  IntegerFactory<T>::New(uint32_t value) {\n  141:   return To<T>(T::NewFromUnsigned(value));\n  142  }\n  143  \n  144  Factory<v8::Uint32>::return_t\n  145  Factory<v8::Uint32>::New(int32_t value) {\n  146:   return To<v8::Uint32>(v8::Uint32::NewFromUnsigned(value));\n  147  }\n  148  \n  149  Factory<v8::Uint32>::return_t\n  150  Factory<v8::Uint32>::New(uint32_t value) {\n  151:   return To<v8::Uint32>(v8::Uint32::NewFromUnsigned(value));\n  152  }\n  153  \n  ...\n  171  Factory<v8::RegExp>::return_t\n  172  Factory<v8::RegExp>::New(\n  173:     v8::Local<v8::String> pattern\n  174:   , v8::RegExp::Flags flags) {\n  175:   return Factory<v8::RegExp>::return_t(v8::RegExp::New(pattern, flags));\n  176  }\n  177  \n  178: //=== Script ===================================================================\n  179  \n  180: Factory<v8::Script>::return_t\n  181: Factory<v8::Script>::New( v8::Local<v8::String> source) {\n  182:   return Factory<v8::Script>::return_t(v8::Script::New(source));\n  183  }\n  184: Factory<v8::Script>::return_t\n  185: Factory<v8::Script>::New( v8::Local<v8::String> source\n  186:                         , v8::ScriptOrigin const& origin) {\n  187:   return Factory<v8::Script>::return_t(\n  188:       v8::Script::New(source, const_cast<v8::ScriptOrigin*>(&origin)));\n  189  }\n  190  \n  191: //=== Signature ================================================================\n  192  \n  193: Factory<v8::Signature>::return_t\n  194: Factory<v8::Signature>::New(Factory<v8::Signature>::FTH receiver) {\n  195:   return v8::Signature::New(receiver);\n  196  }\n  197  \n  198: //=== String ===================================================================\n  199  \n  200: Factory<v8::String>::return_t\n  201: Factory<v8::String>::New() {\n  202:   return Factory<v8::String>::return_t(v8::String::Empty());\n  203  }\n  204  \n  205: Factory<v8::String>::return_t\n  206: Factory<v8::String>::New(const char * value, int length) {\n  207:   return Factory<v8::String>::return_t(v8::String::New(value, length));\n  208  }\n  209  \n  210: Factory<v8::String>::return_t\n  211: Factory<v8::String>::New(\n  212:     std::string const& value) /* NOLINT(build/include_what_you_use) */ {\n  213:   assert(value.size() <= INT_MAX && \"string too long\");\n  214:   return Factory<v8::String>::return_t(\n  215:       v8::String::New( value.data(), static_cast<int>(value.size())));\n  216  }\n  217  \n  218: Factory<v8::String>::return_t\n  219: Factory<v8::String>::New(const uint16_t * value, int length) {\n  220:   return Factory<v8::String>::return_t(v8::String::New(value, length));\n  221  }\n  222  \n  223: Factory<v8::String>::return_t\n  224: Factory<v8::String>::New(v8::String::ExternalStringResource * value) {\n  225:   return Factory<v8::String>::return_t(v8::String::NewExternal(value));\n  226  }\n  227  \n  228: Factory<v8::String>::return_t\n  229: Factory<v8::String>::New(v8::String::ExternalAsciiStringResource * value) {\n  230:   return Factory<v8::String>::return_t(v8::String::NewExternal(value));\n  231  }\n  232  \n  233: //=== String Object ============================================================\n  234  \n  235: Factory<v8::StringObject>::return_t\n  236: Factory<v8::StringObject>::New(v8::Local<v8::String> value) {\n  237:   return v8::StringObject::New(value).As<v8::StringObject>();\n  238  }\n  239  \n  240: }  // end of namespace imp\n  241  \n  242: //=== Presistents and Handles ==================================================\n  243  \n  244  template <typename T>\n  ...\n  248  \n  249  template <typename T>\n  250: inline v8::Local<T> New(v8::Persistent<T> const& p) {\n  251    return v8::Local<T>::New(p);\n  252  }\n  253  \n  254  template <typename T, typename M>\n  255: inline v8::Local<T> New(Persistent<T, M> const& p) {\n  256:   return v8::Local<T>::New(p.persistent);\n  257  }\n  258  \n  259  template <typename T>\n  260: inline v8::Local<T> New(Global<T> const& p) {\n  261:   return v8::Local<T>::New(p.persistent);\n  262  }\n  263  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_maybe_43_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   11  \n   12  template<typename T>\n   13: using MaybeLocal = v8::MaybeLocal<T>;\n   14  \n   15  template<typename T>\n   16: using Maybe = v8::Maybe<T>;\n   17  \n   18  template<typename T>\n   ..\n   22  \n   23  template<typename T>\n   24: inline Maybe<T> Just(const T& t) {\n   25:   return v8::Just<T>(t);\n   26  }\n   27  \n   ..\n   29  \n   30  inline\n   31: MaybeLocal<v8::String> ToDetailString(v8::Local<v8::Value> val) {\n   32:   return val->ToDetailString(GetCurrentContext());\n   33  }\n   34  \n   ..\n   39  \n   40  inline\n   41: Maybe<bool> Equals(v8::Local<v8::Value> a, v8::Local<v8::Value>(b)) {\n   42:   return a->Equals(GetCurrentContext(), b);\n   43  }\n   44  \n   45  inline\n   46: MaybeLocal<v8::Object> NewInstance(v8::Local<v8::Function> h) {\n   47:   return h->NewInstance(GetCurrentContext());\n   48  }\n   49  \n   50  inline\n   51: MaybeLocal<v8::Object> NewInstance(\n   52        v8::Local<v8::Function> h\n   53      , int argc\n   54      , v8::Local<v8::Value> argv[]) {\n   55:   return h->NewInstance(GetCurrentContext(), argc, argv);\n   56  }\n   57  \n   58  inline\n   59: MaybeLocal<v8::Object> NewInstance(v8::Local<v8::ObjectTemplate> h) {\n   60:   return h->NewInstance(GetCurrentContext());\n   61  }\n   62  \n   ..\n   67  }\n   68  \n   69: inline Maybe<bool> Set(\n   70      v8::Local<v8::Object> obj\n   71    , v8::Local<v8::Value> key\n   72    , v8::Local<v8::Value> value) {\n   73:   return obj->Set(GetCurrentContext(), key, value);\n   74  }\n   75  \n   76: inline Maybe<bool> Set(\n   77      v8::Local<v8::Object> obj\n   78    , uint32_t index\n   79    , v8::Local<v8::Value> value) {\n   80:   return obj->Set(GetCurrentContext(), index, value);\n   81  }\n   82  \n   83: inline Maybe<bool> ForceSet(\n   84      v8::Local<v8::Object> obj\n   85    , v8::Local<v8::Value> key\n   86    , v8::Local<v8::Value> value\n   87:   , v8::PropertyAttribute attribs = v8::None) {\n   88:   return obj->ForceSet(GetCurrentContext(), key, value, attribs);\n   89  }\n   90  \n   ..\n  100  }\n  101  \n  102: inline v8::PropertyAttribute GetPropertyAttributes(\n  103      v8::Local<v8::Object> obj\n  104    , v8::Local<v8::Value> key) {\n  105:   return obj->GetPropertyAttributes(GetCurrentContext(), key).FromJust();\n  106  }\n  107  \n  108: inline Maybe<bool> Has(\n  109      v8::Local<v8::Object> obj\n  110:   , v8::Local<v8::String> key) {\n  111:   return obj->Has(GetCurrentContext(), key);\n  112  }\n  113  \n  114: inline Maybe<bool> Has(v8::Local<v8::Object> obj, uint32_t index) {\n  115:   return obj->Has(GetCurrentContext(), index);\n  116  }\n  117  \n  118  inline Maybe<bool> Delete(\n  119      v8::Local<v8::Object> obj\n  120:   , v8::Local<v8::String> key) {\n  121    return obj->Delete(GetCurrentContext(), key);\n  122  }\n  ...\n  128  \n  129  inline\n  130: MaybeLocal<v8::Array> GetPropertyNames(v8::Local<v8::Object> obj) {\n  131:   return obj->GetPropertyNames(GetCurrentContext());\n  132  }\n  133  \n  134  inline\n  135: MaybeLocal<v8::Array> GetOwnPropertyNames(v8::Local<v8::Object> obj) {\n  136:   return obj->GetOwnPropertyNames(GetCurrentContext());\n  137  }\n  138  \n  139: inline Maybe<bool> SetPrototype(\n  140      v8::Local<v8::Object> obj\n  141    , v8::Local<v8::Value> prototype) {\n  142:   return obj->SetPrototype(GetCurrentContext(), prototype);\n  143  }\n  144  \n  145: inline MaybeLocal<v8::String> ObjectProtoToString(\n  146      v8::Local<v8::Object> obj) {\n  147:   return obj->ObjectProtoToString(GetCurrentContext());\n  148  }\n  149  \n  150: inline Maybe<bool> HasOwnProperty(\n  151      v8::Local<v8::Object> obj\n  152:   , v8::Local<v8::String> key) {\n  153:   return obj->HasOwnProperty(GetCurrentContext(), key);\n  154  }\n  155  \n  156: inline Maybe<bool> HasRealNamedProperty(\n  157      v8::Local<v8::Object> obj\n  158:   , v8::Local<v8::String> key) {\n  159:   return obj->HasRealNamedProperty(GetCurrentContext(), key);\n  160  }\n  161  \n  162: inline Maybe<bool> HasRealIndexedProperty(\n  163      v8::Local<v8::Object> obj\n  164    , uint32_t index) {\n  165:   return obj->HasRealIndexedProperty(GetCurrentContext(), index);\n  166  }\n  167  \n  168: inline Maybe<bool> HasRealNamedCallbackProperty(\n  169      v8::Local<v8::Object> obj\n  170:   , v8::Local<v8::String> key) {\n  171:   return obj->HasRealNamedCallbackProperty(GetCurrentContext(), key);\n  172  }\n  173  \n  174  inline MaybeLocal<v8::Value> GetRealNamedPropertyInPrototypeChain(\n  175      v8::Local<v8::Object> obj\n  176:   , v8::Local<v8::String> key) {\n  177    return obj->GetRealNamedPropertyInPrototypeChain(GetCurrentContext(), key);\n  178  }\n  ...\n  180  inline MaybeLocal<v8::Value> GetRealNamedProperty(\n  181      v8::Local<v8::Object> obj\n  182:   , v8::Local<v8::String> key) {\n  183    return obj->GetRealNamedProperty(GetCurrentContext(), key);\n  184  }\n  185  \n  186: inline MaybeLocal<v8::Value> CallAsFunction(\n  187      v8::Local<v8::Object> obj\n  188    , v8::Local<v8::Object> recv\n  189    , int argc\n  190    , v8::Local<v8::Value> argv[]) {\n  191:   return obj->CallAsFunction(GetCurrentContext(), recv, argc, argv);\n  192  }\n  193  \n  194: inline MaybeLocal<v8::Value> CallAsConstructor(\n  195      v8::Local<v8::Object> obj\n  196    , int argc, v8::Local<v8::Value> argv[]) {\n  197:   return obj->CallAsConstructor(GetCurrentContext(), argc, argv);\n  198  }\n  199  \n  200  inline\n  201: MaybeLocal<v8::String> GetSourceLine(v8::Local<v8::Message> msg) {\n  202:   return msg->GetSourceLine(GetCurrentContext());\n  203  }\n  204  \n  205: inline Maybe<int> GetLineNumber(v8::Local<v8::Message> msg) {\n  206:   return msg->GetLineNumber(GetCurrentContext());\n  207  }\n  208  \n  209: inline Maybe<int> GetStartColumn(v8::Local<v8::Message> msg) {\n  210:   return msg->GetStartColumn(GetCurrentContext());\n  211  }\n  212  \n  213: inline Maybe<int> GetEndColumn(v8::Local<v8::Message> msg) {\n  214:   return msg->GetEndColumn(GetCurrentContext());\n  215  }\n  216  \n  ...\n  218      v8::Local<v8::Array> array\n  219    , uint32_t index) {\n  220: #if (NODE_MODULE_VERSION >= NODE_6_0_MODULE_VERSION)\n  221:   v8::EscapableHandleScope handle_scope(v8::Isolate::GetCurrent());\n  222    v8::Local<v8::Context> context = GetCurrentContext();\n  223    v8::Local<v8::Value> elem;\n  ...\n  229      return MaybeLocal<v8::Object>();\n  230    }\n  231:   return MaybeLocal<v8::Object>(handle_scope.Escape(obj->Clone()));\n  232: #else\n  233    return array->CloneElementAt(GetCurrentContext(), index);\n  234  #endif\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_maybe_pre_43_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   11  \n   12  template<typename T>\n   13: class MaybeLocal {\n   14   public:\n   15    inline MaybeLocal() : val_(v8::Local<T>()) {}\n   16  \n   17:   template<typename S>\n   18: # if NODE_MODULE_VERSION >= NODE_0_12_MODULE_VERSION\n   19:   inline MaybeLocal(v8::Local<S> that) : val_(that) {}\n   20: # else\n   21:   inline MaybeLocal(v8::Local<S> that) :\n   22:       val_(*reinterpret_cast<v8::Local<T>*>(&that)) {}\n   23  # endif\n   24  \n   25:   inline bool IsEmpty() const { return val_.IsEmpty(); }\n   26  \n   27:   template<typename S>\n   28:   inline bool ToLocal(v8::Local<S> *out) const {\n   29      *out = val_;\n   30:     return !IsEmpty();\n   31    }\n   32  \n   33:   inline v8::Local<T> ToLocalChecked() const {\n   34: #if defined(V8_ENABLE_CHECKS)\n   35:     assert(!IsEmpty() && \"ToLocalChecked is Empty\");\n   36: #endif  // V8_ENABLE_CHECKS\n   37      return val_;\n   38    }\n   39  \n   40:   template<typename S>\n   41:   inline v8::Local<S> FromMaybe(v8::Local<S> default_value) const {\n   42:     return IsEmpty() ? default_value : val_;\n   43    }\n   44  \n   ..\n   48  \n   49  template<typename T>\n   50: class Maybe {\n   51   public:\n   52:   inline bool IsNothing() const { return !has_value_; }\n   53:   inline bool IsJust() const { return has_value_; }\n   54  \n   55:   inline T FromJust() const {\n   56: #if defined(V8_ENABLE_CHECKS)\n   57:     assert(IsJust() && \"FromJust is Nothing\");\n   58: #endif  // V8_ENABLE_CHECKS\n   59      return value_;\n   60    }\n   61  \n   62:   inline T FromMaybe(const T& default_value) const {\n   63:     return has_value_ ? value_ : default_value;\n   64    }\n   65  \n   66:   inline bool operator==(const Maybe &other) const {\n   67:     return (IsJust() == other.IsJust()) &&\n   68:         (!IsJust() || FromJust() == other.FromJust());\n   69    }\n   70  \n   71:   inline bool operator!=(const Maybe &other) const {\n   72      return !operator==(other);\n   73    }\n   74  \n   75   private:\n   76:   Maybe() : has_value_(false) {}\n   77:   explicit Maybe(const T& t) : has_value_(true), value_(t) {}\n   78:   bool has_value_;\n   79    T value_;\n   80  \n   ..\n   82    friend Maybe<U> Nothing();\n   83    template<typename U>\n   84:   friend Maybe<U> Just(const U& u);\n   85  };\n   86  \n   ..\n   91  \n   92  template<typename T>\n   93: inline Maybe<T> Just(const T& t) {\n   94    return Maybe<T>(t);\n   95  }\n   96  \n   97  inline\n   98: MaybeLocal<v8::String> ToDetailString(v8::Handle<v8::Value> val) {\n   99:   return MaybeLocal<v8::String>(val->ToDetailString());\n  100  }\n  101  \n  ...\n  106  \n  107  inline\n  108: Maybe<bool> Equals(v8::Handle<v8::Value> a, v8::Handle<v8::Value>(b)) {\n  109:   return Just<bool>(a->Equals(b));\n  110  }\n  111  \n  112  inline\n  113: MaybeLocal<v8::Object> NewInstance(v8::Handle<v8::Function> h) {\n  114:   return MaybeLocal<v8::Object>(h->NewInstance());\n  115  }\n  116  \n  117  inline\n  118: MaybeLocal<v8::Object> NewInstance(\n  119        v8::Local<v8::Function> h\n  120      , int argc\n  121      , v8::Local<v8::Value> argv[]) {\n  122:   return MaybeLocal<v8::Object>(h->NewInstance(argc, argv));\n  123  }\n  124  \n  125  inline\n  126: MaybeLocal<v8::Object> NewInstance(v8::Handle<v8::ObjectTemplate> h) {\n  127:   return MaybeLocal<v8::Object>(h->NewInstance());\n  128  }\n  129  \n  ...\n  133  }\n  134  \n  135: inline Maybe<bool> Set(\n  136      v8::Handle<v8::Object> obj\n  137    , v8::Handle<v8::Value> key\n  138    , v8::Handle<v8::Value> value) {\n  139:   return Just<bool>(obj->Set(key, value));\n  140  }\n  141  \n  142: inline Maybe<bool> Set(\n  143      v8::Handle<v8::Object> obj\n  144    , uint32_t index\n  145    , v8::Handle<v8::Value> value) {\n  146:   return Just<bool>(obj->Set(index, value));\n  147  }\n  148  \n  149: inline Maybe<bool> ForceSet(\n  150      v8::Handle<v8::Object> obj\n  151    , v8::Handle<v8::Value> key\n  152    , v8::Handle<v8::Value> value\n  153:   , v8::PropertyAttribute attribs = v8::None) {\n  154:   return Just<bool>(obj->ForceSet(key, value, attribs));\n  155  }\n  156  \n  ...\n  167  }\n  168  \n  169: inline Maybe<v8::PropertyAttribute> GetPropertyAttributes(\n  170      v8::Handle<v8::Object> obj\n  171    , v8::Handle<v8::Value> key) {\n  172:   return Just<v8::PropertyAttribute>(obj->GetPropertyAttributes(key));\n  173  }\n  174  \n  175: inline Maybe<bool> Has(\n  176      v8::Handle<v8::Object> obj\n  177:   , v8::Handle<v8::String> key) {\n  178:   return Just<bool>(obj->Has(key));\n  179  }\n  180  \n  181: inline Maybe<bool> Has(\n  182      v8::Handle<v8::Object> obj\n  183    , uint32_t index) {\n  184:   return Just<bool>(obj->Has(index));\n  185  }\n  186  \n  187  inline Maybe<bool> Delete(\n  188      v8::Handle<v8::Object> obj\n  189:   , v8::Handle<v8::String> key) {\n  190:   return Just<bool>(obj->Delete(key));\n  191  }\n  192  \n  ...\n  194      v8::Handle<v8::Object> obj\n  195    , uint32_t index) {\n  196:   return Just<bool>(obj->Delete(index));\n  197  }\n  198  \n  199  inline\n  200: MaybeLocal<v8::Array> GetPropertyNames(v8::Handle<v8::Object> obj) {\n  201:   return MaybeLocal<v8::Array>(obj->GetPropertyNames());\n  202  }\n  203  \n  204  inline\n  205: MaybeLocal<v8::Array> GetOwnPropertyNames(v8::Handle<v8::Object> obj) {\n  206:   return MaybeLocal<v8::Array>(obj->GetOwnPropertyNames());\n  207  }\n  208  \n  209: inline Maybe<bool> SetPrototype(\n  210      v8::Handle<v8::Object> obj\n  211    , v8::Handle<v8::Value> prototype) {\n  212:   return Just<bool>(obj->SetPrototype(prototype));\n  213  }\n  214  \n  215: inline MaybeLocal<v8::String> ObjectProtoToString(\n  216      v8::Handle<v8::Object> obj) {\n  217:   return MaybeLocal<v8::String>(obj->ObjectProtoToString());\n  218  }\n  219  \n  220: inline Maybe<bool> HasOwnProperty(\n  221      v8::Handle<v8::Object> obj\n  222:   , v8::Handle<v8::String> key) {\n  223:   return Just<bool>(obj->HasOwnProperty(key));\n  224  }\n  225  \n  226: inline Maybe<bool> HasRealNamedProperty(\n  227      v8::Handle<v8::Object> obj\n  228:   , v8::Handle<v8::String> key) {\n  229:   return Just<bool>(obj->HasRealNamedProperty(key));\n  230  }\n  231  \n  232: inline Maybe<bool> HasRealIndexedProperty(\n  233      v8::Handle<v8::Object> obj\n  234    , uint32_t index) {\n  235:   return Just<bool>(obj->HasRealIndexedProperty(index));\n  236  }\n  237  \n  238: inline Maybe<bool> HasRealNamedCallbackProperty(\n  239      v8::Handle<v8::Object> obj\n  240:   , v8::Handle<v8::String> key) {\n  241:   return Just<bool>(obj->HasRealNamedCallbackProperty(key));\n  242  }\n  243  \n  244  inline MaybeLocal<v8::Value> GetRealNamedPropertyInPrototypeChain(\n  245      v8::Handle<v8::Object> obj\n  246:   , v8::Handle<v8::String> key) {\n  247    return MaybeLocal<v8::Value>(\n  248        obj->GetRealNamedPropertyInPrototypeChain(key));\n  ...\n  251  inline MaybeLocal<v8::Value> GetRealNamedProperty(\n  252      v8::Handle<v8::Object> obj\n  253:   , v8::Handle<v8::String> key) {\n  254    return MaybeLocal<v8::Value>(obj->GetRealNamedProperty(key));\n  255  }\n  256  \n  257: inline MaybeLocal<v8::Value> CallAsFunction(\n  258      v8::Handle<v8::Object> obj\n  259    , v8::Handle<v8::Object> recv\n  260    , int argc\n  261    , v8::Handle<v8::Value> argv[]) {\n  262:   return MaybeLocal<v8::Value>(obj->CallAsFunction(recv, argc, argv));\n  263  }\n  264  \n  265: inline MaybeLocal<v8::Value> CallAsConstructor(\n  266      v8::Handle<v8::Object> obj\n  267    , int argc\n  268    , v8::Local<v8::Value> argv[]) {\n  269:   return MaybeLocal<v8::Value>(obj->CallAsConstructor(argc, argv));\n  270  }\n  271  \n  272  inline\n  273: MaybeLocal<v8::String> GetSourceLine(v8::Handle<v8::Message> msg) {\n  274:   return MaybeLocal<v8::String>(msg->GetSourceLine());\n  275  }\n  276  \n  277: inline Maybe<int> GetLineNumber(v8::Handle<v8::Message> msg) {\n  278:   return Just<int>(msg->GetLineNumber());\n  279  }\n  280  \n  281: inline Maybe<int> GetStartColumn(v8::Handle<v8::Message> msg) {\n  282:   return Just<int>(msg->GetStartColumn());\n  283  }\n  284  \n  285: inline Maybe<int> GetEndColumn(v8::Handle<v8::Message> msg) {\n  286:   return Just<int>(msg->GetEndColumn());\n  287  }\n  288  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_new.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   10  #define NAN_NEW_H_\n   11  \n   12: namespace imp {  // scnr\n   13  \n   14  // TODO(agnat): Generalize\n   ..\n   36  }\n   37  \n   38: template <typename T> struct FactoryBase {\n   39    typedef v8::Local<T> return_t;\n   40  };\n   41  \n   42: template <typename T> struct MaybeFactoryBase {\n   43    typedef MaybeLocal<T> return_t;\n   44  };\n   45  \n   46: template <typename T> struct Factory;\n   47  \n   48  template <>\n   49: struct Factory<v8::Array> : FactoryBase<v8::Array> {\n   50:   static inline return_t New();\n   51:   static inline return_t New(int length);\n   52  };\n   53  \n   54  template <>\n   55: struct Factory<v8::Boolean> : FactoryBase<v8::Boolean> {\n   56:   static inline return_t New(bool value);\n   57  };\n   58  \n   59  template <>\n   60: struct Factory<v8::BooleanObject> : FactoryBase<v8::BooleanObject> {\n   61:   static inline return_t New(bool value);\n   62  };\n   63  \n   64  template <>\n   65: struct Factory<v8::Context> : FactoryBase<v8::Context> {\n   66:   static inline\n   67    return_t\n   68:   New( v8::ExtensionConfiguration* extensions = NULL\n   69       , v8::Local<v8::ObjectTemplate> tmpl = v8::Local<v8::ObjectTemplate>()\n   70       , v8::Local<v8::Value> obj = v8::Local<v8::Value>());\n   ..\n   72  \n   73  template <>\n   74: struct Factory<v8::Date> : MaybeFactoryBase<v8::Date> {\n   75:   static inline return_t New(double value);\n   76  };\n   77  \n   78  template <>\n   79: struct Factory<v8::External> : FactoryBase<v8::External> {\n   80:   static inline return_t New(void *value);\n   81  };\n   82  \n   83  template <>\n   84: struct Factory<v8::Function> : FactoryBase<v8::Function> {\n   85:   static inline\n   86    return_t\n   87    New( FunctionCallback callback\n   ..\n   90  \n   91  template <>\n   92: struct Factory<v8::FunctionTemplate> : FactoryBase<v8::FunctionTemplate> {\n   93:   static inline\n   94    return_t\n   95    New( FunctionCallback callback = NULL\n   96       , v8::Local<v8::Value> data = v8::Local<v8::Value>()\n   97:      , v8::Local<v8::Signature> signature = v8::Local<v8::Signature>());\n   98  };\n   99  \n  100  template <>\n  101: struct Factory<v8::Number> : FactoryBase<v8::Number> {\n  102:   static inline return_t New(double value);\n  103  };\n  104  \n  105  template <>\n  106: struct Factory<v8::NumberObject> : FactoryBase<v8::NumberObject> {\n  107:   static inline return_t New(double value);\n  108  };\n  109  \n  110  template <typename T>\n  111: struct IntegerFactory : FactoryBase<T> {\n  112:   typedef typename FactoryBase<T>::return_t return_t;\n  113:   static inline return_t New(int32_t value);\n  114:   static inline return_t New(uint32_t value);\n  115  };\n  116  \n  117  template <>\n  118: struct Factory<v8::Integer> : IntegerFactory<v8::Integer> {};\n  119  \n  120  template <>\n  121: struct Factory<v8::Int32> : IntegerFactory<v8::Int32> {};\n  122  \n  123  template <>\n  124: struct Factory<v8::Uint32> : FactoryBase<v8::Uint32> {\n  125:   static inline return_t New(int32_t value);\n  126:   static inline return_t New(uint32_t value);\n  127  };\n  128  \n  129  template <>\n  130: struct Factory<v8::Object> : FactoryBase<v8::Object> {\n  131:   static inline return_t New();\n  132  };\n  133  \n  134  template <>\n  135: struct Factory<v8::ObjectTemplate> : FactoryBase<v8::ObjectTemplate> {\n  136:   static inline return_t New();\n  137  };\n  138  \n  139  template <>\n  140: struct Factory<v8::RegExp> : MaybeFactoryBase<v8::RegExp> {\n  141:   static inline return_t New(\n  142:       v8::Local<v8::String> pattern, v8::RegExp::Flags flags);\n  143  };\n  144  \n  145  template <>\n  146: struct Factory<v8::Script> : MaybeFactoryBase<v8::Script> {\n  147:   static inline return_t New( v8::Local<v8::String> source);\n  148:   static inline return_t New( v8::Local<v8::String> source\n  149:                             , v8::ScriptOrigin const& origin);\n  150  };\n  151  \n  152  template <>\n  153: struct Factory<v8::Signature> : FactoryBase<v8::Signature> {\n  154    typedef v8::Local<v8::FunctionTemplate> FTH;\n  155:   static inline return_t New(FTH receiver = FTH());\n  156  };\n  157  \n  158  template <>\n  159: struct Factory<v8::String> : MaybeFactoryBase<v8::String> {\n  160:   static inline return_t New();\n  161:   static inline return_t New(const char *value, int length = -1);\n  162:   static inline return_t New(const uint16_t *value, int length = -1);\n  163:   static inline return_t New(std::string const& value);\n  164  \n  165:   static inline return_t New(v8::String::ExternalStringResource * value);\n  166:   static inline return_t New(ExternalOneByteStringResource * value);\n  167  };\n  168  \n  169  template <>\n  170: struct Factory<v8::StringObject> : FactoryBase<v8::StringObject> {\n  171:   static inline return_t New(v8::Local<v8::String> value);\n  172  };\n  173  \n  174: }  // end of namespace imp\n  175  \n  176: #if (NODE_MODULE_VERSION >= 12)\n  177  \n  178: namespace imp {\n  179  \n  180  template <>\n  181: struct Factory<v8::UnboundScript> : MaybeFactoryBase<v8::UnboundScript> {\n  182:   static inline return_t New( v8::Local<v8::String> source);\n  183:   static inline return_t New( v8::Local<v8::String> source\n  184:                             , v8::ScriptOrigin const& origin);\n  185  };\n  186  \n  187: }  // end of namespace imp\n  188  \n  189  # include \"nan_implementation_12_inl.h\"\n  190  \n  191: #else  // NODE_MODULE_VERSION >= 12\n  192  \n  193  # include \"nan_implementation_pre_12_inl.h\"\n  ...\n  227  }\n  228  \n  229: // Note(agnat): When passing overloaded function pointers to template functions\n  230: // as generic arguments the compiler needs help in picking the right overload.\n  231: // These two functions handle New<Function> and New<FunctionTemplate> with\n  232: // all argument variations.\n  233  \n  234: // v8::Function and v8::FunctionTemplate with one or two arguments\n  235  template <typename T>\n  236  typename imp::Factory<T>::return_t\n  ...\n  240  }\n  241  \n  242: // v8::Function and v8::FunctionTemplate with three arguments\n  243  template <typename T, typename A2>\n  244  typename imp::Factory<T>::return_t\n  ...\n  251  // Convenience\n  252  \n  253: #if NODE_MODULE_VERSION < IOJS_3_0_MODULE_VERSION\n  254  template <typename T> inline v8::Local<T> New(v8::Handle<T> h);\n  255  #endif\n  256  \n  257: #if NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  258  template <typename T, typename M>\n  259:     inline v8::Local<T> New(v8::Persistent<T, M> const& p);\n  260: #else\n  261: template <typename T> inline v8::Local<T> New(v8::Persistent<T> const& p);\n  262  #endif\n  263  template <typename T, typename M>\n  264: inline v8::Local<T> New(Persistent<T, M> const& p);\n  265  template <typename T>\n  266: inline v8::Local<T> New(Global<T> const& p);\n  267  \n  268  inline\n  ...\n  291  \n  292  inline\n  293: imp::Factory<v8::String>::return_t\n  294: New(std::string const& value) {  // NOLINT(build/include_what_you_use)\n  295:   return New<v8::String>(value);\n  296  }\n  297  \n  298  inline\n  299: imp::Factory<v8::String>::return_t\n  300: New(const char * value, int length) {\n  301:   return New<v8::String>(value, length);\n  302  }\n  303  \n  304  inline\n  305: imp::Factory<v8::String>::return_t\n  306: New(const uint16_t * value, int length) {\n  307:   return New<v8::String>(value, length);\n  308  }\n  309  \n  310  inline\n  311: imp::Factory<v8::String>::return_t\n  312: New(const char * value) {\n  313:   return New<v8::String>(value);\n  314  }\n  315  \n  316  inline\n  317: imp::Factory<v8::String>::return_t\n  318: New(const uint16_t * value) {\n  319:   return New<v8::String>(value);\n  320  }\n  321  \n  322  inline\n  323: imp::Factory<v8::String>::return_t\n  324: New(v8::String::ExternalStringResource * value) {\n  325:   return New<v8::String>(value);\n  326  }\n  327  \n  328  inline\n  329: imp::Factory<v8::String>::return_t\n  330: New(ExternalOneByteStringResource * value) {\n  331:   return New<v8::String>(value);\n  332  }\n  333  \n  334  inline\n  335  imp::Factory<v8::RegExp>::return_t\n  336: New(v8::Local<v8::String> pattern, v8::RegExp::Flags flags) {\n  337:   return New<v8::RegExp>(pattern, flags);\n  338  }\n  339  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_object_wrap.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   10  #define NAN_OBJECT_WRAP_H_\n   11  \n   12: class ObjectWrap {\n   13   public:\n   14    ObjectWrap() {\n   15:     refs_ = 0;\n   16    }\n   17  \n   18  \n   19    virtual ~ObjectWrap() {\n   20:     if (persistent().IsEmpty()) {\n   21        return;\n   22      }\n   23  \n   24:     assert(persistent().IsNearDeath());\n   25:     persistent().ClearWeak();\n   26:     persistent().Reset();\n   27    }\n   28  \n   29  \n   30:   template <class T>\n   31:   static inline T* Unwrap(v8::Local<v8::Object> object) {\n   32:     assert(!object.IsEmpty());\n   33:     assert(object->InternalFieldCount() > 0);\n   34:     // Cast to ObjectWrap before casting to T.  A direct cast from void\n   35:     // to T won't work right when T has more than one base class.\n   36      void* ptr = GetInternalFieldPointer(object, 0);\n   37:     ObjectWrap* wrap = static_cast<ObjectWrap*>(ptr);\n   38:     return static_cast<T*>(wrap);\n   39    }\n   40  \n   41  \n   42:   inline v8::Local<v8::Object> handle() const {\n   43      return New(handle_);\n   44    }\n   45  \n   46  \n   47:   inline Persistent<v8::Object>& persistent() {\n   48      return handle_;\n   49    }\n   ..\n   52   protected:\n   53    inline void Wrap(v8::Local<v8::Object> object) {\n   54:     assert(persistent().IsEmpty());\n   55:     assert(object->InternalFieldCount() > 0);\n   56:     SetInternalFieldPointer(object, 0, this);\n   57:     persistent().Reset(object);\n   58      MakeWeak();\n   59    }\n   60  \n   61: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   62:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   63  \n   64    inline void MakeWeak() {\n   65:     persistent().v8::PersistentBase<v8::Object>::SetWeak(\n   66:         this, WeakCallback, v8::WeakCallbackType::kParameter);\n   67:     persistent().MarkIndependent();\n   68    }\n   69  \n   70: #elif NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n   71  \n   72    inline void MakeWeak() {\n   73:     persistent().v8::PersistentBase<v8::Object>::SetWeak(this, WeakCallback);\n   74:     persistent().MarkIndependent();\n   75    }\n   76  \n   77: #else\n   78  \n   79    inline void MakeWeak() {\n   80:     persistent().persistent.MakeWeak(this, WeakCallback);\n   81:     persistent().MarkIndependent();\n   82    }\n   83  \n   84  #endif\n   85  \n   86:   /* Ref() marks the object as being attached to an event loop.\n   87:    * Refed objects will not be garbage collected, even if\n   88:    * all references are lost.\n   89     */\n   90    virtual void Ref() {\n   91:     assert(!persistent().IsEmpty());\n   92:     persistent().ClearWeak();\n   93:     refs_++;\n   94    }\n   95  \n   96:   /* Unref() marks an object as detached from the event loop.  This is its\n   97:    * default state.  When an object with a \"weak\" reference changes from\n   98:    * attached to detached state it will be freed. Be careful not to access\n   99:    * the object after making this call as it might be gone!\n  100:    * (A \"weak reference\" means an object that only has a\n  101:    * persistant handle.)\n  102     *\n  103:    * DO NOT CALL THIS FROM DESTRUCTOR\n  104     */\n  105    virtual void Unref() {\n  106:     assert(!persistent().IsEmpty());\n  107:     assert(!persistent().IsWeak());\n  108:     assert(refs_ > 0);\n  109:     if (--refs_ == 0)\n  110        MakeWeak();\n  111    }\n  112  \n  113:   int refs_;  // ro\n  114  \n  115   private:\n  116:   NAN_DISALLOW_ASSIGN_COPY_MOVE(ObjectWrap)\n  117: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  118:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  119  \n  120:   static void\n  121:   WeakCallback(v8::WeakCallbackInfo<ObjectWrap> const& info) {\n  122      ObjectWrap* wrap = info.GetParameter();\n  123:     assert(wrap->refs_ == 0);\n  124:     assert(wrap->handle_.IsNearDeath());\n  125:     wrap->handle_.Reset();\n  126      delete wrap;\n  127    }\n  128  \n  129: #elif NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  130  \n  131:   static void\n  132:   WeakCallback(v8::WeakCallbackData<v8::Object, ObjectWrap> const& data) {\n  133      ObjectWrap* wrap = data.GetParameter();\n  134:     assert(wrap->refs_ == 0);\n  135:     assert(wrap->handle_.IsNearDeath());\n  136:     wrap->handle_.Reset();\n  137      delete wrap;\n  138    }\n  139  \n  140: #else\n  141  \n  142:   static void WeakCallback(v8::Persistent<v8::Value> value, void *data) {\n  143:     ObjectWrap *wrap = static_cast<ObjectWrap*>(data);\n  144:     assert(wrap->refs_ == 0);\n  145:     assert(wrap->handle_.IsNearDeath());\n  146:     wrap->handle_.Reset();\n  147      delete wrap;\n  148    }\n  149  \n  150  #endif\n  151:   Persistent<v8::Object> handle_;\n  152  };\n  153  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_persistent_12_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_PERSISTENT_12_INL_H_\n   10: #define NAN_PERSISTENT_12_INL_H_\n   11  \n   12: template<typename T, typename M> class Persistent :\n   13:     public v8::Persistent<T, M> {\n   14   public:\n   15:   inline Persistent() : v8::Persistent<T, M>() {}\n   16  \n   17:   template<typename S> inline Persistent(v8::Local<S> that) :\n   18:       v8::Persistent<T, M>(v8::Isolate::GetCurrent(), that) {}\n   19  \n   20:   template<typename S, typename M2>\n   21:   inline Persistent(const v8::Persistent<S, M2> &that) :\n   22:       v8::Persistent<T, M2>(v8::Isolate::GetCurrent(), that) {}\n   23  \n   24:   inline void Reset() { v8::PersistentBase<T>::Reset(); }\n   25  \n   26:   template <typename S>\n   27:   inline void Reset(const v8::Local<S> &other) {\n   28:     v8::PersistentBase<T>::Reset(v8::Isolate::GetCurrent(), other);\n   29    }\n   30  \n   31:   template <typename S>\n   32:   inline void Reset(const v8::PersistentBase<S> &other) {\n   33:     v8::PersistentBase<T>::Reset(v8::Isolate::GetCurrent(), other);\n   34    }\n   35  \n   36    template<typename P>\n   37:   inline void SetWeak(\n   38      P *parameter\n   39      , typename WeakCallbackInfo<P>::Callback callback\n   ..\n   41  \n   42   private:\n   43:   inline T *operator*() const { return *PersistentBase<T>::persistent; }\n   44  \n   45:   template<typename S, typename M2>\n   46:   inline void Copy(const Persistent<S, M2> &that) {\n   47:     TYPE_CHECK(T, S);\n   48  \n   49:     this->Reset();\n   50  \n   51:     if (!that.IsEmpty()) {\n   52:       this->Reset(that);\n   53:       M::Copy(that, this);\n   54      }\n   55    }\n   56  };\n   57  \n   58: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   59:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   60  template<typename T>\n   61: class Global : public v8::Global<T> {\n   62   public:\n   63    inline Global() : v8::Global<T>() {}\n   64  \n   65:   template<typename S> inline Global(v8::Local<S> that) :\n   66:     v8::Global<T>(v8::Isolate::GetCurrent(), that) {}\n   67  \n   68:   template<typename S>\n   69:   inline Global(const v8::PersistentBase<S> &that) :\n   70:       v8::Global<S>(v8::Isolate::GetCurrent(), that) {}\n   71  \n   72:   inline void Reset() { v8::PersistentBase<T>::Reset(); }\n   73  \n   74:   template <typename S>\n   75:   inline void Reset(const v8::Local<S> &other) {\n   76:     v8::PersistentBase<T>::Reset(v8::Isolate::GetCurrent(), other);\n   77    }\n   78  \n   79:   template <typename S>\n   80:   inline void Reset(const v8::PersistentBase<S> &other) {\n   81:     v8::PersistentBase<T>::Reset(v8::Isolate::GetCurrent(), other);\n   82    }\n   83  \n   84    template<typename P>\n   85:   inline void SetWeak(\n   86      P *parameter\n   87      , typename WeakCallbackInfo<P>::Callback callback\n   88      , WeakCallbackType type) {\n   89:     reinterpret_cast<Persistent<T>*>(this)->SetWeak(\n   90          parameter, callback, type);\n   91    }\n   92  };\n   93: #else\n   94  template<typename T>\n   95: class Global : public v8::UniquePersistent<T> {\n   96   public:\n   97:   inline Global() : v8::UniquePersistent<T>() {}\n   98  \n   99:   template<typename S> inline Global(v8::Local<S> that) :\n  100:     v8::UniquePersistent<T>(v8::Isolate::GetCurrent(), that) {}\n  101  \n  102:   template<typename S>\n  103:   inline Global(const v8::PersistentBase<S> &that) :\n  104:       v8::UniquePersistent<S>(v8::Isolate::GetCurrent(), that) {}\n  105  \n  106:   inline void Reset() { v8::PersistentBase<T>::Reset(); }\n  107  \n  108:   template <typename S>\n  109:   inline void Reset(const v8::Local<S> &other) {\n  110:     v8::PersistentBase<T>::Reset(v8::Isolate::GetCurrent(), other);\n  111    }\n  112  \n  113:   template <typename S>\n  114:   inline void Reset(const v8::PersistentBase<S> &other) {\n  115:     v8::PersistentBase<T>::Reset(v8::Isolate::GetCurrent(), other);\n  116    }\n  117  \n  118    template<typename P>\n  119:   inline void SetWeak(\n  120      P *parameter\n  121      , typename WeakCallbackInfo<P>::Callback callback\n  122      , WeakCallbackType type) {\n  123:     reinterpret_cast<Persistent<T>*>(this)->SetWeak(\n  124          parameter, callback, type);\n  125    }\n  ...\n  127  #endif\n  128  \n  129: #endif  // NAN_PERSISTENT_12_INL_H_\n  130  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_persistent_pre_12_inl.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_PERSISTENT_PRE_12_INL_H_\n   10: #define NAN_PERSISTENT_PRE_12_INL_H_\n   11  \n   12  template<typename T>\n   13: class PersistentBase {\n   14:   v8::Persistent<T> persistent;\n   15    template<typename U>\n   16:   friend v8::Local<U> New(const PersistentBase<U> &p);\n   17    template<typename U, typename M>\n   18:   friend v8::Local<U> New(const Persistent<U, M> &p);\n   19    template<typename U>\n   20:   friend v8::Local<U> New(const Global<U> &p);\n   21:   template<typename S> friend class ReturnValue;\n   22  \n   23   public:\n   24:   inline PersistentBase() :\n   25:       persistent() {}\n   26  \n   27:   inline void Reset() {\n   28:     persistent.Dispose();\n   29:     persistent.Clear();\n   30    }\n   31  \n   32:   template<typename S>\n   33:   inline void Reset(const v8::Local<S> &other) {\n   34:     TYPE_CHECK(T, S);\n   35  \n   36:     if (!persistent.IsEmpty()) {\n   37:       persistent.Dispose();\n   38      }\n   39  \n   40:     if (other.IsEmpty()) {\n   41:       persistent.Clear();\n   42:     } else {\n   43:       persistent = v8::Persistent<T>::New(other);\n   44      }\n   45    }\n   46  \n   47:   template<typename S>\n   48:   inline void Reset(const PersistentBase<S> &other) {\n   49:     TYPE_CHECK(T, S);\n   50  \n   51:     if (!persistent.IsEmpty()) {\n   52:       persistent.Dispose();\n   53      }\n   54  \n   55:     if (other.IsEmpty()) {\n   56:       persistent.Clear();\n   57:     } else {\n   58:       persistent = v8::Persistent<T>::New(other.persistent);\n   59      }\n   60    }\n   61  \n   62:   inline bool IsEmpty() const { return persistent.IsEmpty(); }\n   63  \n   64:   inline void Empty() { persistent.Clear(); }\n   65  \n   66:   template<typename S>\n   67:   inline bool operator==(const PersistentBase<S> &that) {\n   68:     return this->persistent == that.persistent;\n   69    }\n   70  \n   71:   template<typename S>\n   72:   inline bool operator==(const v8::Local<S> &that) {\n   73:     return this->persistent == that;\n   74    }\n   75  \n   76:   template<typename S>\n   77:   inline bool operator!=(const PersistentBase<S> &that) {\n   78      return !operator==(that);\n   79    }\n   80  \n   81:   template<typename S>\n   82:   inline bool operator!=(const v8::Local<S> &that) {\n   83      return !operator==(that);\n   84    }\n   85  \n   86    template<typename P>\n   87:   inline void SetWeak(\n   88      P *parameter\n   89      , typename WeakCallbackInfo<P>::Callback callback\n   90      , WeakCallbackType type);\n   91  \n   92:   inline void ClearWeak() { persistent.ClearWeak(); }\n   93  \n   94:   inline void MarkIndependent() { persistent.MarkIndependent(); }\n   95  \n   96:   inline bool IsIndependent() const { return persistent.IsIndependent(); }\n   97  \n   98:   inline bool IsNearDeath() const { return persistent.IsNearDeath(); }\n   99  \n  100:   inline bool IsWeak() const { return persistent.IsWeak(); }\n  101  \n  102   private:\n  103:   inline explicit PersistentBase(v8::Persistent<T> that) :\n  104:       persistent(that) { }\n  105:   inline explicit PersistentBase(T *val) : persistent(val) {}\n  106:   template<typename S, typename M> friend class Persistent;\n  107:   template<typename S> friend class Global;\n  108:   friend class ObjectWrap;\n  109  };\n  110  \n  111  template<typename T>\n  112: class NonCopyablePersistentTraits {\n  113   public:\n  114:   typedef Persistent<T, NonCopyablePersistentTraits<T> >\n  115:       NonCopyablePersistent;\n  116:   static const bool kResetInDestructor = false;\n  117:   template<typename S, typename M>\n  118:   inline static void Copy(const Persistent<S, M> &source,\n  119:                              NonCopyablePersistent *dest) {\n  120      Uncompilable<v8::Object>();\n  121    }\n  122  \n  123:   template<typename O> inline static void Uncompilable() {\n  124      TYPE_CHECK(O, v8::Primitive);\n  125    }\n  ...\n  127  \n  128  template<typename T>\n  129: struct CopyablePersistentTraits {\n  130:   typedef Persistent<T, CopyablePersistentTraits<T> > CopyablePersistent;\n  131:   static const bool kResetInDestructor = true;\n  132:   template<typename S, typename M>\n  133:   static inline void Copy(const Persistent<S, M> &source,\n  134:                              CopyablePersistent *dest) {}\n  135  };\n  136  \n  137: template<typename T, typename M> class Persistent :\n  138:     public PersistentBase<T> {\n  139   public:\n  140:   inline Persistent() {}\n  141  \n  142:   template<typename S> inline Persistent(v8::Handle<S> that)\n  143:       : PersistentBase<T>(v8::Persistent<T>::New(that)) {\n  144:     TYPE_CHECK(T, S);\n  145    }\n  146  \n  147:   inline Persistent(const Persistent &that) : PersistentBase<T>() {\n  148      Copy(that);\n  149    }\n  150  \n  151:   template<typename S, typename M2>\n  152:   inline Persistent(const Persistent<S, M2> &that) :\n  153:       PersistentBase<T>() {\n  154      Copy(that);\n  155    }\n  156  \n  157:   inline Persistent &operator=(const Persistent &that) {\n  158      Copy(that);\n  159:     return *this;\n  160    }\n  161  \n  162:   template <class S, class M2>\n  163:   inline Persistent &operator=(const Persistent<S, M2> &that) {\n  164      Copy(that);\n  165:     return *this;\n  166    }\n  167  \n  168:   inline ~Persistent() {\n  169:     if (M::kResetInDestructor) this->Reset();\n  170    }\n  171  \n  172   private:\n  173:   inline T *operator*() const { return *PersistentBase<T>::persistent; }\n  174  \n  175:   template<typename S, typename M2>\n  176:   inline void Copy(const Persistent<S, M2> &that) {\n  177:     TYPE_CHECK(T, S);\n  178  \n  179:     this->Reset();\n  180  \n  181:     if (!that.IsEmpty()) {\n  182:       this->persistent = v8::Persistent<T>::New(that.persistent);\n  183:       M::Copy(that, this);\n  184      }\n  185    }\n  ...\n  187  \n  188  template<typename T>\n  189: class Global : public PersistentBase<T> {\n  190:   struct RValue {\n  191      inline explicit RValue(Global* obj) : object(obj) {}\n  192      Global* object;\n  ...\n  194  \n  195   public:\n  196:   inline Global() : PersistentBase<T>(0) { }\n  197  \n  198:   template <typename S>\n  199:   inline Global(v8::Local<S> that)\n  200:       : PersistentBase<T>(v8::Persistent<T>::New(that)) {\n  201:     TYPE_CHECK(T, S);\n  202    }\n  203  \n  204:   template <typename S>\n  205:   inline Global(const PersistentBase<S> &that)\n  206:     : PersistentBase<T>(that) {\n  207:     TYPE_CHECK(T, S);\n  208    }\n  209    /**\n  210:    * Move constructor.\n  211     */\n  212    inline Global(RValue rvalue)\n  213:     : PersistentBase<T>(rvalue.object->persistent) {\n  214:     rvalue.object->Reset();\n  215    }\n  216:   inline ~Global() { this->Reset(); }\n  217    /**\n  218:    * Move via assignment.\n  219     */\n  220:   template<typename S>\n  221:   inline Global &operator=(Global<S> rhs) {\n  222:     TYPE_CHECK(T, S);\n  223:     this->Reset(rhs.persistent);\n  224:     rhs.Reset();\n  225:     return *this;\n  226    }\n  227    /**\n  228:    * Cast operator for moves.\n  229     */\n  230:   inline operator RValue() { return RValue(this); }\n  231    /**\n  232:    * Pass allows returning uniques from functions, etc.\n  233     */\n  234:   Global Pass() { return Global(RValue(this)); }\n  235  \n  236   private:\n  237    Global(Global &);\n  238    void operator=(Global &);\n  239:   template<typename S> friend class ReturnValue;\n  240  };\n  241  \n  242: #endif  // NAN_PERSISTENT_PRE_12_INL_H_\n  243  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_string_bytes.h:\n    1: // Copyright Joyent, Inc. and other Node contributors.\n    2  //\n    3: // Permission is hereby granted, free of charge, to any person obtaining a\n    4: // copy of this software and associated documentation files (the\n    5: // \"Software\"), to deal in the Software without restriction, including\n    6: // without limitation the rights to use, copy, modify, merge, publish,\n    7: // distribute, sublicense, and/or sell copies of the Software, and to permit\n    8: // persons to whom the Software is furnished to do so, subject to the\n    9: // following conditions:\n   10  //\n   11: // The above copyright notice and this permission notice shall be included\n   12: // in all copies or substantial portions of the Software.\n   13  //\n   14: // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n   15: // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n   16: // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n   17: // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n   18: // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n   19: // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n   20: // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: #ifndef NAN_STRING_BYTES_H_\n   23: #define NAN_STRING_BYTES_H_\n   24  \n   25: // Decodes a v8::Local<v8::String> or Buffer to a raw char*\n   26  \n   27: namespace imp {\n   28  \n   29: using v8::Local;\n   30: using v8::Object;\n   31: using v8::String;\n   32: using v8::Value;\n   33  \n   34  \n   35: //// Base 64 ////\n   36  \n   37: #define base64_encoded_size(size) ((size + 2 - ((size + 2) % 3)) / 3 * 4)\n   38  \n   39  \n   ..\n   41  //// HEX ////\n   42  \n   43: static bool contains_non_ascii_slow(const char* buf, size_t len) {\n   44:   for (size_t i = 0; i < len; ++i) {\n   45      if (buf[i] & 0x80) return true;\n   46    }\n   47:   return false;\n   48  }\n   49  \n   50  \n   51: static bool contains_non_ascii(const char* src, size_t len) {\n   52    if (len < 16) {\n   53:     return contains_non_ascii_slow(src, len);\n   54    }\n   55  \n   56:   const unsigned bytes_per_word = sizeof(void*);\n   57:   const unsigned align_mask = bytes_per_word - 1;\n   58:   const unsigned unaligned = reinterpret_cast<uintptr_t>(src) & align_mask;\n   59  \n   60    if (unaligned > 0) {\n   61:     const unsigned n = bytes_per_word - unaligned;\n   62:     if (contains_non_ascii_slow(src, n)) return true;\n   63:     src += n;\n   64      len -= n;\n   65    }\n   ..\n   67  \n   68  #if defined(__x86_64__) || defined(_WIN64)\n   69:   const uintptr_t mask = 0x8080808080808080ll;\n   70: #else\n   71:   const uintptr_t mask = 0x80808080l;\n   72  #endif\n   73  \n   74:   const uintptr_t* srcw = reinterpret_cast<const uintptr_t*>(src);\n   75  \n   76:   for (size_t i = 0, n = len / bytes_per_word; i < n; ++i) {\n   77:     if (srcw[i] & mask) return true;\n   78    }\n   79  \n   80:   const unsigned remainder = len & align_mask;\n   81    if (remainder > 0) {\n   82:     const size_t offset = len - remainder;\n   83:     if (contains_non_ascii_slow(src + offset, remainder)) return true;\n   84    }\n   85  \n   86:   return false;\n   87  }\n   88  \n   89  \n   90: static void force_ascii_slow(const char* src, char* dst, size_t len) {\n   91:   for (size_t i = 0; i < len; ++i) {\n   92:     dst[i] = src[i] & 0x7f;\n   93    }\n   94  }\n   95  \n   96  \n   97: static void force_ascii(const char* src, char* dst, size_t len) {\n   98    if (len < 16) {\n   99:     force_ascii_slow(src, dst, len);\n  100      return;\n  101    }\n  102  \n  103:   const unsigned bytes_per_word = sizeof(void*);\n  104:   const unsigned align_mask = bytes_per_word - 1;\n  105:   const unsigned src_unalign = reinterpret_cast<uintptr_t>(src) & align_mask;\n  106:   const unsigned dst_unalign = reinterpret_cast<uintptr_t>(dst) & align_mask;\n  107  \n  108:   if (src_unalign > 0) {\n  109:     if (src_unalign == dst_unalign) {\n  110:       const unsigned unalign = bytes_per_word - src_unalign;\n  111:       force_ascii_slow(src, dst, unalign);\n  112:       src += unalign;\n  113:       dst += unalign;\n  114:       len -= src_unalign;\n  115:     } else {\n  116:       force_ascii_slow(src, dst, len);\n  117        return;\n  118      }\n  ...\n  120  \n  121  #if defined(__x86_64__) || defined(_WIN64)\n  122:   const uintptr_t mask = ~0x8080808080808080ll;\n  123: #else\n  124:   const uintptr_t mask = ~0x80808080l;\n  125  #endif\n  126  \n  127:   const uintptr_t* srcw = reinterpret_cast<const uintptr_t*>(src);\n  128:   uintptr_t* dstw = reinterpret_cast<uintptr_t*>(dst);\n  129  \n  130:   for (size_t i = 0, n = len / bytes_per_word; i < n; ++i) {\n  131:     dstw[i] = srcw[i] & mask;\n  132    }\n  133  \n  134:   const unsigned remainder = len & align_mask;\n  135    if (remainder > 0) {\n  136:     const size_t offset = len - remainder;\n  137:     force_ascii_slow(src + offset, dst + offset, remainder);\n  138    }\n  139  }\n  140  \n  141  \n  142: static size_t base64_encode(const char* src,\n  143:                             size_t slen,\n  144:                             char* dst,\n  145:                             size_t dlen) {\n  146:   // We know how much we'll write, just make sure that there's space.\n  147:   assert(dlen >= base64_encoded_size(slen) &&\n  148:       \"not enough space provided for base64 encode\");\n  149  \n  150:   dlen = base64_encoded_size(slen);\n  151  \n  152:   unsigned a;\n  153:   unsigned b;\n  154:   unsigned c;\n  155:   unsigned i;\n  156:   unsigned k;\n  157:   unsigned n;\n  158  \n  159:   static const char table[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  160:                               \"abcdefghijklmnopqrstuvwxyz\"\n  161                                \"0123456789+/\";\n  162  \n  163    i = 0;\n  164    k = 0;\n  165:   n = slen / 3 * 3;\n  166  \n  167    while (i < n) {\n  168:     a = src[i + 0] & 0xff;\n  169:     b = src[i + 1] & 0xff;\n  170:     c = src[i + 2] & 0xff;\n  171  \n  172:     dst[k + 0] = table[a >> 2];\n  173:     dst[k + 1] = table[((a & 3) << 4) | (b >> 4)];\n  174:     dst[k + 2] = table[((b & 0x0f) << 2) | (c >> 6)];\n  175:     dst[k + 3] = table[c & 0x3f];\n  176  \n  177      i += 3;\n  ...\n  179    }\n  180  \n  181:   if (n != slen) {\n  182:     switch (slen - n) {\n  183:       case 1:\n  184:         a = src[i + 0] & 0xff;\n  185:         dst[k + 0] = table[a >> 2];\n  186:         dst[k + 1] = table[(a & 3) << 4];\n  187:         dst[k + 2] = '=';\n  188:         dst[k + 3] = '=';\n  189          break;\n  190  \n  191:       case 2:\n  192:         a = src[i + 0] & 0xff;\n  193:         b = src[i + 1] & 0xff;\n  194:         dst[k + 0] = table[a >> 2];\n  195:         dst[k + 1] = table[((a & 3) << 4) | (b >> 4)];\n  196:         dst[k + 2] = table[(b & 0x0f) << 2];\n  197:         dst[k + 3] = '=';\n  198          break;\n  199      }\n  ...\n  204  \n  205  \n  206: static size_t hex_encode(const char* src, size_t slen, char* dst, size_t dlen) {\n  207:   // We know how much we'll write, just make sure that there's space.\n  208:   assert(dlen >= slen * 2 &&\n  209:       \"not enough space provided for hex encode\");\n  210  \n  211:   dlen = slen * 2;\n  212    for (uint32_t i = 0, k = 0; k < dlen; i += 1, k += 2) {\n  213:     static const char hex[] = \"0123456789abcdef\";\n  214:     uint8_t val = static_cast<uint8_t>(src[i]);\n  215:     dst[k + 0] = hex[val >> 4];\n  216:     dst[k + 1] = hex[val & 15];\n  217    }\n  218  \n  ...\n  222  \n  223  \n  224: static Local<Value> Encode(const char* buf,\n  225:                            size_t buflen,\n  226                             enum Encoding encoding) {\n  227:   assert(buflen <= node::Buffer::kMaxLength);\n  228    if (!buflen && encoding != BUFFER)\n  229      return New(\"\").ToLocalChecked();\n  230  \n  231:   Local<String> val;\n  232:   switch (encoding) {\n  233:     case BUFFER:\n  234        return CopyBuffer(buf, buflen).ToLocalChecked();\n  235  \n  236:     case ASCII:\n  237:       if (contains_non_ascii(buf, buflen)) {\n  238          char* out = new char[buflen];\n  239:         force_ascii(buf, out, buflen);\n  240:         val = New<String>(out, buflen).ToLocalChecked();\n  241          delete[] out;\n  242:       } else {\n  243:         val = New<String>(buf, buflen).ToLocalChecked();\n  244        }\n  245        break;\n  246  \n  247:     case UTF8:\n  248:       val = New<String>(buf, buflen).ToLocalChecked();\n  249        break;\n  250  \n  251:     case BINARY: {\n  252:       // TODO(isaacs) use ExternalTwoByteString?\n  253:       const unsigned char *cbuf = reinterpret_cast<const unsigned char*>(buf);\n  254        uint16_t * twobytebuf = new uint16_t[buflen];\n  255:       for (size_t i = 0; i < buflen; i++) {\n  256:         // XXX is the following line platform independent?\n  257          twobytebuf[i] = cbuf[i];\n  258        }\n  259:       val = New<String>(twobytebuf, buflen).ToLocalChecked();\n  260        delete[] twobytebuf;\n  261        break;\n  262      }\n  263  \n  264:     case BASE64: {\n  265:       size_t dlen = base64_encoded_size(buflen);\n  266:       char* dst = new char[dlen];\n  267  \n  268:       size_t written = base64_encode(buf, buflen, dst, dlen);\n  269:       assert(written == dlen);\n  270  \n  271:       val = New<String>(dst, dlen).ToLocalChecked();\n  272:       delete[] dst;\n  273        break;\n  274      }\n  275  \n  276:     case UCS2: {\n  277:       const uint16_t* data = reinterpret_cast<const uint16_t*>(buf);\n  278:       val = New<String>(data, buflen / 2).ToLocalChecked();\n  279        break;\n  280      }\n  281  \n  282:     case HEX: {\n  283:       size_t dlen = buflen * 2;\n  284:       char* dst = new char[dlen];\n  285:       size_t written = hex_encode(buf, buflen, dst, dlen);\n  286:       assert(written == dlen);\n  287  \n  288:       val = New<String>(dst, dlen).ToLocalChecked();\n  289:       delete[] dst;\n  290        break;\n  291      }\n  292  \n  293      default:\n  294:       assert(0 && \"unknown encoding\");\n  295        break;\n  296    }\n  ...\n  299  }\n  300  \n  301: #undef base64_encoded_size\n  302  \n  303: }  // end of namespace imp\n  304  \n  305: #endif  // NAN_STRING_BYTES_H_\n  306  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_typedarray_contents.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    9: #ifndef NAN_TYPEDARRAY_CONTENTS_H_\n   10: #define NAN_TYPEDARRAY_CONTENTS_H_\n   11  \n   12  template<typename T>\n   13: class TypedArrayContents {\n   14   public:\n   15:   inline explicit TypedArrayContents(v8::Local<v8::Value> from) :\n   16        length_(0), data_(NULL) {\n   17  \n   18:     size_t length = 0;\n   19      void*  data = NULL;\n   20  \n   21: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   22:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   23  \n   24:     if (from->IsArrayBufferView()) {\n   25        v8::Local<v8::ArrayBufferView> array =\n   26:         v8::Local<v8::ArrayBufferView>::Cast(from);\n   27  \n   28:       const size_t    byte_length = array->ByteLength();\n   29:       const ptrdiff_t byte_offset = array->ByteOffset();\n   30        v8::Local<v8::ArrayBuffer> buffer = array->Buffer();\n   31  \n   32:       length = byte_length / sizeof(T);\n   33:       data   = static_cast<char*>(buffer->GetContents().Data()) + byte_offset;\n   34      }\n   35  \n   36: #else\n   37  \n   38:     if (from->IsObject() && !from->IsNull()) {\n   39:       v8::Local<v8::Object> array = v8::Local<v8::Object>::Cast(from);\n   40  \n   41        MaybeLocal<v8::Value> buffer = Get(array,\n   42:         New<v8::String>(\"buffer\").ToLocalChecked());\n   43        MaybeLocal<v8::Value> byte_length = Get(array,\n   44:         New<v8::String>(\"byteLength\").ToLocalChecked());\n   45:       MaybeLocal<v8::Value> byte_offset = Get(array,\n   46:         New<v8::String>(\"byteOffset\").ToLocalChecked());\n   47  \n   48:       if (!buffer.IsEmpty() &&\n   49:           !byte_length.IsEmpty() && byte_length.ToLocalChecked()->IsUint32() &&\n   50:           !byte_offset.IsEmpty() && byte_offset.ToLocalChecked()->IsUint32()) {\n   51:         data = array->GetIndexedPropertiesExternalArrayData();\n   52          if(data) {\n   53:           length = byte_length.ToLocalChecked()->Uint32Value() / sizeof(T);\n   54          }\n   55        }\n   ..\n   58  #endif\n   59  \n   60: #if defined(_MSC_VER) && _MSC_VER >= 1900 || __cplusplus >= 201103L\n   61:     assert(reinterpret_cast<uintptr_t>(data) % alignof (T) == 0);\n   62: #elif defined(_MSC_VER) && _MSC_VER >= 1600 || defined(__GNUC__)\n   63:     assert(reinterpret_cast<uintptr_t>(data) % __alignof(T) == 0);\n   64: #else\n   65:     assert(reinterpret_cast<uintptr_t>(data) % sizeof (T) == 0);\n   66  #endif\n   67  \n   68      length_ = length;\n   69:     data_   = static_cast<T*>(data);\n   70    }\n   71  \n   72:   inline size_t length() const      { return length_; }\n   73    inline T* operator*()             { return data_;   }\n   74:   inline const T* operator*() const { return data_;   }\n   75  \n   76   private:\n   77:   NAN_DISALLOW_ASSIGN_COPY_MOVE(TypedArrayContents)\n   78  \n   79:   //Disable heap allocation\n   80:   void *operator new(size_t size);\n   81:   void operator delete(void *, size_t);\n   82  \n   83:   size_t  length_;\n   84    T*      data_;\n   85  };\n   86  \n   87: #endif  // NAN_TYPEDARRAY_CONTENTS_H_\n   88  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/nan_weak.h:\n    1  /*********************************************************************\n    2:  * NAN - Native Abstractions for Node.js\n    3   *\n    4:  * Copyright (c) 2016 NAN contributors\n    5   *\n    6:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    7   ********************************************************************/\n    8  \n    .\n   10  #define NAN_WEAK_H_\n   11  \n   12: static const int kInternalFieldsInWeakCallback = 2;\n   13: static const int kNoInternalFieldIndex = -1;\n   14  \n   15: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n   16:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   17  # define NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_ \\\n   18:     v8::WeakCallbackInfo<WeakCallbackInfo<T> > const&\n   19  # define NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_ \\\n   20      NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n   21: # define NAN_WEAK_PARAMETER_CALLBACK_SIG_ NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n   22: # define NAN_WEAK_TWOFIELD_CALLBACK_SIG_ NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_\n   23: #elif NODE_MODULE_VERSION > IOJS_1_1_MODULE_VERSION\n   24  # define NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_ \\\n   25:     v8::PhantomCallbackData<WeakCallbackInfo<T> > const&\n   26  # define NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_ \\\n   27      NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n   28: # define NAN_WEAK_PARAMETER_CALLBACK_SIG_ NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n   29: # define NAN_WEAK_TWOFIELD_CALLBACK_SIG_ NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_\n   30: #elif NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n   31  # define NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_ \\\n   32:     v8::PhantomCallbackData<WeakCallbackInfo<T> > const&\n   33  # define NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_ \\\n   34:     v8::InternalFieldsCallbackData<WeakCallbackInfo<T>, void> const&\n   35: # define NAN_WEAK_PARAMETER_CALLBACK_SIG_ NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n   36: # define NAN_WEAK_TWOFIELD_CALLBACK_SIG_ NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_\n   37: #elif NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n   38  # define NAN_WEAK_CALLBACK_DATA_TYPE_ \\\n   39:     v8::WeakCallbackData<S, WeakCallbackInfo<T> > const&\n   40: # define NAN_WEAK_CALLBACK_SIG_ NAN_WEAK_CALLBACK_DATA_TYPE_\n   41: #else\n   42  # define NAN_WEAK_CALLBACK_DATA_TYPE_ void *\n   43: # define NAN_WEAK_CALLBACK_SIG_ \\\n   44:     v8::Persistent<v8::Value>, NAN_WEAK_CALLBACK_DATA_TYPE_\n   45  #endif\n   46  \n   47  template<typename T>\n   48: class WeakCallbackInfo {\n   49   public:\n   50:   typedef void (*Callback)(const WeakCallbackInfo<T>& data);\n   51    WeakCallbackInfo(\n   52:       Persistent<v8::Value> *persistent\n   53      , Callback callback\n   54      , void *parameter\n   55      , void *field1 = 0\n   56      , void *field2 = 0) :\n   57:         callback_(callback), isolate_(0), parameter_(parameter) {\n   58:     std::memcpy(&persistent_, persistent, sizeof (v8::Persistent<v8::Value>));\n   59:     internal_fields_[0] = field1;\n   60:     internal_fields_[1] = field2;\n   61    }\n   62:   inline v8::Isolate *GetIsolate() const { return isolate_; }\n   63:   inline T *GetParameter() const { return static_cast<T*>(parameter_); }\n   64:   inline void *GetInternalField(int index) const {\n   65:     assert((index == 0 || index == 1) && \"internal field index out of bounds\");\n   66      if (index == 0) {\n   67:       return internal_fields_[0];\n   68:     } else {\n   69:       return internal_fields_[1];\n   70      }\n   71    }\n   72  \n   73   private:\n   74:   NAN_DISALLOW_ASSIGN_COPY_MOVE(WeakCallbackInfo)\n   75    Callback callback_;\n   76:   v8::Isolate *isolate_;\n   77    void *parameter_;\n   78:   void *internal_fields_[kInternalFieldsInWeakCallback];\n   79:   v8::Persistent<v8::Value> persistent_;\n   80:   template<typename S, typename M> friend class Persistent;\n   81:   template<typename S> friend class PersistentBase;\n   82: #if NODE_MODULE_VERSION <= NODE_0_12_MODULE_VERSION\n   83: # if NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n   84:   template<typename S>\n   85:   static void invoke(NAN_WEAK_CALLBACK_SIG_ data);\n   86:   template<typename S>\n   87:   static WeakCallbackInfo *unwrap(NAN_WEAK_CALLBACK_DATA_TYPE_ data);\n   88: # else\n   89:   static void invoke(NAN_WEAK_CALLBACK_SIG_ data);\n   90:   static WeakCallbackInfo *unwrap(NAN_WEAK_CALLBACK_DATA_TYPE_ data);\n   91  # endif\n   92: #else\n   93: # if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                     \\\n   94:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n   95:   template<bool isFirstPass>\n   96:   static void invokeparameter(NAN_WEAK_PARAMETER_CALLBACK_SIG_ data);\n   97:   template<bool isFirstPass>\n   98:   static void invoketwofield(NAN_WEAK_TWOFIELD_CALLBACK_SIG_ data);\n   99: # else\n  100:   static void invokeparameter(NAN_WEAK_PARAMETER_CALLBACK_SIG_ data);\n  101:   static void invoketwofield(NAN_WEAK_TWOFIELD_CALLBACK_SIG_ data);\n  102  # endif\n  103:   static WeakCallbackInfo *unwrapparameter(\n  104        NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_ data);\n  105:   static WeakCallbackInfo *unwraptwofield(\n  106        NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_ data);\n  107  #endif\n  ...\n  109  \n  110  \n  111: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  112:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  113  \n  114  template<typename T>\n  115: template<bool isFirstPass>\n  116  void\n  117: WeakCallbackInfo<T>::invokeparameter(NAN_WEAK_PARAMETER_CALLBACK_SIG_ data) {\n  118    WeakCallbackInfo<T> *cbinfo = unwrapparameter(data);\n  119:   if (isFirstPass) {\n  120:     cbinfo->persistent_.Reset();\n  121:     data.SetSecondPassCallback(invokeparameter<false>);\n  122:   } else {\n  123      cbinfo->callback_(*cbinfo);\n  124      delete cbinfo;\n  ...\n  127  \n  128  template<typename T>\n  129: template<bool isFirstPass>\n  130  void\n  131: WeakCallbackInfo<T>::invoketwofield(NAN_WEAK_TWOFIELD_CALLBACK_SIG_ data) {\n  132    WeakCallbackInfo<T> *cbinfo = unwraptwofield(data);\n  133:   if (isFirstPass) {\n  134:     cbinfo->persistent_.Reset();\n  135:     data.SetSecondPassCallback(invoketwofield<false>);\n  136:   } else {\n  137      cbinfo->callback_(*cbinfo);\n  138      delete cbinfo;\n  ...\n  144      NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_ data) {\n  145    WeakCallbackInfo<T> *cbinfo =\n  146:       static_cast<WeakCallbackInfo<T>*>(data.GetParameter());\n  147:   cbinfo->isolate_ = data.GetIsolate();\n  148    return cbinfo;\n  149  }\n  ...\n  153      NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_ data) {\n  154    WeakCallbackInfo<T> *cbinfo =\n  155:       static_cast<WeakCallbackInfo<T>*>(data.GetInternalField(0));\n  156:   cbinfo->isolate_ = data.GetIsolate();\n  157    return cbinfo;\n  158  }\n  159  \n  160: #undef NAN_WEAK_PARAMETER_CALLBACK_SIG_\n  161: #undef NAN_WEAK_TWOFIELD_CALLBACK_SIG_\n  162  #undef NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n  163  #undef NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_\n  164: # elif NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n  165  \n  166  template<typename T>\n  167  void\n  168: WeakCallbackInfo<T>::invokeparameter(NAN_WEAK_PARAMETER_CALLBACK_SIG_ data) {\n  169    WeakCallbackInfo<T> *cbinfo = unwrapparameter(data);\n  170:   cbinfo->persistent_.Reset();\n  171    cbinfo->callback_(*cbinfo);\n  172    delete cbinfo;\n  ...\n  175  template<typename T>\n  176  void\n  177: WeakCallbackInfo<T>::invoketwofield(NAN_WEAK_TWOFIELD_CALLBACK_SIG_ data) {\n  178    WeakCallbackInfo<T> *cbinfo = unwraptwofield(data);\n  179:   cbinfo->persistent_.Reset();\n  180    cbinfo->callback_(*cbinfo);\n  181    delete cbinfo;\n  ...\n  186      NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_ data) {\n  187    WeakCallbackInfo<T> *cbinfo =\n  188:        static_cast<WeakCallbackInfo<T>*>(data.GetParameter());\n  189:   cbinfo->isolate_ = data.GetIsolate();\n  190    return cbinfo;\n  191  }\n  ...\n  195      NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_ data) {\n  196    WeakCallbackInfo<T> *cbinfo =\n  197:        static_cast<WeakCallbackInfo<T>*>(data.GetInternalField1());\n  198:   cbinfo->isolate_ = data.GetIsolate();\n  199    return cbinfo;\n  200  }\n  201  \n  202: #undef NAN_WEAK_PARAMETER_CALLBACK_SIG_\n  203: #undef NAN_WEAK_TWOFIELD_CALLBACK_SIG_\n  204  #undef NAN_WEAK_PARAMETER_CALLBACK_DATA_TYPE_\n  205  #undef NAN_WEAK_TWOFIELD_CALLBACK_DATA_TYPE_\n  206: #elif NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  207  \n  208  template<typename T>\n  209: template<typename S>\n  210: void WeakCallbackInfo<T>::invoke(NAN_WEAK_CALLBACK_SIG_ data) {\n  211    WeakCallbackInfo<T> *cbinfo = unwrap(data);\n  212:   cbinfo->persistent_.Reset();\n  213    cbinfo->callback_(*cbinfo);\n  214    delete cbinfo;\n  ...\n  216  \n  217  template<typename T>\n  218: template<typename S>\n  219  WeakCallbackInfo<T> *WeakCallbackInfo<T>::unwrap(\n  220      NAN_WEAK_CALLBACK_DATA_TYPE_ data) {\n  221    void *parameter = data.GetParameter();\n  222    WeakCallbackInfo<T> *cbinfo =\n  223:       static_cast<WeakCallbackInfo<T>*>(parameter);\n  224:   cbinfo->isolate_ = data.GetIsolate();\n  225    return cbinfo;\n  226  }\n  227  \n  228: #undef NAN_WEAK_CALLBACK_SIG_\n  229  #undef NAN_WEAK_CALLBACK_DATA_TYPE_\n  230: #else\n  231  \n  232  template<typename T>\n  233: void WeakCallbackInfo<T>::invoke(NAN_WEAK_CALLBACK_SIG_ data) {\n  234    WeakCallbackInfo<T> *cbinfo = unwrap(data);\n  235:   cbinfo->persistent_.Dispose();\n  236:   cbinfo->persistent_.Clear();\n  237    cbinfo->callback_(*cbinfo);\n  238    delete cbinfo;\n  ...\n  243      NAN_WEAK_CALLBACK_DATA_TYPE_ data) {\n  244    WeakCallbackInfo<T> *cbinfo =\n  245:       static_cast<WeakCallbackInfo<T>*>(data);\n  246:   cbinfo->isolate_ = v8::Isolate::GetCurrent();\n  247    return cbinfo;\n  248  }\n  249  \n  250: #undef NAN_WEAK_CALLBACK_SIG_\n  251  #undef NAN_WEAK_CALLBACK_DATA_TYPE_\n  252  #endif\n  253  \n  254: #if defined(V8_MAJOR_VERSION) && (V8_MAJOR_VERSION > 4 ||                      \\\n  255:   (V8_MAJOR_VERSION == 4 && defined(V8_MINOR_VERSION) && V8_MINOR_VERSION >= 3))\n  256  template<typename T, typename M>\n  257  template<typename P>\n  258: inline void Persistent<T, M>::SetWeak(\n  259      P *parameter\n  260    , typename WeakCallbackInfo<P>::Callback callback\n  ...\n  263    if (type == WeakCallbackType::kParameter) {\n  264      wcbd = new WeakCallbackInfo<P>(\n  265:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  266        , callback\n  267        , parameter);\n  268:     v8::PersistentBase<T>::SetWeak(\n  269          wcbd\n  270        , WeakCallbackInfo<P>::template invokeparameter<true>\n  271        , type);\n  272:   } else {\n  273:     v8::Local<T>* self = reinterpret_cast<v8::Local<T>*>(this);\n  274:     assert((*self)->IsObject());\n  275:     int count = (*self)->InternalFieldCount();\n  276:     void *internal_fields[kInternalFieldsInWeakCallback] = {0, 0};\n  277:     for (int i = 0; i < count && i < kInternalFieldsInWeakCallback; i++) {\n  278:       internal_fields[i] = (*self)->GetAlignedPointerFromInternalField(i);\n  279      }\n  280      wcbd = new WeakCallbackInfo<P>(\n  281:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  282        , callback\n  283        , 0\n  284:       , internal_fields[0]\n  285:       , internal_fields[1]);\n  286:     (*self)->SetAlignedPointerInInternalField(0, wcbd);\n  287:     v8::PersistentBase<T>::SetWeak(\n  288:         static_cast<WeakCallbackInfo<P>*>(0)\n  289        , WeakCallbackInfo<P>::template invoketwofield<true>\n  290        , type);\n  291    }\n  292  }\n  293: #elif NODE_MODULE_VERSION > IOJS_1_1_MODULE_VERSION\n  294  template<typename T, typename M>\n  295  template<typename P>\n  296: inline void Persistent<T, M>::SetWeak(\n  297      P *parameter\n  298    , typename WeakCallbackInfo<P>::Callback callback\n  ...\n  301    if (type == WeakCallbackType::kParameter) {\n  302      wcbd = new WeakCallbackInfo<P>(\n  303:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  304        , callback\n  305        , parameter);\n  306:     v8::PersistentBase<T>::SetPhantom(\n  307          wcbd\n  308        , WeakCallbackInfo<P>::invokeparameter);\n  309:   } else {\n  310:     v8::Local<T>* self = reinterpret_cast<v8::Local<T>*>(this);\n  311:     assert((*self)->IsObject());\n  312:     int count = (*self)->InternalFieldCount();\n  313:     void *internal_fields[kInternalFieldsInWeakCallback] = {0, 0};\n  314:     for (int i = 0; i < count && i < kInternalFieldsInWeakCallback; i++) {\n  315:       internal_fields[i] = (*self)->GetAlignedPointerFromInternalField(i);\n  316      }\n  317      wcbd = new WeakCallbackInfo<P>(\n  318:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  319        , callback\n  320        , 0\n  321:       , internal_fields[0]\n  322:       , internal_fields[1]);\n  323:     (*self)->SetAlignedPointerInInternalField(0, wcbd);\n  324:     v8::PersistentBase<T>::SetPhantom(\n  325:         static_cast<WeakCallbackInfo<P>*>(0)\n  326        , WeakCallbackInfo<P>::invoketwofield\n  327        , 0\n  ...\n  329    }\n  330  }\n  331: #elif NODE_MODULE_VERSION > NODE_0_12_MODULE_VERSION\n  332  template<typename T, typename M>\n  333  template<typename P>\n  334: inline void Persistent<T, M>::SetWeak(\n  335      P *parameter\n  336    , typename WeakCallbackInfo<P>::Callback callback\n  ...\n  339    if (type == WeakCallbackType::kParameter) {\n  340      wcbd = new WeakCallbackInfo<P>(\n  341:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  342        , callback\n  343        , parameter);\n  344:     v8::PersistentBase<T>::SetPhantom(\n  345          wcbd\n  346        , WeakCallbackInfo<P>::invokeparameter);\n  347:   } else {\n  348:     v8::Local<T>* self = reinterpret_cast<v8::Local<T>*>(this);\n  349:     assert((*self)->IsObject());\n  350:     int count = (*self)->InternalFieldCount();\n  351:     void *internal_fields[kInternalFieldsInWeakCallback] = {0, 0};\n  352:     for (int i = 0; i < count && i < kInternalFieldsInWeakCallback; i++) {\n  353:       internal_fields[i] = (*self)->GetAlignedPointerFromInternalField(i);\n  354      }\n  355      wcbd = new WeakCallbackInfo<P>(\n  356:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  357        , callback\n  358        , 0\n  359:       , internal_fields[0]\n  360:       , internal_fields[1]);\n  361:     (*self)->SetAlignedPointerInInternalField(0, wcbd);\n  362:     v8::PersistentBase<T>::SetPhantom(\n  363          WeakCallbackInfo<P>::invoketwofield\n  364        , 0\n  ...\n  366    }\n  367  }\n  368: #elif NODE_MODULE_VERSION > NODE_0_10_MODULE_VERSION\n  369  template<typename T, typename M>\n  370  template<typename P>\n  371: inline void Persistent<T, M>::SetWeak(\n  372      P *parameter\n  373    , typename WeakCallbackInfo<P>::Callback callback\n  ...\n  376    if (type == WeakCallbackType::kParameter) {\n  377      wcbd = new WeakCallbackInfo<P>(\n  378:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  379        , callback\n  380        , parameter);\n  381:     v8::PersistentBase<T>::SetWeak(wcbd, WeakCallbackInfo<P>::invoke);\n  382:   } else {\n  383:     v8::Local<T>* self = reinterpret_cast<v8::Local<T>*>(this);\n  384:     assert((*self)->IsObject());\n  385:     int count = (*self)->InternalFieldCount();\n  386:     void *internal_fields[kInternalFieldsInWeakCallback] = {0, 0};\n  387:     for (int i = 0; i < count && i < kInternalFieldsInWeakCallback; i++) {\n  388:       internal_fields[i] = (*self)->GetAlignedPointerFromInternalField(i);\n  389      }\n  390      wcbd = new WeakCallbackInfo<P>(\n  391:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  392        , callback\n  393        , 0\n  394:       , internal_fields[0]\n  395:       , internal_fields[1]);\n  396:     v8::PersistentBase<T>::SetWeak(wcbd, WeakCallbackInfo<P>::invoke);\n  397    }\n  398  }\n  399: #else\n  400  template<typename T>\n  401  template<typename P>\n  402: inline void PersistentBase<T>::SetWeak(\n  403      P *parameter\n  404    , typename WeakCallbackInfo<P>::Callback callback\n  ...\n  407    if (type == WeakCallbackType::kParameter) {\n  408      wcbd = new WeakCallbackInfo<P>(\n  409:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  410        , callback\n  411        , parameter);\n  412:     persistent.MakeWeak(wcbd, WeakCallbackInfo<P>::invoke);\n  413:   } else {\n  414:     v8::Local<T>* self = reinterpret_cast<v8::Local<T>*>(this);\n  415:     assert((*self)->IsObject());\n  416:     int count = (*self)->InternalFieldCount();\n  417:     void *internal_fields[kInternalFieldsInWeakCallback] = {0, 0};\n  418:     for (int i = 0; i < count && i < kInternalFieldsInWeakCallback; i++) {\n  419:       internal_fields[i] = (*self)->GetPointerFromInternalField(i);\n  420      }\n  421      wcbd = new WeakCallbackInfo<P>(\n  422:         reinterpret_cast<Persistent<v8::Value>*>(this)\n  423        , callback\n  424        , 0\n  425:       , internal_fields[0]\n  426:       , internal_fields[1]);\n  427:     persistent.MakeWeak(wcbd, WeakCallbackInfo<P>::invoke);\n  428    }\n  429  }\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/package.json:\n    1  {\n    2:   \"_args\": [\n    3      [\n    4        {\n    5          \"raw\": \"nan@2.3.5\",\n    6:         \"scope\": null,\n    7:         \"escapedName\": \"nan\",\n    8          \"name\": \"nan\",\n    9:         \"rawSpec\": \"2.3.5\",\n   10:         \"spec\": \"2.3.5\",\n   11:         \"type\": \"version\"\n   12        },\n   13:       \"/run/media/ted/DATA/WEB/ths_signup/node_modules/bcrypt\"\n   14      ]\n   15    ],\n   ..\n   18    \"_inCache\": true,\n   19    \"_location\": \"/nan\",\n   20:   \"_nodeVersion\": \"5.0.0\",\n   21    \"_npmOperationalInternal\": {\n   22:     \"host\": \"packages-12-west.internal.npmjs.com\",\n   23      \"tmp\": \"tmp/nan-2.3.5.tgz_1464707164994_0.4295874561648816\"\n   24    },\n   25:   \"_npmUser\": {\n   26      \"name\": \"kkoopa\",\n   27      \"email\": \"bbyholm@abo.fi\"\n   28    },\n   29:   \"_npmVersion\": \"3.3.6\",\n   30    \"_phantomChildren\": {},\n   31:   \"_requested\": {\n   32      \"raw\": \"nan@2.3.5\",\n   33:     \"scope\": null,\n   34:     \"escapedName\": \"nan\",\n   35      \"name\": \"nan\",\n   36:     \"rawSpec\": \"2.3.5\",\n   37:     \"spec\": \"2.3.5\",\n   38:     \"type\": \"version\"\n   39    },\n   40    \"_requiredBy\": [\n   41      \"/bcrypt\"\n   42    ],\n   43:   \"_resolved\": \"https://registry.npmjs.org/nan/-/nan-2.3.5.tgz\",\n   44:   \"_shasum\": \"822a0dc266290ce4cd3a12282ca3e7e364668a08\",\n   45:   \"_shrinkwrap\": null,\n   46:   \"_spec\": \"nan@2.3.5\",\n   47:   \"_where\": \"/run/media/ted/DATA/WEB/ths_signup/node_modules/bcrypt\",\n   48:   \"bugs\": {\n   49:     \"url\": \"https://github.com/nodejs/nan/issues\"\n   50    },\n   51:   \"contributors\": [\n   52      {\n   53        \"name\": \"Rod Vagg\",\n   54        \"email\": \"r@va.gg\",\n   55:       \"url\": \"https://github.com/rvagg\"\n   56      },\n   57      {\n   58        \"name\": \"Benjamin Byholm\",\n   59        \"email\": \"bbyholm@abo.fi\",\n   60:       \"url\": \"https://github.com/kkoopa/\"\n   61      },\n   62      {\n   63:       \"name\": \"Trevor Norris\",\n   64:       \"email\": \"trev.norris@gmail.com\",\n   65:       \"url\": \"https://github.com/trevnorris\"\n   66      },\n   67      {\n   68        \"name\": \"Nathan Rajlich\",\n   69        \"email\": \"nathan@tootallnate.net\",\n   70:       \"url\": \"https://github.com/TooTallNate\"\n   71      },\n   72      {\n   73:       \"name\": \"Brett Lawson\",\n   74        \"email\": \"brett19@gmail.com\",\n   75:       \"url\": \"https://github.com/brett19\"\n   76      },\n   77      {\n   78:       \"name\": \"Ben Noordhuis\",\n   79:       \"email\": \"info@bnoordhuis.nl\",\n   80:       \"url\": \"https://github.com/bnoordhuis\"\n   81      },\n   82      {\n   83:       \"name\": \"David Siegel\",\n   84        \"email\": \"david@artcom.de\",\n   85:       \"url\": \"https://github.com/agnat\"\n   86      }\n   87    ],\n   88:   \"dependencies\": {},\n   89:   \"description\": \"Native Abstractions for Node.js: C++ header for Node 0.8 -> 6 compatibility\",\n   90:   \"devDependencies\": {\n   91:     \"bindings\": \"~1.2.1\",\n   92      \"commander\": \"^2.8.1\",\n   93      \"glob\": \"^5.0.14\",\n   ..\n   96      \"xtend\": \"~4.0.0\"\n   97    },\n   98:   \"directories\": {},\n   99:   \"dist\": {\n  100:     \"shasum\": \"822a0dc266290ce4cd3a12282ca3e7e364668a08\",\n  101:     \"tarball\": \"https://registry.npmjs.org/nan/-/nan-2.3.5.tgz\"\n  102    },\n  103:   \"homepage\": \"https://github.com/nodejs/nan#readme\",\n  104:   \"license\": \"MIT\",\n  105:   \"main\": \"include_dirs.js\",\n  106:   \"maintainers\": [\n  107      {\n  108        \"name\": \"rvagg\",\n  ...\n  115    ],\n  116    \"name\": \"nan\",\n  117:   \"optionalDependencies\": {},\n  118    \"readme\": \"ERROR: No README data found!\",\n  119:   \"repository\": {\n  120      \"type\": \"git\",\n  121:     \"url\": \"git://github.com/nodejs/nan.git\"\n  122    },\n  123:   \"scripts\": {\n  124:     \"docs\": \"doc/.build.sh\",\n  125:     \"rebuild-tests\": \"node-gyp rebuild --msvs_version=2013 --directory test\",\n  126:     \"test\": \"tap --gc --stderr test/js/*-test.js\"\n  127    },\n  128:   \"version\": \"2.3.5\"\n  129  }\n  130  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/asyncworker.md:\n    1: ## Asynchronous work helpers\n    2  \n    3: `Nan::AsyncWorker` and `Nan::AsyncProgressWorker` are helper classes that make working with asynchronous code easier.\n    4  \n    5:  - <a href=\"#api_nan_async_worker\"><b><code>Nan::AsyncWorker</code></b></a>\n    6:  - <a href=\"#api_nan_async_progress_worker\"><b><code>Nan::AsyncProgressWorker</code></b></a>\n    7:  - <a href=\"#api_nan_async_queue_worker\"><b><code>Nan::AsyncQueueWorker</code></b></a>\n    8  \n    9: <a name=\"api_nan_async_worker\"></a>\n   10: ### Nan::AsyncWorker\n   11  \n   12: `Nan::AsyncWorker` is an _abstract_ class that you can subclass to have much of the annoying asynchronous queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the asynchronous work is in progress.\n   13  \n   14  Definition:\n   15  \n   16  ```c++\n   17: class AsyncWorker {\n   18   public:\n   19:   explicit AsyncWorker(Callback *callback_);\n   20  \n   21:   virtual ~AsyncWorker();\n   22  \n   23    virtual void WorkComplete();\n   24  \n   25:   void SaveToPersistent(const char *key, const v8::Local<v8::Value> &value);\n   26  \n   27:   void SaveToPersistent(const v8::Local<v8::String> &key,\n   28:                         const v8::Local<v8::Value> &value);\n   29  \n   30:   void SaveToPersistent(uint32_t index,\n   31:                         const v8::Local<v8::Value> &value);\n   32  \n   33:   v8::Local<v8::Value> GetFromPersistent(const char *key) const;\n   34  \n   35:   v8::Local<v8::Value> GetFromPersistent(const v8::Local<v8::String> &key) const;\n   36  \n   37:   v8::Local<v8::Value> GetFromPersistent(uint32_t index) const;\n   38  \n   39    virtual void Execute() = 0;\n   40  \n   41:   uv_work_t request;\n   42  \n   43:   virtual void Destroy();\n   44  \n   45   protected:\n   46:   Persistent<v8::Object> persistentHandle;\n   47  \n   48    Callback *callback;\n   ..\n   52    virtual void HandleErrorCallback();\n   53  \n   54:   void SetErrorMessage(const char *msg);\n   55  \n   56:   const char* ErrorMessage();\n   57  };\n   58  ```\n   59  \n   60: <a name=\"api_nan_async_progress_worker\"></a>\n   61: ### Nan::AsyncProgressWorker\n   62  \n   63: `Nan::AsyncProgressWorker` is an _abstract_ class that extends `Nan::AsyncWorker` and adds additional progress reporting callbacks that can be used during the asynchronous work execution to provide progress data back to JavaScript.\n   64  \n   65  Definition:\n   66  \n   67  ```c++\n   68: class AsyncProgressWorker : public AsyncWorker {\n   69   public:\n   70:   explicit AsyncProgressWorker(Callback *callback_);\n   71  \n   72:   virtual ~AsyncProgressWorker();\n   73  \n   74:   void WorkProgress();\n   75  \n   76:   class ExecutionProgress {\n   77     public:\n   78:     void Signal() const;\n   79:     void Send(const char* data, size_t size) const;\n   80    };\n   81  \n   82:   virtual void Execute(const ExecutionProgress& progress) = 0;\n   83  \n   84:   virtual void HandleProgressCallback(const char *data, size_t size) = 0;\n   85  \n   86:   virtual void Destroy();\n   87  ```\n   88  \n   89: <a name=\"api_nan_async_queue_worker\"></a>\n   90: ### Nan::AsyncQueueWorker\n   91  \n   92: `Nan::AsyncQueueWorker` will run a `Nan::AsyncWorker` asynchronously via libuv. Both the `execute` and `after_work` steps are taken care of for you. Most of the logic for this is embedded in `Nan::AsyncWorker`.\n   93  \n   94  Definition:\n   95  \n   96  ```c++\n   97: void AsyncQueueWorker(AsyncWorker *);\n   98  ```\n   99  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/buffers.md:\n    1: ## Buffers\n    2  \n    3: NAN's `node::Buffer` helpers exist as the API has changed across supported Node versions. Use these methods to ensure compatibility.\n    4  \n    5   - <a href=\"#api_nan_new_buffer\"><b><code>Nan::NewBuffer()</code></b></a>\n    .\n   10  ### Nan::NewBuffer()\n   11  \n   12: Allocate a new `node::Buffer` object with the specified size and optional data. Calls `node::Buffer::New()`.\n   13  \n   14: Note that when creating a `Buffer` using `Nan::NewBuffer()` and an existing `char*`, it is assumed that the ownership of the pointer is being transferred to the new `Buffer` for management.\n   15: When a `node::Buffer` instance is garbage collected and a `FreeCallback` has not been specified, `data` will be disposed of via a call to `free()`.\n   16: You _must not_ free the memory space manually once you have created a `Buffer` in this way.\n   17  \n   18: Signature:\n   19  \n   20  ```c++\n   21: Nan::MaybeLocal<v8::Object> Nan::NewBuffer(uint32_t size)\n   22: Nan::MaybeLocal<v8::Object> Nan::NewBuffer(char* data, uint32_t size)\n   23  Nan::MaybeLocal<v8::Object> Nan::NewBuffer(char *data,\n   24:                                            size_t length,\n   25                                             Nan::FreeCallback callback,\n   26                                             void *hint)\n   ..\n   31  ### Nan::CopyBuffer()\n   32  \n   33: Similar to [`Nan::NewBuffer()`](#api_nan_new_buffer) except that an implicit memcpy will occur within Node. Calls `node::Buffer::Copy()`.\n   34  \n   35: Management of the `char*` is left to the user, you should manually free the memory space if necessary as the new `Buffer` will have its own copy.\n   36  \n   37: Signature:\n   38  \n   39  ```c++\n   40: Nan::MaybeLocal<v8::Object> Nan::CopyBuffer(const char *data, uint32_t size)\n   41  ```\n   42  \n   ..\n   46  \n   47  A free callback that can be provided to [`Nan::NewBuffer()`](#api_nan_new_buffer).\n   48: The supplied callback will be invoked when the `Buffer` undergoes garbage collection.\n   49  \n   50: Signature:\n   51  \n   52  ```c++\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/callback.md:\n    1  ## Nan::Callback\n    2  \n    3: `Nan::Callback` makes it easier to use `v8::Function` handles as callbacks. A class that wraps a `v8::Function` handle, protecting it from garbage collection and making it particularly useful for storage and use across asynchronous execution.\n    4  \n    5   - <a href=\"#api_nan_callback\"><b><code>Nan::Callback</code></b></a>\n    .\n    9  \n   10  ```c++\n   11: class Callback {\n   12   public:\n   13    Callback();\n   14  \n   15:   explicit Callback(const v8::Local<v8::Function> &fn);\n   16  \n   17    ~Callback();\n   18  \n   19:   bool operator==(const Callback &other) const;\n   20  \n   21:   bool operator!=(const Callback &other) const;\n   22  \n   23:   v8::Local<v8::Function> operator*() const;\n   24  \n   25    v8::Local<v8::Value> operator()(v8::Local<v8::Object> target,\n   26                                    int argc = 0,\n   27:                                   v8::Local<v8::Value> argv[] = 0) const;\n   28  \n   29    v8::Local<v8::Value> operator()(int argc = 0,\n   30:                                   v8::Local<v8::Value> argv[] = 0) const;\n   31  \n   32:   void SetFunction(const v8::Local<v8::Function> &fn);\n   33  \n   34:   v8::Local<v8::Function> GetFunction() const;\n   35  \n   36:   bool IsEmpty() const;\n   37  \n   38    v8::Local<v8::Value> Call(v8::Local<v8::Object> target,\n   39                              int argc,\n   40:                             v8::Local<v8::Value> argv[]) const;\n   41  \n   42:   v8::Local<v8::Value> Call(int argc, v8::Local<v8::Value> argv[]) const;\n   43  };\n   44  ```\n   45  \n   46: Example usage:\n   47  \n   48  ```c++\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/converters.md:\n    1: ## Converters\n    2  \n    3: NAN contains functions that convert `v8::Value`s to other `v8::Value` types and native types. Since type conversion is not guaranteed to succeed, they return `Nan::Maybe` types. These converters can be used in place of `value->ToX()` and `value->XValue()` (where `X` is one of the types, e.g. `Boolean`) in a way that provides a consistent interface across V8 versions. Newer versions of V8 use the new `v8::Maybe` and `v8::MaybeLocal` types for these conversions, older versions don't have this functionality so it is provided by NAN.\n    4  \n    5   - <a href=\"#api_nan_to\"><b><code>Nan::To()</code></b></a>\n    .\n    8  ### Nan::To()\n    9  \n   10: Converts a `v8::Local<v8::Value>` to a different subtype of `v8::Value` or to a native data type. Returns a `Nan::MaybeLocal<>` or a `Nan::Maybe<>` accordingly.\n   11  \n   12: See [maybe_types.md](./maybe_types.md) for more information on `Nan::Maybe` types.\n   13  \n   14: Signatures:\n   15  \n   16  ```c++\n   17: // V8 types\n   18  Nan::MaybeLocal<v8::Boolean> Nan::To<v8::Boolean>(v8::Local<v8::Value> val);\n   19  Nan::MaybeLocal<v8::Int32> Nan::To<v8::Int32>(v8::Local<v8::Value> val);\n   ..\n   21  Nan::MaybeLocal<v8::Object> Nan::To<v8::Object>(v8::Local<v8::Value> val);\n   22  Nan::MaybeLocal<v8::Number> Nan::To<v8::Number>(v8::Local<v8::Value> val);\n   23: Nan::MaybeLocal<v8::String> Nan::To<v8::String>(v8::Local<v8::Value> val);\n   24  Nan::MaybeLocal<v8::Uint32> Nan::To<v8::Uint32>(v8::Local<v8::Value> val);\n   25  \n   26: // Native types\n   27  Nan::Maybe<bool> Nan::To<bool>(v8::Local<v8::Value> val);\n   28  Nan::Maybe<double> Nan::To<double>(v8::Local<v8::Value> val);\n   ..\n   36  ```c++\n   37  v8::Local<v8::Value> val;\n   38: Nan::MaybeLocal<v8::String> str = Nan::To<v8::String>(val);\n   39  Nan::Maybe<double> d = Nan::To<double>(val);\n   40  ```\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/errors.md:\n    1: ## Errors\n    2  \n    3: NAN includes helpers for creating, throwing and catching Errors as much of this functionality varies across the supported versions of V8 and must be abstracted.\n    4  \n    5: Note that an Error object is simply a specialized form of `v8::Value`.\n    6  \n    7: Also consult the V8 Embedders Guide section on [Exceptions](https://developers.google.com/v8/embed#exceptions) for more information.\n    8  \n    9   - <a href=\"#api_nan_error\"><b><code>Nan::Error()</code></b></a>\n   10   - <a href=\"#api_nan_range_error\"><b><code>Nan::RangeError()</code></b></a>\n   11   - <a href=\"#api_nan_reference_error\"><b><code>Nan::ReferenceError()</code></b></a>\n   12:  - <a href=\"#api_nan_syntax_error\"><b><code>Nan::SyntaxError()</code></b></a>\n   13   - <a href=\"#api_nan_type_error\"><b><code>Nan::TypeError()</code></b></a>\n   14   - <a href=\"#api_nan_throw_error\"><b><code>Nan::ThrowError()</code></b></a>\n   15   - <a href=\"#api_nan_throw_range_error\"><b><code>Nan::ThrowRangeError()</code></b></a>\n   16   - <a href=\"#api_nan_throw_reference_error\"><b><code>Nan::ThrowReferenceError()</code></b></a>\n   17:  - <a href=\"#api_nan_throw_syntax_error\"><b><code>Nan::ThrowSyntaxError()</code></b></a>\n   18   - <a href=\"#api_nan_throw_type_error\"><b><code>Nan::ThrowTypeError()</code></b></a>\n   19   - <a href=\"#api_nan_fatal_exception\"><b><code>Nan::FatalException()</code></b></a>\n   ..\n   25  ### Nan::Error()\n   26  \n   27: Create a new Error object using the [v8::Exception](https://v8docs.nodesource.com/io.js-3.0/da/d6a/classv8_1_1_exception.html) class in a way that is compatible across the supported versions of V8.\n   28  \n   29: Note that an Error object is simply a specialized form of `v8::Value`.\n   30  \n   31: Signature:\n   32  \n   33  ```c++\n   34: v8::Local<v8::Value> Nan::Error(const char *msg);\n   35: v8::Local<v8::Value> Nan::Error(v8::Local<v8::String> msg);\n   36  ```\n   37  \n   ..\n   40  ### Nan::RangeError()\n   41  \n   42: Create a new RangeError object using the [v8::Exception](https://v8docs.nodesource.com/io.js-3.0/da/d6a/classv8_1_1_exception.html) class in a way that is compatible across the supported versions of V8.\n   43  \n   44: Note that an RangeError object is simply a specialized form of `v8::Value`.\n   45  \n   46: Signature:\n   47  \n   48  ```c++\n   49: v8::Local<v8::Value> Nan::RangeError(const char *msg);\n   50: v8::Local<v8::Value> Nan::RangeError(v8::Local<v8::String> msg);\n   51  ```\n   52  \n   ..\n   55  ### Nan::ReferenceError()\n   56  \n   57: Create a new ReferenceError object using the [v8::Exception](https://v8docs.nodesource.com/io.js-3.0/da/d6a/classv8_1_1_exception.html) class in a way that is compatible across the supported versions of V8.\n   58  \n   59: Note that an ReferenceError object is simply a specialized form of `v8::Value`.\n   60  \n   61: Signature:\n   62  \n   63  ```c++\n   64: v8::Local<v8::Value> Nan::ReferenceError(const char *msg);\n   65: v8::Local<v8::Value> Nan::ReferenceError(v8::Local<v8::String> msg);\n   66  ```\n   67  \n   68  \n   69: <a name=\"api_nan_syntax_error\"></a>\n   70: ### Nan::SyntaxError()\n   71  \n   72: Create a new SyntaxError object using the [v8::Exception](https://v8docs.nodesource.com/io.js-3.0/da/d6a/classv8_1_1_exception.html) class in a way that is compatible across the supported versions of V8.\n   73  \n   74: Note that an SyntaxError object is simply a specialized form of `v8::Value`.\n   75  \n   76: Signature:\n   77  \n   78  ```c++\n   79: v8::Local<v8::Value> Nan::SyntaxError(const char *msg);\n   80: v8::Local<v8::Value> Nan::SyntaxError(v8::Local<v8::String> msg);\n   81  ```\n   82  \n   ..\n   85  ### Nan::TypeError()\n   86  \n   87: Create a new TypeError object using the [v8::Exception](https://v8docs.nodesource.com/io.js-3.0/da/d6a/classv8_1_1_exception.html) class in a way that is compatible across the supported versions of V8.\n   88  \n   89: Note that an TypeError object is simply a specialized form of `v8::Value`.\n   90  \n   91: Signature:\n   92  \n   93  ```c++\n   94: v8::Local<v8::Value> Nan::TypeError(const char *msg);\n   95: v8::Local<v8::Value> Nan::TypeError(v8::Local<v8::String> msg);\n   96  ```\n   97  \n   ..\n  100  ### Nan::ThrowError()\n  101  \n  102: Throw an Error object (a specialized `v8::Value` as above) in the current context. If a `msg` is provided, a new Error object will be created.\n  103  \n  104: Signature:\n  105  \n  106  ```c++\n  107: void Nan::ThrowError(const char *msg);\n  108: void Nan::ThrowError(v8::Local<v8::String> msg);\n  109  void Nan::ThrowError(v8::Local<v8::Value> error);\n  110  ```\n  ...\n  114  ### Nan::ThrowRangeError()\n  115  \n  116: Throw an RangeError object (a specialized `v8::Value` as above) in the current context. If a `msg` is provided, a new RangeError object will be created.\n  117  \n  118: Signature:\n  119  \n  120  ```c++\n  121: void Nan::ThrowRangeError(const char *msg);\n  122: void Nan::ThrowRangeError(v8::Local<v8::String> msg);\n  123  void Nan::ThrowRangeError(v8::Local<v8::Value> error);\n  124  ```\n  ...\n  128  ### Nan::ThrowReferenceError()\n  129  \n  130: Throw an ReferenceError object (a specialized `v8::Value` as above) in the current context. If a `msg` is provided, a new ReferenceError object will be created.\n  131  \n  132: Signature:\n  133  \n  134  ```c++\n  135: void Nan::ThrowReferenceError(const char *msg);\n  136: void Nan::ThrowReferenceError(v8::Local<v8::String> msg);\n  137  void Nan::ThrowReferenceError(v8::Local<v8::Value> error);\n  138  ```\n  139  \n  140  \n  141: <a name=\"api_nan_throw_syntax_error\"></a>\n  142: ### Nan::ThrowSyntaxError()\n  143  \n  144: Throw an SyntaxError object (a specialized `v8::Value` as above) in the current context. If a `msg` is provided, a new SyntaxError object will be created.\n  145  \n  146: Signature:\n  147  \n  148  ```c++\n  149: void Nan::ThrowSyntaxError(const char *msg);\n  150: void Nan::ThrowSyntaxError(v8::Local<v8::String> msg);\n  151: void Nan::ThrowSyntaxError(v8::Local<v8::Value> error);\n  152  ```\n  153  \n  ...\n  156  ### Nan::ThrowTypeError()\n  157  \n  158: Throw an TypeError object (a specialized `v8::Value` as above) in the current context. If a `msg` is provided, a new TypeError object will be created.\n  159  \n  160: Signature:\n  161  \n  162  ```c++\n  163: void Nan::ThrowTypeError(const char *msg);\n  164: void Nan::ThrowTypeError(v8::Local<v8::String> msg);\n  165  void Nan::ThrowTypeError(v8::Local<v8::Value> error);\n  166  ```\n  ...\n  169  ### Nan::FatalException()\n  170  \n  171: Replaces `node::FatalException()` which has a different API across supported versions of Node. For use with [`Nan::TryCatch`](#api_nan_try_catch).\n  172  \n  173: Signature:\n  174  \n  175  ```c++\n  176: void Nan::FatalException(const Nan::TryCatch& try_catch);\n  177  ```\n  178  \n  ...\n  180  ### Nan::ErrnoException()\n  181  \n  182: Replaces `node::ErrnoException()` which has a different API across supported versions of Node. \n  183  \n  184: Signature:\n  185  \n  186  ```c++\n  187  v8::Local<v8::Value> Nan::ErrnoException(int errorno,\n  188:                                          const char* syscall = NULL,\n  189:                                          const char* message = NULL,\n  190:                                          const char* path = NULL);\n  191  ```\n  192  \n  ...\n  195  ### Nan::TryCatch\n  196  \n  197: A simple wrapper around [`v8::TryCatch`](https://v8docs.nodesource.com/io.js-3.0/d4/dc6/classv8_1_1_try_catch.html) compatible with all supported versions of V8. Can be used as a direct replacement in most cases. See also [`Nan::FatalException()`](#api_nan_fatal_exception) for an internal use compatible with `node::FatalException`.\n  198  \n  199: Signature:\n  200  \n  201  ```c++\n  202: class Nan::TryCatch {\n  203   public:\n  204    Nan::TryCatch();\n  205  \n  206:   bool HasCaught() const;\n  207  \n  208:   bool CanContinue() const;\n  209  \n  210    v8::Local<v8::Value> ReThrow();\n  211  \n  212:   v8::Local<v8::Value> Exception() const;\n  213  \n  214:   // Nan::MaybeLocal for older versions of V8\n  215:   v8::MaybeLocal<v8::Value> StackTrace() const;\n  216  \n  217:   v8::Local<v8::Message> Message() const;\n  218  \n  219:   void Reset();\n  220  \n  221:   void SetVerbose(bool value);\n  222  \n  223:   void SetCaptureMessage(bool value);\n  224  };\n  225  ```\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/maybe_types.md:\n    1: ## Maybe Types\n    2  \n    3: The `Nan::MaybeLocal` and `Nan::Maybe` types are monads that encapsulate `v8::Local` handles that _may be empty_.\n    4  \n    5: * **Maybe Types**\n    6    - <a href=\"#api_nan_maybe_local\"><b><code>Nan::MaybeLocal</code></b></a>\n    7    - <a href=\"#api_nan_maybe\"><b><code>Nan::Maybe</code></b></a>\n    8    - <a href=\"#api_nan_nothing\"><b><code>Nan::Nothing</code></b></a>\n    9:   - <a href=\"#api_nan_just\"><b><code>Nan::Just</code></b></a>\n   10: * **Maybe Helpers**\n   11    - <a href=\"#api_nan_call\"><b><code>Nan::Call()</code></b></a>\n   12:   - <a href=\"#api_nan_to_detail_string\"><b><code>Nan::ToDetailString()</code></b></a>\n   13    - <a href=\"#api_nan_to_array_index\"><b><code>Nan::ToArrayIndex()</code></b></a>\n   14:   - <a href=\"#api_nan_equals\"><b><code>Nan::Equals()</code></b></a>\n   15:   - <a href=\"#api_nan_new_instance\"><b><code>Nan::NewInstance()</code></b></a>\n   16    - <a href=\"#api_nan_get_function\"><b><code>Nan::GetFunction()</code></b></a>\n   17:   - <a href=\"#api_nan_set\"><b><code>Nan::Set()</code></b></a>\n   18:   - <a href=\"#api_nan_force_set\"><b><code>Nan::ForceSet()</code></b></a>\n   19    - <a href=\"#api_nan_get\"><b><code>Nan::Get()</code></b></a>\n   20:   - <a href=\"#api_nan_get_property_attribute\"><b><code>Nan::GetPropertyAttributes()</code></b></a>\n   21:   - <a href=\"#api_nan_has\"><b><code>Nan::Has()</code></b></a>\n   22    - <a href=\"#api_nan_delete\"><b><code>Nan::Delete()</code></b></a>\n   23:   - <a href=\"#api_nan_get_property_names\"><b><code>Nan::GetPropertyNames()</code></b></a>\n   24:   - <a href=\"#api_nan_get_own_property_names\"><b><code>Nan::GetOwnPropertyNames()</code></b></a>\n   25:   - <a href=\"#api_nan_set_prototype\"><b><code>Nan::SetPrototype()</code></b></a>\n   26:   - <a href=\"#api_nan_object_proto_to_string\"><b><code>Nan::ObjectProtoToString()</code></b></a>\n   27:   - <a href=\"#api_nan_has_own_property\"><b><code>Nan::HasOwnProperty()</code></b></a>\n   28:   - <a href=\"#api_nan_has_real_named_property\"><b><code>Nan::HasRealNamedProperty()</code></b></a>\n   29:   - <a href=\"#api_nan_has_real_indexed_property\"><b><code>Nan::HasRealIndexedProperty()</code></b></a>\n   30:   - <a href=\"#api_nan_has_real_named_callback_property\"><b><code>Nan::HasRealNamedCallbackProperty()</code></b></a>\n   31    - <a href=\"#api_nan_get_real_named_property_in_prototype_chain\"><b><code>Nan::GetRealNamedPropertyInPrototypeChain()</code></b></a>\n   32    - <a href=\"#api_nan_get_real_named_property\"><b><code>Nan::GetRealNamedProperty()</code></b></a>\n   33:   - <a href=\"#api_nan_call_as_function\"><b><code>Nan::CallAsFunction()</code></b></a>\n   34:   - <a href=\"#api_nan_call_as_constructor\"><b><code>Nan::CallAsConstructor()</code></b></a>\n   35:   - <a href=\"#api_nan_get_source_line\"><b><code>Nan::GetSourceLine()</code></b></a>\n   36    - <a href=\"#api_nan_get_line_number\"><b><code>Nan::GetLineNumber()</code></b></a>\n   37:   - <a href=\"#api_nan_get_start_column\"><b><code>Nan::GetStartColumn()</code></b></a>\n   38    - <a href=\"#api_nan_get_end_column\"><b><code>Nan::GetEndColumn()</code></b></a>\n   39    - <a href=\"#api_nan_clone_element_at\"><b><code>Nan::CloneElementAt()</code></b></a>\n   ..\n   43  ### Nan::MaybeLocal\n   44  \n   45: A `Nan::MaybeLocal<T>` is a wrapper around [`v8::Local<T>`](https://v8docs.nodesource.com/io.js-3.0/de/deb/classv8_1_1_local.html) that enforces a check that determines whether the `v8::Local<T>` is empty before it can be used.\n   46  \n   47: If an API method returns a `Nan::MaybeLocal`, the API method can potentially fail either because an exception is thrown, or because an exception is pending, e.g. because a previous API call threw an exception that hasn't been caught yet, or because a `v8::TerminateExecution` exception was thrown. In that case, an empty `Nan::MaybeLocal` is returned.\n   48  \n   49  Definition:\n   50  \n   51  ```c++\n   52: template<typename T> class Nan::MaybeLocal {\n   53   public:\n   54    MaybeLocal();\n   55  \n   56:   template<typename S> MaybeLocal(v8::Local<S> that);\n   57  \n   58:   bool IsEmpty() const;\n   59  \n   60:   template<typename S> bool ToLocal(v8::Local<S> *out);\n   61  \n   62:   // Will crash if the MaybeLocal<> is empty.\n   63    v8::Local<T> ToLocalChecked();\n   64  \n   65:   template<typename S> v8::Local<S> FromMaybe(v8::Local<S> default_value) const;\n   66  };\n   67  ```\n   68  \n   69: See the documentation for [`v8::MaybeLocal`](https://v8docs.nodesource.com/io.js-3.0/d8/d7d/classv8_1_1_maybe_local.html) for further details.\n   70  \n   71  <a name=\"api_nan_maybe\"></a>\n   72  ### Nan::Maybe\n   73  \n   74: A simple `Nan::Maybe` type, representing an object which may or may not have a value, see https://hackage.haskell.org/package/base/docs/Data-Maybe.html.\n   75  \n   76: If an API method returns a `Nan::Maybe<>`, the API method can potentially fail either because an exception is thrown, or because an exception is pending, e.g. because a previous API call threw an exception that hasn't been caught yet, or because a `v8::TerminateExecution` exception was thrown. In that case, a \"Nothing\" value is returned.\n   77  \n   78  Definition:\n   79  \n   80  ```c++\n   81: template<typename T> class Nan::Maybe {\n   82   public:\n   83:   bool IsNothing() const;\n   84:   bool IsJust() const;\n   85  \n   86:   // Will crash if the Maybe<> is nothing.\n   87:   T FromJust();\n   88  \n   89:   T FromMaybe(const T& default_value);\n   90  \n   91:   bool operator==(const Maybe &other);\n   92  \n   93:   bool operator!=(const Maybe &other);\n   94  };\n   95  ```\n   96  \n   97: See the documentation for [`v8::Maybe`](https://v8docs.nodesource.com/io.js-3.0/d9/d4b/classv8_1_1_maybe.html) for further details.\n   98  \n   99  <a name=\"api_nan_nothing\"></a>\n  100  ### Nan::Nothing\n  101  \n  102: Construct an empty `Nan::Maybe` type representing _nothing_.\n  103  \n  104  ```c++\n  ...\n  106  ```\n  107  \n  108: <a name=\"api_nan_just\"></a>\n  109: ### Nan::Just\n  110  \n  111: Construct a `Nan::Maybe` type representing _just_ a value.\n  112  \n  113  ```c++\n  114: template<typename T> Nan::Maybe<T> Nan::Just(const T &t);\n  115  ```\n  116  \n  ...\n  118  ### Nan::Call()\n  119  \n  120: A helper method for calling [`v8::Function#Call()`](https://v8docs.nodesource.com/io.js-3.0/d5/d54/classv8_1_1_function.html#a468a89f737af0612db10132799c827c0) in a way compatible across supported versions of V8.\n  121  \n  122: Signature:\n  123  \n  124  ```c++\n  ...\n  127  \n  128  \n  129: <a name=\"api_nan_to_detail_string\"></a>\n  130: ### Nan::ToDetailString()\n  131  \n  132: A helper method for calling [`v8::Value#ToDetailString()`](https://v8docs.nodesource.com/io.js-3.0/dc/d0a/classv8_1_1_value.html#a2f9770296dc2c8d274bc8cc0dca243e5) in a way compatible across supported versions of V8.\n  133  \n  134: Signature:\n  135  \n  136  ```c++\n  137: Nan::MaybeLocal<v8::String> Nan::ToDetailString(v8::Local<v8::Value> val);\n  138  ```\n  139  \n  ...\n  142  ### Nan::ToArrayIndex()\n  143  \n  144: A helper method for calling [`v8::Value#ToArrayIndex()`](https://v8docs.nodesource.com/io.js-3.0/dc/d0a/classv8_1_1_value.html#acc5bbef3c805ec458470c0fcd6f13493) in a way compatible across supported versions of V8.\n  145  \n  146: Signature:\n  147  \n  148  ```c++\n  ...\n  151  \n  152  \n  153: <a name=\"api_nan_equals\"></a>\n  154: ### Nan::Equals()\n  155  \n  156: A helper method for calling [`v8::Value#Equals()`](https://v8docs.nodesource.com/io.js-3.0/dc/d0a/classv8_1_1_value.html#a0d9616ab2de899d4e3047c30a10c9285) in a way compatible across supported versions of V8.\n  157  \n  158: Signature:\n  159  \n  160  ```c++\n  161: Nan::Maybe<bool> Nan::Equals(v8::Local<v8::Value> a, v8::Local<v8::Value>(b));\n  162  ```\n  163  \n  164  \n  165: <a name=\"api_nan_new_instance\"></a>\n  166: ### Nan::NewInstance()\n  167  \n  168: A helper method for calling [`v8::Function#NewInstance()`](https://v8docs.nodesource.com/io.js-3.0/d5/d54/classv8_1_1_function.html#a691b13f7a553069732cbacf5ac8c62ec) and [`v8::ObjectTemplate#NewInstance()`](https://v8docs.nodesource.com/io.js-3.0/db/d5f/classv8_1_1_object_template.html#ad605a7543cfbc5dab54cdb0883d14ae4) in a way compatible across supported versions of V8.\n  169  \n  170: Signature:\n  171  \n  172  ```c++\n  173: Nan::MaybeLocal<v8::Object> Nan::NewInstance(v8::Local<v8::Function> h);\n  174: Nan::MaybeLocal<v8::Object> Nan::NewInstance(v8::Local<v8::Function> h, int argc, v8::Local<v8::Value> argv[]);\n  175: Nan::MaybeLocal<v8::Object> Nan::NewInstance(v8::Local<v8::ObjectTemplate> h);\n  176  ```\n  177  \n  ...\n  180  ### Nan::GetFunction()\n  181  \n  182: A helper method for calling [`v8::FunctionTemplate#GetFunction()`](https://v8docs.nodesource.com/io.js-3.0/d8/d83/classv8_1_1_function_template.html#a56d904662a86eca78da37d9bb0ed3705) in a way compatible across supported versions of V8.\n  183  \n  184: Signature:\n  185  \n  186  ```c++\n  ...\n  189  \n  190  \n  191: <a name=\"api_nan_set\"></a>\n  192: ### Nan::Set()\n  193  \n  194: A helper method for calling [`v8::Object#Set()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a67604ea3734f170c66026064ea808f20) in a way compatible across supported versions of V8.\n  195  \n  196: Signature:\n  197  \n  198  ```c++\n  199: Nan::Maybe<bool> Nan::Set(v8::Local<v8::Object> obj,\n  200                            v8::Local<v8::Value> key,\n  201                            v8::Local<v8::Value> value)\n  202: Nan::Maybe<bool> Nan::Set(v8::Local<v8::Object> obj,\n  203                            uint32_t index,\n  204                            v8::Local<v8::Value> value);\n  ...\n  206  \n  207  \n  208: <a name=\"api_nan_force_set\"></a>\n  209: ### Nan::ForceSet()\n  210  \n  211: A helper method for calling [`v8::Object#ForceSet()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a796b7b682896fb64bf1872747734e836) in a way compatible across supported versions of V8.\n  212  \n  213: Signature:\n  214  \n  215  ```c++\n  216: Nan::Maybe<bool> Nan::ForceSet(v8::Local<v8::Object> obj,\n  217                                 v8::Local<v8::Value> key,\n  218                                 v8::Local<v8::Value> value,\n  219:                                v8::PropertyAttribute attribs = v8::None);\n  220  ```\n  221  \n  ...\n  224  ### Nan::Get()\n  225  \n  226: A helper method for calling [`v8::Object#Get()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a2565f03e736694f6b1e1cf22a0b4eac2) in a way compatible across supported versions of V8.\n  227  \n  228: Signature:\n  229  \n  230  ```c++\n  ...\n  236  \n  237  <a name=\"api_nan_get_property_attribute\"></a>\n  238: ### Nan::GetPropertyAttributes()\n  239  \n  240: A helper method for calling [`v8::Object#GetPropertyAttributes()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a9b898894da3d1db2714fd9325a54fe57) in a way compatible across supported versions of V8.\n  241  \n  242: Signature:\n  243  \n  244  ```c++\n  245: Nan::Maybe<v8::PropertyAttribute> Nan::GetPropertyAttributes(\n  246      v8::Local<v8::Object> obj,\n  247      v8::Local<v8::Value> key);\n  ...\n  249  \n  250  \n  251: <a name=\"api_nan_has\"></a>\n  252: ### Nan::Has()\n  253  \n  254: A helper method for calling [`v8::Object#Has()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#ab3c3d89ea7c2f9afd08965bd7299a41d) in a way compatible across supported versions of V8.\n  255  \n  256: Signature:\n  257  \n  258  ```c++\n  259: Nan::Maybe<bool> Nan::Has(v8::Local<v8::Object> obj, v8::Local<v8::String> key);\n  260: Nan::Maybe<bool> Nan::Has(v8::Local<v8::Object> obj, uint32_t index);\n  261  ```\n  262  \n  ...\n  265  ### Nan::Delete()\n  266  \n  267: A helper method for calling [`v8::Object#Delete()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a2fa0f5a592582434ed1ceceff7d891ef) in a way compatible across supported versions of V8.\n  268  \n  269: Signature:\n  270  \n  271  ```c++\n  272  Nan::Maybe<bool> Nan::Delete(v8::Local<v8::Object> obj,\n  273:                              v8::Local<v8::String> key);\n  274  Nan::Maybe<bool> Nan::Delete(v8::Local<v8::Object> obj, uint32_t index);\n  275  ```\n  276  \n  277  \n  278: <a name=\"api_nan_get_property_names\"></a>\n  279: ### Nan::GetPropertyNames()\n  280  \n  281: A helper method for calling [`v8::Object#GetPropertyNames()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#aced885270cfd2c956367b5eedc7fbfe8) in a way compatible across supported versions of V8.\n  282  \n  283: Signature:\n  284  \n  285  ```c++\n  286: Nan::MaybeLocal<v8::Array> Nan::GetPropertyNames(v8::Local<v8::Object> obj);\n  287  ```\n  288  \n  289  \n  290: <a name=\"api_nan_get_own_property_names\"></a>\n  291: ### Nan::GetOwnPropertyNames()\n  292  \n  293: A helper method for calling [`v8::Object#GetOwnPropertyNames()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a79a6e4d66049b9aa648ed4dfdb23e6eb) in a way compatible across supported versions of V8.\n  294  \n  295: Signature:\n  296  \n  297  ```c++\n  298: Nan::MaybeLocal<v8::Array> Nan::GetOwnPropertyNames(v8::Local<v8::Object> obj);\n  299  ```\n  300  \n  301  \n  302: <a name=\"api_nan_set_prototype\"></a>\n  303: ### Nan::SetPrototype()\n  304  \n  305: A helper method for calling [`v8::Object#SetPrototype()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a442706b22fceda6e6d1f632122a9a9f4) in a way compatible across supported versions of V8.\n  306  \n  307: Signature:\n  308  \n  309  ```c++\n  310: Nan::Maybe<bool> Nan::SetPrototype(v8::Local<v8::Object> obj,\n  311                                     v8::Local<v8::Value> prototype);\n  312  ```\n  313  \n  314  \n  315: <a name=\"api_nan_object_proto_to_string\"></a>\n  316: ### Nan::ObjectProtoToString()\n  317  \n  318: A helper method for calling [`v8::Object#ObjectProtoToString()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#ab7a92b4dcf822bef72f6c0ac6fea1f0b) in a way compatible across supported versions of V8.\n  319  \n  320: Signature:\n  321  \n  322  ```c++\n  323: Nan::MaybeLocal<v8::String> Nan::ObjectProtoToString(v8::Local<v8::Object> obj);\n  324  ```\n  325  \n  326  \n  327: <a name=\"api_nan_has_own_property\"></a>\n  328: ### Nan::HasOwnProperty()\n  329  \n  330: A helper method for calling [`v8::Object#HasOwnProperty()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#ab7b7245442ca6de1e1c145ea3fd653ff) in a way compatible across supported versions of V8.\n  331  \n  332: Signature:\n  333  \n  334  ```c++\n  335: Nan::Maybe<bool> Nan::HasOwnProperty(v8::Local<v8::Object> obj,\n  336:                                      v8::Local<v8::String> key);\n  337  ```\n  338  \n  339  \n  340: <a name=\"api_nan_has_real_named_property\"></a>\n  341: ### Nan::HasRealNamedProperty()\n  342  \n  343: A helper method for calling [`v8::Object#HasRealNamedProperty()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#ad8b80a59c9eb3c1e6c3cd6c84571f767) in a way compatible across supported versions of V8.\n  344  \n  345: Signature:\n  346  \n  347  ```c++\n  348: Nan::Maybe<bool> Nan::HasRealNamedProperty(v8::Local<v8::Object> obj,\n  349:                                            v8::Local<v8::String> key);\n  350  ```\n  351  \n  352  \n  353: <a name=\"api_nan_has_real_indexed_property\"></a>\n  354: ### Nan::HasRealIndexedProperty()\n  355  \n  356: A helper method for calling [`v8::Object#HasRealIndexedProperty()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#af94fc1135a5e74a2193fb72c3a1b9855) in a way compatible across supported versions of V8.\n  357  \n  358: Signature:\n  359  \n  360  ```c++\n  361: Nan::Maybe<bool> Nan::HasRealIndexedProperty(v8::Local<v8::Object> obj,\n  362                                               uint32_t index);\n  363  ```\n  364  \n  365  \n  366: <a name=\"api_nan_has_real_named_callback_property\"></a>\n  367: ### Nan::HasRealNamedCallbackProperty()\n  368  \n  369: A helper method for calling [`v8::Object#HasRealNamedCallbackProperty()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#af743b7ea132b89f84d34d164d0668811) in a way compatible across supported versions of V8.\n  370  \n  371: Signature:\n  372  \n  373  ```c++\n  374: Nan::Maybe<bool> Nan::HasRealNamedCallbackProperty(\n  375      v8::Local<v8::Object> obj,\n  376:     v8::Local<v8::String> key);\n  377  ```\n  378  \n  ...\n  381  ### Nan::GetRealNamedPropertyInPrototypeChain()\n  382  \n  383: A helper method for calling [`v8::Object#GetRealNamedPropertyInPrototypeChain()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a8700b1862e6b4783716964ba4d5e6172) in a way compatible across supported versions of V8.\n  384  \n  385: Signature:\n  386  \n  387  ```c++\n  388  Nan::MaybeLocal<v8::Value> Nan::GetRealNamedPropertyInPrototypeChain(\n  389      v8::Local<v8::Object> obj,\n  390:     v8::Local<v8::String> key);\n  391  ```\n  392  \n  ...\n  395  ### Nan::GetRealNamedProperty()\n  396  \n  397: A helper method for calling [`v8::Object#GetRealNamedProperty()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a84471a824576a5994fdd0ffcbf99ccc0) in a way compatible across supported versions of V8.\n  398  \n  399: Signature:\n  400  \n  401  ```c++\n  402  Nan::MaybeLocal<v8::Value> Nan::GetRealNamedProperty(v8::Local<v8::Object> obj,\n  403:                                                      v8::Local<v8::String> key);\n  404  ```\n  405  \n  406  \n  407: <a name=\"api_nan_call_as_function\"></a>\n  408: ### Nan::CallAsFunction()\n  409  \n  410: A helper method for calling [`v8::Object#CallAsFunction()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a9ef18be634e79b4f0cdffa1667a29f58) in a way compatible across supported versions of V8.\n  411  \n  412: Signature:\n  413  \n  414  ```c++\n  415: Nan::MaybeLocal<v8::Value> Nan::CallAsFunction(v8::Local<v8::Object> obj,\n  416                                                 v8::Local<v8::Object> recv,\n  417                                                 int argc,\n  ...\n  420  \n  421  \n  422: <a name=\"api_nan_call_as_constructor\"></a>\n  423: ### Nan::CallAsConstructor()\n  424  \n  425: A helper method for calling [`v8::Object#CallAsConstructor()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a50d571de50d0b0dfb28795619d07a01b) in a way compatible across supported versions of V8.\n  426  \n  427: Signature:\n  428  \n  429  ```c++\n  430: Nan::MaybeLocal<v8::Value> Nan::CallAsConstructor(v8::Local<v8::Object> obj,\n  431                                                    int argc,\n  432                                                    v8::Local<v8::Value> argv[]);\n  ...\n  434  \n  435  \n  436: <a name=\"api_nan_get_source_line\"></a>\n  437: ### Nan::GetSourceLine()\n  438  \n  439: A helper method for calling [`v8::Message#GetSourceLine()`](https://v8docs.nodesource.com/io.js-3.0/d9/d28/classv8_1_1_message.html#a849f7a6c41549d83d8159825efccd23a) in a way compatible across supported versions of V8.\n  440  \n  441: Signature:\n  442  \n  443  ```c++\n  444: Nan::MaybeLocal<v8::String> Nan::GetSourceLine(v8::Local<v8::Message> msg);\n  445  ```\n  446  \n  ...\n  449  ### Nan::GetLineNumber()\n  450  \n  451: A helper method for calling [`v8::Message#GetLineNumber()`](https://v8docs.nodesource.com/io.js-3.0/d9/d28/classv8_1_1_message.html#adbe46c10a88a6565f2732a2d2adf99b9) in a way compatible across supported versions of V8.\n  452  \n  453: Signature:\n  454  \n  455  ```c++\n  456: Nan::Maybe<int> Nan::GetLineNumber(v8::Local<v8::Message> msg);\n  457  ```\n  458  \n  459  \n  460: <a name=\"api_nan_get_start_column\"></a>\n  461: ### Nan::GetStartColumn()\n  462  \n  463: A helper method for calling [`v8::Message#GetStartColumn()`](https://v8docs.nodesource.com/io.js-3.0/d9/d28/classv8_1_1_message.html#a60ede616ba3822d712e44c7a74487ba6) in a way compatible across supported versions of V8.\n  464  \n  465: Signature:\n  466  \n  467  ```c++\n  468: Nan::Maybe<int> Nan::GetStartColumn(v8::Local<v8::Message> msg);\n  469  ```\n  470  \n  ...\n  473  ### Nan::GetEndColumn()\n  474  \n  475: A helper method for calling [`v8::Message#GetEndColumn()`](https://v8docs.nodesource.com/io.js-3.0/d9/d28/classv8_1_1_message.html#aaa004cf19e529da980bc19fcb76d93be) in a way compatible across supported versions of V8.\n  476  \n  477: Signature:\n  478  \n  479  ```c++\n  480: Nan::Maybe<int> Nan::GetEndColumn(v8::Local<v8::Message> msg);\n  481  ```\n  482  \n  ...\n  485  ### Nan::CloneElementAt()\n  486  \n  487: A helper method for calling [`v8::Array#CloneElementAt()`](https://v8docs.nodesource.com/io.js-3.0/d3/d32/classv8_1_1_array.html#a1d3a878d4c1c7cae974dd50a1639245e) in a way compatible across supported versions of V8.\n  488  \n  489: Signature:\n  490  \n  491  ```c++\n  ...\n  496  ### Nan::MakeMaybe()\n  497  \n  498: Wraps a `v8::Local<>` in a `Nan::MaybeLocal<>`. When called with a `Nan::MaybeLocal<>` it just returns its argument. This is useful in generic template code that builds on NAN.\n  499  \n  500: Synopsis:\n  501  \n  502  ```c++\n  503:   MaybeLocal<v8::Number> someNumber = MakeMaybe(New<v8::Number>(3.141592654));\n  504:   MaybeLocal<v8::String> someString = MakeMaybe(New<v8::String>(\"probably\"));\n  505  ```\n  506  \n  507: Signature:\n  508  \n  509  ```c++\n  510: template <typename T, template <typename> class MaybeMaybe>\n  511  Nan::MaybeLocal<T> Nan::MakeMaybe(MaybeMaybe<T> v);\n  512  ```\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/methods.md:\n    1: ## JavaScript-accessible methods\n    2  \n    3: A _template_ is a blueprint for JavaScript functions and objects in a context. You can use a template to wrap C++ functions and data structures within JavaScript objects so that they can be manipulated from JavaScript. See the V8 Embedders Guide section on [Templates](https://developers.google.com/v8/embed#templates) for further information.\n    4  \n    5: In order to expose functionality to JavaScript via a template, you must provide it to V8 in a form that it understands. Across the versions of V8 supported by NAN, JavaScript-accessible method signatures vary widely, NAN fully abstracts method declaration and provides you with an interface that is similar to the most recent V8 API but is backward-compatible with older versions that still use the now-deceased `v8::Argument` type.\n    6  \n    7: * **Method argument types**\n    8   - <a href=\"#api_nan_function_callback_info\"><b><code>Nan::FunctionCallbackInfo</code></b></a>\n    9   - <a href=\"#api_nan_property_callback_info\"><b><code>Nan::PropertyCallbackInfo</code></b></a>\n   10   - <a href=\"#api_nan_return_value\"><b><code>Nan::ReturnValue</code></b></a>\n   11: * **Method declarations**\n   12   - <a href=\"#api_nan_method\"><b>Method declaration</b></a>\n   13   - <a href=\"#api_nan_getter\"><b>Getter declaration</b></a>\n   14:  - <a href=\"#api_nan_setter\"><b>Setter declaration</b></a>\n   15   - <a href=\"#api_nan_property_getter\"><b>Property getter declaration</b></a>\n   16:  - <a href=\"#api_nan_property_setter\"><b>Property setter declaration</b></a>\n   17   - <a href=\"#api_nan_property_enumerator\"><b>Property enumerator declaration</b></a>\n   18   - <a href=\"#api_nan_property_deleter\"><b>Property deleter declaration</b></a>\n   19   - <a href=\"#api_nan_property_query\"><b>Property query declaration</b></a>\n   20   - <a href=\"#api_nan_index_getter\"><b>Index getter declaration</b></a>\n   21:  - <a href=\"#api_nan_index_setter\"><b>Index setter declaration</b></a>\n   22   - <a href=\"#api_nan_index_enumerator\"><b>Index enumerator declaration</b></a>\n   23   - <a href=\"#api_nan_index_deleter\"><b>Index deleter declaration</b></a>\n   24   - <a href=\"#api_nan_index_query\"><b>Index query declaration</b></a>\n   25: * Method and template helpers\n   26:  - <a href=\"#api_nan_set_method\"><b><code>Nan::SetMethod()</code></b></a>\n   27:  - <a href=\"#api_nan_set_prototype_method\"><b><code>Nan::SetPrototypeMethod()</code></b></a>\n   28:  - <a href=\"#api_nan_set_accessor\"><b><code>Nan::SetAccessor()</code></b></a>\n   29:  - <a href=\"#api_nan_set_named_property_handler\"><b><code>Nan::SetNamedPropertyHandler()</code></b></a>\n   30:  - <a href=\"#api_nan_set_indexed_property_handler\"><b><code>Nan::SetIndexedPropertyHandler()</code></b></a>\n   31:  - <a href=\"#api_nan_set_template\"><b><code>Nan::SetTemplate()</code></b></a>\n   32:  - <a href=\"#api_nan_set_prototype_template\"><b><code>Nan::SetPrototypeTemplate()</code></b></a>\n   33:  - <a href=\"#api_nan_set_instance_template\"><b><code>Nan::SetInstanceTemplate()</code></b></a>\n   34:  - <a href=\"#api_nan_set_call_handler\"><b><code>Nan::SetCallHandler()</code></b></a>\n   35:  - <a href=\"#api_nan_set_call_as_function_handler\"><b><code>Nan::SetCallAsFunctionHandler()</code></b></a>\n   36  \n   37  <a name=\"api_nan_function_callback_info\"></a>\n   38  ### Nan::FunctionCallbackInfo\n   39  \n   40: `Nan::FunctionCallbackInfo` should be used in place of [`v8::FunctionCallbackInfo`](https://v8docs.nodesource.com/io.js-3.0/dd/d0d/classv8_1_1_function_callback_info.html), even with older versions of Node where `v8::FunctionCallbackInfo` does not exist.\n   41  \n   42  Definition:\n   43  \n   44  ```c++\n   45: template<typename T> class FunctionCallbackInfo {\n   46   public:\n   47:   ReturnValue<T> GetReturnValue() const;\n   48    v8::Local<v8::Function> Callee();\n   49    v8::Local<v8::Value> Data();\n   50    v8::Local<v8::Object> Holder();\n   51:   bool IsConstructCall();\n   52:   int Length() const;\n   53:   v8::Local<v8::Value> operator[](int i) const;\n   54:   v8::Local<v8::Object> This() const;\n   55:   v8::Isolate *GetIsolate() const;\n   56  };\n   57  ```\n   58  \n   59: See the [`v8::FunctionCallbackInfo`](https://v8docs.nodesource.com/io.js-3.0/dd/d0d/classv8_1_1_function_callback_info.html) documentation for usage details on these. See [`Nan::ReturnValue`](#api_nan_return_value) for further information on how to set a return value from methods.\n   60  \n   61  <a name=\"api_nan_property_callback_info\"></a>\n   62  ### Nan::PropertyCallbackInfo\n   63  \n   64: `Nan::PropertyCallbackInfo` should be used in place of [`v8::PropertyCallbackInfo`](https://v8docs.nodesource.com/io.js-3.0/d7/dc5/classv8_1_1_property_callback_info.html), even with older versions of Node where `v8::PropertyCallbackInfo` does not exist.\n   65  \n   66  Definition:\n   67  \n   68  ```c++\n   69: template<typename T> class PropertyCallbackInfo : public PropertyCallbackInfoBase<T> {\n   70   public:\n   71:   ReturnValue<T> GetReturnValue() const;\n   72:   v8::Isolate* GetIsolate() const;\n   73:   v8::Local<v8::Value> Data() const;\n   74:   v8::Local<v8::Object> This() const;\n   75:   v8::Local<v8::Object> Holder() const;\n   76  };\n   77  ```\n   78  \n   79: See the [`v8::PropertyCallbackInfo`](https://v8docs.nodesource.com/io.js-3.0/d7/dc5/classv8_1_1_property_callback_info.html) documentation for usage details on these. See [`Nan::ReturnValue`](#api_nan_return_value) for further information on how to set a return value from property accessor methods.\n   80  \n   81  <a name=\"api_nan_return_value\"></a>\n   82  ### Nan::ReturnValue\n   83  \n   84: `Nan::ReturnValue` is used in place of [`v8::ReturnValue`](https://v8docs.nodesource.com/io.js-3.0/da/da7/classv8_1_1_return_value.html) on both [`Nan::FunctionCallbackInfo`](#api_nan_function_callback_info) and [`Nan::PropertyCallbackInfo`](#api_nan_property_callback_info) as the return type of `GetReturnValue()`.\n   85  \n   86: Example usage:\n   87  \n   88  ```c++\n   89: void EmptyArray(const Nan::FunctionCallbackInfo<v8::Value>& info) {\n   90:   info.GetReturnValue().Set(Nan::New<v8::Array>());\n   91  }\n   92  ```\n   ..\n   95  \n   96  ```c++\n   97: template<typename T> class ReturnValue {\n   98   public:\n   99:   // Handle setters\n  100:   template <typename S> void Set(const v8::Local<S> &handle);\n  101:   template <typename S> void Set(const Nan::Global<S> &handle);\n  102  \n  103:   // Fast primitive setters\n  104:   void Set(bool value);\n  105:   void Set(double i);\n  106:   void Set(int32_t i);\n  107:   void Set(uint32_t i);\n  108  \n  109:   // Fast JS primitive setters\n  110:   void SetNull();\n  111:   void SetUndefined();\n  112:   void SetEmptyString();\n  113  \n  114:   // Convenience getter for isolate\n  115:   v8::Isolate *GetIsolate() const;\n  116  };\n  117  ```\n  118  \n  119: See the documentation on [`v8::ReturnValue`](https://v8docs.nodesource.com/io.js-3.0/da/da7/classv8_1_1_return_value.html) for further information on this.\n  120  \n  121  <a name=\"api_nan_method\"></a>\n  122  ### Method declaration\n  123  \n  124: JavaScript-accessible methods should be declared with the following signature to form a `Nan::FunctionCallback`:\n  125  \n  126  ```c++\n  127: typedef void(*FunctionCallback)(const FunctionCallbackInfo<v8::Value>&);\n  128  ```\n  129  \n  ...\n  131  \n  132  ```c++\n  133: void MethodName(const Nan::FunctionCallbackInfo<v8::Value>& info) {\n  134    ...\n  135  }\n  136  ```\n  137  \n  138: You do not need to declare a new `HandleScope` within a method as one is implicitly created for you.\n  139  \n  140: **Example usage**\n  141  \n  142  ```c++\n  143  // .h:\n  144: class Foo : public Nan::ObjectWrap {\n  145    ...\n  146  \n  147:   static void Bar(const Nan::FunctionCallbackInfo<v8::Value>& info);\n  148:   static void Baz(const Nan::FunctionCallbackInfo<v8::Value>& info);\n  149  }\n  150  \n  151  \n  152  // .cc:\n  153: void Foo::Bar(const Nan::FunctionCallbackInfo<v8::Value>& info) {\n  154    ...\n  155  }\n  156  \n  157: void Foo::Baz(const Nan::FunctionCallbackInfo<v8::Value>& info) {\n  158    ...\n  159  }\n  160  ```\n  161  \n  162: A helper macro `NAN_METHOD(methodname)` exists, compatible with NAN v1 method declarations.\n  163  \n  164: **Example usage with `NAN_METHOD(methodname)`**\n  165  \n  166  ```c++\n  167  // .h:\n  168: class Foo : public Nan::ObjectWrap {\n  169    ...\n  170  \n  171:   static NAN_METHOD(Bar);\n  172:   static NAN_METHOD(Baz);\n  173  }\n  174  \n  ...\n  184  ```\n  185  \n  186: Use [`Nan::SetPrototypeMethod`](#api_nan_set_prototype_method) to attach a method to a JavaScript function prototype or [`Nan::SetMethod`](#api_nan_set_method) to attach a method directly on a JavaScript object.\n  187  \n  188  <a name=\"api_nan_getter\"></a>\n  189  ### Getter declaration\n  190  \n  191: JavaScript-accessible getters should be declared with the following signature to form a `Nan::GetterCallback`:\n  192  \n  193  ```c++\n  194: typedef void(*GetterCallback)(v8::Local<v8::String>,\n  195:                               const PropertyCallbackInfo<v8::Value>&);\n  196  ```\n  197  \n  ...\n  199  \n  200  ```c++\n  201: void GetterName(v8::Local<v8::String> property,\n  202:                 const Nan::PropertyCallbackInfo<v8::Value>& info) {\n  203    ...\n  204  }\n  205  ```\n  206  \n  207: You do not need to declare a new `HandleScope` within a getter as one is implicitly created for you.\n  208  \n  209: A helper macro `NAN_GETTER(methodname)` exists, compatible with NAN v1 method declarations.\n  210  \n  211: Also see the V8 Embedders Guide documentation on [Accessors](https://developers.google.com/v8/embed#accesssors).\n  212  \n  213: <a name=\"api_nan_setter\"></a>\n  214: ### Setter declaration\n  215  \n  216: JavaScript-accessible setters should be declared with the following signature to form a <b><code>Nan::SetterCallback</code></b>:\n  217  \n  218  ```c++\n  219: typedef void(*SetterCallback)(v8::Local<v8::String>,\n  220                                v8::Local<v8::Value>,\n  221:                               const PropertyCallbackInfo<void>&);\n  222  ```\n  223  \n  ...\n  225  \n  226  ```c++\n  227: void SetterName(v8::Local<v8::String> property,\n  228                  v8::Local<v8::Value> value,\n  229:                 const Nan::PropertyCallbackInfo<void>& info) {\n  230    ...\n  231  }\n  232  ```\n  233  \n  234: You do not need to declare a new `HandleScope` within a setter as one is implicitly created for you.\n  235  \n  236: A helper macro `NAN_SETTER(methodname)` exists, compatible with NAN v1 method declarations.\n  237  \n  238: Also see the V8 Embedders Guide documentation on [Accessors](https://developers.google.com/v8/embed#accesssors).\n  239  \n  240  <a name=\"api_nan_property_getter\"></a>\n  241  ### Property getter declaration\n  242  \n  243: JavaScript-accessible property getters should be declared with the following signature to form a <b><code>Nan::PropertyGetterCallback</code></b>:\n  244  \n  245  ```c++\n  246: typedef void(*PropertyGetterCallback)(v8::Local<v8::String>,\n  247:                                       const PropertyCallbackInfo<v8::Value>&);\n  248  ```\n  249  \n  ...\n  251  \n  252  ```c++\n  253: void PropertyGetterName(v8::Local<v8::String> property,\n  254:                         const Nan::PropertyCallbackInfo<v8::Value>& info) {\n  255    ...\n  256  }\n  257  ```\n  258  \n  259: You do not need to declare a new `HandleScope` within a property getter as one is implicitly created for you.\n  260  \n  261: A helper macro `NAN_PROPERTY_GETTER(methodname)` exists, compatible with NAN v1 method declarations.\n  262  \n  263: Also see the V8 Embedders Guide documentation on named property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  264  \n  265: <a name=\"api_nan_property_setter\"></a>\n  266: ### Property setter declaration\n  267  \n  268: JavaScript-accessible property setters should be declared with the following signature to form a <b><code>Nan::PropertySetterCallback</code></b>:\n  269  \n  270  ```c++\n  271: typedef void(*PropertySetterCallback)(v8::Local<v8::String>,\n  272                                        v8::Local<v8::Value>,\n  273:                                       const PropertyCallbackInfo<v8::Value>&);\n  274  ```\n  275  \n  ...\n  277  \n  278  ```c++\n  279: void PropertySetterName(v8::Local<v8::String> property,\n  280                          v8::Local<v8::Value> value,\n  281:                         const Nan::PropertyCallbackInfo<v8::Value>& info);\n  282  ```\n  283  \n  284: You do not need to declare a new `HandleScope` within a property setter as one is implicitly created for you.\n  285  \n  286: A helper macro `NAN_PROPERTY_SETTER(methodname)` exists, compatible with NAN v1 method declarations.\n  287  \n  288: Also see the V8 Embedders Guide documentation on named property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  289  \n  290  <a name=\"api_nan_property_enumerator\"></a>\n  291  ### Property enumerator declaration\n  292  \n  293: JavaScript-accessible property enumerators should be declared with the following signature to form a <b><code>Nan::PropertyEnumeratorCallback</code></b>:\n  294  \n  295  ```c++\n  296: typedef void(*PropertyEnumeratorCallback)(const PropertyCallbackInfo<v8::Array>&);\n  297  ```\n  298  \n  ...\n  300  \n  301  ```c++\n  302: void PropertyEnumeratorName(const Nan::PropertyCallbackInfo<v8::Array>& info);\n  303  ```\n  304  \n  305: You do not need to declare a new `HandleScope` within a property enumerator as one is implicitly created for you.\n  306  \n  307: A helper macro `NAN_PROPERTY_ENUMERATOR(methodname)` exists, compatible with NAN v1 method declarations.\n  308  \n  309: Also see the V8 Embedders Guide documentation on named property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  310  \n  311  <a name=\"api_nan_property_deleter\"></a>\n  312  ### Property deleter declaration\n  313  \n  314: JavaScript-accessible property deleters should be declared with the following signature to form a <b><code>Nan::PropertyDeleterCallback</code></b>:\n  315  \n  316  ```c++\n  317: typedef void(*PropertyDeleterCallback)(v8::Local<v8::String>,\n  318:                                        const PropertyCallbackInfo<v8::Boolean>&);\n  319  ```\n  320  \n  ...\n  322  \n  323  ```c++\n  324: void PropertyDeleterName(v8::Local<v8::String> property,\n  325:                          const Nan::PropertyCallbackInfo<v8::Boolean>& info);\n  326  ```\n  327  \n  328: You do not need to declare a new `HandleScope` within a property deleter as one is implicitly created for you.\n  329  \n  330: A helper macro `NAN_PROPERTY_DELETER(methodname)` exists, compatible with NAN v1 method declarations.\n  331  \n  332: Also see the V8 Embedders Guide documentation on named property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  333  \n  334  <a name=\"api_nan_property_query\"></a>\n  335  ### Property query declaration\n  336  \n  337: JavaScript-accessible property query methods should be declared with the following signature to form a <b><code>Nan::PropertyQueryCallback</code></b>:\n  338  \n  339  ```c++\n  340: typedef void(*PropertyQueryCallback)(v8::Local<v8::String>,\n  341:                                      const PropertyCallbackInfo<v8::Integer>&);\n  342  ```\n  343  \n  ...\n  345  \n  346  ```c++\n  347: void PropertyQueryName(v8::Local<v8::String> property,\n  348:                        const Nan::PropertyCallbackInfo<v8::Integer>& info);\n  349  ```\n  350  \n  351: You do not need to declare a new `HandleScope` within a property query method as one is implicitly created for you.\n  352  \n  353: A helper macro `NAN_PROPERTY_QUERY(methodname)` exists, compatible with NAN v1 method declarations.\n  354  \n  355: Also see the V8 Embedders Guide documentation on named property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  356  \n  357  <a name=\"api_nan_index_getter\"></a>\n  358  ### Index getter declaration\n  359  \n  360: JavaScript-accessible index getter methods should be declared with the following signature to form a <b><code>Nan::IndexGetterCallback</code></b>:\n  361  \n  362  ```c++\n  363  typedef void(*IndexGetterCallback)(uint32_t,\n  364:                                    const PropertyCallbackInfo<v8::Value>&);\n  365  ```\n  366  \n  ...\n  368  \n  369  ```c++\n  370: void IndexGetterName(uint32_t index, const PropertyCallbackInfo<v8::Value>& info);\n  371  ```\n  372  \n  373: You do not need to declare a new `HandleScope` within a index getter as one is implicitly created for you.\n  374  \n  375: A helper macro `NAN_INDEX_GETTER(methodname)` exists, compatible with NAN v1 method declarations.\n  376  \n  377: Also see the V8 Embedders Guide documentation on indexed property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  378  \n  379: <a name=\"api_nan_index_setter\"></a>\n  380: ### Index setter declaration\n  381  \n  382: JavaScript-accessible index setter methods should be declared with the following signature to form a <b><code>Nan::IndexSetterCallback</code></b>:\n  383  \n  384  ```c++\n  385: typedef void(*IndexSetterCallback)(uint32_t,\n  386                                     v8::Local<v8::Value>,\n  387:                                    const PropertyCallbackInfo<v8::Value>&);\n  388  ```\n  389  \n  ...\n  391  \n  392  ```c++\n  393: void IndexSetterName(uint32_t index,\n  394                       v8::Local<v8::Value> value,\n  395:                      const PropertyCallbackInfo<v8::Value>& info);\n  396  ```\n  397  \n  398: You do not need to declare a new `HandleScope` within a index setter as one is implicitly created for you.\n  399  \n  400: A helper macro `NAN_INDEX_SETTER(methodname)` exists, compatible with NAN v1 method declarations.\n  401  \n  402: Also see the V8 Embedders Guide documentation on indexed property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  403  \n  404  <a name=\"api_nan_index_enumerator\"></a>\n  405  ### Index enumerator declaration\n  406  \n  407: JavaScript-accessible index enumerator methods should be declared with the following signature to form a <b><code>Nan::IndexEnumeratorCallback</code></b>:\n  408  \n  409  ```c++\n  410: typedef void(*IndexEnumeratorCallback)(const PropertyCallbackInfo<v8::Array>&);\n  411  ```\n  412  \n  ...\n  414  \n  415  ```c++\n  416: void IndexEnumeratorName(const PropertyCallbackInfo<v8::Array>& info);\n  417  ```\n  418  \n  419: You do not need to declare a new `HandleScope` within a index enumerator as one is implicitly created for you.\n  420  \n  421: A helper macro `NAN_INDEX_ENUMERATOR(methodname)` exists, compatible with NAN v1 method declarations.\n  422  \n  423: Also see the V8 Embedders Guide documentation on indexed property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  424  \n  425  <a name=\"api_nan_index_deleter\"></a>\n  426  ### Index deleter declaration\n  427  \n  428: JavaScript-accessible index deleter methods should be declared with the following signature to form a <b><code>Nan::IndexDeleterCallback</code></b>:\n  429  \n  430  ```c++\n  431  typedef void(*IndexDeleterCallback)(uint32_t,\n  432:                                     const PropertyCallbackInfo<v8::Boolean>&);\n  433  ```\n  434  \n  ...\n  436  \n  437  ```c++\n  438: void IndexDeleterName(uint32_t index, const PropertyCallbackInfo<v8::Boolean>& info);\n  439  ```\n  440  \n  441: You do not need to declare a new `HandleScope` within a index deleter as one is implicitly created for you.\n  442  \n  443: A helper macro `NAN_INDEX_DELETER(methodname)` exists, compatible with NAN v1 method declarations.\n  444  \n  445: Also see the V8 Embedders Guide documentation on indexed property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  446  \n  447  <a name=\"api_nan_index_query\"></a>\n  448  ### Index query declaration\n  449  \n  450: JavaScript-accessible index query methods should be declared with the following signature to form a <b><code>Nan::IndexQueryCallback</code></b>:\n  451  \n  452  ```c++\n  453  typedef void(*IndexQueryCallback)(uint32_t,\n  454:                                   const PropertyCallbackInfo<v8::Integer>&);\n  455  ```\n  456  \n  ...\n  458  \n  459  ```c++\n  460: void IndexQueryName(uint32_t index, const PropertyCallbackInfo<v8::Integer>& info);\n  461  ```\n  462  \n  463: You do not need to declare a new `HandleScope` within a index query method as one is implicitly created for you.\n  464  \n  465: A helper macro `NAN_INDEX_QUERY(methodname)` exists, compatible with NAN v1 method declarations.\n  466  \n  467: Also see the V8 Embedders Guide documentation on indexed property [Interceptors](https://developers.google.com/v8/embed#interceptors).\n  468  \n  469: <a name=\"api_nan_set_method\"></a>\n  470: ### Nan::SetMethod()\n  471  \n  472: Sets a method with a given name directly on a JavaScript object where the method has the `Nan::FunctionCallback` signature (see <a href=\"#api_nan_method\">Method declaration</a>).\n  473  \n  474: Signature:\n  475  \n  476  ```c++\n  477: void Nan::SetMethod(v8::Local<v8::Object> recv,\n  478:                     const char *name,\n  479                      Nan::FunctionCallback callback)\n  480: void Nan::SetMethod(v8::Local<v8::Template> templ,\n  481:                     const char *name,\n  482                      Nan::FunctionCallback callback)\n  483  ```\n  484  \n  485: <a name=\"api_nan_set_prototype_method\"></a>\n  486: ### Nan::SetPrototypeMethod()\n  487  \n  488: Sets a method with a given name on a `FunctionTemplate`'s prototype where the method has the `Nan::FunctionCallback` signature (see <a href=\"#api_nan_method\">Method declaration</a>).\n  489  \n  490: Signature:\n  491  \n  492  ```c++\n  493: void Nan::SetPrototypeMethod(v8::Local<v8::FunctionTemplate> recv,\n  494:                              const char* name,\n  495                               Nan::FunctionCallback callback)\n  496  ```\n  497  \n  498: <a name=\"api_nan_set_accessor\"></a>\n  499: ### Nan::SetAccessor()\n  500  \n  501: Sets getters and setters for a property with a given name on an `ObjectTemplate` or a plain `Object`. Accepts getters with the `Nan::GetterCallback` signature (see <a href=\"#api_nan_getter\">Getter declaration</a>) and setters with the `Nan::SetterCallback` signature (see <a href=\"#api_nan_setter\">Setter declaration</a>).\n  502  \n  503: Signature:\n  504  \n  505  ```c++\n  506: void SetAccessor(v8::Local<v8::ObjectTemplate> tpl,\n  507:                  v8::Local<v8::String> name,\n  508                   Nan::GetterCallback getter,\n  509:                  Nan::SetterCallback setter = 0,\n  510                   v8::Local<v8::Value> data = v8::Local<v8::Value>(),\n  511:                  v8::AccessControl settings = v8::DEFAULT,\n  512                   v8::PropertyAttribute attribute = v8::None,\n  513:                  imp::Sig signature = imp::Sig());\n  514: bool SetAccessor(v8::Local<v8::Object> obj,\n  515:                  v8::Local<v8::String> name,\n  516                   Nan::GetterCallback getter,\n  517:                  Nan::SetterCallback setter = 0,\n  518                   v8::Local<v8::Value> data = v8::Local<v8::Value>(),\n  519:                  v8::AccessControl settings = v8::DEFAULT,\n  520                   v8::PropertyAttribute attribute = v8::None)\n  521  ```\n  522  \n  523: See the V8 [`ObjectTemplate#SetAccessor()`](https://v8docs.nodesource.com/io.js-3.0/db/d5f/classv8_1_1_object_template.html#aa90691622f01269c6a11391d372ca0c5) and [`Object#SetAccessor()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#a3f9dee085f5ec346465f1dc924325043) for further information about how to use `Nan::SetAccessor()`.\n  524  \n  525: <a name=\"api_nan_set_named_property_handler\"></a>\n  526: ### Nan::SetNamedPropertyHandler()\n  527  \n  528: Sets named property getters, setters, query, deleter and enumerator methods on an `ObjectTemplate`. Accepts:\n  529  \n  530: * Property getters with the `Nan::PropertyGetterCallback` signature (see <a href=\"#api_nan_property_getter\">Property getter declaration</a>)\n  531: * Property setters with the `Nan::PropertySetterCallback` signature (see <a href=\"#api_nan_property_setter\">Property setter declaration</a>)\n  532: * Property query methods with the `Nan::PropertyQueryCallback` signature (see <a href=\"#api_nan_property_query\">Property query declaration</a>)\n  533: * Property deleters with the `Nan::PropertyDeleterCallback` signature (see <a href=\"#api_nan_property_deleter\">Property deleter declaration</a>)\n  534: * Property enumerators with the `Nan::PropertyEnumeratorCallback` signature (see <a href=\"#api_nan_property_enumerator\">Property enumerator declaration</a>)\n  535  \n  536: Signature:\n  537  \n  538  ```c++\n  539: void SetNamedPropertyHandler(v8::Local<v8::ObjectTemplate> tpl,\n  540                               Nan::PropertyGetterCallback getter,\n  541:                              Nan::PropertySetterCallback setter = 0,\n  542                               Nan::PropertyQueryCallback query = 0,\n  543                               Nan::PropertyDeleterCallback deleter = 0,\n  ...\n  546  ```\n  547  \n  548: See the V8 [`ObjectTemplate#SetNamedPropertyHandler()`](https://v8docs.nodesource.com/io.js-3.0/db/d5f/classv8_1_1_object_template.html#a34d1cc45b642cd131706663801aadd76) for further information about how to use `Nan::SetNamedPropertyHandler()`.\n  549  \n  550: <a name=\"api_nan_set_indexed_property_handler\"></a>\n  551: ### Nan::SetIndexedPropertyHandler()\n  552  \n  553: Sets indexed property getters, setters, query, deleter and enumerator methods on an `ObjectTemplate`. Accepts:\n  554  \n  555: * Indexed property getters with the `Nan::IndexGetterCallback` signature (see <a href=\"#api_nan_index_getter\">Index getter declaration</a>)\n  556: * Indexed property setters with the `Nan::IndexSetterCallback` signature (see <a href=\"#api_nan_index_setter\">Index setter declaration</a>)\n  557: * Indexed property query methods with the `Nan::IndexQueryCallback` signature (see <a href=\"#api_nan_index_query\">Index query declaration</a>)\n  558: * Indexed property deleters with the `Nan::IndexDeleterCallback` signature (see <a href=\"#api_nan_index_deleter\">Index deleter declaration</a>)\n  559: * Indexed property enumerators with the `Nan::IndexEnumeratorCallback` signature (see <a href=\"#api_nan_index_enumerator\">Index enumerator declaration</a>)\n  560  \n  561: Signature:\n  562  \n  563  ```c++\n  564: void SetIndexedPropertyHandler(v8::Local<v8::ObjectTemplate> tpl,\n  565                                 Nan::IndexGetterCallback getter,\n  566:                                Nan::IndexSetterCallback setter = 0,\n  567                                 Nan::IndexQueryCallback query = 0,\n  568                                 Nan::IndexDeleterCallback deleter = 0,\n  ...\n  571  ```\n  572  \n  573: See the V8 [`ObjectTemplate#SetIndexedPropertyHandler()`](https://v8docs.nodesource.com/io.js-3.0/db/d5f/classv8_1_1_object_template.html#ac0234cbede45d51778bb5f6a32a9e125) for further information about how to use `Nan::SetIndexedPropertyHandler()`.\n  574  \n  575: <a name=\"api_nan_set_template\"></a>\n  576: ### Nan::SetTemplate()\n  577  \n  578: Adds properties on an `Object`'s or `Function`'s template.\n  579  \n  580: Signature:\n  581  \n  582  ```c++\n  583: void Nan::SetTemplate(v8::Local<v8::Template> templ,\n  584:                       const char *name,\n  585                        v8::Local<v8::Data> value);\n  586: void Nan::SetTemplate(v8::Local<v8::Template> templ,\n  587:                       v8::Local<v8::String> name,\n  588                        v8::Local<v8::Data> value,\n  589:                       v8::PropertyAttribute attributes)\n  590  ```\n  591  \n  592: Calls the `Template`'s [`Set()`](https://v8docs.nodesource.com/io.js-3.0/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf).\n  593  \n  594: <a name=\"api_nan_set_prototype_template\"></a>\n  595: ### Nan::SetPrototypeTemplate()\n  596  \n  597: Adds properties on an `Object`'s or `Function`'s prototype template.\n  598  \n  599: Signature:\n  600  \n  601  ```c++\n  602: void Nan::SetPrototypeTemplate(v8::Local<v8::FunctionTemplate> templ,\n  603:                                const char *name,\n  604                                 v8::Local<v8::Data> value);\n  605: void Nan::SetPrototypeTemplate(v8::Local<v8::FunctionTemplate> templ,\n  606:                                v8::Local<v8::String> name,\n  607                                 v8::Local<v8::Data> value,\n  608:                                v8::PropertyAttribute attributes)\n  609  ```\n  610  \n  611: Calls the `FunctionTemplate`'s _PrototypeTemplate's_ [`Set()`](https://v8docs.nodesource.com/io.js-3.0/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf).\n  612  \n  613: <a name=\"api_nan_set_instance_template\"></a>\n  614: ### Nan::SetInstanceTemplate()\n  615  \n  616: Use to add instance properties on `FunctionTemplate`'s.\n  617  \n  618: Signature:\n  619  \n  620  ```c++\n  621: void Nan::SetInstanceTemplate(v8::Local<v8::FunctionTemplate> templ,\n  622:                               const char *name,\n  623                                v8::Local<v8::Data> value);\n  624: void Nan::SetInstanceTemplate(v8::Local<v8::FunctionTemplate> templ,\n  625:                               v8::Local<v8::String> name,\n  626                                v8::Local<v8::Data> value,\n  627:                               v8::PropertyAttribute attributes)\n  628  ```\n  629  \n  630: Calls the `FunctionTemplate`'s _InstanceTemplate's_ [`Set()`](https://v8docs.nodesource.com/io.js-3.0/db/df7/classv8_1_1_template.html#a2db6a56597bf23c59659c0659e564ddf).\n  631  \n  632: <a name=\"api_nan_set_call_handler\"></a>\n  633: ### Nan::SetCallHandler()\n  634  \n  635: Set the call-handler callback for a `v8::FunctionTemplate`.\n  636: This callback is called whenever the function created from this FunctionTemplate is called.\n  637  \n  638: Signature:\n  639  \n  640  ```c++\n  641: void Nan::SetCallHandler(v8::Local<v8::FunctionTemplate> templ, Nan::FunctionCallback callback, v8::Local<v8::Value> data = v8::Local<v8::Value>())\n  642  ```\n  643  \n  644: Calls the `FunctionTemplate`'s [`SetCallHandler()`](https://v8docs.nodesource.com/io.js-3.0/d8/d83/classv8_1_1_function_template.html#a26cf14e36aa1a47091b98536d08ea821).\n  645  \n  646: <a name=\"api_nan_set_call_as_function_handler\"></a>\n  647: ### Nan::SetCallAsFunctionHandler()\n  648  \n  649: Sets the callback to be used when calling instances created from the `v8::ObjectTemplate` as a function.\n  650: If no callback is set, instances behave like normal JavaScript objects that cannot be called as a function.\n  651  \n  652: Signature:\n  653  \n  654  ```c++\n  655: void Nan::SetCallAsFunctionHandler(v8::Local<v8::ObjectTemplate> templ, Nan::FunctionCallback callback, v8::Local<v8::Value> data = v8::Local<v8::Value>())\n  656  ```\n  657  \n  658: Calls the `ObjectTemplate`'s [`SetCallAsFunctionHandler()`](https://v8docs.nodesource.com/io.js-3.0/db/d5f/classv8_1_1_object_template.html#ae0a0e72fb0c5e5f32e255fe5bcc7316a).\n  659  \n  660  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/new.md:\n    1  ## New\n    2  \n    3: NAN provides a `Nan::New()` helper for the creation of new JavaScript objects in a way that's compatible across the supported versions of V8.\n    4  \n    5   - <a href=\"#api_nan_new\"><b><code>Nan::New()</code></b></a>\n    .\n    7   - <a href=\"#api_nan_null\"><b><code>Nan::Null()</code></b></a>\n    8   - <a href=\"#api_nan_true\"><b><code>Nan::True()</code></b></a>\n    9:  - <a href=\"#api_nan_false\"><b><code>Nan::False()</code></b></a>\n   10:  - <a href=\"#api_nan_empty_string\"><b><code>Nan::EmptyString()</code></b></a>\n   11  \n   12  \n   ..\n   14  ### Nan::New()\n   15  \n   16: `Nan::New()` should be used to instantiate new JavaScript objects.\n   17  \n   18: Refer to the specific V8 type in the [V8 documentation](https://v8docs.nodesource.com/io.js-3.0/d1/d83/classv8_1_1_data.html) for information on the types of arguments required for instantiation.\n   19  \n   20: Signatures:\n   21  \n   22: Return types are mostly omitted from the signatures for simplicity. In most cases the type will be contained within a `v8::Local<T>`. The following types will be contained within a `Nan::MaybeLocal<T>`: `v8::String`, `v8::Date`, `v8::RegExp`, `v8::Script`, `v8::UnboundScript`.\n   23  \n   24: Empty objects:\n   25  \n   26  ```c++\n   ..\n   28  ```\n   29  \n   30: Generic single and multiple-argument:\n   31  \n   32  ```c++\n   ..\n   37  ```\n   38  \n   39: For creating `v8::FunctionTemplate` and `v8::Function` objects:\n   40  \n   41: _The definition of `Nan::FunctionCallback` can be found in the [Method declaration](./methods.md#api_nan_method) documentation._\n   42  \n   43  ```c++\n   ..\n   49  ```\n   50  \n   51: Native number types:\n   52  \n   53  ```c++\n   ..\n   58  ```\n   59  \n   60: String types:\n   61  \n   62  ```c++\n   63: Nan::MaybeLocal<v8::String> Nan::New<T>(std::string const& value);\n   64: Nan::MaybeLocal<v8::String> Nan::New<T>(const char * value, int length);\n   65: Nan::MaybeLocal<v8::String> Nan::New<T>(const char * value);\n   66: Nan::MaybeLocal<v8::String> Nan::New<T>(const uint16_t * value);\n   67: Nan::MaybeLocal<v8::String> Nan::New<T>(const uint16_t * value, int length);\n   68  ```\n   69  \n   70: Specialized types:\n   71  \n   72  ```c++\n   73: v8::Local<v8::String> Nan::New<T>(v8::String::ExternalStringResource * value);\n   74: v8::Local<v8::String> Nan::New<T>(Nan::ExternalOneByteStringResource * value);\n   75: v8::Local<v8::RegExp> Nan::New<T>(v8::Local<v8::String> pattern, v8::RegExp::Flags flags);\n   76  ```\n   77  \n   78: Note that `Nan::ExternalOneByteStringResource` maps to [`v8::String::ExternalOneByteStringResource`](https://v8docs.nodesource.com/io.js-3.0/d9/db3/classv8_1_1_string_1_1_external_one_byte_string_resource.html), and `v8::String::ExternalAsciiStringResource` in older versions of V8.\n   79  \n   80  \n   ..\n   82  ### Nan::Undefined()\n   83  \n   84: A helper method to reference the `v8::Undefined` object in a way that is compatible across all supported versions of V8.\n   85  \n   86: Signature:\n   87  \n   88  ```c++\n   ..\n   93  ### Nan::Null()\n   94  \n   95: A helper method to reference the `v8::Null` object in a way that is compatible across all supported versions of V8.\n   96  \n   97: Signature:\n   98  \n   99  ```c++\n  ...\n  104  ### Nan::True()\n  105  \n  106: A helper method to reference the `v8::Boolean` object representing the `true` value in a way that is compatible across all supported versions of V8.\n  107  \n  108: Signature:\n  109  \n  110  ```c++\n  ...\n  112  ```\n  113  \n  114: <a name=\"api_nan_false\"></a>\n  115: ### Nan::False()\n  116  \n  117: A helper method to reference the `v8::Boolean` object representing the `false` value in a way that is compatible across all supported versions of V8.\n  118  \n  119: Signature:\n  120  \n  121  ```c++\n  122: v8::Local<v8::Boolean> Nan::False()\n  123  ```\n  124  \n  125: <a name=\"api_nan_empty_string\"></a>\n  126: ### Nan::EmptyString()\n  127  \n  128: Call [`v8::String::Empty`](https://v8docs.nodesource.com/io.js-3.0/d2/db3/classv8_1_1_string.html#a7c1bc8886115d7ee46f1d571dd6ebc6d) to reference the empty string in a way that is compatible across all supported versions of V8.\n  129  \n  130: Signature:\n  131  \n  132  ```c++\n  133: v8::Local<v8::String> Nan::EmptyString()\n  134  ```\n  135  \n  136  \n  137: <a name=\"api_nan_new_one_byte_string\"></a>\n  138: ### Nan::NewOneByteString()\n  139  \n  140: An implementation of [`v8::String::NewFromOneByte()`](https://v8docs.nodesource.com/io.js-3.0/d2/db3/classv8_1_1_string.html#a5264d50b96d2c896ce525a734dc10f09) provided for consistent availability and API across supported versions of V8. Allocates a new string from Latin-1 data.\n  141  \n  142: Signature:\n  143  \n  144  ```c++\n  145: Nan::MaybeLocal<v8::String> Nan::NewOneByteString(const uint8_t * value,\n  146                                                    int length = -1)\n  147  ```\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/node_misc.md:\n    1: ## Miscellaneous Node Helpers\n    2  \n    3   - <a href=\"#api_nan_make_callback\"><b><code>Nan::MakeCallback()</code></b></a>\n    .\n    9  ### Nan::MakeCallback()\n   10  \n   11: Wrappers around `node::MakeCallback()` providing a consistent API across all supported versions of Node.\n   12  \n   13: Use `MakeCallback()` rather than using `v8::Function#Call()` directly in order to properly process internal Node functionality including domains, async hooks, the microtask queue, and other debugging functionality.\n   14  \n   15: Signatures:\n   16  \n   17  ```c++\n   ..\n   21                                         v8::Local<v8::Value>* argv);\n   22  v8::Local<v8::Value> Nan::MakeCallback(v8::Local<v8::Object> target,\n   23:                                        v8::Local<v8::String> symbol,\n   24                                         int argc,\n   25                                         v8::Local<v8::Value>* argv);\n   26  v8::Local<v8::Value> Nan::MakeCallback(v8::Local<v8::Object> target,\n   27:                                        const char* method,\n   28                                         int argc,\n   29                                         v8::Local<v8::Value>* argv);\n   ..\n   34  ### NAN_MODULE_INIT()\n   35  \n   36: Used to define the entry point function to a Node add-on. Creates a function with a given `name` that receives a `target` object representing the equivalent of the JavaScript `exports` object.\n   37  \n   38: See example below.\n   39  \n   40  <a name=\"api_nan_export\"></a>\n   41  ### Nan::Export()\n   42  \n   43: A simple helper to register a `v8::FunctionTemplate` from a JavaScript-accessible method (see [Methods](./methods.md)) as a property on an object. Can be used in a way similar to assigning properties to `module.exports` in JavaScript.\n   44  \n   45: Signature:\n   46  \n   47  ```c++\n   48: void Export(v8::Local<v8::Object> target, const char *name, Nan::FunctionCallback f)\n   49  ```\n   50  \n   51: Also available as the shortcut `NAN_EXPORT` macro.\n   52  \n   53  Example:\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/object_wrappers.md:\n    1: ## Object Wrappers\n    2  \n    3: The `ObjectWrap` class can be used to make wrapped C++ objects and a factory of wrapped objects.\n    4  \n    5   - <a href=\"#api_nan_object_wrap\"><b><code>Nan::ObjectWrap</code></b></a>\n    .\n    9  ### Nan::ObjectWrap()\n   10  \n   11: A reimplementation of `node::ObjectWrap` that adds some API not present in older versions of Node. Should be preferred over `node::ObjectWrap` in all cases for consistency.\n   12  \n   13  Definition:\n   14  \n   15  ```c++\n   16: class ObjectWrap {\n   17   public:\n   18    ObjectWrap();\n   ..\n   20    virtual ~ObjectWrap();\n   21  \n   22:   template <class T>\n   23:   static inline T* Unwrap(v8::Local<v8::Object> handle);\n   24  \n   25    inline v8::Local<v8::Object> handle();\n   26  \n   27:   inline Nan::Persistent<v8::Object>& persistent();\n   28  \n   29   protected:\n   ..\n   32    inline void MakeWeak();\n   33  \n   34:   /* Ref() marks the object as being attached to an event loop.\n   35:    * Refed objects will not be garbage collected, even if\n   36:    * all references are lost.\n   37     */\n   38    virtual void Ref();\n   39  \n   40:   /* Unref() marks an object as detached from the event loop.  This is its\n   41:    * default state.  When an object with a \"weak\" reference changes from\n   42:    * attached to detached state it will be freed. Be careful not to access\n   43:    * the object after making this call as it might be gone!\n   44:    * (A \"weak reference\" means an object that only has a\n   45:    * persistant handle.)\n   46     *\n   47:    * DO NOT CALL THIS FROM DESTRUCTOR\n   48     */\n   49    virtual void Unref();\n   50  \n   51:   int refs_;  // ro\n   52  };\n   53  ```\n   54  \n   55: See the Node documentation on [Wrapping C++ Objects](https://nodejs.org/api/addons.html#addons_wrapping_c_objects) for more details.\n   56  \n   57: ### This vs. Holder\n   58  \n   59: When calling `Unwrap`, it is important that the argument is indeed some JavaScript object which got wrapped by a `Wrap` call for this class or any derived class.\n   60: The `Signature` installed by [`Nan::SetPrototypeMethod()`](methods.md#api_nan_set_prototype_method) does ensure that `info.Holder()` is just such an instance.\n   61: In Node 0.12 and later, `info.This()` will also be of such a type, since otherwise the invocation will get rejected.\n   62: However, in Node 0.10 and before it was possible to invoke a method on a JavaScript object which just had the extension type in its prototype chain.\n   63: In such a situation, calling `Unwrap` on `info.This()` will likely lead to a failed assertion causing a crash, but could lead to even more serious corruption.\n   64  \n   65: On the other hand, calling `Unwrap` in an [accessor](methods.md#api_nan_set_accessor) should not use `Holder()` if the accessor is defined on the prototype.\n   66: So either define your accessors on the instance template,\n   67: or use `This()` after verifying that it is indeed a valid object.\n   68  \n   69: ### Examples\n   70  \n   71: #### Basic\n   72  \n   73  ```c++\n   74: class MyObject : public Nan::ObjectWrap {\n   75   public:\n   76:   static NAN_MODULE_INIT(Init) {\n   77      v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);\n   78:     tpl->SetClassName(Nan::New(\"MyObject\").ToLocalChecked());\n   79:     tpl->InstanceTemplate()->SetInternalFieldCount(1);\n   80  \n   81:     SetPrototypeMethod(tpl, \"getHandle\", GetHandle);\n   82:     SetPrototypeMethod(tpl, \"getValue\", GetValue);\n   83  \n   84:     constructor().Reset(Nan::GetFunction(tpl).ToLocalChecked());\n   85:     Nan::Set(target, Nan::New(\"MyObject\").ToLocalChecked(),\n   86        Nan::GetFunction(tpl).ToLocalChecked());\n   87    }\n   ..\n   91    ~MyObject() {}\n   92  \n   93:   static NAN_METHOD(New) {\n   94:     if (info.IsConstructCall()) {\n   95:       double value = info[0]->IsUndefined() ? 0 : Nan::To<double>(info[0]).FromJust();\n   96        MyObject *obj = new MyObject(value);\n   97:       obj->Wrap(info.This());\n   98:       info.GetReturnValue().Set(info.This());\n   99:     } else {\n  100:       const int argc = 1;\n  101        v8::Local<v8::Value> argv[argc] = {info[0]};\n  102:       v8::Local<v8::Function> cons = Nan::New(constructor());\n  103:       info.GetReturnValue().Set(cons->NewInstance(argc, argv));\n  104      }\n  105    }\n  106  \n  107:   static NAN_METHOD(GetHandle) {\n  108      MyObject* obj = Nan::ObjectWrap::Unwrap<MyObject>(info.Holder());\n  109:     info.GetReturnValue().Set(obj->handle());\n  110    }\n  111  \n  112:   static NAN_METHOD(GetValue) {\n  113      MyObject* obj = Nan::ObjectWrap::Unwrap<MyObject>(info.Holder());\n  114:     info.GetReturnValue().Set(obj->value_);\n  115    }\n  116  \n  117:   static inline Nan::Persistent<v8::Function> & constructor() {\n  118:     static Nan::Persistent<v8::Function> my_constructor;\n  119:     return my_constructor;\n  120    }\n  121  \n  ...\n  126  ```\n  127  \n  128: To use in Javascript:\n  129  \n  130: ```Javascript\n  131: var objectwrapper = require('bindings')('objectwrapper');\n  132  \n  133  var obj = new objectwrapper.MyObject(5);\n  134: console.log('Should be 5: ' + obj.getValue());\n  135  ```\n  136  \n  137: #### Factory of wrapped objects\n  138  \n  139  ```c++\n  140: class MyFactoryObject : public Nan::ObjectWrap {\n  141   public:\n  142:   static NAN_MODULE_INIT(Init) {\n  143      v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);\n  144:     tpl->InstanceTemplate()->SetInternalFieldCount(1);\n  145  \n  146:     Nan::SetPrototypeMethod(tpl, \"getValue\", GetValue);\n  147  \n  148:     constructor().Reset(Nan::GetFunction(tpl).ToLocalChecked());\n  149    }\n  150  \n  151:   static NAN_METHOD(NewInstance) {\n  152:     v8::Local<v8::Function> cons = Nan::New(constructor());\n  153:     double value = info[0]->IsNumber() ? Nan::To<double>(info[0]).FromJust() : 0;\n  154:     const int argc = 1;\n  155      v8::Local<v8::Value> argv[1] = {Nan::New(value)};\n  156:     info.GetReturnValue().Set(Nan::NewInstance(cons, argc, argv).ToLocalChecked());\n  157    }\n  158  \n  159    // Needed for the next example:\n  160:   inline double value() const {\n  161      return value_;\n  162    }\n  ...\n  166    ~MyFactoryObject() {}\n  167  \n  168:   static NAN_METHOD(New) {\n  169:     if (info.IsConstructCall()) {\n  170:       double value = info[0]->IsNumber() ? Nan::To<double>(info[0]).FromJust() : 0;\n  171        MyFactoryObject * obj = new MyFactoryObject(value);\n  172:       obj->Wrap(info.This());\n  173:       info.GetReturnValue().Set(info.This());\n  174:     } else {\n  175:       const int argc = 1;\n  176        v8::Local<v8::Value> argv[argc] = {info[0]};\n  177:       v8::Local<v8::Function> cons = Nan::New(constructor());\n  178:       info.GetReturnValue().Set(Nan::NewInstance(cons, argc, argv).ToLocalChecked());\n  179      }\n  180    }\n  181  \n  182:   static NAN_METHOD(GetValue) {\n  183      MyFactoryObject* obj = ObjectWrap::Unwrap<MyFactoryObject>(info.Holder());\n  184:     info.GetReturnValue().Set(obj->value_);\n  185    }\n  186  \n  187:   static inline Nan::Persistent<v8::Function> & constructor() {\n  188:     static Nan::Persistent<v8::Function> my_constructor;\n  189:     return my_constructor;\n  190    }\n  191  \n  ...\n  195  NAN_MODULE_INIT(Init) {\n  196    MyFactoryObject::Init(target);\n  197:   Nan::Set(target,\n  198:     Nan::New<v8::String>(\"newFactoryObjectInstance\").ToLocalChecked(),\n  199      Nan::GetFunction(\n  200:       Nan::New<v8::FunctionTemplate>(MyFactoryObject::NewInstance)).ToLocalChecked()\n  201    );\n  202  }\n  ...\n  205  ```\n  206  \n  207: To use in Javascript:\n  208  \n  209: ```Javascript\n  210: var wrappedobjectfactory = require('bindings')('wrappedobjectfactory');\n  211  \n  212: var obj = wrappedobjectfactory.newFactoryObjectInstance(10);\n  213: console.log('Should be 10: ' + obj.getValue());\n  214  ```\n  215  \n  216: #### Passing wrapped objects around\n  217  \n  218: Use the `MyFactoryObject` class above along with the following:\n  219  \n  220  ```c++\n  221: static NAN_METHOD(Sum) {\n  222    Nan::MaybeLocal<v8::Object> maybe1 = Nan::To<v8::Object>(info[0]);\n  223    Nan::MaybeLocal<v8::Object> maybe2 = Nan::To<v8::Object>(info[1]);\n  224  \n  225    // Quick check:\n  226:   if (maybe1.IsEmpty() || maybe2.IsEmpty()) {\n  227:     // return value is undefined by default\n  228      return;\n  229    }\n  ...\n  234      Nan::ObjectWrap::Unwrap<MyFactoryObject>(maybe2.ToLocalChecked());\n  235  \n  236:   info.GetReturnValue().Set(Nan::New<v8::Number>(obj1->value() + obj2->value()));\n  237  }\n  238  \n  239  NAN_MODULE_INIT(Init) {\n  240    MyFactoryObject::Init(target);\n  241:   Nan::Set(target,\n  242:     Nan::New<v8::String>(\"newFactoryObjectInstance\").ToLocalChecked(),\n  243      Nan::GetFunction(\n  244:       Nan::New<v8::FunctionTemplate>(MyFactoryObject::NewInstance)).ToLocalChecked()\n  245    );\n  246:   Nan::Set(target,\n  247:     Nan::New<v8::String>(\"sum\").ToLocalChecked(),\n  248:     Nan::GetFunction(Nan::New<v8::FunctionTemplate>(Sum)).ToLocalChecked()\n  249    );\n  250  }\n  ...\n  253  ```\n  254  \n  255: To use in Javascript:\n  256  \n  257: ```Javascript\n  258: var myaddon = require('bindings')('myaddon');\n  259  \n  260: var obj1 = myaddon.newFactoryObjectInstance(5);\n  261: var obj2 = myaddon.newFactoryObjectInstance(10);\n  262: console.log('sum of object values: ' + myaddon.sum(obj1, obj2));\n  263  ```\n  264  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/persistent.md:\n    1: ## Persistent references\n    2  \n    3: An object reference that is independent of any `HandleScope` is a _persistent_ reference. Where a `Local` handle only lives as long as the `HandleScope` in which it was allocated, a `Persistent` handle remains valid until it is explicitly disposed.\n    4  \n    5: Due to the evolution of the V8 API, it is necessary for NAN to provide a wrapper implementation of the `Persistent` classes to supply compatibility across the V8 versions supported.\n    6  \n    7:  - <a href=\"#api_nan_persistent_base\"><b><code>Nan::PersistentBase & v8::PersistentBase</code></b></a>\n    8:  - <a href=\"#api_nan_non_copyable_persistent_traits\"><b><code>Nan::NonCopyablePersistentTraits & v8::NonCopyablePersistentTraits</code></b></a>\n    9:  - <a href=\"#api_nan_copyable_persistent_traits\"><b><code>Nan::CopyablePersistentTraits & v8::CopyablePersistentTraits</code></b></a>\n   10:  - <a href=\"#api_nan_persistent\"><b><code>Nan::Persistent</code></b></a>\n   11   - <a href=\"#api_nan_global\"><b><code>Nan::Global</code></b></a>\n   12   - <a href=\"#api_nan_weak_callback_info\"><b><code>Nan::WeakCallbackInfo</code></b></a>\n   13   - <a href=\"#api_nan_weak_callback_type\"><b><code>Nan::WeakCallbackType</code></b></a>\n   14  \n   15: Also see the V8 Embedders Guide section on [Handles and Garbage Collection](https://developers.google.com/v8/embed#handles).\n   16  \n   17: <a name=\"api_nan_persistent_base\"></a>\n   18: ### Nan::PersistentBase & v8::PersistentBase\n   19  \n   20: A persistent handle contains a reference to a storage cell in V8 which holds an object value and which is updated by the garbage collector whenever the object is moved. A new storage cell can be created using the constructor or `Nan::PersistentBase::Reset()`. Existing handles can be disposed using an argument-less `Nan::PersistentBase::Reset()`.\n   21  \n   22  Definition:\n   23  \n   24: _(note: this is implemented as `Nan::PersistentBase` for older versions of V8 and the native `v8::PersistentBase` is used for newer versions of V8)_\n   25  \n   26  ```c++\n   27: template<typename T> class PersistentBase {\n   28   public:\n   29    /**\n   30:    * If non-empty, destroy the underlying storage cell\n   31     */\n   32:   void Reset();\n   33  \n   34    /**\n   35:    * If non-empty, destroy the underlying storage cell and create a new one with\n   36:    * the contents of another if it is also non-empty\n   37     */\n   38:   template<typename S> void Reset(const v8::Local<S> &other);\n   39  \n   40    /**\n   41:    * If non-empty, destroy the underlying storage cell and create a new one with\n   42:    * the contents of another if it is also non-empty\n   43     */\n   44:   template<typename S> void Reset(const PersistentBase<S> &other);\n   45  \n   46    /**\n   47:    * If non-empty, destroy the underlying storage cell\n   48:    * IsEmpty() will return true after this call.\n   49     */\n   50:   bool IsEmpty();\n   51  \n   52    void Empty();\n   53  \n   54:   template<typename S> bool operator==(const PersistentBase<S> &that);\n   55  \n   56:   template<typename S> bool operator==(const v8::Local<S> &that);\n   57  \n   58:   template<typename S> bool operator!=(const PersistentBase<S> &that);\n   59  \n   60:   template<typename S> bool operator!=(const v8::Local<S> &that);\n   61  \n   62     /**\n   63:    *  Install a finalization callback on this object.\n   64:    *  NOTE: There is no guarantee as to *when* or even *if* the callback is\n   65:    *  invoked. The invocation is performed solely on a best effort basis.\n   66:    *  As always, GC-based finalization should *not* be relied upon for any\n   67:    *  critical form of resource management! At the moment you can either\n   68:    *  specify a parameter for the callback or the location of two internal\n   69:    *  fields in the dying object.\n   70     */\n   71    template<typename P>\n   72:   void SetWeak(P *parameter,\n   73                 typename WeakCallbackInfo<P>::Callback callback,\n   74                 WeakCallbackType type);\n   ..\n   77  \n   78    /**\n   79:    * Marks the reference to this object independent. Garbage collector is free\n   80:    * to ignore any object groups containing this object. Weak callback for an\n   81:    * independent handle should not assume that it will be preceded by a global\n   82     * GC prologue callback or followed by a global GC epilogue callback.\n   83     */\n   84:   void MarkIndependent() const;\n   85  \n   86:   bool IsIndependent() const;\n   87  \n   88:   /** Checks if the handle holds the only reference to an object. */\n   89:   bool IsNearDeath() const;\n   90  \n   91:   /** Returns true if the handle's reference is weak.  */\n   92:   bool IsWeak() const\n   93  };\n   94  ```\n   95  \n   96: See the V8 documentation for [`PersistentBase`](https://v8docs.nodesource.com/io.js-3.0/d4/dca/classv8_1_1_persistent_base.html) for further information.\n   97  \n   98: **Tip:** To get a `v8::Local` reference to the original object back from a `PersistentBase` or `Persistent` object:\n   99  \n  100  ```c++\n  101: v8::Local<v8::Object> object = Nan::New(persistent);\n  102  ```\n  103  \n  104: <a name=\"api_nan_non_copyable_persistent_traits\"></a>\n  105: ### Nan::NonCopyablePersistentTraits & v8::NonCopyablePersistentTraits\n  106  \n  107: Default traits for `Nan::Persistent`. This class does not allow use of the a copy constructor or assignment operator. At present `kResetInDestructor` is not set, but that will change in a future version.\n  108  \n  109  Definition:\n  110  \n  111: _(note: this is implemented as `Nan::NonCopyablePersistentTraits` for older versions of V8 and the native `v8::NonCopyablePersistentTraits` is used for newer versions of V8)_\n  112  \n  113  ```c++\n  114: template<typename T> class NonCopyablePersistentTraits {\n  115   public:\n  116:   typedef Persistent<T, NonCopyablePersistentTraits<T> > NonCopyablePersistent;\n  117  \n  118:   static const bool kResetInDestructor = false;\n  119  \n  120:   template<typename S, typename M>\n  121:   static void Copy(const Persistent<S, M> &source,\n  122:                    NonCopyablePersistent *dest);\n  123  \n  124:   template<typename O> static void Uncompilable();\n  125  };\n  126  ```\n  127  \n  128: See the V8 documentation for [`NonCopyablePersistentTraits`](https://v8docs.nodesource.com/io.js-3.0/de/d73/classv8_1_1_non_copyable_persistent_traits.html) for further information.\n  129  \n  130: <a name=\"api_nan_copyable_persistent_traits\"></a>\n  131: ### Nan::CopyablePersistentTraits & v8::CopyablePersistentTraits\n  132  \n  133: A helper class of traits to allow copying and assignment of `Persistent`. This will clone the contents of storage cell, but not any of the flags, etc..\n  134  \n  135  Definition:\n  136  \n  137: _(note: this is implemented as `Nan::CopyablePersistentTraits` for older versions of V8 and the native `v8::NonCopyablePersistentTraits` is used for newer versions of V8)_\n  138  \n  139  ```c++\n  140  template<typename T>\n  141: class CopyablePersistentTraits {\n  142   public:\n  143:   typedef Persistent<T, CopyablePersistentTraits<T> > CopyablePersistent;\n  144  \n  145:   static const bool kResetInDestructor = true;\n  146  \n  147:   template<typename S, typename M>\n  148:   static void Copy(const Persistent<S, M> &source,\n  149:                    CopyablePersistent *dest);\n  150  };\n  151  ```\n  152  \n  153: See the V8 documentation for [`CopyablePersistentTraits`](https://v8docs.nodesource.com/io.js-3.0/da/d5c/structv8_1_1_copyable_persistent_traits.html) for further information.\n  154  \n  155: <a name=\"api_nan_persistent\"></a>\n  156: ### Nan::Persistent\n  157  \n  158: A type of `PersistentBase` which allows copy and assignment. Copy, assignment and destructor behavior is controlled by the traits class `M`.\n  159  \n  160  Definition:\n  161  \n  162  ```c++\n  163: template<typename T, typename M = NonCopyablePersistentTraits<T> >\n  164: class Persistent;\n  165  \n  166: template<typename T, typename M> class Persistent : public PersistentBase<T> {\n  167   public:\n  168   /**\n  169:   * A Persistent with no storage cell.\n  170    */\n  171:   Persistent();\n  172  \n  173    /**\n  174:    * Construct a Persistent from a v8::Local. When the v8::Local is non-empty, a\n  175:    * new storage cell is created pointing to the same object, and no flags are\n  176:    * set.\n  177     */\n  178:   template<typename S> Persistent(v8::Local<S> that);\n  179  \n  180    /**\n  181:    * Construct a Persistent from a Persistent. When the Persistent is non-empty,\n  182:    * a new storage cell is created pointing to the same object, and no flags are\n  183:    * set.\n  184     */\n  185:   Persistent(const Persistent &that);\n  186  \n  187    /**\n  188:    * The copy constructors and assignment operator create a Persistent exactly\n  189:    * as the Persistent constructor, but the Copy function from the traits class\n  190:    * is called, allowing the setting of flags based on the copied Persistent.\n  191     */\n  192:   Persistent &operator=(const Persistent &that);\n  193  \n  194:   template <typename S, typename M2>\n  195:   Persistent &operator=(const Persistent<S, M2> &that);\n  196  \n  197    /**\n  198:    * The destructor will dispose the Persistent based on the kResetInDestructor\n  199:    * flags in the traits class.  Since not calling dispose can result in a\n  200:    * memory leak, it is recommended to always set this flag.\n  201     */\n  202:   ~Persistent();\n  203  };\n  204  ```\n  205  \n  206: See the V8 documentation for [`Persistent`](https://v8docs.nodesource.com/io.js-3.0/d2/d78/classv8_1_1_persistent.html) for further information.\n  207  \n  208  <a name=\"api_nan_global\"></a>\n  209  ### Nan::Global\n  210  \n  211: A type of `PersistentBase` which has move semantics.\n  212  \n  213  ```c++\n  214: template<typename T> class Global : public PersistentBase<T> {\n  215   public:\n  216    /**\n  217:    * A Global with no storage cell.\n  218     */\n  219    Global();\n  220  \n  221    /**\n  222:    * Construct a Global from a v8::Local. When the v8::Local is non-empty, a new\n  223:    * storage cell is created pointing to the same object, and no flags are set.\n  224     */\n  225:   template<typename S> Global(v8::Local<S> that);\n  226    /**\n  227:    * Construct a Global from a PersistentBase. When the Persistent is non-empty,\n  228:    * a new storage cell is created pointing to the same object, and no flags are\n  229:    * set.\n  230     */\n  231:   template<typename S> Global(const PersistentBase<S> &that);\n  232  \n  233    /**\n  234:    * Pass allows returning globals from functions, etc.\n  235     */\n  236:   Global Pass();\n  237  };\n  238  ```\n  239  \n  240: See the V8 documentation for [`Global`](https://v8docs.nodesource.com/io.js-3.0/d5/d40/classv8_1_1_global.html) for further information.\n  241  \n  242  <a name=\"api_nan_weak_callback_info\"></a>\n  243  ### Nan::WeakCallbackInfo\n  244  \n  245: `Nan::WeakCallbackInfo` is used as an argument when setting a persistent reference as weak. You may need to free any external resources attached to the object. It is a mirror of `v8:WeakCallbackInfo` as found in newer versions of V8.\n  246  \n  247  Definition:\n  248  \n  249  ```c++\n  250: template<typename T> class WeakCallbackInfo {\n  251   public:\n  252:   typedef void (*Callback)(const WeakCallbackInfo<T>& data);\n  253  \n  254:   v8::Isolate *GetIsolate() const;\n  255  \n  256    /**\n  257:    * Get the parameter that was associated with the weak handle.\n  258     */\n  259:   T *GetParameter() const;\n  260  \n  261    /**\n  262     * Get pointer from internal field, index can be 0 or 1.\n  263     */\n  264:   void *GetInternalField(int index) const;\n  265  };\n  266  ```\n  267  \n  268: Example usage:\n  269  \n  270  ```c++\n  271: void weakCallback(const WeakCallbackInfo<int> &data) {\n  272    int *parameter = data.GetParameter();\n  273    delete parameter;\n  274  }\n  275  \n  276: Persistent<v8::Object> obj;\n  277  int *data = new int(0);\n  278: obj.SetWeak(data, callback, WeakCallbackType::kParameter);\n  279  ```\n  280  \n  281: See the V8 documentation for [`WeakCallbackInfo`](https://v8docs.nodesource.com/io.js-3.0/d8/d06/classv8_1_1_weak_callback_info.html) for further information.\n  282  \n  283  <a name=\"api_nan_weak_callback_type\"></a>\n  284  ### Nan::WeakCallbackType\n  285  \n  286: Represents the type of a weak callback.\n  287: A weak callback of type `kParameter` makes the supplied parameter to `Nan::PersistentBase::SetWeak` available through `WeakCallbackInfo::GetParameter`.\n  288: A weak callback of type `kInternalFields` uses up to two internal fields at indices 0 and 1 on the `Nan::PersistentBase<v8::Object>` being made weak.\n  289: Note that only `v8::Object`s and derivatives can have internal fields.\n  290  \n  291  Definition:\n  292  \n  293  ```c++\n  294: enum class WeakCallbackType { kParameter, kInternalFields };\n  295  ```\n  296  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/scopes.md:\n    1: ## Scopes\n    2  \n    3: A _local handle_ is a pointer to an object. All V8 objects are accessed using handles, they are necessary because of the way the V8 garbage collector works.\n    4  \n    5: A handle scope can be thought of as a container for any number of handles. When you've finished with your handles, instead of deleting each one individually you can simply delete their scope.\n    6  \n    7: The creation of `HandleScope` objects is different across the supported versions of V8. Therefore, NAN provides its own implementations that can be used safely across these.\n    8  \n    9:  - <a href=\"#api_nan_handle_scope\"><b><code>Nan::HandleScope</code></b></a>\n   10:  - <a href=\"#api_nan_escapable_handle_scope\"><b><code>Nan::EscapableHandleScope</code></b></a>\n   11  \n   12: Also see the V8 Embedders Guide section on [Handles and Garbage Collection](https://developers.google.com/v8/embed#handles).\n   13  \n   14: <a name=\"api_nan_handle_scope\"></a>\n   15: ### Nan::HandleScope\n   16  \n   17: A simple wrapper around [`v8::HandleScope`](https://v8docs.nodesource.com/io.js-3.0/d3/d95/classv8_1_1_handle_scope.html).\n   18  \n   19  Definition:\n   20  \n   21  ```c++\n   22: class Nan::HandleScope {\n   23   public:\n   24:   Nan::HandleScope();\n   25:   static int NumberOfHandles();\n   26  };\n   27  ```\n   28  \n   29: Allocate a new `Nan::HandleScope` whenever you are creating new V8 JavaScript objects. Note that an implicit `HandleScope` is created for you on JavaScript-accessible methods so you do not need to insert one yourself.\n   30  \n   31  Example:\n   32  \n   33  ```c++\n   34: // new object is created, it needs a new scope:\n   35: void Pointless() {\n   36:   Nan::HandleScope scope;\n   37    v8::Local<v8::Object> obj = Nan::New<v8::Object>();\n   38  }\n   39  \n   40: // JavaScript-accessible method already has a HandleScope\n   41: NAN_METHOD(Pointless2) {\n   42    v8::Local<v8::Object> obj = Nan::New<v8::Object>();\n   43  }\n   44  ```\n   45  \n   46: <a name=\"api_nan_escapable_handle_scope\"></a>\n   47: ### Nan::EscapableHandleScope\n   48  \n   49: Similar to [`Nan::HandleScope`](#api_nan_handle_scope) but should be used in cases where a function needs to return a V8 JavaScript type that has been created within it.\n   50  \n   51  Definition:\n   52  \n   53  ```c++\n   54: class Nan::EscapableHandleScope {\n   55   public:\n   56:   Nan::EscapableHandleScope();\n   57:   static int NumberOfHandles();\n   58:   template<typename T> v8::Local<T> Escape(v8::Local<T> value);\n   59  }\n   60  ```\n   61  \n   62: Use `Escape(value)` to return the object.\n   63  \n   64  Example:\n   ..\n   66  ```c++\n   67  v8::Local<v8::Object> EmptyObj() {\n   68:   Nan::EscapableHandleScope scope;\n   69    v8::Local<v8::Object> obj = Nan::New<v8::Object>();\n   70:   return scope.Escape(obj);\n   71  }\n   72  ```\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/script.md:\n    1: ## Script\n    2  \n    3: NAN provides a `v8::Script` helpers as the API has changed over the supported versions of V8.\n    4  \n    5:  - <a href=\"#api_nan_compile_script\"><b><code>Nan::CompileScript()</code></b></a>\n    6:  - <a href=\"#api_nan_run_script\"><b><code>Nan::RunScript()</code></b></a>\n    7  \n    8  \n    9: <a name=\"api_nan_compile_script\"></a>\n   10: ### Nan::CompileScript()\n   11  \n   12: A wrapper around [`v8::Script::Compile()`](https://v8docs.nodesource.com/io.js-3.0/da/da5/classv8_1_1_script_compiler.html#a93f5072a0db55d881b969e9fc98e564b).\n   13  \n   14: Note that `Nan::BoundScript` is an alias for `v8::Script`.\n   15  \n   16: Signature:\n   17  \n   18  ```c++\n   19: Nan::MaybeLocal<Nan::BoundScript> Nan::CompileScript(\n   20:     v8::Local<v8::String> s,\n   21:     const v8::ScriptOrigin& origin);\n   22: Nan::MaybeLocal<Nan::BoundScript> Nan::CompileScript(v8::Local<v8::String> s);\n   23  ```\n   24  \n   25  \n   26: <a name=\"api_nan_run_script\"></a>\n   27: ### Nan::RunScript()\n   28  \n   29: Calls `script->Run()` or `script->BindToCurrentContext()->Run(Nan::GetCurrentContext())`.\n   30  \n   31: Note that `Nan::BoundScript` is an alias for `v8::Script` and `Nan::UnboundScript` is an alias for `v8::UnboundScript` where available and `v8::Script` on older versions of V8.\n   32  \n   33: Signature:\n   34  \n   35  ```c++\n   36: Nan::MaybeLocal<v8::Value> Nan::RunScript(v8::Local<Nan::UnboundScript> script)\n   37: Nan::MaybeLocal<v8::Value> Nan::RunScript(v8::Local<Nan::BoundScript> script) \n   38  ```\n   39  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/string_bytes.md:\n    1: ## Strings & Bytes\n    2  \n    3: Miscellaneous string & byte encoding and decoding functionality provided for compatibility across supported versions of V8 and Node. Implemented by NAN to ensure that all encoding types are supported, even for older versions of Node where they are missing.\n    4  \n    5   - <a href=\"#api_nan_encoding\"><b><code>Nan::Encoding</code></b></a>\n    6   - <a href=\"#api_nan_encode\"><b><code>Nan::Encode()</code></b></a>\n    7:  - <a href=\"#api_nan_decode_bytes\"><b><code>Nan::DecodeBytes()</code></b></a>\n    8   - <a href=\"#api_nan_decode_write\"><b><code>Nan::DecodeWrite()</code></b></a>\n    9  \n   ..\n   12  ### Nan::Encoding\n   13  \n   14: An enum representing the supported encoding types. A copy of `node::encoding` that is consistent across versions of Node.\n   15  \n   16  Definition:\n   17  \n   18  ```c++\n   19: enum Nan::Encoding { ASCII, UTF8, BASE64, UCS2, BINARY, HEX, BUFFER }\n   20  ```\n   21  \n   ..\n   24  ### Nan::Encode()\n   25  \n   26: A wrapper around `node::Encode()` that provides a consistent implementation across supported versions of Node.\n   27  \n   28: Signature:\n   29  \n   30  ```c++\n   31: v8::Local<v8::Value> Nan::Encode(const void *buf,\n   32:                                  size_t len,\n   33                                   enum Nan::Encoding encoding = BINARY);\n   34  ```\n   35  \n   36  \n   37: <a name=\"api_nan_decode_bytes\"></a>\n   38: ### Nan::DecodeBytes()\n   39  \n   40: A wrapper around `node::DecodeBytes()` that provides a consistent implementation across supported versions of Node.\n   41  \n   42: Signature:\n   43  \n   44  ```c++\n   45: ssize_t Nan::DecodeBytes(v8::Local<v8::Value> val,\n   46                           enum Nan::Encoding encoding = BINARY);\n   47  ```\n   ..\n   51  ### Nan::DecodeWrite()\n   52  \n   53: A wrapper around `node::DecodeWrite()` that provides a consistent implementation across supported versions of Node.\n   54  \n   55: Signature:\n   56  \n   57  ```c++\n   58: ssize_t Nan::DecodeWrite(char *buf,\n   59:                          size_t len,\n   60                           v8::Local<v8::Value> val,\n   61                           enum Nan::Encoding encoding = BINARY);\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/v8_internals.md:\n    1: ## V8 internals\n    2  \n    3: The hooks to access V8 internals—including GC and statistics—are different across the supported versions of V8, therefore NAN provides its own hooks that call the appropriate V8 methods.\n    4  \n    5   - <a href=\"#api_nan_gc_callback\"><b><code>NAN_GC_CALLBACK()</code></b></a>\n    .\n    8   - <a href=\"#api_nan_add_gc_prologue_callback\"><b><code>Nan::AddGCPrologueCallback()</code></b></a>\n    9   - <a href=\"#api_nan_remove_gc_prologue_callback\"><b><code>Nan::RemoveGCPrologueCallback()</code></b></a>\n   10:  - <a href=\"#api_nan_get_heap_statistics\"><b><code>Nan::GetHeapStatistics()</code></b></a>\n   11:  - <a href=\"#api_nan_set_counter_function\"><b><code>Nan::SetCounterFunction()</code></b></a>\n   12:  - <a href=\"#api_nan_set_create_histogram_function\"><b><code>Nan::SetCreateHistogramFunction()</code></b></a>\n   13:  - <a href=\"#api_nan_set_add_histogram_sample_function\"><b><code>Nan::SetAddHistogramSampleFunction()</code></b></a>\n   14   - <a href=\"#api_nan_idle_notification\"><b><code>Nan::IdleNotification()</code></b></a>\n   15   - <a href=\"#api_nan_low_memory_notification\"><b><code>Nan::LowMemoryNotification()</code></b></a>\n   16:  - <a href=\"#api_nan_context_disposed_notification\"><b><code>Nan::ContextDisposedNotification()</code></b></a>\n   17   - <a href=\"#api_nan_get_internal_field_pointer\"><b><code>Nan::GetInternalFieldPointer()</code></b></a>\n   18:  - <a href=\"#api_nan_set_internal_field_pointer\"><b><code>Nan::SetInternalFieldPointer()</code></b></a>\n   19:  - <a href=\"#api_nan_adjust_external_memory\"><b><code>Nan::AdjustExternalMemory()</code></b></a>\n   20  \n   21  \n   ..\n   23  ### NAN_GC_CALLBACK(callbackname)\n   24  \n   25: Use `NAN_GC_CALLBACK` to declare your callbacks for `Nan::AddGCPrologueCallback()` and `Nan::AddGCEpilogueCallback()`. Your new method receives the arguments `v8::GCType type` and `v8::GCCallbackFlags flags`.\n   26  \n   27  ```c++\n   28: static Nan::Persistent<Function> callback;\n   29  \n   30  NAN_GC_CALLBACK(gcPrologueCallback) {\n   ..\n   34  \n   35  NAN_METHOD(Hook) {\n   36:   callback.Reset(args[0].As<Function>());\n   37    Nan::AddGCPrologueCallback(gcPrologueCallback);\n   38:   info.GetReturnValue().Set(info.Holder());\n   39  }\n   40  ```\n   ..\n   43  ### Nan::AddGCEpilogueCallback()\n   44  \n   45: Signature:\n   46  \n   47  ```c++\n   48: void Nan::AddGCEpilogueCallback(v8::Isolate::GCEpilogueCallback callback, v8::GCType gc_type_filter = v8::kGCTypeAll)\n   49  ```\n   50  \n   51: Calls V8's [`AddGCEpilogueCallback()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a90d1860babc76059c62514b422f56960).\n   52  \n   53  <a name=\"api_nan_remove_gc_epilogue_callback\"></a>\n   54  ### Nan::RemoveGCEpilogueCallback()\n   55  \n   56: Signature:\n   57  \n   58  ```c++\n   59: void Nan::RemoveGCEpilogueCallback(v8::Isolate::GCEpilogueCallback callback)\n   60  ```\n   61  \n   62: Calls V8's [`RemoveGCEpilogueCallback()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a05c60859fd4b8e96bfcd451281ed6c7c).\n   63  \n   64  <a name=\"api_nan_add_gc_prologue_callback\"></a>\n   65  ### Nan::AddGCPrologueCallback()\n   66  \n   67: Signature:\n   68  \n   69  ```c++\n   70: void Nan::AddGCPrologueCallback(v8::Isolate::GCPrologueCallback, v8::GCType gc_type_filter callback)\n   71  ```\n   72  \n   73: Calls V8's [`AddGCPrologueCallback()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#ab4b87b8f9f8e5bf95eba4009357e001f).\n   74  \n   75  <a name=\"api_nan_remove_gc_prologue_callback\"></a>\n   76  ### Nan::RemoveGCPrologueCallback()\n   77  \n   78: Signature:\n   79  \n   80  ```c++\n   81: void Nan::RemoveGCPrologueCallback(v8::Isolate::GCPrologueCallback callback)\n   82  ```\n   83  \n   84: Calls V8's [`RemoveGCEpilogueCallback()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a9f6c51932811593f81ff30b949124186).\n   85  \n   86: <a name=\"api_nan_get_heap_statistics\"></a>\n   87: ### Nan::GetHeapStatistics()\n   88  \n   89: Signature:\n   90  \n   91  ```c++\n   92: void Nan::GetHeapStatistics(v8::HeapStatistics *heap_statistics)\n   93  ```\n   94  \n   95: Calls V8's [`GetHeapStatistics()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a5593ac74687b713095c38987e5950b34).\n   96  \n   97: <a name=\"api_nan_set_counter_function\"></a>\n   98: ### Nan::SetCounterFunction()\n   99  \n  100: Signature:\n  101  \n  102  ```c++\n  103: void Nan::SetCounterFunction(v8::CounterLookupCallback cb)\n  104  ```\n  105  \n  106: Calls V8's [`SetCounterFunction()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a045d7754e62fa0ec72ae6c259b29af94).\n  107  \n  108: <a name=\"api_nan_set_create_histogram_function\"></a>\n  109: ### Nan::SetCreateHistogramFunction()\n  110  \n  111: Signature:\n  112  \n  113  ```c++\n  114: void Nan::SetCreateHistogramFunction(v8::CreateHistogramCallback cb) \n  115  ```\n  116  \n  117: Calls V8's [`SetCreateHistogramFunction()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a542d67e85089cb3f92aadf032f99e732).\n  118  \n  119: <a name=\"api_nan_set_add_histogram_sample_function\"></a>\n  120: ### Nan::SetAddHistogramSampleFunction()\n  121  \n  122: Signature:\n  123  \n  124  ```c++\n  125: void Nan::SetAddHistogramSampleFunction(v8::AddHistogramSampleCallback cb) \n  126  ```\n  127  \n  128: Calls V8's [`SetAddHistogramSampleFunction()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#aeb420b690bc2c216882d6fdd00ddd3ea).\n  129  \n  130  <a name=\"api_nan_idle_notification\"></a>\n  131  ### Nan::IdleNotification()\n  132  \n  133: Signature:\n  134  \n  135  ```c++\n  136: void Nan::IdleNotification(v8::HeapStatistics *heap_statistics)\n  137  ```\n  138  \n  139: Calls V8's [`IdleNotification()` or `IdleNotificationDeadline()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#ad6a2a02657f5425ad460060652a5a118) depending on V8 version.\n  140  \n  141  <a name=\"api_nan_low_memory_notification\"></a>\n  142  ### Nan::LowMemoryNotification()\n  143  \n  144: Signature:\n  145  \n  146  ```c++\n  ...\n  148  ```\n  149  \n  150: Calls V8's [`IdleNotification()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a24647f61d6b41f69668094bdcd6ea91f).\n  151  \n  152: <a name=\"api_nan_context_disposed_notification\"></a>\n  153: ### Nan::ContextDisposedNotification()\n  154  \n  155: Signature:\n  156  \n  157  ```c++\n  158: void Nan::ContextDisposedNotification()\n  159  ```\n  160  \n  161: Calls V8's [`ContextDisposedNotification()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#ad7f5dc559866343fe6cd8db1f134d48b).\n  162  \n  163  <a name=\"api_nan_get_internal_field_pointer\"></a>\n  164  ### Nan::GetInternalFieldPointer()\n  165  \n  166: Gets a pointer to the internal field with at `index` from a V8 `Object` handle.\n  167  \n  168: Signature:\n  169  \n  170  ```c++\n  ...\n  172  ```\n  173  \n  174: Calls the Object's [`GetAlignedPointerFromInternalField()` or `GetPointerFromInternalField()`](https://v8docs.nodesource.com/io.js-3.0/db/d85/classv8_1_1_object.html#ab3c57184263cf29963ef0017bec82281) depending on the version of V8.\n  175  \n  176: <a name=\"api_nan_set_internal_field_pointer\"></a>\n  177: ### Nan::SetInternalFieldPointer()\n  178  \n  179: Sets the value of the internal field at `index` on a V8 `Object` handle.\n  180  \n  181: Signature:\n  182  \n  183  ```c++\n  184: void Nan::SetInternalFieldPointer(v8::Local<v8::Object> object, int index, void* value)\n  185  ```\n  186  \n  187: Calls the Object's [`SetAlignedPointerInInternalField()` or `SetPointerInInternalField()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#ad7f5dc559866343fe6cd8db1f134d48b) depending on the version of V8.\n  188  \n  189: <a name=\"api_nan_adjust_external_memory\"></a>\n  190: ### Nan::AdjustExternalMemory()\n  191  \n  192: Signature:\n  193  \n  194  ```c++\n  195: int Nan::AdjustExternalMemory(int bytesChange)\n  196  ```\n  197  \n  198: Calls V8's [`AdjustAmountOfExternalAllocatedMemory()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#ae1a59cac60409d3922582c4af675473e).\n  199  \n  200  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/doc/v8_misc.md:\n    1: ## Miscellaneous V8 Helpers\n    2  \n    3:  - <a href=\"#api_nan_utf8_string\"><b><code>Nan::Utf8String</code></b></a>\n    4   - <a href=\"#api_nan_get_current_context\"><b><code>Nan::GetCurrentContext()</code></b></a>\n    5:  - <a href=\"#api_nan_set_isolate_data\"><b><code>Nan::SetIsolateData()</code></b></a>\n    6:  - <a href=\"#api_nan_get_isolate_data\"><b><code>Nan::GetIsolateData()</code></b></a>\n    7:  - <a href=\"#api_nan_typedarray_contents\"><b><code>Nan::TypedArrayContents</code></b></a>\n    8  \n    9  \n   10: <a name=\"api_nan_utf8_string\"></a>\n   11: ### Nan::Utf8String\n   12  \n   13: Converts an object to a UTF-8-encoded character array. If conversion to a string fails (e.g. due to an exception in the toString() method of the object) then the length() method returns 0 and the * operator returns NULL. The underlying memory used for this object is managed by the object.\n   14  \n   15: An implementation of [`v8::String::Utf8Value`](https://v8docs.nodesource.com/io.js-3.0/d4/d1b/classv8_1_1_string_1_1_utf8_value.html) that is consistent across all supported versions of V8.\n   16  \n   17  Definition:\n   18  \n   19  ```c++\n   20: class Nan::Utf8String {\n   21   public:\n   22:   Nan::Utf8String(v8::Local<v8::Value> from);\n   23  \n   24:   int length() const;\n   25  \n   26    char* operator*();\n   27:   const char* operator*() const;\n   28  };\n   29  ```\n   ..\n   32  ### Nan::GetCurrentContext()\n   33  \n   34: A call to [`v8::Isolate::GetCurrent()->GetCurrentContext()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a81c7a1ed7001ae2a65e89107f75fd053) that works across all supported versions of V8.\n   35  \n   36: Signature:\n   37  \n   38  ```c++\n   ..\n   40  ```\n   41  \n   42: <a name=\"api_nan_set_isolate_data\"></a>\n   43: ### Nan::SetIsolateData()\n   44  \n   45: A helper to provide a consistent API to [`v8::Isolate#SetData()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#a7acadfe7965997e9c386a05f098fbe36).\n   46  \n   47: Signature:\n   48  \n   49  ```c++\n   50: void Nan::SetIsolateData(v8::Isolate *isolate, T *data)\n   51  ```\n   52  \n   53  \n   54: <a name=\"api_nan_get_isolate_data\"></a>\n   55: ### Nan::GetIsolateData()\n   56  \n   57: A helper to provide a consistent API to [`v8::Isolate#GetData()`](https://v8docs.nodesource.com/io.js-3.0/d5/dda/classv8_1_1_isolate.html#aabd223436bc1100a787dadaa024c6257).\n   58  \n   59: Signature:\n   60  \n   61  ```c++\n   62: T *Nan::GetIsolateData(v8::Isolate *isolate)\n   63  ```\n   64  \n   65: <a name=\"api_nan_typedarray_contents\"></a>\n   66: ### Nan::TypedArrayContents<T>\n   67  \n   68: A helper class for accessing the contents of an ArrayBufferView (aka a typedarray) from C++.  If the input array is not a valid typedarray, then the data pointer of TypedArrayContents will default to `NULL` and the length will be 0.  If the data pointer is not compatible with the alignment requirements of type, an assertion error will fail.\n   69  \n   70: Note that you must store a reference to the `array` object while you are accessing its contents.\n   71  \n   72  Definition:\n   ..\n   74  ```c++\n   75  template<typename T>\n   76: class Nan::TypedArrayContents {\n   77   public:\n   78:   TypedArrayContents(v8::Local<Value> array);\n   79  \n   80:   size_t length() const;\n   81  \n   82:   T* const operator*();\n   83:   const T* const operator*() const;\n   84  };\n   85  ```\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/tools/1to2.js:\n    1: #!/usr/bin/env node\n    2  /*********************************************************************\n    3:  * NAN - Native Abstractions for Node.js\n    4   *\n    5:  * Copyright (c) 2016 NAN contributors\n    6   *\n    7:  * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>\n    8   ********************************************************************/\n    9  \n   10  var commander = require('commander'),\n   11:     fs = require('fs'),\n   12      glob = require('glob'),\n   13:     groups = [],\n   14      total = 0,\n   15:     warning1 = '/* ERROR: Rewrite using Buffer */\\n',\n   16:     warning2 = '\\\\/\\\\* ERROR\\\\: Rewrite using Buffer \\\\*\\\\/\\\\n',\n   17      length,\n   18      i;\n   19  \n   20: fs.readFile(__dirname + '/package.json', 'utf8', function (err, data) {\n   21    if (err) {\n   22      throw err;\n   ..\n   24  \n   25    commander\n   26:       .version(JSON.parse(data).version)\n   27:       .usage('[options] <file ...>')\n   28:       .parse(process.argv);\n   29  \n   30:   if (!process.argv.slice(2).length) {\n   31      commander.outputHelp();\n   32    }\n   33  });\n   34  \n   35: /* construct strings representing regular expressions\n   36:    each expression contains a unique group allowing for identification of the match\n   37:    the index of this key group, relative to the regular expression in question,\n   38:     is indicated by the first array member */\n   39  \n   40: /* simple substistutions, key group is the entire match, 0 */\n   41: groups.push([0, [\n   42    '_NAN_',\n   43:   'NODE_SET_METHOD',\n   44:   'NODE_SET_PROTOTYPE_METHOD',\n   45:   'NanAsciiString',\n   46:   'NanEscapeScope',\n   47    'NanReturnValue',\n   48:   'NanUcs2String'].join('|')]);\n   49  \n   50: /* substitutions of parameterless macros, key group is 1 */\n   51: groups.push([1, ['(', [\n   52:   'NanEscapableScope',\n   53    'NanReturnNull',\n   54    'NanReturnUndefined',\n   55:   'NanScope'].join('|'), ')\\\\(\\\\)'].join('')]);\n   56  \n   57: /* replace TryCatch with NanTryCatch once, gobbling possible namespace, key group 2 */\n   58: groups.push([2, '(?:(?:v8\\\\:\\\\:)?|(Nan)?)(TryCatch)']);\n   59  \n   60: /* NanNew(\"string\") will likely not fail a ToLocalChecked(), key group 1 */ \n   61: groups.push([1, ['(NanNew)', '(\\\\(\"[^\\\\\"]*\"[^\\\\)]*\\\\))(?!\\\\.ToLocalChecked\\\\(\\\\))'].join('')]);\n   62  \n   63: /* Removed v8 APIs, warn that the code needs rewriting using node::Buffer, key group 2 */\n   64: groups.push([2, ['(', warning2, ')?', '^.*?(', [\n   65:       'GetIndexedPropertiesExternalArrayDataLength',\n   66:       'GetIndexedPropertiesExternalArrayData',\n   67:       'GetIndexedPropertiesExternalArrayDataType',\n   68:       'GetIndexedPropertiesPixelData',\n   69:       'GetIndexedPropertiesPixelDataLength',\n   70:       'HasIndexedPropertiesInExternalArrayData',\n   71:       'HasIndexedPropertiesInPixelData',\n   72:       'SetIndexedPropertiesToExternalArrayData',\n   73:       'SetIndexedPropertiesToPixelData'].join('|'), ')'].join('')]);\n   74  \n   75: /* No need for NanScope in V8-exposed methods, key group 2 */\n   76: groups.push([2, ['((', [\n   77        'NAN_METHOD',\n   78        'NAN_GETTER',\n   79:       'NAN_SETTER',\n   80        'NAN_PROPERTY_GETTER',\n   81:       'NAN_PROPERTY_SETTER',\n   82        'NAN_PROPERTY_ENUMERATOR',\n   83        'NAN_PROPERTY_DELETER',\n   84        'NAN_PROPERTY_QUERY',\n   85        'NAN_INDEX_GETTER',\n   86:       'NAN_INDEX_SETTER',\n   87        'NAN_INDEX_ENUMERATOR',\n   88        'NAN_INDEX_DELETER',\n   89:       'NAN_INDEX_QUERY'].join('|'), ')\\\\([^\\\\)]*\\\\)\\\\s*\\\\{)\\\\s*NanScope\\\\(\\\\)\\\\s*;'].join('')]);\n   90  \n   91: /* v8::Value::ToXXXXXXX returns v8::MaybeLocal<T>, key group 3 */\n   92: groups.push([3, ['([\\\\s\\\\(\\\\)])([^\\\\s\\\\(\\\\)]+)->(', [\n   93        'Boolean',\n   94        'Number',\n   95:       'String',\n   96        'Object',\n   97        'Integer',\n   ..\n   99        'Int32'].join('|'), ')\\\\('].join('')]);\n  100  \n  101: /* v8::Value::XXXXXXXValue returns v8::Maybe<T>, key group 3 */\n  102: groups.push([3, ['([\\\\s\\\\(\\\\)])([^\\\\s\\\\(\\\\)]+)->((?:', [\n  103        'Boolean',\n  104        'Number',\n  ...\n  107        'Int32'].join('|'), ')Value)\\\\('].join('')]);\n  108  \n  109: /* NAN_WEAK_CALLBACK macro was removed, write out callback definition, key group 1 */\n  110: groups.push([1, '(NAN_WEAK_CALLBACK)\\\\(([^\\\\s\\\\)]+)\\\\)']);\n  111  \n  112: /* node::ObjectWrap and v8::Persistent have been replaced with Nan implementations, key group 1 */\n  113: groups.push([1, ['(', [\n  114:   'NanDisposePersistent',\n  115:   'NanObjectWrapHandle'].join('|'), ')\\\\s*\\\\(\\\\s*([^\\\\s\\\\)]+)'].join('')]);\n  116  \n  117: /* Since NanPersistent there is no need for NanMakeWeakPersistent, key group 1 */\n  118: groups.push([1, '(NanMakeWeakPersistent)\\\\s*\\\\(\\\\s*([^\\\\s,]+)\\\\s*,\\\\s*']);\n  119  \n  120: /* Many methods of v8::Object and others now return v8::MaybeLocal<T>, key group 3 */\n  121: groups.push([3, ['([\\\\s])([^\\\\s]+)->(', [\n  122    'GetEndColumn',\n  123    'GetFunction',\n  124    'GetLineNumber',\n  125:   'NewInstance',\n  126:   'GetPropertyNames',\n  127:   'GetOwnPropertyNames',\n  128:   'GetSourceLine',\n  129:   'GetStartColumn',\n  130:   'ObjectProtoToString',\n  131    'ToArrayIndex',\n  132:   'ToDetailString',\n  133:   'CallAsConstructor',\n  134:   'CallAsFunction',\n  135    'CloneElementAt',\n  136    'Delete',\n  137:   'ForceSet',\n  138    'Get',\n  139:   'GetPropertyAttributes',\n  140    'GetRealNamedProperty',\n  141    'GetRealNamedPropertyInPrototypeChain',\n  142:   'Has',\n  143:   'HasOwnProperty',\n  144:   'HasRealIndexedProperty',\n  145:   'HasRealNamedCallbackProperty',\n  146:   'HasRealNamedProperty',\n  147:   'Set',\n  148:   'SetAccessor',\n  149:   'SetIndexedPropertyHandler',\n  150:   'SetNamedPropertyHandler',\n  151:   'SetPrototype'].join('|'), ')\\\\('].join('')]);\n  152  \n  153: /* You should get an error if any of these fail anyways,\n  154:    or handle the error better, it is indicated either way, key group 2 */\n  155: groups.push([2, ['NanNew(<(?:v8\\\\:\\\\:)?(', ['Date', 'String', 'RegExp'].join('|'), ')>)(\\\\([^\\\\)]*\\\\))(?!\\\\.ToLocalChecked\\\\(\\\\))'].join('')]);\n  156  \n  157: /* v8::Value::Equals now returns a v8::Maybe, key group 3 */\n  158: groups.push([3, '([\\\\s\\\\(\\\\)])([^\\\\s\\\\(\\\\)]+)->(Equals)\\\\(([^\\\\s\\\\)]+)']);\n  159  \n  160: /* NanPersistent makes this unnecessary, key group 1 */\n  161: groups.push([1, '(NanAssignPersistent)(?:<v8\\\\:\\\\:[^>]+>)?\\\\(([^,]+),\\\\s*']);\n  162  \n  163: /* args has been renamed to info, key group 2 */\n  164: groups.push([2, '(\\\\W)(args)(\\\\W)'])\n  165  \n  166: /* node::ObjectWrap was replaced with NanObjectWrap, key group 2 */\n  167: groups.push([2, '(\\\\W)(?:node\\\\:\\\\:)?(ObjectWrap)(\\\\W)']);\n  168  \n  169: /* v8::Persistent was replaced with NanPersistent, key group 2 */\n  170: groups.push([2, '(\\\\W)(?:v8\\\\:\\\\:)?(Persistent)(\\\\W)']);\n  171  \n  172: /* counts the number of capturing groups in a well-formed regular expression,\n  173:    ignoring non-capturing groups and escaped parentheses */\n  174: function groupcount(s) {\n  175:   var positive = s.match(/\\((?!\\?)/g),\n  176:       negative = s.match(/\\\\\\(/g);\n  177:   return (positive ? positive.length : 0) - (negative ? negative.length : 0);\n  178  }\n  179  \n  180: /* compute the absolute position of each key group in the joined master RegExp */\n  181: for (i = 1, length = groups.length; i < length; i++) {\n  182: \ttotal += groupcount(groups[i - 1][1]);\n  183: \tgroups[i][0] += total;\n  184  }\n  185  \n  186: /* create the master RegExp, whis is the union of all the groups' expressions */\n  187: master = new RegExp(groups.map(function (a) { return a[1]; }).join('|'), 'gm');\n  188  \n  189: /* replacement function for String.replace, receives 21 arguments */\n  190  function replace() {\n  191: \t/* simple expressions */\n  192:       switch (arguments[groups[0][0]]) {\n  193:         case '_NAN_':\n  194            return 'NAN_';\n  195:         case 'NODE_SET_METHOD':\n  196:           return 'NanSetMethod';\n  197:         case 'NODE_SET_PROTOTYPE_METHOD':\n  198:           return 'NanSetPrototypeMethod';\n  199:         case 'NanAsciiString':\n  200:           return 'NanUtf8String';\n  201:         case 'NanEscapeScope':\n  202:           return 'scope.Escape';\n  203:         case 'NanReturnNull':\n  204:           return 'info.GetReturnValue().SetNull';\n  205:         case 'NanReturnValue':\n  206:           return 'info.GetReturnValue().Set';\n  207:         case 'NanUcs2String':\n  208:           return 'v8::String::Value';\n  209          default:\n  210        }\n  211  \n  212:       /* macros without arguments */\n  213:       switch (arguments[groups[1][0]]) {\n  214:         case 'NanEscapableScope':\n  215:           return 'NanEscapableScope scope'\n  216:         case 'NanReturnUndefined':\n  217            return 'return';\n  218:         case 'NanScope':\n  219:           return 'NanScope scope';\n  220          default:\n  221        }\n  222  \n  223        /* TryCatch, emulate negative backref */\n  224:       if (arguments[groups[2][0]] === 'TryCatch') {\n  225:         return arguments[groups[2][0] - 1] ? arguments[0] : 'NanTryCatch';\n  226        }\n  227  \n  228        /* NanNew(\"foo\") --> NanNew(\"foo\").ToLocalChecked() */\n  229:       if (arguments[groups[3][0]] === 'NanNew') {\n  230:         return [arguments[0], '.ToLocalChecked()'].join('');\n  231        }\n  232  \n  233:       /* insert warning for removed functions as comment on new line above */\n  234:       switch (arguments[groups[4][0]]) {\n  235:         case 'GetIndexedPropertiesExternalArrayData':\n  236:         case 'GetIndexedPropertiesExternalArrayDataLength':\n  237:         case 'GetIndexedPropertiesExternalArrayDataType':\n  238:         case 'GetIndexedPropertiesPixelData':\n  239:         case 'GetIndexedPropertiesPixelDataLength':\n  240:         case 'HasIndexedPropertiesInExternalArrayData':\n  241:         case 'HasIndexedPropertiesInPixelData':\n  242:         case 'SetIndexedPropertiesToExternalArrayData':\n  243:         case 'SetIndexedPropertiesToPixelData':\n  244:           return arguments[groups[4][0] - 1] ? arguments[0] : [warning1, arguments[0]].join('');\n  245          default:\n  246        }\n  247  \n  248:      /* remove unnecessary NanScope() */\n  249:       switch (arguments[groups[5][0]]) {\n  250:         case 'NAN_GETTER':\n  251:         case 'NAN_METHOD':\n  252:         case 'NAN_SETTER':\n  253:         case 'NAN_INDEX_DELETER':\n  254:         case 'NAN_INDEX_ENUMERATOR':\n  255:         case 'NAN_INDEX_GETTER':\n  256:         case 'NAN_INDEX_QUERY':\n  257:         case 'NAN_INDEX_SETTER':\n  258:         case 'NAN_PROPERTY_DELETER':\n  259:         case 'NAN_PROPERTY_ENUMERATOR':\n  260:         case 'NAN_PROPERTY_GETTER':\n  261:         case 'NAN_PROPERTY_QUERY':\n  262:         case 'NAN_PROPERTY_SETTER':\n  263:           return arguments[groups[5][0] - 1];\n  264          default:\n  265        }\n  266  \n  267:       /* Value converstion */\n  268:       switch (arguments[groups[6][0]]) {\n  269:         case 'Boolean':\n  270:         case 'Int32':\n  271:         case 'Integer':\n  272:         case 'Number':\n  273:         case 'Object':\n  274:         case 'String':\n  275:         case 'Uint32':\n  276:           return [arguments[groups[6][0] - 2], 'NanTo<v8::', arguments[groups[6][0]], '>(',  arguments[groups[6][0] - 1]].join('');\n  277          default:\n  278        }\n  279  \n  280:       /* other value conversion */\n  281:       switch (arguments[groups[7][0]]) {\n  282:         case 'BooleanValue':\n  283:           return [arguments[groups[7][0] - 2], 'NanTo<bool>(', arguments[groups[7][0] - 1]].join('');\n  284:         case 'Int32Value':\n  285:           return [arguments[groups[7][0] - 2], 'NanTo<int32_t>(', arguments[groups[7][0] - 1]].join('');\n  286:         case 'IntegerValue':\n  287:           return [arguments[groups[7][0] - 2], 'NanTo<int64_t>(', arguments[groups[7][0] - 1]].join('');\n  288:         case 'Uint32Value':\n  289:           return [arguments[groups[7][0] - 2], 'NanTo<uint32_t>(', arguments[groups[7][0] - 1]].join('');\n  290          default:\n  291        }\n  292  \n  293        /* NAN_WEAK_CALLBACK */\n  294:       if (arguments[groups[8][0]] === 'NAN_WEAK_CALLBACK') {\n  295          return ['template<typename T>\\nvoid ',\n  296:           arguments[groups[8][0] + 1], '(const NanWeakCallbackInfo<T> &data)'].join('');\n  297        }\n  298  \n  299:       /* use methods on NAN classes instead */\n  300:       switch (arguments[groups[9][0]]) {\n  301:         case 'NanDisposePersistent':\n  302:           return [arguments[groups[9][0] + 1], '.Reset('].join('');\n  303:         case 'NanObjectWrapHandle':\n  304:           return [arguments[groups[9][0] + 1], '->handle('].join('');\n  305          default:\n  306        }\n  307  \n  308:       /* use method on NanPersistent instead */\n  309:       if (arguments[groups[10][0]] === 'NanMakeWeakPersistent') {\n  310:         return arguments[groups[10][0] + 1] + '.SetWeak(';\n  311        }\n  312  \n  313:       /* These return Maybes, the upper ones take no arguments */\n  314:       switch (arguments[groups[11][0]]) {\n  315:         case 'GetEndColumn':\n  316:         case 'GetFunction':\n  317:         case 'GetLineNumber':\n  318:         case 'GetOwnPropertyNames':\n  319:         case 'GetPropertyNames':\n  320:         case 'GetSourceLine':\n  321:         case 'GetStartColumn':\n  322:         case 'NewInstance':\n  323:         case 'ObjectProtoToString':\n  324:         case 'ToArrayIndex':\n  325:         case 'ToDetailString':\n  326:           return [arguments[groups[11][0] - 2], 'Nan', arguments[groups[11][0]], '(', arguments[groups[11][0] - 1]].join('');\n  327:         case 'CallAsConstructor':\n  328:         case 'CallAsFunction':\n  329:         case 'CloneElementAt':\n  330:         case 'Delete':\n  331:         case 'ForceSet':\n  332:         case 'Get':\n  333:         case 'GetPropertyAttributes':\n  334:         case 'GetRealNamedProperty':\n  335:         case 'GetRealNamedPropertyInPrototypeChain':\n  336:         case 'Has':\n  337:         case 'HasOwnProperty':\n  338:         case 'HasRealIndexedProperty':\n  339:         case 'HasRealNamedCallbackProperty':\n  340:         case 'HasRealNamedProperty':\n  341:         case 'Set':\n  342:         case 'SetAccessor':\n  343:         case 'SetIndexedPropertyHandler':\n  344:         case 'SetNamedPropertyHandler':\n  345:         case 'SetPrototype':\n  346:           return [arguments[groups[11][0] - 2], 'Nan', arguments[groups[11][0]], '(', arguments[groups[11][0] - 1], ', '].join('');\n  347          default:\n  348        }\n  349  \n  350        /* Automatic ToLocalChecked(), take it or leave it */\n  351:       switch (arguments[groups[12][0]]) {\n  352:         case 'Date':\n  353:         case 'String':\n  354:         case 'RegExp':\n  355:           return ['NanNew', arguments[groups[12][0] - 1], arguments[groups[12][0] + 1], '.ToLocalChecked()'].join('');\n  356          default:\n  357        }\n  358  \n  359:       /* NanEquals is now required for uniformity */\n  360:       if (arguments[groups[13][0]] === 'Equals') {\n  361:         return [arguments[groups[13][0] - 1], 'NanEquals(', arguments[groups[13][0] - 1], ', ', arguments[groups[13][0] + 1]].join('');\n  362        }\n  363  \n  364:       /* use method on replacement class instead */\n  365:       if (arguments[groups[14][0]] === 'NanAssignPersistent') {\n  366:         return [arguments[groups[14][0] + 1], '.Reset('].join('');\n  367        }\n  368  \n  369:       /* args --> info */\n  370:       if (arguments[groups[15][0]] === 'args') {\n  371:         return [arguments[groups[15][0] - 1], 'info', arguments[groups[15][0] + 1]].join('');\n  372        }\n  373  \n  374        /* ObjectWrap --> NanObjectWrap */\n  375:       if (arguments[groups[16][0]] === 'ObjectWrap') {\n  376:         return [arguments[groups[16][0] - 1], 'NanObjectWrap', arguments[groups[16][0] + 1]].join('');\n  377        }\n  378  \n  379:       /* Persistent --> NanPersistent */\n  380:       if (arguments[groups[17][0]] === 'Persistent') {\n  381:         return [arguments[groups[17][0] - 1], 'NanPersistent', arguments[groups[17][0] + 1]].join('');\n  382        }\n  383  \n  384:       /* This should not happen. A switch is probably missing a case if it does. */\n  385:       throw 'Unhandled match: ' + arguments[0];\n  386  }\n  387  \n  388: /* reads a file, runs replacement and writes it back */\n  389: function processFile(file) {\n  390:   fs.readFile(file, {encoding: 'utf8'}, function (err, data) {\n  391      if (err) {\n  392        throw err;\n  393      }\n  394  \n  395:     /* run replacement twice, might need more runs */\n  396:     fs.writeFile(file, data.replace(master, replace).replace(master, replace), function (err) {\n  397        if (err) {\n  398          throw err;\n  ...\n  402  }\n  403  \n  404: /* process file names from command line and process the identified files */\n  405: for (i = 2, length = process.argv.length; i < length; i++) {\n  406:   glob(process.argv[i], function (err, matches) {\n  407      if (err) {\n  408        throw err;\n  409      }\n  410:     matches.forEach(processFile);\n  411    });\n  412  }\n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/tools/README.md:\n    1: 1to2 naively converts source code files from NAN 1 to NAN 2. There will be erroneous conversions,\n    2: false positives and missed opportunities. The input files are rewritten in place. Make sure that\n    3: you have backups. You will have to manually review the changes afterwards and do some touchups.\n    4  \n    5: ```sh\n    6: $ tools/1to2.js\n    7  \n    8:   Usage: 1to2 [options] <file ...>\n    9  \n   10:   Options:\n   11  \n   12:     -h, --help     output usage information\n   13:     -V, --version  output the version number\n   14  ```\n   15  \n\n/run/media/ted/Data/WEB/ths_signup/node_modules/nan/tools/package.json:\n    1  {\n    2    \"name\": \"1to2\",\n    3:   \"version\": \"1.0.0\",\n    4:   \"description\": \"NAN 1 -> 2 Migration Script\",\n    5:   \"main\": \"1to2.js\",\n    6:   \"repository\": {\n    7      \"type\": \"git\",\n    8:     \"url\": \"git://github.com/nodejs/nan.git\"\n    9    },\n   10:   \"contributors\": [\n   11:     \"Benjamin Byholm <bbyholm@abo.fi> (https://github.com/kkoopa/)\",\n   12:     \"Mathias Küsel (https://github.com/mathiask88/)\"\n   13    ],\n   14:   \"dependencies\": {\n   15      \"glob\": \"~5.0.10\",\n   16      \"commander\": \"~2.8.1\"\n   17    },\n   18:   \"license\": \"MIT\"\n   19  }\n   20  \n\n/run/media/ted/Data/WEB/ths_signup/public/browserconfig.xml:\n    1: <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    2: <browserconfig>\n    3:   <msapplication>\n    4      <tile>\n    5:       <square70x70logo src=\"/client/stylesheets/icons/mstile-70x70.png\"/>\n    6:       <square150x150logo src=\"/client/stylesheets/icons/mstile-150x150.png\"/>\n    7:       <square310x310logo src=\"/client/stylesheets/icons/mstile-310x310.png\"/>\n    8:       <wide310x150logo src=\"/client/stylesheets/icons/mstile-310x150.png\"/>\n    9        <TileColor>#da532c</TileColor>\n   10      </tile>\n   11:   </msapplication>\n   12: </browserconfig>\n   13  \n\n/run/media/ted/Data/WEB/ths_signup/public/manifest.json:\n    1  {\n    2: \t\"name\": \"THS Signup\",\n    3: \t\"icons\": [\n    4  \t\t{\n    5: \t\t\t\"src\": \"\\/client\\/stylesheets\\/icons\\/android-chrome-36x36.png\",\n    6: \t\t\t\"sizes\": \"36x36\",\n    7  \t\t\t\"type\": \"image\\/png\",\n    8: \t\t\t\"density\": 0.75\n    9  \t\t},\n   10  \t\t{\n   11: \t\t\t\"src\": \"\\/client\\/stylesheets\\/icons\\/android-chrome-48x48.png\",\n   12: \t\t\t\"sizes\": \"48x48\",\n   13  \t\t\t\"type\": \"image\\/png\",\n   14: \t\t\t\"density\": 1\n   15  \t\t},\n   16  \t\t{\n   17: \t\t\t\"src\": \"\\/client\\/stylesheets\\/icons\\/android-chrome-72x72.png\",\n   18: \t\t\t\"sizes\": \"72x72\",\n   19  \t\t\t\"type\": \"image\\/png\",\n   20: \t\t\t\"density\": 1.5\n   21  \t\t},\n   22  \t\t{\n   23: \t\t\t\"src\": \"\\/client\\/stylesheets\\/icons\\/android-chrome-96x96.png\",\n   24: \t\t\t\"sizes\": \"96x96\",\n   25  \t\t\t\"type\": \"image\\/png\",\n   26: \t\t\t\"density\": 2\n   27  \t\t},\n   28  \t\t{\n   29: \t\t\t\"src\": \"\\/client\\/stylesheets\\/icons\\/android-chrome-144x144.png\",\n   30: \t\t\t\"sizes\": \"144x144\",\n   31  \t\t\t\"type\": \"image\\/png\",\n   32: \t\t\t\"density\": 3\n   33  \t\t},\n   34  \t\t{\n   35: \t\t\t\"src\": \"\\/client\\/stylesheets\\/icons\\/android-chrome-192x192.png\",\n   36: \t\t\t\"sizes\": \"192x192\",\n   37  \t\t\t\"type\": \"image\\/png\",\n   38: \t\t\t\"density\": 4\n   39  \t\t}\n   40  \t]\n\n/run/media/ted/Data/WEB/ths_signup/public/safari-pinned-tab.svg:\n    1: <?xml version=\"1.0\" standalone=\"no\"?>\n    2: <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\"\n    3:  \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n    4: <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\"\n    5   width=\"1562.000000pt\" height=\"1562.000000pt\" viewBox=\"0 0 1562.000000 1562.000000\"\n    6:  preserveAspectRatio=\"xMidYMid meet\">\n    7  <metadata>\n    8: Created by potrace 1.11, written by Peter Selinger 2001-2013\n    9  </metadata>\n   10: <g transform=\"translate(0.000000,1562.000000) scale(0.100000,-0.100000)\"\n   11: fill=\"#000000\" stroke=\"none\">\n   12  <path d=\"M1982 8298 l3 -7323 23 -85 c57 -208 158 -384 302 -530 141 -143 322\n   13  -252 514 -309 38 -12 81 -23 95 -26 14 -3 37 -8 51 -12 14 -4 2422 -9 5353\n   14  -10 l5327 -3 0 7810 0 7810 -5835 0 -5835 0 2 -7322z\"/>\n   15  </g>\n   16: </svg>\n   17  \n\n/run/media/ted/Data/WEB/ths_signup/server/bootstrap.js:\n    1: // if (!Roles.userIsInRole(Meteor.users.findOne({'profile':{'name':'Teodor W.'}}), ['admin'])) {\n    2: //     Roles.addUsersToRoles(Meteor.users.findOne({'profile':{'name':'Teodor W.'}})._id, ['admin']);\n    3  //     }\n    4      \n    5: Accounts.onCreateUser(function(options, user) {\n    6:     user.events = [];\n    7:     user.paidEvents = [];\n    8:     user.decided = false;\n    9:     user.payable = 0;\n   10:     user.free = 0;\n   11:     if (options.profile) {\n   12:       user.profile = options.profile;\n   13      }\n   14:     return user;\n   15    });\n   16  \n   17: // Meteor.users.remove({});\n   18  var x =\"international\";\n   19: if(typeof Meteor.users.findOne({ 'emails': { $elemMatch: { 'address': x+'@com' } } } ) == \"undefined\"){\n   20:     Roles.addUsersToRoles(Accounts.createUser({\n   21:        username: x+' section admin',\n   22         email :  x+'@com',\n   23:        password : 'flyingpotato',\n   24         profile  : {\n   25:            s: x,\n   26:            name: x + ' section admin',\n   27         }\n   28  \n   29      }), ['admin']);\n   30:     console.log(x+\" user created!\");\n   31  };\n   32  \n   33: var sections = ['a', 'b', 'cl', 'd', 'dr', 'e', 'f', 'i', 'ish', 'ist', 'in', 'k', 'm', 'media', 'mit', 's', 't', 'w'];\n   34: _.each(sections, function (x){\n   35:     if(typeof Meteor.users.findOne({ 'emails': { $elemMatch: { 'address': x+'@com' } } } ) == \"undefined\"){\n   36:         Roles.addUsersToRoles(Accounts.createUser({\n   37:            username: x+' section admin',\n   38             email :  x+'@com',\n   39:            password : 'flyingpotato',\n   40             profile  : {\n   41:                s: x,\n   42:                name: x + ' section admin',\n   43             },\n   44:            }), ['sectionAdmin']);\n   45:         console.log(x+\" user created!\");\n   46:     //add roles\n   47  }\n   48  });\n   49: // console.log(typeof Meteor.users.findOne({ 'emails': { $elemMatch: { 'address': 'j@com' } } } ));\n   50  \n   51  \n   52    \n   53: // RegisterLimit.remove({});\n   54: if(! RegisterLimit.find().count() ){\n   55:   RegisterLimit.insert({free: 3, payable: 1});\n   56  }\n   57  \n   58: // if ( Meteor.users.find().count() === 1 ) {\n   59:     // if (!Roles.userIsInRole(Meteor.users.findOne({'profile':{'name':'Teodor W.'}}), ['admin'])) {\n   60: //     Roles.addUsersToRoles(Meteor.users.findOne({'profile':{'name':'Teodor W.'}})._id, ['admin']);\n   61  //     }\n   62      \n   63      \n   64      \n   65:     // Accounts.createUser({\n   66:     //     username: 'admin',\n   67      //     email: 'admin@com',\n   68:     //     password: 'flyingpotato',\n   69      // });\n   70:     // Roles.addUsersToRoles(Meteor.users.findOne({'email': 'admin'})._id, ['admin']);\n   71  // }\n   72  \n\n/run/media/ted/Data/WEB/ths_signup/server/publish.js:\n    1: Meteor.publish('users', function() {\n    2:         return Meteor.users.find();\n    3      });\n    4  \n    5: Meteor.publish('singleEventUsers', function(q){\n    6: \treturn Meteor.users.find( { _id: { $in: q } } )\n    7  });\n    8  \n    9: Meteor.publish('user', function() {\n   10  \n   11: \tuser = this.userId;\n   12      \t\n   13: \t// if(Roles.userIsInRole(user, 'admin'))\n   14: \t// \treturn Meteor.users.find({'roles':{$ne: 'sectionAdmin'}});\n   15: \t// if(Roles.userIsInRole(user, 'sectionAdmin'))\n   16  \t// {\n   17: \t// \tvar q = Meteor.users.findOne(user).profile.s;\n   18: \t// \treturn Meteor.users.find({'profile.s':q});\n   19  \t// }\n   20  \n   21: \treturn Meteor.users.find(user);\n   22          \n   23  });\n   24  \n   25  \n   26: Meteor.publish('usersPaginated', function(s, l) {\n   27  \n   28: \tuser = this.userId;\n   29  \n   30: \t// return Meteor.users.find();\n   31  \n   32: \t// console.log(s + \" \" + l + \" \" + Meteor.users.find({sort: { skip: s, limit: l}}).fetch() );\n   33  \t// \n   34  \t// \n   35      \t\n   36: \tif(Roles.userIsInRole(user, 'admin'))\n   37: \t\treturn Meteor.users.find({}, {sort: {'profile.name': 1}, skip: s, limit: l});\n   38: \t\t// Meteor.users.find({'roles':{$ne: 'sectionAdmin'}}, {sort: {'profile.name': 1}, skip: s, limit: l}   );\n   39: \t\t// Meteor.users.find({}, {sort: {\"profile.name\": 1}n }   );\n   40: \tif(Roles.userIsInRole(user, 'sectionAdmin'))\n   41  \t{\n   42: \t\tvar q = Meteor.users.findOne(user).profile.s;\n   43: \t\treturn Meteor.users.find({'profile.s':q}, {sort: {'profile.name': 1}, skip: s, limit: l});\n   44  \t}\n   45  \n   46: \treturn Meteor.users.find(user);\n   47          \n   48  });\n   49  \n   50  \n   51: Meteor.publish('events', function(){\n   52: \t// typeof this.services.google != \"undefined\"\n   53: \tuser = this.userId;\n   54: \tif(Roles.userIsInRole(user, 'admin'))\n   55: \t{\treturn EventList.find();}\n   56: \tif(Roles.userIsInRole(user, 'sectionAdmin'))\n   57  \t{\n   58: \t\tvar q = Meteor.users.findOne(user).profile.s;\n   59: \t\treturn EventList.find({s: q});\n   60  \t}\n   61: \tvar q = Meteor.users.findOne(user).profile.s;\n   62: \tconsole.log(q);\n   63: \treturn EventList.find({$or: [{s: q}, {s: 'international'}]});\n   64:   // console.log(Meteor.users.findOne(this.userId).profile.s);\n   65  });\n   66  \n   67: // Meteor.publish('events_international', function() {\n   68  // \treturn \n   69  // })\n   70  \n   71: Meteor.publish('limit', function(){\n   72:   return RegisterLimit.find();\n   73  });\n\n/run/media/ted/Data/WEB/ths_signup/server/lib/accounts.js:\n    1: // Set up login services\n    2: Meteor.startup(function() {\n    3    // Add Facebook configuration entry\n    4    \n    5:   ServiceConfiguration.configurations.update(\n    6:     { service: \"facebook\" },\n    7:     { $set: {\n    8          appId: \"539729696185341\",\n    9:         secret: \"d56eba6a8725480d277f0dacb7727eec\"\n   10        }\n   11      },\n   12:     { upsert: true }\n   13    );\n   14    \n   ..\n   16    // Add GitHub configuration entry\n   17    /*\n   18:   ServiceConfiguration.configurations.update(\n   19:     { service: \"github\" },\n   20:     { $set: {\n   21          clientId: \"XXXXXXXXXXXXXXXXXXXX\",\n   22:         secret: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n   23        }\n   24      },\n   25:     { upsert: true }\n   26    );\n   27    */\n   28  \n   29    // Add Google configuration entry\n   30:   ServiceConfiguration.configurations.update(\n   31:     { service: \"google\" },\n   32:     { $set: {\n   33:         clientId: \"766997000709-cogelu7ci0k8436qsjsp63jb7arbs8jo.apps.googleusercontent.com\",\n   34:         secret: \"VfExDvW-84RlpDtbYSi1cZzD\"\n   35        }\n   36      },\n   37:     { upsert: true }\n   38    );\n   39  \n   40    // Add Linkedin configuration entry\n   41    /*\n   42:   ServiceConfiguration.configurations.update(\n   43:     { service: \"linkedin\" },\n   44:     { $set: {\n   45          clientId: \"XXXXXXXXXXXXXX\",\n   46:         secret: \"XXXXXXXXXXXXXXXX\"\n   47        }\n   48      },\n   49:     { upsert: true }\n   50    );\n   51    */\n\n21107 matches across 106 files\n\n\n\n\n\nSearching 107 files for \"'s'\"\n\n/run/media/ted/Data/WEB/ths_signup/methods.js:\n   48  \n   49    clearEventsSection: function(section) {\n   50:     EventList.remove({'s': section});\n   51    },\n   52  \n   ..\n   70      //   EventList.update(a._id, {$set: {'users':[] }});\n   71      //   EventList.update(a._id, {$set: {'limit': 1 }});\n   72:     //   EventList.update(a._id, {$set: {'s': s }});\n   73        \n   74        // EventList.update(a._id, {$set: {'registered': 0 }});\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/admin.js:\n    6  Template.allSections.helpers({\n    7  \tallSections: function () {\n    8: \t\tsections = ['international', 'a', 'b', 'cl', 'd', 'dr', 'e', 'f', 'i', 'ish', 'ist', 'in', 'k', 'm', 'media', 'mit', 's', 't', 'w'];\n    9  \t\treturn sections;\n   10  \t}\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/home.js:\n    7      });\n    8  AccountsTemplates.addField({\n    9:         _id: 's',\n   10          type: 'hidden',\n   11          // required: true,\n   ..\n   34      defaultContentRegion: 'main',\n   35      preSignUpHook: function(pwd, info){\n   36:         info.profile.s = FlowRouter.getQueryParam('s');\n   37      },\n   38      onLogoutHook: function(pwd, info){\n\n/run/media/ted/Data/WEB/ths_signup/server/bootstrap.js:\n   31  };\n   32  \n   33: var sections = ['a', 'b', 'cl', 'd', 'dr', 'e', 'f', 'i', 'ish', 'ist', 'in', 'k', 'm', 'media', 'mit', 's', 't', 'w'];\n   34  _.each(sections, function (x){\n   35      if(typeof Meteor.users.findOne({ 'emails': { $elemMatch: { 'address': x+'@com' } } } ) == \"undefined\"){\n\n6 matches across 4 files\n\n\nSearching 107 files for \"isEventFull\"\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.html:\n   49  <template name=\"oneEvent\">\n   50  \t<li>\n   51: \t  <!--{{#if isEventFull}}-->\n   52:   \t\t<div class=\"collapsible-header {{#if isEventChosen}}chosen{{/if}} {{s}} {{#if isEventFull\"><i class=\"material-icons left\">today</i>{{summary}} {{#if isAdmin}}<a> Registered: {{usersLength}} Section:{{s}}</a>{{/if}}<span class=\"right\">{{hourFormat start.dateTime}} - {{hourFormat end.dateTime}}</span></div>\n   53    \t\t<div class=\"collapsible-body container\">\n   54    \t\t\t<br />\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n   98      },\n   99      \n  100:   isEventFull: function() { \n  101:     console.log('isEventFull'+this);\n  102      if(!Role.users.IsInRole(Meteor.user()._id, 'admin') && !Meteor.user().decided && this.users.length >= this.limit)\n  103        return false;\n\n4 matches across 2 files\n\n\nSearching 107 files for \"active\"\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/admin.js:\n  127  Template.adminEvent.onCreated(function() {\n  128    var self = this;\n  129:   self.opt = new ReactiveVar([]);\n  130    self.autorun(function(){\n  131      \tself.subscribe(\"singleEventUsers\", self.opt.get() );\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n  227  // ((D||{}).config||{}).update;d?d(e):e&&w(E,\"cu\",[]).push(e);if(b){N(\"me0\",a,v);try{oa(b,c,q)}finally{N(\"me1\",a,v)}}return 1};0<g&&(x=f.setTimeout(function(){y=!0;l()},g));var p=V(a,z);if(p.length){var p=V(a,k),r=w(E,\"CP\",[]),t=r.length;r[t]=function(a){if(!a)return 0;N(\"ml1\",p,v);var b=function(b){r[t]=null;T(p,a)&&G(function(){d&&d();b()})},c=function(){var a=r[t+1];a&&a()};0<t&&r[t-1]?r[t]=function(){b(c)}:b(c)};if(p.length){var I=\"loaded_\"+E.I++;D[I]=function(a){r[t](a);D[I]=null};a=ia(c,p,\"gapi.\"+\n  228  // I,k);k.push.apply(k,p);N(\"ml0\",p,v);b.sync||f.___gapisync?ma(a):W(a)}else r[t](n)}else T(p)&&d&&d()};var X=function(a,b){if(E.hee&&0<E.hel)try{return a()}catch(c){b&&b(c),E.hel--,Z(\"debug_error\",function(){try{window.___jsl.hefn(c)}catch(a){throw c;}})}else try{return a()}catch(c){throw b&&b(c),c;}};D.load=function(a,b){return X(function(){return Z(a,b)})};K.bs0=window.gapi._bs||(new Date).getTime();L(\"bs0\");K.bs1=(new Date).getTime();L(\"bs1\");delete window.gapi._bs;})();\n  229: // gapi.load(\"client\",{callback:window[\"OnLoadCallback\"],_c:{\"jsl\":{\"ci\":{\"deviceType\":\"desktop\",\"oauth-flow\":{\"authUrl\":\"https://accounts.google.com/o/oauth2/auth\",\"proxyUrl\":\"https://accounts.google.com/o/oauth2/postmessageRelay\",\"disableOpt\":true,\"idpIframeUrl\":\"https://accounts.google.com/o/oauth2/iframe\",\"usegapi\":false},\"debug\":{\"reportExceptionRate\":0.05,\"forceIm\":false,\"rethrowException\":false,\"host\":\"https://apis.google.com\"},\"lexps\":[81,97,99,122,123,45,30,79,127],\"enableMultilogin\":true,\"googleapis.config\":{\"auth\":{\"useFirstPartyAuthV2\":true}},\"isPlusUser\":true,\"inline\":{\"css\":1},\"disableRealtimeCallback\":false,\"drive_share\":{\"skipInitCommand\":true},\"csi\":{\"rate\":0.01},\"report\":{\"apiRate\":{\"gapi\\\\.signin\\\\..*\":0.05,\"gapi\\\\.signin2\\\\..*\":0.05},\"apis\":[\"iframes\\\\..*\",\"gadgets\\\\..*\",\"gapi\\\\.appcirclepicker\\\\..*\",\"gapi\\\\.auth\\\\..*\",\"gapi\\\\.client\\\\..*\"],\"rate\":0.001,\"host\":\"https://apis.google.com\"},\"client\":{\"headers\":{\"request\":[\"Accept\",\"Accept-Language\",\"Authorization\",\"Cache-Control\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-MD5\",\"Content-Range\",\"Content-Type\",\"Date\",\"GData-Version\",\"Host\",\"If-Match\",\"If-Modified-Since\",\"If-None-Match\",\"If-Unmodified-Since\",\"Origin\",\"OriginToken\",\"Pragma\",\"Range\",\"Slug\",\"Transfer-Encoding\",\"Want-Digest\",\"X-ClientDetails\",\"X-GData-Client\",\"X-GData-Key\",\"X-Goog-AuthUser\",\"X-Goog-PageId\",\"X-Goog-Encode-Response-If-Executable\",\"X-Goog-Correlation-Id\",\"X-Goog-Request-Info\",\"X-Goog-Experiments\",\"x-goog-iam-authority-selector\",\"x-goog-iam-authorization-token\",\"X-Goog-Spatula\",\"X-Goog-Upload-Command\",\"X-Goog-Upload-Content-Disposition\",\"X-Goog-Upload-Content-Length\",\"X-Goog-Upload-Content-Type\",\"X-Goog-Upload-File-Name\",\"X-Goog-Upload-Offset\",\"X-Goog-Upload-Protocol\",\"X-Goog-Visitor-Id\",\"X-HTTP-Method-Override\",\"X-JavaScript-User-Agent\",\"X-Pan-Versionid\",\"X-Origin\",\"X-Referer\",\"X-Upload-Content-Length\",\"X-Upload-Content-Type\",\"X-Use-HTTP-Status-Code-Override\",\"X-YouTube-VVT\",\"X-YouTube-Page-CL\",\"X-YouTube-Page-Timestamp\"],\"response\":[\"Digest\",\"Cache-Control\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-MD5\",\"Content-Range\",\"Content-Type\",\"Date\",\"ETag\",\"Expires\",\"Last-Modified\",\"Location\",\"Pragma\",\"Range\",\"Server\",\"Transfer-Encoding\",\"WWW-Authenticate\",\"Vary\",\"Unzipped-Content-MD5\",\"X-Goog-Generation\",\"X-Goog-Metageneration\",\"X-Goog-Safety-Content-Type\",\"X-Goog-Safety-Encoding\",\"X-Google-Trace\",\"X-Goog-Upload-Chunk-Granularity\",\"X-Goog-Upload-Control-URL\",\"X-Goog-Upload-Size-Received\",\"X-Goog-Upload-Status\",\"X-Goog-Upload-URL\",\"X-Goog-Diff-Download-Range\",\"X-Goog-Hash\",\"X-Goog-Updated-Authorization\",\"X-Server-Object-Version\",\"X-Guploader-Customer\",\"X-Guploader-Upload-Result\",\"X-Guploader-Uploadid\"]},\"rms\":\"migrated\",\"cors\":false},\"isLoggedIn\":true,\"signInDeprecation\":{\"rate\":0.0},\"include_granted_scopes\":true,\"llang\":\"en\",\"plus_layer\":{\"isEnabled\":false},\"iframes\":{\"youtube\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/youtube?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\"ytsubscribe\":{\"url\":\"https://www.youtube.com/subscribe_embed?usegapi\\u003d1\"},\"plus_circle\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/plus/circle?usegapi\\u003d1\"},\"plus_share\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/+1/sharebutton?plusShare\\u003dtrue\\u0026usegapi\\u003d1\"},\"rbr_s\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/render/recobarsimplescroller\"},\"udc_webconsentflow\":{\"params\":{\"url\":\"\"},\"url\":\"https://www.google.com/settings/webconsent?usegapi\\u003d1\"},\":source:\":\"3p\",\"blogger\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/blogger?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\"evwidget\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/events/widget?usegapi\\u003d1\"},\":socialhost:\":\"https://apis.google.com\",\"shortlists\":{\"url\":\"\"},\"hangout\":{\"url\":\"https://talkgadget.google.com/:session_prefix:talkgadget/_/widget\"},\"plus_followers\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/_/im/_/widget/render/plus/followers?usegapi\\u003d1\"},\"photocomments\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/photocomments?usegapi\\u003d1\"},\"post\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::im_prefix:_/widget/render/post?usegapi\\u003d1\"},\":gplus_url:\":\"https://plus.google.com\",\"signin\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/signin?usegapi\\u003d1\",\"methods\":[\"onauth\"]},\"rbr_i\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/render/recobarinvitation\"},\"share\":{\"url\":\":socialhost:/:session_prefix::im_prefix:_/widget/render/share?usegapi\\u003d1\"},\"plusone\":{\"params\":{\"count\":\"\",\"size\":\"\",\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/+1/fastbutton?usegapi\\u003d1\"},\"comments\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/comments?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\":im_socialhost:\":\"https://plus.googleapis.com\",\"backdrop\":{\"url\":\"https://clients3.google.com/cast/chromecast/home/widget/backdrop?usegapi\\u003d1\"},\"visibility\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/visibility?usegapi\\u003d1\"},\"autocomplete\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/autocomplete\"},\"additnow\":{\"url\":\"https://apis.google.com/additnow/additnow.html?usegapi\\u003d1\",\"methods\":[\"launchurl\"]},\":signuphost:\":\"https://plus.google.com\",\"appcirclepicker\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/appcirclepicker\"},\"follow\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/follow?usegapi\\u003d1\"},\"community\":{\"url\":\":ctx_socialhost:/:session_prefix::im_prefix:_/widget/render/community?usegapi\\u003d1\"},\"sharetoclassroom\":{\"url\":\"https://www.gstatic.com/classroom/sharewidget/widget_stable.html?usegapi\\u003d1\"},\"ytshare\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/ytshare?usegapi\\u003d1\"},\"plus\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/badge?usegapi\\u003d1\"},\"reportabuse\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/reportabuse?usegapi\\u003d1\"},\"commentcount\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/commentcount?usegapi\\u003d1\"},\"configurator\":{\"url\":\":socialhost:/:session_prefix:_/plusbuttonconfigurator?usegapi\\u003d1\"},\"zoomableimage\":{\"url\":\"https://ssl.gstatic.com/microscope/embed/\"},\"savetowallet\":{\"url\":\"https://clients5.google.com/s2w/o/savetowallet\"},\"person\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/person?usegapi\\u003d1\"},\"savetodrive\":{\"url\":\"https://drive.google.com/savetodrivebutton?usegapi\\u003d1\",\"methods\":[\"save\"]},\"page\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/page?usegapi\\u003d1\"},\"card\":{\"url\":\":socialhost:/:session_prefix:_/hovercard/card\"}}},\"h\":\"m;/_/scs/apps-static/_/js/k\\u003doz.gapi.en_GB.cJkIm0jUbF0.O/m\\u003d__features__/am\\u003dAQ/rt\\u003dj/d\\u003d1/t\\u003dzcms/rs\\u003dAGLTcCMfB6uTBe-eJT43Gy1rNo6w6uY2fA\",\"u\":\"https://apis.google.com/js/client.js?onload\\u003dOnLoadCallback\",\"hee\":true,\"fp\":\"459cb04dfc6e172aece6e799643434c476cfafbf\",\"dpo\":false},\"fp\":\"459cb04dfc6e172aece6e799643434c476cfafbf\",\"annotation\":[\"interactivepost\",\"recobar\",\"signin2\",\"autocomplete\",\"profile\"],\"bimodal\":[\"signin\",\"share\"]}});\n  230  \n\n/run/media/ted/Data/WEB/ths_signup/client/templates/users_list.js:\n   55  Template.usersList.onCreated(function() {\n   56    var self = this;\n   57:   self.opt = new ReactiveVar([0,20]);\n   58    self.autorun(function(){\n   59      self.subscribe('usersPaginated', self.opt.get()[0], self.opt.get()[1]);\n\n3 matches across 3 files\n\n\nSearching 107 files for \"active\"\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/admin.js:\n  127  Template.adminEvent.onCreated(function() {\n  128    var self = this;\n  129:   self.opt = new ReactiveVar([]);\n  130    self.autorun(function(){\n  131      \tself.subscribe(\"singleEventUsers\", self.opt.get() );\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n  227  // ((D||{}).config||{}).update;d?d(e):e&&w(E,\"cu\",[]).push(e);if(b){N(\"me0\",a,v);try{oa(b,c,q)}finally{N(\"me1\",a,v)}}return 1};0<g&&(x=f.setTimeout(function(){y=!0;l()},g));var p=V(a,z);if(p.length){var p=V(a,k),r=w(E,\"CP\",[]),t=r.length;r[t]=function(a){if(!a)return 0;N(\"ml1\",p,v);var b=function(b){r[t]=null;T(p,a)&&G(function(){d&&d();b()})},c=function(){var a=r[t+1];a&&a()};0<t&&r[t-1]?r[t]=function(){b(c)}:b(c)};if(p.length){var I=\"loaded_\"+E.I++;D[I]=function(a){r[t](a);D[I]=null};a=ia(c,p,\"gapi.\"+\n  228  // I,k);k.push.apply(k,p);N(\"ml0\",p,v);b.sync||f.___gapisync?ma(a):W(a)}else r[t](n)}else T(p)&&d&&d()};var X=function(a,b){if(E.hee&&0<E.hel)try{return a()}catch(c){b&&b(c),E.hel--,Z(\"debug_error\",function(){try{window.___jsl.hefn(c)}catch(a){throw c;}})}else try{return a()}catch(c){throw b&&b(c),c;}};D.load=function(a,b){return X(function(){return Z(a,b)})};K.bs0=window.gapi._bs||(new Date).getTime();L(\"bs0\");K.bs1=(new Date).getTime();L(\"bs1\");delete window.gapi._bs;})();\n  229: // gapi.load(\"client\",{callback:window[\"OnLoadCallback\"],_c:{\"jsl\":{\"ci\":{\"deviceType\":\"desktop\",\"oauth-flow\":{\"authUrl\":\"https://accounts.google.com/o/oauth2/auth\",\"proxyUrl\":\"https://accounts.google.com/o/oauth2/postmessageRelay\",\"disableOpt\":true,\"idpIframeUrl\":\"https://accounts.google.com/o/oauth2/iframe\",\"usegapi\":false},\"debug\":{\"reportExceptionRate\":0.05,\"forceIm\":false,\"rethrowException\":false,\"host\":\"https://apis.google.com\"},\"lexps\":[81,97,99,122,123,45,30,79,127],\"enableMultilogin\":true,\"googleapis.config\":{\"auth\":{\"useFirstPartyAuthV2\":true}},\"isPlusUser\":true,\"inline\":{\"css\":1},\"disableRealtimeCallback\":false,\"drive_share\":{\"skipInitCommand\":true},\"csi\":{\"rate\":0.01},\"report\":{\"apiRate\":{\"gapi\\\\.signin\\\\..*\":0.05,\"gapi\\\\.signin2\\\\..*\":0.05},\"apis\":[\"iframes\\\\..*\",\"gadgets\\\\..*\",\"gapi\\\\.appcirclepicker\\\\..*\",\"gapi\\\\.auth\\\\..*\",\"gapi\\\\.client\\\\..*\"],\"rate\":0.001,\"host\":\"https://apis.google.com\"},\"client\":{\"headers\":{\"request\":[\"Accept\",\"Accept-Language\",\"Authorization\",\"Cache-Control\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-MD5\",\"Content-Range\",\"Content-Type\",\"Date\",\"GData-Version\",\"Host\",\"If-Match\",\"If-Modified-Since\",\"If-None-Match\",\"If-Unmodified-Since\",\"Origin\",\"OriginToken\",\"Pragma\",\"Range\",\"Slug\",\"Transfer-Encoding\",\"Want-Digest\",\"X-ClientDetails\",\"X-GData-Client\",\"X-GData-Key\",\"X-Goog-AuthUser\",\"X-Goog-PageId\",\"X-Goog-Encode-Response-If-Executable\",\"X-Goog-Correlation-Id\",\"X-Goog-Request-Info\",\"X-Goog-Experiments\",\"x-goog-iam-authority-selector\",\"x-goog-iam-authorization-token\",\"X-Goog-Spatula\",\"X-Goog-Upload-Command\",\"X-Goog-Upload-Content-Disposition\",\"X-Goog-Upload-Content-Length\",\"X-Goog-Upload-Content-Type\",\"X-Goog-Upload-File-Name\",\"X-Goog-Upload-Offset\",\"X-Goog-Upload-Protocol\",\"X-Goog-Visitor-Id\",\"X-HTTP-Method-Override\",\"X-JavaScript-User-Agent\",\"X-Pan-Versionid\",\"X-Origin\",\"X-Referer\",\"X-Upload-Content-Length\",\"X-Upload-Content-Type\",\"X-Use-HTTP-Status-Code-Override\",\"X-YouTube-VVT\",\"X-YouTube-Page-CL\",\"X-YouTube-Page-Timestamp\"],\"response\":[\"Digest\",\"Cache-Control\",\"Content-Disposition\",\"Content-Encoding\",\"Content-Language\",\"Content-Length\",\"Content-MD5\",\"Content-Range\",\"Content-Type\",\"Date\",\"ETag\",\"Expires\",\"Last-Modified\",\"Location\",\"Pragma\",\"Range\",\"Server\",\"Transfer-Encoding\",\"WWW-Authenticate\",\"Vary\",\"Unzipped-Content-MD5\",\"X-Goog-Generation\",\"X-Goog-Metageneration\",\"X-Goog-Safety-Content-Type\",\"X-Goog-Safety-Encoding\",\"X-Google-Trace\",\"X-Goog-Upload-Chunk-Granularity\",\"X-Goog-Upload-Control-URL\",\"X-Goog-Upload-Size-Received\",\"X-Goog-Upload-Status\",\"X-Goog-Upload-URL\",\"X-Goog-Diff-Download-Range\",\"X-Goog-Hash\",\"X-Goog-Updated-Authorization\",\"X-Server-Object-Version\",\"X-Guploader-Customer\",\"X-Guploader-Upload-Result\",\"X-Guploader-Uploadid\"]},\"rms\":\"migrated\",\"cors\":false},\"isLoggedIn\":true,\"signInDeprecation\":{\"rate\":0.0},\"include_granted_scopes\":true,\"llang\":\"en\",\"plus_layer\":{\"isEnabled\":false},\"iframes\":{\"youtube\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/youtube?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\"ytsubscribe\":{\"url\":\"https://www.youtube.com/subscribe_embed?usegapi\\u003d1\"},\"plus_circle\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/plus/circle?usegapi\\u003d1\"},\"plus_share\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/+1/sharebutton?plusShare\\u003dtrue\\u0026usegapi\\u003d1\"},\"rbr_s\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/render/recobarsimplescroller\"},\"udc_webconsentflow\":{\"params\":{\"url\":\"\"},\"url\":\"https://www.google.com/settings/webconsent?usegapi\\u003d1\"},\":source:\":\"3p\",\"blogger\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/blogger?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\"evwidget\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/events/widget?usegapi\\u003d1\"},\":socialhost:\":\"https://apis.google.com\",\"shortlists\":{\"url\":\"\"},\"hangout\":{\"url\":\"https://talkgadget.google.com/:session_prefix:talkgadget/_/widget\"},\"plus_followers\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/_/im/_/widget/render/plus/followers?usegapi\\u003d1\"},\"photocomments\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/photocomments?usegapi\\u003d1\"},\"post\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::im_prefix:_/widget/render/post?usegapi\\u003d1\"},\":gplus_url:\":\"https://plus.google.com\",\"signin\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/signin?usegapi\\u003d1\",\"methods\":[\"onauth\"]},\"rbr_i\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/widget/render/recobarinvitation\"},\"share\":{\"url\":\":socialhost:/:session_prefix::im_prefix:_/widget/render/share?usegapi\\u003d1\"},\"plusone\":{\"params\":{\"count\":\"\",\"size\":\"\",\"url\":\"\"},\"url\":\":socialhost:/:session_prefix::se:_/+1/fastbutton?usegapi\\u003d1\"},\"comments\":{\"params\":{\"location\":[\"search\",\"hash\"]},\"url\":\":socialhost:/:session_prefix:_/widget/render/comments?usegapi\\u003d1\",\"methods\":[\"scroll\",\"openwindow\"]},\":im_socialhost:\":\"https://plus.googleapis.com\",\"backdrop\":{\"url\":\"https://clients3.google.com/cast/chromecast/home/widget/backdrop?usegapi\\u003d1\"},\"visibility\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/visibility?usegapi\\u003d1\"},\"autocomplete\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/autocomplete\"},\"additnow\":{\"url\":\"https://apis.google.com/additnow/additnow.html?usegapi\\u003d1\",\"methods\":[\"launchurl\"]},\":signuphost:\":\"https://plus.google.com\",\"appcirclepicker\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/appcirclepicker\"},\"follow\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/follow?usegapi\\u003d1\"},\"community\":{\"url\":\":ctx_socialhost:/:session_prefix::im_prefix:_/widget/render/community?usegapi\\u003d1\"},\"sharetoclassroom\":{\"url\":\"https://www.gstatic.com/classroom/sharewidget/widget_stable.html?usegapi\\u003d1\"},\"ytshare\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/ytshare?usegapi\\u003d1\"},\"plus\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/badge?usegapi\\u003d1\"},\"reportabuse\":{\"params\":{\"url\":\"\"},\"url\":\":socialhost:/:session_prefix:_/widget/render/reportabuse?usegapi\\u003d1\"},\"commentcount\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/commentcount?usegapi\\u003d1\"},\"configurator\":{\"url\":\":socialhost:/:session_prefix:_/plusbuttonconfigurator?usegapi\\u003d1\"},\"zoomableimage\":{\"url\":\"https://ssl.gstatic.com/microscope/embed/\"},\"savetowallet\":{\"url\":\"https://clients5.google.com/s2w/o/savetowallet\"},\"person\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/person?usegapi\\u003d1\"},\"savetodrive\":{\"url\":\"https://drive.google.com/savetodrivebutton?usegapi\\u003d1\",\"methods\":[\"save\"]},\"page\":{\"url\":\":socialhost:/:session_prefix:_/widget/render/page?usegapi\\u003d1\"},\"card\":{\"url\":\":socialhost:/:session_prefix:_/hovercard/card\"}}},\"h\":\"m;/_/scs/apps-static/_/js/k\\u003doz.gapi.en_GB.cJkIm0jUbF0.O/m\\u003d__features__/am\\u003dAQ/rt\\u003dj/d\\u003d1/t\\u003dzcms/rs\\u003dAGLTcCMfB6uTBe-eJT43Gy1rNo6w6uY2fA\",\"u\":\"https://apis.google.com/js/client.js?onload\\u003dOnLoadCallback\",\"hee\":true,\"fp\":\"459cb04dfc6e172aece6e799643434c476cfafbf\",\"dpo\":false},\"fp\":\"459cb04dfc6e172aece6e799643434c476cfafbf\",\"annotation\":[\"interactivepost\",\"recobar\",\"signin2\",\"autocomplete\",\"profile\"],\"bimodal\":[\"signin\",\"share\"]}});\n  230  \n\n/run/media/ted/Data/WEB/ths_signup/client/templates/users_list.js:\n   55  Template.usersList.onCreated(function() {\n   56    var self = this;\n   57:   self.opt = new ReactiveVar([0,20]);\n   58    self.autorun(function(){\n   59      self.subscribe('usersPaginated', self.opt.get()[0], self.opt.get()[1]);\n\n3 matches across 3 files\n\n\nSearching 107 files for \"chosen\"\n\n/run/media/ted/Data/WEB/ths_signup/UIHelpers.js:\n   28  \n   29  \n   30: UI.registerHelper(\"chosenEvents\", function() {\n   31:     console.log('chosenEvents ' +this);\n   32      var q = [];\n   33      _.each(this.events, function (a){\n\n/run/media/ted/Data/WEB/ths_signup/methods.js:\n  216        //   EventList.update(event, {$inc: {registered: 1} } );\n  217        //   Session.set(\"Q\",true);\n  218:       //   // $(q.target).parent().prev().toggleClass(\"chosen\");\n  219        // }else{\n  220        //   if(Meteor.users.findOne(user).events.length == RegisterLimit.find().fetch()[0].number){\n\n/run/media/ted/Data/WEB/ths_signup/client/stylesheets/style.css:\n    1: .chosen {\n    2    background-color: #0089EC;\n    3  }\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.html:\n   50  \t<li>\n   51  \t  <!--{{#if isEventFull}}-->\n   52:   \t\t<div class=\"collapsible-header {{#if isEventChosen}}chosen{{/if}} {{s}} {{#if isEventFull}}full{{/if}}\"><i class=\"material-icons left\">today</i>{{summary}} {{#if isAdmin}}<a> Registered: {{usersLength}} Section:{{s}}</a>{{/if}}<span class=\"right\">{{hourFormat start.dateTime}} - {{hourFormat end.dateTime}}</span></div>\n   53    \t\t<div class=\"collapsible-body container\">\n   54    \t\t\t<br />\n   ..\n   63  \t\t\t\t{{else}}\n   64  \t\t\t\t\t<div class=\"valign-wrapper\">\n   65: \t\t    \t\t\t<a id=\"register\" class=\"waves-effect btn valign\">{{#if isEventChosen}}Unregister{{else}}Register{{/if}}</a>\n   66  \t\t\t\t\t</div>\n   67  \t\t\t\t{{/if}}\n   ..\n  162      <ul class=\"collapsible\">\n  163      {{#with currentUser}}\n  164: \t    {{#each chosenEvents}}\n  165  \t      {{#if p start.dateTime }}\n  166  \t\t    \t<center><h5 class=\"\" id=\"{{_id}}\">{{dayFormat start.dateTime}}</h5></center>\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n   75      //   Materialize.toast(\"You've unregistered for this event!\" , 1000);\n   76      //   }\n   77:     //   // $(event.target).parent().parent().prev().toggleClass(\"chosen\");\n   78      // }\n   79        var s = '<i class=\"material-icons left\">grade</i>Register';\n   ..\n  106    },\n  107  \n  108:   isEventChosen: function() {\n  109    \treturn (Meteor.user().events.indexOf(this._id) > -1);\n  110    }\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/users_list.html:\n   32  \t\t\t\t\t<h5>Assigned events:</h5>\n   33  \t\t\t\t\t<ul class=\"collection\">\n   34: \t\t\t\t\t\t{{#each chosenEvents}}\n   35  \t\t\t\t\t    <!--     {{#if p start.dateTime }}\n   36  \t\t\t\t\t  \t    \t<center><h6 class=\"\" id=\"{{_id}}\"></h6></center>\n\n11 matches across 6 files\n\n\nSearching 107 files for \"isEventFull\"\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.html:\n   49  <template name=\"oneEvent\">\n   50  \t<li>\n   51: \t  <!--{{#if isEventFull}}-->\n   52:   \t\t<div class=\"collapsible-header {{#if isEventChosen}}chosen{{/if}} {{s}} {{#if isEventFull}}full{{/if}}\"><i class=\"material-icons left\">today</i>{{summary}} {{#if isAdmin}}<a> Registered: {{usersLength}} Section:{{s}} {{#if isEventFull}}Event is full. Registration has been closed.{{/if}}</a>{{/if}}<span class=\"right\">{{hourFormat start.dateTime}} - {{hourFormat end.dateTime}}</span></div>\n   53    \t\t<div class=\"collapsible-body container\">\n   54    \t\t\t<br />\n   ..\n   57    \t\t\t<br />\n   58  \t\t\t{{#if hasUserDecided}}\n   59: \t\t\t\t{{#if isEventFull}}\n   60  \t\t\t\t\t<div class=\"valign-wrapper\">\n   61  \t\t    \t\t\t<a class=\"waves-effect btn valign disabled\">Event full</a>\n\n/run/media/ted/Data/WEB/ths_signup/client/templates/events_list.js:\n   98      },\n   99      \n  100:   isEventFull: function() { \n  101:     console.log('isEventFull'+this);\n  102      if(!Role.users.IsInRole(Meteor.user()._id, 'admin') && !Meteor.user().decided && this.users.length >= this.limit)\n  103        return false;\n\n6 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 649548,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "client/stylesheets/style.css",
			"settings":
			{
				"buffer_size": 260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "client/templates/events_list.html",
			"settings":
			{
				"buffer_size": 5163,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "client/templates/events_list.js",
			"settings":
			{
				"buffer_size": 20200,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "UIHelpers.js",
			"settings":
			{
				"buffer_size": 2354,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "client/templates/admin.html",
			"settings":
			{
				"buffer_size": 1944,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"time",
				"CodeTimeTracker: Open Dashboard"
			],
			[
				"projec",
				"Project: Save As"
			],
			[
				"Package In",
				"Package Control: Install Package"
			],
			[
				"Package Insta",
				"Package Control: Install Package"
			],
			[
				"Package Inst",
				"Package Control: Install Package"
			],
			[
				"Package Install",
				"Package Control: Install Package"
			],
			[
				"Java",
				"Javatar: Builds..."
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 132.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/run/media/ted/Data/WEB/ths_signup/client/templates/admin.js",
		"/home/ted/Pair.java",
		"/home/ted/Sites/meteor/ths_signup/.meteor/packages",
		"/home/ted/Sites/meteor/ths_signup/client/templates/kurwa.html",
		"/home/ted/Sites/meteor/ths_signup/client/templates/home.html",
		"/home/ted/Sites/meteor/ths_signup/ths_signup.sublime-project",
		"/home/ted/Sites/meteor/ths_signup/client/templates/users_list.js",
		"/home/ted/Sites/meteor/ths_signup/client/templates/users_list.html",
		"/home/ted/Sites/meteor/ths_signup/client/templates/events_list.js",
		"/home/ted/Sites/meteor/ths_signup/client/templates/events_list.html",
		"/home/ted/Sites/meteor/ths_signup/methods.js",
		"/home/ted/Sites/meteor/ths_signup/client/templates/home.js",
		"/home/ted/Sites/meteor/ths_signup/lib/collections.js",
		"/home/ted/Sites/meteor/ths_signup/lib/scripts.js",
		"/home/ted/Sites/meteor/ths_signup/server/bootstrap.js",
		"/home/ted/Sites/gcal/index.html",
		"/home/ted/Sites/meteor/ths_signup/server/lib/accounts.js",
		"/home/ted/Sites/meteor/ths_signup/server/publish.js",
		"/home/ted/Sites/meteor/simple-todos/simple-todos.css",
		"/home/ted/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/ted/.config/sublime-text-3/Packages/auto-save/README.md",
		"/home/ted/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/includes/builder/main-modules.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/style.css",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/page.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/functions.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/includes/builder/functions.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/single.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/includes/builder/scripts/salvattore.min.js",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/index.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/Divi/index.php",
		"/home/ted/Sites/m20/public_html/wp-config.php",
		"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant/wpml-config.xml",
		"/home/ted/.config/sublime-text-3/Packages/Javatar/Developers/Proto.javatar-packages",
		"/home/ted/.config/sublime-text-3/Packages/User/Distraction Free.sublime-settings",
		"/usr/share/python-apt/templates/Ubuntu.info",
		"/home/ted/Dev/KTH/Java1/Programming1/OU5/Polyline1.java",
		"/usr/share/python-apt/templates/elementary OS.info",
		"/etc/apt/sources.list.d/elementary.list",
		"/etc/apt/sources.list",
		"/etc/apt/sources.list.d/distroshare-trusty.list",
		"/etc/apt/sources.list.d/hugegreenbug-cmt2-trusty.list"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-.meteor/",
			"",
			"/home/ted/Sites/m20/public_html/wp-content/themes/M20_masonry",
			"/home/ted/Sites/m20/public_html/wp-content/themes/KutasGigant",
			"KutasGigant",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"admin",
			"isEventFull",
			"chosen",
			"active",
			"isEventFull",
			"'s'",
			"s",
			"s: function()",
			"allEvents",
			"user_eve",
			"admin",
			"registerLimit",
			"sectionAdmin",
			"admin",
			"paidE",
			"pay",
			"paid",
			"user-m",
			"mail",
			"LOOL",
			"mail",
			"initUsersLists",
			"init",
			"user_eve",
			"adminEven",
			"oneE",
			"user_event",
			"adminEvent",
			"chosen",
			"form",
			"REmove",
			"registered",
			"=== undefined",
			"count++;\n          // Session.set(Type, count);\n\n          // list.push(event);\n          // Session.set('list',list);",
			"Session",
			"admin",
			"user",
			"summary",
			"title",
			"events_new",
			"\"];\n",
			"width",
			"SUPER_GRID",
			"new-post",
			"SUPER",
			"article",
			"salvattore",
			".size-1of3",
			"new",
			"column",
			"new-column",
			"column",
			"salv",
			"data-columns",
			"et_pb_blog_",
			"et_pb_blog",
			"et_pb_blog_0",
			"et_section_regular",
			"<article id=",
			"et_pb_posts",
			"et_pb_blog_0",
			"et_pb_bg_layout_light",
			"et_pb_posts",
			"et_pb_post",
			"et_section_regular",
			"truncate_post(",
			"the_content",
			"data-columns",
			"data-column",
			"data-",
			"the_content(",
			"the_conte"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "methods.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8489,
						"regions":
						{
						},
						"selection":
						[
							[
								645,
								645
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 649548,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										200,
										209
									],
									[
										453,
										463
									],
									[
										701,
										714
									],
									[
										830,
										843
									],
									[
										975,
										988
									],
									[
										1123,
										1136
									],
									[
										1257,
										1270
									],
									[
										1449,
										1450
									],
									[
										1451,
										1452
									],
									[
										1471,
										1472
									],
									[
										1499,
										1500
									],
									[
										1509,
										1510
									],
									[
										1511,
										1512
									],
									[
										1519,
										1520
									],
									[
										1536,
										1537
									],
									[
										1547,
										1548
									],
									[
										1552,
										1553
									],
									[
										1568,
										1569
									],
									[
										1570,
										1571
									],
									[
										1588,
										1589
									],
									[
										1605,
										1606
									],
									[
										1609,
										1610
									],
									[
										1639,
										1640
									],
									[
										1657,
										1658
									],
									[
										1659,
										1660
									],
									[
										1676,
										1677
									],
									[
										1686,
										1687
									],
									[
										1749,
										1750
									],
									[
										1758,
										1759
									],
									[
										1844,
										1845
									],
									[
										1901,
										1902
									],
									[
										1968,
										1969
									],
									[
										2028,
										2029
									],
									[
										2098,
										2099
									],
									[
										2220,
										2221
									],
									[
										2335,
										2336
									],
									[
										2400,
										2401
									],
									[
										2402,
										2403
									],
									[
										2403,
										2404
									],
									[
										2408,
										2409
									],
									[
										2420,
										2421
									],
									[
										2429,
										2430
									],
									[
										2466,
										2467
									],
									[
										2575,
										2576
									],
									[
										2656,
										2657
									],
									[
										2671,
										2672
									],
									[
										2679,
										2680
									],
									[
										2710,
										2711
									],
									[
										2723,
										2724
									],
									[
										2731,
										2732
									],
									[
										2739,
										2740
									],
									[
										2787,
										2788
									],
									[
										2794,
										2795
									],
									[
										2828,
										2829
									],
									[
										2838,
										2839
									],
									[
										2923,
										2924
									],
									[
										2939,
										2940
									],
									[
										2946,
										2947
									],
									[
										2949,
										2950
									],
									[
										2983,
										2984
									],
									[
										2997,
										2998
									],
									[
										3004,
										3005
									],
									[
										3007,
										3008
									],
									[
										3015,
										3016
									],
									[
										3071,
										3072
									],
									[
										3074,
										3075
									],
									[
										3077,
										3078
									],
									[
										3111,
										3112
									],
									[
										3122,
										3123
									],
									[
										3125,
										3126
									],
									[
										3216,
										3217
									],
									[
										3230,
										3231
									],
									[
										3232,
										3233
									],
									[
										3287,
										3288
									],
									[
										3335,
										3336
									],
									[
										3349,
										3350
									],
									[
										3396,
										3397
									],
									[
										3401,
										3402
									],
									[
										3412,
										3413
									],
									[
										3466,
										3467
									],
									[
										3492,
										3493
									],
									[
										3532,
										3533
									],
									[
										3598,
										3599
									],
									[
										3600,
										3601
									],
									[
										3607,
										3608
									],
									[
										3653,
										3654
									],
									[
										3655,
										3656
									],
									[
										3662,
										3663
									],
									[
										3700,
										3701
									],
									[
										3702,
										3703
									],
									[
										3709,
										3710
									],
									[
										3757,
										3758
									],
									[
										3759,
										3760
									],
									[
										3766,
										3767
									],
									[
										3803,
										3804
									],
									[
										3810,
										3811
									],
									[
										3820,
										3821
									],
									[
										3821,
										3822
									],
									[
										3857,
										3858
									],
									[
										3945,
										3946
									],
									[
										3959,
										3960
									],
									[
										4007,
										4008
									],
									[
										4075,
										4076
									],
									[
										4089,
										4090
									],
									[
										4137,
										4138
									],
									[
										4205,
										4206
									],
									[
										4218,
										4219
									],
									[
										4254,
										4255
									],
									[
										4257,
										4258
									],
									[
										4261,
										4262
									],
									[
										4277,
										4278
									],
									[
										4340,
										4341
									],
									[
										4343,
										4344
									],
									[
										4347,
										4348
									],
									[
										4363,
										4364
									],
									[
										4375,
										4376
									],
									[
										4435,
										4436
									],
									[
										4472,
										4473
									],
									[
										4485,
										4486
									],
									[
										4488,
										4489
									],
									[
										4530,
										4531
									],
									[
										4533,
										4534
									],
									[
										4576,
										4577
									],
									[
										4589,
										4590
									],
									[
										4592,
										4593
									],
									[
										4635,
										4636
									],
									[
										4638,
										4639
									],
									[
										4641,
										4642
									],
									[
										4703,
										4704
									],
									[
										4714,
										4715
									],
									[
										4733,
										4734
									],
									[
										4737,
										4738
									],
									[
										4757,
										4758
									],
									[
										4766,
										4767
									],
									[
										4794,
										4795
									],
									[
										4876,
										4877
									],
									[
										4960,
										4961
									],
									[
										4967,
										4968
									],
									[
										4976,
										4977
									],
									[
										5022,
										5023
									],
									[
										5027,
										5028
									],
									[
										5037,
										5038
									],
									[
										5054,
										5055
									],
									[
										5153,
										5154
									],
									[
										5159,
										5160
									],
									[
										5175,
										5176
									],
									[
										5351,
										5352
									],
									[
										5359,
										5360
									],
									[
										5364,
										5365
									],
									[
										5454,
										5455
									],
									[
										5538,
										5539
									],
									[
										5542,
										5543
									],
									[
										5564,
										5565
									],
									[
										5634,
										5635
									],
									[
										5655,
										5656
									],
									[
										5720,
										5721
									],
									[
										5731,
										5732
									],
									[
										5848,
										5849
									],
									[
										5863,
										5864
									],
									[
										5975,
										5976
									],
									[
										5983,
										5984
									],
									[
										6062,
										6063
									],
									[
										6091,
										6092
									],
									[
										6119,
										6120
									],
									[
										6237,
										6238
									],
									[
										6245,
										6246
									],
									[
										6374,
										6375
									],
									[
										6378,
										6379
									],
									[
										6385,
										6386
									],
									[
										6638,
										6639
									],
									[
										6645,
										6646
									],
									[
										6650,
										6651
									],
									[
										6667,
										6668
									],
									[
										6705,
										6706
									],
									[
										6741,
										6742
									],
									[
										6852,
										6853
									],
									[
										6869,
										6870
									],
									[
										6912,
										6913
									],
									[
										7045,
										7046
									],
									[
										7060,
										7061
									],
									[
										7142,
										7143
									],
									[
										7154,
										7155
									],
									[
										7195,
										7196
									],
									[
										7236,
										7237
									],
									[
										7240,
										7241
									],
									[
										7263,
										7264
									],
									[
										7312,
										7313
									],
									[
										7313,
										7314
									],
									[
										7319,
										7320
									],
									[
										7379,
										7380
									],
									[
										7394,
										7395
									],
									[
										7428,
										7429
									],
									[
										7459,
										7460
									],
									[
										7463,
										7464
									],
									[
										7607,
										7608
									],
									[
										7609,
										7610
									],
									[
										7641,
										7642
									],
									[
										7658,
										7659
									],
									[
										7684,
										7685
									],
									[
										7695,
										7696
									],
									[
										7732,
										7733
									],
									[
										7736,
										7737
									],
									[
										7778,
										7779
									],
									[
										7844,
										7845
									],
									[
										7866,
										7867
									],
									[
										7902,
										7903
									],
									[
										7912,
										7913
									],
									[
										7919,
										7920
									],
									[
										7956,
										7957
									],
									[
										7960,
										7961
									],
									[
										7970,
										7971
									],
									[
										8040,
										8041
									],
									[
										8103,
										8104
									],
									[
										8167,
										8168
									],
									[
										8208,
										8209
									],
									[
										8222,
										8223
									],
									[
										8358,
										8359
									],
									[
										8371,
										8372
									],
									[
										8378,
										8379
									],
									[
										8452,
										8453
									],
									[
										8530,
										8531
									],
									[
										8582,
										8583
									],
									[
										8668,
										8669
									],
									[
										8687,
										8688
									],
									[
										8713,
										8714
									],
									[
										8740,
										8741
									],
									[
										8748,
										8749
									],
									[
										8767,
										8768
									],
									[
										8774,
										8775
									],
									[
										8787,
										8788
									],
									[
										8793,
										8794
									],
									[
										8871,
										8872
									],
									[
										8930,
										8931
									],
									[
										9087,
										9088
									],
									[
										9088,
										9089
									],
									[
										9114,
										9115
									],
									[
										9118,
										9119
									],
									[
										9179,
										9180
									],
									[
										9189,
										9190
									],
									[
										9190,
										9191
									],
									[
										9291,
										9292
									],
									[
										9292,
										9293
									],
									[
										9433,
										9434
									],
									[
										9434,
										9435
									],
									[
										9547,
										9548
									],
									[
										9577,
										9578
									],
									[
										9584,
										9585
									],
									[
										9593,
										9594
									],
									[
										9600,
										9601
									],
									[
										9614,
										9615
									],
									[
										9624,
										9625
									],
									[
										9646,
										9647
									],
									[
										9699,
										9700
									],
									[
										9708,
										9709
									],
									[
										9746,
										9747
									],
									[
										9765,
										9766
									],
									[
										9766,
										9767
									],
									[
										9792,
										9793
									],
									[
										9841,
										9842
									],
									[
										9871,
										9872
									],
									[
										10074,
										10075
									],
									[
										10105,
										10106
									],
									[
										10108,
										10109
									],
									[
										10149,
										10150
									],
									[
										10152,
										10153
									],
									[
										10213,
										10214
									],
									[
										10216,
										10217
									],
									[
										10220,
										10221
									],
									[
										10233,
										10234
									],
									[
										10257,
										10258
									],
									[
										10260,
										10261
									],
									[
										10264,
										10265
									],
									[
										10312,
										10313
									],
									[
										10315,
										10316
									],
									[
										10361,
										10362
									],
									[
										10433,
										10434
									],
									[
										10475,
										10476
									],
									[
										10478,
										10479
									],
									[
										10495,
										10496
									],
									[
										10508,
										10509
									],
									[
										10515,
										10516
									],
									[
										10621,
										10622
									],
									[
										10669,
										10670
									],
									[
										10691,
										10692
									],
									[
										10739,
										10740
									],
									[
										10745,
										10746
									],
									[
										10748,
										10749
									],
									[
										10782,
										10783
									],
									[
										10785,
										10786
									],
									[
										10799,
										10800
									],
									[
										10818,
										10819
									],
									[
										10868,
										10869
									],
									[
										10874,
										10875
									],
									[
										10911,
										10912
									],
									[
										10914,
										10915
									],
									[
										10928,
										10929
									],
									[
										10947,
										10948
									],
									[
										10985,
										10986
									],
									[
										10989,
										10990
									],
									[
										10992,
										10993
									],
									[
										11044,
										11045
									],
									[
										11060,
										11061
									],
									[
										11068,
										11069
									],
									[
										11071,
										11072
									],
									[
										11114,
										11115
									],
									[
										11130,
										11131
									],
									[
										11141,
										11142
									],
									[
										11190,
										11191
									],
									[
										11193,
										11194
									],
									[
										11207,
										11208
									],
									[
										11226,
										11227
									],
									[
										11265,
										11266
									],
									[
										11268,
										11269
									],
									[
										11283,
										11284
									],
									[
										11335,
										11336
									],
									[
										11338,
										11339
									],
									[
										11353,
										11354
									],
									[
										11408,
										11409
									],
									[
										11411,
										11412
									],
									[
										11425,
										11426
									],
									[
										11440,
										11441
									],
									[
										11447,
										11448
									],
									[
										11509,
										11510
									],
									[
										11510,
										11511
									],
									[
										11526,
										11527
									],
									[
										11548,
										11549
									],
									[
										11554,
										11555
									],
									[
										11557,
										11558
									],
									[
										11564,
										11565
									],
									[
										11574,
										11575
									],
									[
										11577,
										11578
									],
									[
										11588,
										11589
									],
									[
										11646,
										11647
									],
									[
										11680,
										11681
									],
									[
										11709,
										11710
									],
									[
										11724,
										11725
									],
									[
										11776,
										11777
									],
									[
										11777,
										11778
									],
									[
										11795,
										11796
									],
									[
										11824,
										11825
									],
									[
										11836,
										11837
									],
									[
										11840,
										11841
									],
									[
										11888,
										11889
									],
									[
										11918,
										11919
									],
									[
										11946,
										11947
									],
									[
										11959,
										11960
									],
									[
										12014,
										12015
									],
									[
										12032,
										12033
									],
									[
										12035,
										12036
									],
									[
										12063,
										12064
									],
									[
										12104,
										12105
									],
									[
										12108,
										12109
									],
									[
										12170,
										12171
									],
									[
										12173,
										12174
									],
									[
										12233,
										12234
									],
									[
										12265,
										12266
									],
									[
										12270,
										12271
									],
									[
										12299,
										12300
									],
									[
										12359,
										12360
									],
									[
										12414,
										12415
									],
									[
										12433,
										12434
									],
									[
										12485,
										12486
									],
									[
										12504,
										12505
									],
									[
										12512,
										12513
									],
									[
										12515,
										12516
									],
									[
										12549,
										12550
									],
									[
										12568,
										12569
									],
									[
										12613,
										12614
									],
									[
										12632,
										12633
									],
									[
										12639,
										12640
									],
									[
										12643,
										12644
									],
									[
										12687,
										12688
									],
									[
										12706,
										12707
									],
									[
										12717,
										12718
									],
									[
										12793,
										12794
									],
									[
										12808,
										12809
									],
									[
										12863,
										12864
									],
									[
										12915,
										12916
									],
									[
										12963,
										12964
									],
									[
										13029,
										13030
									],
									[
										13033,
										13034
									],
									[
										13081,
										13082
									],
									[
										13094,
										13095
									],
									[
										13185,
										13186
									],
									[
										13213,
										13214
									],
									[
										13330,
										13331
									],
									[
										13402,
										13403
									],
									[
										13423,
										13424
									],
									[
										13487,
										13488
									],
									[
										13543,
										13544
									],
									[
										13583,
										13584
									],
									[
										13590,
										13591
									],
									[
										13732,
										13733
									],
									[
										13771,
										13772
									],
									[
										13850,
										13851
									],
									[
										13886,
										13887
									],
									[
										13900,
										13901
									],
									[
										13926,
										13927
									],
									[
										13929,
										13930
									],
									[
										13939,
										13940
									],
									[
										13950,
										13951
									],
									[
										13989,
										13990
									],
									[
										13992,
										13993
									],
									[
										14002,
										14003
									],
									[
										14013,
										14014
									],
									[
										14058,
										14059
									],
									[
										14067,
										14068
									],
									[
										14107,
										14108
									],
									[
										14133,
										14134
									],
									[
										14207,
										14208
									],
									[
										14216,
										14217
									],
									[
										14247,
										14248
									],
									[
										14250,
										14251
									],
									[
										14260,
										14261
									],
									[
										14271,
										14272
									],
									[
										14283,
										14284
									],
									[
										14308,
										14309
									],
									[
										14318,
										14319
									],
									[
										14390,
										14391
									],
									[
										14413,
										14414
									],
									[
										14449,
										14450
									],
									[
										14504,
										14505
									],
									[
										14506,
										14507
									],
									[
										14507,
										14508
									],
									[
										14543,
										14544
									],
									[
										14548,
										14549
									],
									[
										14550,
										14551
									],
									[
										14551,
										14552
									],
									[
										14563,
										14564
									],
									[
										14654,
										14655
									],
									[
										14691,
										14692
									],
									[
										14725,
										14726
									],
									[
										14759,
										14760
									],
									[
										14819,
										14820
									],
									[
										14822,
										14823
									],
									[
										14833,
										14834
									],
									[
										14843,
										14844
									],
									[
										14939,
										14940
									],
									[
										14941,
										14942
									],
									[
										14942,
										14943
									],
									[
										14947,
										14948
									],
									[
										14991,
										14992
									],
									[
										15008,
										15009
									],
									[
										15036,
										15037
									],
									[
										15038,
										15039
									],
									[
										15039,
										15040
									],
									[
										15044,
										15045
									],
									[
										15051,
										15052
									],
									[
										15057,
										15058
									],
									[
										15091,
										15092
									],
									[
										15094,
										15095
									],
									[
										15104,
										15105
									],
									[
										15123,
										15124
									],
									[
										15159,
										15160
									],
									[
										15188,
										15189
									],
									[
										15228,
										15229
									],
									[
										15255,
										15256
									],
									[
										15258,
										15259
									],
									[
										15262,
										15263
									],
									[
										15291,
										15292
									],
									[
										15294,
										15295
									],
									[
										15304,
										15305
									],
									[
										15351,
										15352
									],
									[
										15368,
										15369
									],
									[
										15371,
										15372
									],
									[
										15382,
										15383
									],
									[
										15407,
										15408
									],
									[
										15409,
										15410
									],
									[
										15410,
										15411
									],
									[
										15415,
										15416
									],
									[
										15444,
										15445
									],
									[
										15524,
										15525
									],
									[
										15527,
										15528
									],
									[
										15537,
										15538
									],
									[
										15546,
										15547
									],
									[
										15556,
										15557
									],
									[
										15594,
										15595
									],
									[
										15623,
										15624
									],
									[
										15664,
										15665
									],
									[
										15688,
										15689
									],
									[
										15695,
										15696
									],
									[
										15698,
										15699
									],
									[
										15702,
										15703
									],
									[
										15755,
										15756
									],
									[
										15757,
										15758
									],
									[
										15758,
										15759
									],
									[
										15763,
										15764
									],
									[
										15809,
										15810
									],
									[
										15814,
										15815
									],
									[
										15843,
										15844
									],
									[
										15845,
										15846
									],
									[
										15846,
										15847
									],
									[
										15851,
										15852
									],
									[
										15858,
										15859
									],
									[
										15864,
										15865
									],
									[
										15910,
										15911
									],
									[
										15912,
										15913
									],
									[
										15913,
										15914
									],
									[
										15918,
										15919
									],
									[
										15953,
										15954
									],
									[
										15955,
										15956
									],
									[
										15956,
										15957
									],
									[
										15961,
										15962
									],
									[
										16064,
										16065
									],
									[
										16067,
										16068
									],
									[
										16078,
										16079
									],
									[
										16094,
										16095
									],
									[
										16154,
										16155
									],
									[
										16157,
										16158
									],
									[
										16167,
										16168
									],
									[
										16176,
										16177
									],
									[
										16186,
										16187
									],
									[
										16226,
										16227
									],
									[
										16255,
										16256
									],
									[
										16298,
										16299
									],
									[
										16322,
										16323
									],
									[
										16329,
										16330
									],
									[
										16332,
										16333
									],
									[
										16336,
										16337
									],
									[
										16369,
										16370
									],
									[
										16372,
										16373
									],
									[
										16382,
										16383
									],
									[
										16464,
										16465
									],
									[
										16466,
										16467
									],
									[
										16467,
										16468
									],
									[
										16472,
										16473
									],
									[
										16520,
										16521
									],
									[
										16525,
										16526
									],
									[
										16556,
										16557
									],
									[
										16558,
										16559
									],
									[
										16559,
										16560
									],
									[
										16564,
										16565
									],
									[
										16571,
										16572
									],
									[
										16577,
										16578
									],
									[
										16617,
										16618
									],
									[
										16619,
										16620
									],
									[
										16620,
										16621
									],
									[
										16625,
										16626
									],
									[
										16680,
										16681
									],
									[
										16682,
										16683
									],
									[
										16683,
										16684
									],
									[
										16688,
										16689
									],
									[
										16721,
										16722
									],
									[
										16742,
										16743
									],
									[
										16744,
										16745
									],
									[
										16745,
										16746
									],
									[
										16750,
										16751
									],
									[
										16879,
										16880
									],
									[
										16882,
										16883
									],
									[
										16893,
										16894
									],
									[
										16912,
										16913
									],
									[
										16975,
										16976
									],
									[
										16978,
										16979
									],
									[
										16988,
										16989
									],
									[
										16997,
										16998
									],
									[
										17007,
										17008
									],
									[
										17047,
										17048
									],
									[
										17076,
										17077
									],
									[
										17119,
										17120
									],
									[
										17143,
										17144
									],
									[
										17150,
										17151
									],
									[
										17153,
										17154
									],
									[
										17157,
										17158
									],
									[
										17190,
										17191
									],
									[
										17193,
										17194
									],
									[
										17203,
										17204
									],
									[
										17248,
										17249
									],
									[
										17250,
										17251
									],
									[
										17251,
										17252
									],
									[
										17256,
										17257
									],
									[
										17288,
										17289
									],
									[
										17290,
										17291
									],
									[
										17291,
										17292
									],
									[
										17296,
										17297
									],
									[
										17373,
										17374
									],
									[
										17375,
										17376
									],
									[
										17376,
										17377
									],
									[
										17381,
										17382
									],
									[
										17429,
										17430
									],
									[
										17434,
										17435
									],
									[
										17465,
										17466
									],
									[
										17467,
										17468
									],
									[
										17468,
										17469
									],
									[
										17473,
										17474
									],
									[
										17480,
										17481
									],
									[
										17486,
										17487
									],
									[
										17545,
										17546
									],
									[
										17566,
										17567
									],
									[
										17568,
										17569
									],
									[
										17569,
										17570
									],
									[
										17574,
										17575
									],
									[
										17728,
										17729
									],
									[
										17731,
										17732
									],
									[
										17742,
										17743
									],
									[
										17752,
										17753
									],
									[
										17767,
										17768
									],
									[
										17830,
										17831
									],
									[
										17833,
										17834
									],
									[
										17843,
										17844
									],
									[
										17852,
										17853
									],
									[
										17862,
										17863
									],
									[
										17900,
										17901
									],
									[
										17929,
										17930
									],
									[
										17963,
										17964
									],
									[
										17965,
										17966
									],
									[
										17966,
										17967
									],
									[
										17971,
										17972
									],
									[
										18044,
										18045
									],
									[
										18045,
										18046
									],
									[
										18051,
										18052
									],
									[
										18077,
										18078
									],
									[
										18110,
										18111
									],
									[
										18113,
										18114
									],
									[
										18124,
										18125
									],
									[
										18134,
										18135
									],
									[
										18150,
										18151
									],
									[
										18207,
										18208
									],
									[
										18209,
										18210
									],
									[
										18210,
										18211
									],
									[
										18215,
										18216
									],
									[
										18268,
										18269
									],
									[
										18272,
										18273
									],
									[
										18289,
										18290
									],
									[
										18312,
										18313
									],
									[
										18319,
										18320
									],
									[
										18330,
										18331
									],
									[
										18350,
										18351
									],
									[
										18362,
										18363
									],
									[
										18454,
										18455
									],
									[
										18475,
										18476
									],
									[
										18501,
										18502
									],
									[
										18504,
										18505
									],
									[
										18514,
										18515
									],
									[
										18521,
										18522
									],
									[
										18571,
										18572
									],
									[
										18595,
										18596
									],
									[
										18598,
										18599
									],
									[
										18602,
										18603
									],
									[
										18657,
										18658
									],
									[
										18660,
										18661
									],
									[
										18674,
										18675
									],
									[
										18685,
										18686
									],
									[
										18698,
										18699
									],
									[
										18746,
										18747
									],
									[
										18749,
										18750
									],
									[
										18760,
										18761
									],
									[
										18770,
										18771
									],
									[
										18810,
										18811
									],
									[
										18834,
										18835
									],
									[
										18841,
										18842
									],
									[
										18844,
										18845
									],
									[
										18848,
										18849
									],
									[
										18895,
										18896
									],
									[
										18914,
										18915
									],
									[
										18917,
										18918
									],
									[
										18951,
										18952
									],
									[
										18975,
										18976
									],
									[
										19004,
										19005
									],
									[
										19065,
										19066
									],
									[
										19124,
										19125
									],
									[
										19147,
										19148
									],
									[
										19157,
										19158
									],
									[
										19172,
										19173
									],
									[
										19175,
										19176
									],
									[
										19236,
										19237
									],
									[
										19262,
										19263
									],
									[
										19354,
										19355
									],
									[
										19383,
										19384
									],
									[
										19407,
										19408
									],
									[
										19431,
										19432
									],
									[
										19438,
										19439
									],
									[
										19441,
										19442
									],
									[
										19445,
										19446
									],
									[
										19472,
										19473
									],
									[
										19475,
										19476
									],
									[
										19485,
										19486
									],
									[
										19497,
										19498
									],
									[
										19508,
										19509
									],
									[
										19540,
										19541
									],
									[
										19543,
										19544
									],
									[
										19553,
										19554
									],
									[
										19610,
										19611
									],
									[
										19632,
										19633
									],
									[
										19665,
										19666
									],
									[
										19668,
										19669
									],
									[
										19679,
										19680
									],
									[
										19689,
										19690
									],
									[
										19729,
										19730
									],
									[
										19756,
										19757
									],
									[
										19759,
										19760
									],
									[
										19763,
										19764
									],
									[
										19813,
										19814
									],
									[
										19816,
										19817
									],
									[
										19826,
										19827
									],
									[
										19862,
										19863
									],
									[
										19888,
										19889
									],
									[
										19920,
										19921
									],
									[
										19947,
										19948
									],
									[
										19950,
										19951
									],
									[
										19954,
										19955
									],
									[
										19983,
										19984
									],
									[
										20012,
										20013
									],
									[
										20046,
										20047
									],
									[
										20049,
										20050
									],
									[
										20059,
										20060
									],
									[
										20078,
										20079
									],
									[
										20110,
										20111
									],
									[
										20113,
										20114
									],
									[
										20123,
										20124
									],
									[
										20144,
										20145
									],
									[
										20213,
										20214
									],
									[
										20231,
										20232
									],
									[
										20264,
										20265
									],
									[
										20267,
										20268
									],
									[
										20277,
										20278
									],
									[
										20289,
										20290
									],
									[
										20304,
										20305
									],
									[
										20417,
										20418
									],
									[
										20483,
										20484
									],
									[
										20503,
										20504
									],
									[
										20509,
										20510
									],
									[
										20527,
										20528
									],
									[
										20576,
										20577
									],
									[
										20641,
										20642
									],
									[
										20772,
										20773
									],
									[
										20874,
										20875
									],
									[
										20945,
										20946
									],
									[
										20954,
										20955
									],
									[
										20962,
										20963
									],
									[
										21035,
										21036
									],
									[
										21058,
										21059
									],
									[
										21162,
										21163
									],
									[
										21269,
										21270
									],
									[
										21276,
										21277
									],
									[
										21296,
										21297
									],
									[
										21297,
										21298
									],
									[
										21324,
										21325
									],
									[
										21325,
										21326
									],
									[
										21354,
										21355
									],
									[
										21362,
										21363
									],
									[
										21363,
										21364
									],
									[
										21378,
										21379
									],
									[
										21385,
										21386
									],
									[
										21388,
										21389
									],
									[
										21550,
										21551
									],
									[
										21744,
										21745
									],
									[
										21817,
										21818
									],
									[
										22011,
										22012
									],
									[
										22200,
										22201
									],
									[
										22201,
										22202
									],
									[
										22208,
										22209
									],
									[
										22221,
										22222
									],
									[
										22245,
										22246
									],
									[
										22248,
										22249
									],
									[
										22263,
										22264
									],
									[
										22266,
										22267
									],
									[
										22288,
										22289
									],
									[
										22289,
										22290
									],
									[
										22296,
										22297
									],
									[
										22309,
										22310
									],
									[
										22328,
										22329
									],
									[
										22332,
										22333
									],
									[
										22335,
										22336
									],
									[
										22340,
										22341
									],
									[
										22349,
										22350
									],
									[
										22352,
										22353
									],
									[
										22366,
										22367
									],
									[
										22458,
										22459
									],
									[
										22465,
										22466
									],
									[
										22484,
										22485
									],
									[
										22485,
										22486
									],
									[
										22499,
										22500
									],
									[
										22523,
										22524
									],
									[
										22524,
										22525
									],
									[
										22553,
										22554
									],
									[
										22561,
										22562
									],
									[
										22562,
										22563
									],
									[
										22571,
										22572
									],
									[
										22596,
										22597
									],
									[
										22603,
										22604
									],
									[
										22605,
										22606
									],
									[
										22612,
										22613
									],
									[
										22615,
										22616
									],
									[
										22639,
										22640
									],
									[
										22640,
										22641
									],
									[
										22649,
										22650
									],
									[
										22684,
										22685
									],
									[
										22691,
										22692
									],
									[
										22731,
										22732
									],
									[
										22839,
										22840
									],
									[
										22861,
										22862
									],
									[
										22870,
										22871
									],
									[
										22879,
										22880
									],
									[
										22891,
										22892
									],
									[
										22896,
										22897
									],
									[
										22950,
										22951
									],
									[
										22957,
										22958
									],
									[
										22958,
										22959
									],
									[
										22966,
										22967
									],
									[
										23016,
										23017
									],
									[
										23023,
										23024
									],
									[
										23024,
										23025
									],
									[
										23031,
										23032
									],
									[
										23087,
										23088
									],
									[
										23088,
										23089
									],
									[
										23144,
										23145
									],
									[
										23155,
										23156
									],
									[
										23156,
										23157
									],
									[
										23166,
										23167
									],
									[
										23170,
										23171
									],
									[
										23173,
										23174
									],
									[
										23180,
										23181
									],
									[
										23193,
										23194
									],
									[
										23215,
										23216
									],
									[
										23270,
										23271
									],
									[
										23271,
										23272
									],
									[
										23278,
										23279
									],
									[
										23291,
										23292
									],
									[
										23330,
										23331
									],
									[
										23361,
										23362
									],
									[
										23400,
										23401
									],
									[
										23401,
										23402
									],
									[
										23408,
										23409
									],
									[
										23421,
										23422
									],
									[
										23456,
										23457
									],
									[
										23481,
										23482
									],
									[
										23489,
										23490
									],
									[
										23496,
										23497
									],
									[
										23659,
										23660
									],
									[
										23666,
										23667
									],
									[
										23675,
										23676
									],
									[
										23699,
										23700
									],
									[
										23704,
										23705
									],
									[
										23714,
										23715
									],
									[
										23731,
										23732
									],
									[
										23770,
										23771
									],
									[
										23772,
										23773
									],
									[
										23773,
										23774
									],
									[
										23778,
										23779
									],
									[
										23790,
										23791
									],
									[
										23842,
										23843
									],
									[
										23849,
										23850
									],
									[
										23857,
										23858
									],
									[
										23872,
										23873
									],
									[
										23879,
										23880
									],
									[
										23905,
										23906
									],
									[
										23912,
										23913
									],
									[
										23978,
										23979
									],
									[
										23985,
										23986
									],
									[
										24023,
										24024
									],
									[
										24054,
										24055
									],
									[
										24061,
										24062
									],
									[
										24112,
										24113
									],
									[
										24125,
										24126
									],
									[
										24138,
										24139
									],
									[
										24212,
										24213
									],
									[
										24214,
										24215
									],
									[
										24215,
										24216
									],
									[
										24220,
										24221
									],
									[
										24315,
										24316
									],
									[
										24365,
										24366
									],
									[
										24493,
										24494
									],
									[
										24494,
										24495
									],
									[
										24638,
										24639
									],
									[
										24646,
										24647
									],
									[
										24651,
										24652
									],
									[
										24687,
										24688
									],
									[
										24804,
										24805
									],
									[
										24847,
										24848
									],
									[
										24849,
										24850
									],
									[
										24850,
										24851
									],
									[
										24889,
										24890
									],
									[
										24928,
										24929
									],
									[
										24989,
										24990
									],
									[
										25066,
										25067
									],
									[
										25097,
										25098
									],
									[
										25101,
										25102
									],
									[
										25169,
										25170
									],
									[
										25171,
										25172
									],
									[
										25196,
										25197
									],
									[
										25213,
										25214
									],
									[
										25232,
										25233
									],
									[
										25243,
										25244
									],
									[
										25273,
										25274
									],
									[
										25277,
										25278
									],
									[
										25312,
										25313
									],
									[
										25363,
										25364
									],
									[
										25385,
										25386
									],
									[
										25410,
										25411
									],
									[
										25420,
										25421
									],
									[
										25427,
										25428
									],
									[
										25450,
										25451
									],
									[
										25472,
										25473
									],
									[
										25484,
										25485
									],
									[
										25512,
										25513
									],
									[
										25540,
										25541
									],
									[
										25581,
										25582
									],
									[
										25604,
										25605
									],
									[
										25668,
										25669
									],
									[
										25677,
										25678
									],
									[
										25684,
										25685
									],
									[
										25708,
										25709
									],
									[
										25722,
										25723
									],
									[
										25777,
										25778
									],
									[
										25820,
										25821
									],
									[
										25873,
										25874
									],
									[
										25878,
										25879
									],
									[
										25879,
										25880
									],
									[
										25956,
										25957
									],
									[
										25963,
										25964
									],
									[
										25970,
										25971
									],
									[
										25992,
										25993
									],
									[
										26174,
										26175
									],
									[
										26356,
										26357
									],
									[
										26547,
										26548
									],
									[
										26735,
										26736
									],
									[
										26843,
										26844
									],
									[
										26961,
										26962
									],
									[
										26967,
										26968
									],
									[
										26970,
										26971
									],
									[
										27057,
										27058
									],
									[
										27063,
										27064
									],
									[
										27066,
										27067
									],
									[
										27159,
										27160
									],
									[
										27162,
										27163
									],
									[
										27237,
										27238
									],
									[
										27296,
										27297
									],
									[
										27299,
										27300
									],
									[
										27395,
										27396
									],
									[
										27399,
										27400
									],
									[
										27402,
										27403
									],
									[
										27451,
										27452
									],
									[
										27455,
										27456
									],
									[
										27458,
										27459
									],
									[
										27559,
										27560
									],
									[
										27569,
										27570
									],
									[
										27581,
										27582
									],
									[
										27622,
										27623
									],
									[
										27659,
										27660
									],
									[
										27664,
										27665
									],
									[
										27667,
										27668
									],
									[
										27675,
										27676
									],
									[
										27687,
										27688
									],
									[
										27690,
										27691
									],
									[
										27694,
										27695
									],
									[
										27727,
										27728
									],
									[
										27737,
										27738
									],
									[
										27740,
										27741
									],
									[
										27816,
										27817
									],
									[
										27841,
										27842
									],
									[
										27844,
										27845
									],
									[
										27958,
										27959
									],
									[
										27961,
										27962
									],
									[
										27964,
										27965
									],
									[
										27981,
										27982
									],
									[
										28003,
										28004
									],
									[
										28006,
										28007
									],
									[
										28009,
										28010
									],
									[
										28049,
										28050
									],
									[
										28174,
										28175
									],
									[
										28259,
										28260
									],
									[
										28260,
										28261
									],
									[
										28269,
										28270
									],
									[
										28285,
										28286
									],
									[
										28313,
										28314
									],
									[
										28334,
										28335
									],
									[
										28380,
										28381
									],
									[
										28381,
										28382
									],
									[
										28411,
										28412
									],
									[
										28521,
										28522
									],
									[
										28542,
										28543
									],
									[
										28563,
										28564
									],
									[
										28564,
										28565
									],
									[
										28606,
										28607
									],
									[
										28607,
										28608
									],
									[
										28646,
										28647
									],
									[
										28647,
										28648
									],
									[
										28654,
										28655
									],
									[
										28694,
										28695
									],
									[
										28695,
										28696
									],
									[
										28736,
										28737
									],
									[
										28737,
										28738
									],
									[
										28783,
										28784
									],
									[
										28791,
										28792
									],
									[
										28792,
										28793
									],
									[
										28807,
										28808
									],
									[
										28809,
										28810
									],
									[
										28810,
										28811
									],
									[
										28817,
										28818
									],
									[
										28824,
										28825
									],
									[
										28855,
										28856
									],
									[
										28882,
										28883
									],
									[
										28884,
										28885
									],
									[
										28885,
										28886
									],
									[
										28900,
										28901
									],
									[
										28901,
										28902
									],
									[
										28905,
										28906
									],
									[
										28917,
										28918
									],
									[
										28929,
										28930
									],
									[
										28938,
										28939
									],
									[
										28998,
										28999
									],
									[
										28999,
										29000
									],
									[
										29043,
										29044
									],
									[
										29044,
										29045
									],
									[
										29051,
										29052
									],
									[
										29064,
										29065
									],
									[
										29082,
										29083
									],
									[
										29111,
										29112
									],
									[
										29117,
										29118
									],
									[
										29226,
										29227
									],
									[
										29227,
										29228
									],
									[
										29283,
										29284
									],
									[
										29284,
										29285
									],
									[
										29335,
										29336
									],
									[
										29343,
										29344
									],
									[
										29344,
										29345
									],
									[
										29373,
										29374
									],
									[
										29379,
										29380
									],
									[
										29418,
										29419
									],
									[
										29424,
										29425
									],
									[
										29427,
										29428
									],
									[
										29441,
										29442
									],
									[
										29450,
										29451
									],
									[
										29468,
										29469
									],
									[
										29512,
										29513
									],
									[
										29525,
										29526
									],
									[
										29533,
										29534
									],
									[
										29579,
										29580
									],
									[
										29639,
										29640
									],
									[
										29640,
										29641
									],
									[
										29694,
										29695
									],
									[
										29703,
										29704
									],
									[
										29704,
										29705
									],
									[
										29711,
										29712
									],
									[
										29731,
										29732
									],
									[
										29732,
										29733
									],
									[
										29748,
										29749
									],
									[
										29778,
										29779
									],
									[
										29781,
										29782
									],
									[
										29797,
										29798
									],
									[
										29933,
										29934
									],
									[
										29968,
										29969
									],
									[
										29969,
										29970
									],
									[
										29978,
										29979
									],
									[
										29998,
										29999
									],
									[
										30007,
										30008
									],
									[
										30015,
										30016
									],
									[
										30028,
										30029
									],
									[
										30039,
										30040
									],
									[
										30040,
										30041
									],
									[
										30056,
										30057
									],
									[
										30075,
										30076
									],
									[
										30092,
										30093
									],
									[
										30108,
										30109
									],
									[
										30119,
										30120
									],
									[
										30122,
										30123
									],
									[
										30132,
										30133
									],
									[
										30142,
										30143
									],
									[
										30157,
										30158
									],
									[
										30165,
										30166
									],
									[
										30166,
										30167
									],
									[
										30189,
										30190
									],
									[
										30237,
										30238
									],
									[
										30268,
										30269
									],
									[
										30269,
										30270
									],
									[
										30278,
										30279
									],
									[
										30336,
										30337
									],
									[
										30385,
										30386
									],
									[
										30407,
										30408
									],
									[
										30452,
										30453
									],
									[
										30454,
										30455
									],
									[
										30486,
										30487
									],
									[
										30487,
										30488
									],
									[
										30533,
										30534
									],
									[
										30542,
										30543
									],
									[
										30543,
										30544
									],
									[
										30550,
										30551
									],
									[
										30578,
										30579
									],
									[
										30587,
										30588
									],
									[
										30598,
										30599
									],
									[
										30606,
										30607
									],
									[
										30614,
										30615
									],
									[
										30685,
										30686
									],
									[
										30792,
										30793
									],
									[
										30793,
										30794
									],
									[
										30802,
										30803
									],
									[
										30831,
										30832
									],
									[
										30832,
										30833
									],
									[
										30841,
										30842
									],
									[
										30864,
										30865
									],
									[
										30867,
										30868
									],
									[
										30879,
										30880
									],
									[
										30887,
										30888
									],
									[
										30890,
										30891
									],
									[
										30924,
										30925
									],
									[
										30925,
										30926
									],
									[
										30934,
										30935
									],
									[
										31009,
										31010
									],
									[
										31016,
										31017
									],
									[
										31019,
										31020
									],
									[
										31043,
										31044
									],
									[
										31150,
										31151
									],
									[
										31277,
										31278
									],
									[
										31281,
										31282
									],
									[
										31343,
										31344
									],
									[
										31479,
										31480
									],
									[
										31591,
										31592
									],
									[
										31637,
										31638
									],
									[
										31638,
										31639
									],
									[
										31645,
										31646
									],
									[
										31658,
										31659
									],
									[
										31726,
										31727
									],
									[
										31727,
										31728
									],
									[
										31734,
										31735
									],
									[
										31747,
										31748
									],
									[
										31821,
										31822
									],
									[
										31822,
										31823
									],
									[
										31829,
										31830
									],
									[
										31842,
										31843
									],
									[
										31965,
										31966
									],
									[
										31966,
										31967
									],
									[
										32006,
										32007
									],
									[
										32038,
										32039
									],
									[
										32148,
										32149
									],
									[
										32184,
										32185
									],
									[
										32234,
										32235
									],
									[
										32377,
										32378
									],
									[
										32378,
										32379
									],
									[
										32412,
										32413
									],
									[
										32448,
										32449
									],
									[
										32483,
										32484
									],
									[
										32557,
										32558
									],
									[
										32565,
										32566
									],
									[
										32574,
										32575
									],
									[
										32752,
										32753
									],
									[
										32760,
										32761
									],
									[
										32769,
										32770
									],
									[
										32857,
										32858
									],
									[
										32943,
										32944
									],
									[
										32944,
										32945
									],
									[
										32951,
										32952
									],
									[
										32971,
										32972
									],
									[
										32972,
										32973
									],
									[
										32988,
										32989
									],
									[
										33006,
										33007
									],
									[
										33118,
										33119
									],
									[
										33142,
										33143
									],
									[
										33143,
										33144
									],
									[
										33209,
										33210
									],
									[
										33255,
										33256
									],
									[
										33331,
										33332
									],
									[
										33332,
										33333
									],
									[
										33373,
										33374
									],
									[
										33399,
										33400
									],
									[
										33400,
										33401
									],
									[
										33409,
										33410
									],
									[
										33444,
										33445
									],
									[
										33473,
										33474
									],
									[
										33481,
										33482
									],
									[
										33507,
										33508
									],
									[
										33554,
										33555
									],
									[
										33555,
										33556
									],
									[
										33585,
										33586
									],
									[
										33735,
										33736
									],
									[
										33743,
										33744
									],
									[
										33771,
										33772
									],
									[
										33803,
										33804
									],
									[
										33846,
										33847
									],
									[
										33849,
										33850
									],
									[
										33853,
										33854
									],
									[
										33869,
										33870
									],
									[
										33896,
										33897
									],
									[
										33899,
										33900
									],
									[
										33903,
										33904
									],
									[
										33919,
										33920
									],
									[
										33931,
										33932
									],
									[
										33972,
										33973
									],
									[
										33985,
										33986
									],
									[
										33992,
										33993
									],
									[
										34029,
										34030
									],
									[
										34046,
										34047
									],
									[
										34078,
										34079
									],
									[
										34100,
										34101
									],
									[
										34103,
										34104
									],
									[
										34106,
										34107
									],
									[
										34120,
										34121
									],
									[
										34141,
										34142
									],
									[
										34152,
										34153
									],
									[
										34165,
										34166
									],
									[
										34183,
										34184
									],
									[
										34190,
										34191
									],
									[
										34227,
										34228
									],
									[
										34262,
										34263
									],
									[
										34275,
										34276
									],
									[
										34282,
										34283
									],
									[
										34319,
										34320
									],
									[
										34403,
										34404
									],
									[
										34415,
										34416
									],
									[
										34417,
										34418
									],
									[
										34433,
										34434
									],
									[
										34435,
										34436
									],
									[
										34436,
										34437
									],
									[
										34453,
										34454
									],
									[
										34465,
										34466
									],
									[
										34481,
										34482
									],
									[
										34483,
										34484
									],
									[
										34535,
										34536
									],
									[
										34537,
										34538
									],
									[
										34538,
										34539
									],
									[
										34555,
										34556
									],
									[
										34655,
										34656
									],
									[
										34681,
										34682
									],
									[
										34695,
										34696
									],
									[
										34697,
										34698
									],
									[
										34698,
										34699
									],
									[
										34703,
										34704
									],
									[
										34715,
										34716
									],
									[
										34742,
										34743
									],
									[
										34834,
										34835
									],
									[
										34873,
										34874
									],
									[
										34883,
										34884
									],
									[
										34909,
										34910
									],
									[
										34974,
										34975
									],
									[
										35022,
										35023
									],
									[
										35036,
										35037
									],
									[
										35056,
										35057
									],
									[
										35111,
										35112
									],
									[
										35118,
										35119
									],
									[
										35148,
										35149
									],
									[
										35199,
										35200
									],
									[
										35218,
										35219
									],
									[
										35268,
										35269
									],
									[
										35324,
										35325
									],
									[
										35456,
										35457
									],
									[
										35481,
										35482
									],
									[
										35520,
										35521
									],
									[
										35532,
										35533
									],
									[
										35567,
										35568
									],
									[
										35569,
										35570
									],
									[
										35570,
										35571
									],
									[
										35575,
										35576
									],
									[
										35586,
										35587
									],
									[
										35602,
										35603
									],
									[
										35604,
										35605
									],
									[
										35605,
										35606
									],
									[
										35610,
										35611
									],
									[
										35621,
										35622
									],
									[
										35637,
										35638
									],
									[
										35639,
										35640
									],
									[
										35640,
										35641
									],
									[
										35645,
										35646
									],
									[
										35660,
										35661
									],
									[
										35676,
										35677
									],
									[
										35678,
										35679
									],
									[
										35679,
										35680
									],
									[
										35684,
										35685
									],
									[
										35701,
										35702
									],
									[
										35717,
										35718
									],
									[
										35719,
										35720
									],
									[
										35720,
										35721
									],
									[
										35725,
										35726
									],
									[
										35742,
										35743
									],
									[
										35758,
										35759
									],
									[
										35760,
										35761
									],
									[
										35761,
										35762
									],
									[
										35766,
										35767
									],
									[
										35782,
										35783
									],
									[
										35798,
										35799
									],
									[
										35800,
										35801
									],
									[
										35801,
										35802
									],
									[
										35806,
										35807
									],
									[
										35822,
										35823
									],
									[
										35853,
										35854
									],
									[
										35932,
										35933
									],
									[
										35940,
										35941
									],
									[
										35955,
										35956
									],
									[
										35982,
										35983
									],
									[
										35984,
										35985
									],
									[
										35985,
										35986
									],
									[
										36047,
										36048
									],
									[
										36098,
										36099
									],
									[
										36142,
										36143
									],
									[
										36157,
										36158
									],
									[
										36171,
										36172
									],
									[
										36226,
										36227
									],
									[
										36270,
										36271
									],
									[
										36309,
										36310
									],
									[
										36326,
										36327
									],
									[
										36340,
										36341
									],
									[
										36446,
										36447
									],
									[
										36447,
										36448
									],
									[
										36453,
										36454
									],
									[
										36493,
										36494
									],
									[
										36504,
										36505
									],
									[
										36505,
										36506
									],
									[
										36521,
										36522
									],
									[
										36542,
										36543
									],
									[
										36585,
										36586
									],
									[
										36587,
										36588
									],
									[
										36588,
										36589
									],
									[
										36637,
										36638
									],
									[
										36641,
										36642
									],
									[
										36658,
										36659
									],
									[
										36677,
										36678
									],
									[
										36689,
										36690
									],
									[
										36703,
										36704
									],
									[
										36743,
										36744
									],
									[
										36760,
										36761
									],
									[
										36763,
										36764
									],
									[
										36776,
										36777
									],
									[
										36787,
										36788
									],
									[
										36807,
										36808
									],
									[
										36819,
										36820
									],
									[
										36849,
										36850
									],
									[
										36851,
										36852
									],
									[
										36852,
										36853
									],
									[
										36899,
										36900
									],
									[
										36914,
										36915
									],
									[
										36970,
										36971
									],
									[
										36972,
										36973
									],
									[
										36973,
										36974
									],
									[
										37020,
										37021
									],
									[
										37035,
										37036
									],
									[
										37047,
										37048
									],
									[
										37058,
										37059
									],
									[
										37072,
										37073
									],
									[
										37091,
										37092
									],
									[
										37101,
										37102
									],
									[
										37111,
										37112
									],
									[
										37152,
										37153
									],
									[
										37169,
										37170
									],
									[
										37173,
										37174
									],
									[
										37184,
										37185
									],
									[
										37209,
										37210
									],
									[
										37301,
										37302
									],
									[
										37303,
										37304
									],
									[
										37304,
										37305
									],
									[
										37351,
										37352
									],
									[
										37366,
										37367
									],
									[
										37378,
										37379
									],
									[
										37389,
										37390
									],
									[
										37403,
										37404
									],
									[
										37419,
										37420
									],
									[
										37429,
										37430
									],
									[
										37439,
										37440
									],
									[
										37477,
										37478
									],
									[
										37491,
										37492
									],
									[
										37495,
										37496
									],
									[
										37506,
										37507
									],
									[
										37551,
										37552
									],
									[
										37553,
										37554
									],
									[
										37554,
										37555
									],
									[
										37603,
										37604
									],
									[
										37607,
										37608
									],
									[
										37624,
										37625
									],
									[
										37643,
										37644
									],
									[
										37654,
										37655
									],
									[
										37668,
										37669
									],
									[
										37706,
										37707
									],
									[
										37720,
										37721
									],
									[
										37723,
										37724
									],
									[
										37735,
										37736
									],
									[
										37743,
										37744
									],
									[
										37754,
										37755
									],
									[
										37774,
										37775
									],
									[
										37786,
										37787
									],
									[
										37863,
										37864
									],
									[
										37878,
										37879
									],
									[
										37880,
										37881
									],
									[
										37935,
										37936
									],
									[
										37986,
										37987
									],
									[
										38026,
										38027
									],
									[
										38037,
										38038
									],
									[
										38052,
										38053
									],
									[
										38077,
										38078
									],
									[
										38080,
										38081
									],
									[
										38083,
										38084
									],
									[
										38099,
										38100
									],
									[
										38131,
										38132
									],
									[
										38151,
										38152
									],
									[
										38154,
										38155
									],
									[
										38157,
										38158
									],
									[
										38172,
										38173
									],
									[
										38204,
										38205
									],
									[
										38221,
										38222
									],
									[
										38280,
										38281
									],
									[
										38289,
										38290
									],
									[
										38333,
										38334
									],
									[
										38344,
										38345
									],
									[
										38357,
										38358
									],
									[
										38446,
										38447
									],
									[
										38463,
										38464
									],
									[
										38578,
										38579
									],
									[
										38705,
										38706
									],
									[
										38804,
										38805
									],
									[
										38853,
										38854
									],
									[
										38865,
										38866
									],
									[
										38894,
										38895
									],
									[
										38918,
										38919
									],
									[
										38921,
										38922
									],
									[
										38939,
										38940
									],
									[
										38965,
										38966
									],
									[
										38966,
										38967
									],
									[
										39009,
										39010
									],
									[
										39193,
										39194
									],
									[
										39408,
										39409
									],
									[
										39629,
										39630
									],
									[
										39740,
										39741
									],
									[
										39750,
										39751
									],
									[
										39856,
										39857
									],
									[
										39977,
										39978
									],
									[
										39985,
										39986
									],
									[
										40089,
										40090
									],
									[
										40212,
										40213
									],
									[
										40322,
										40323
									],
									[
										40445,
										40446
									],
									[
										40453,
										40454
									],
									[
										40519,
										40520
									],
									[
										40606,
										40607
									],
									[
										40616,
										40617
									],
									[
										40722,
										40723
									],
									[
										40842,
										40843
									],
									[
										40997,
										40998
									],
									[
										41031,
										41032
									],
									[
										41080,
										41081
									],
									[
										41157,
										41158
									],
									[
										41206,
										41207
									],
									[
										41300,
										41301
									],
									[
										41301,
										41302
									],
									[
										41322,
										41323
									],
									[
										41323,
										41324
									],
									[
										41472,
										41473
									],
									[
										41510,
										41511
									],
									[
										41582,
										41583
									],
									[
										41593,
										41594
									],
									[
										41618,
										41619
									],
									[
										41629,
										41630
									],
									[
										41630,
										41631
									],
									[
										41651,
										41652
									],
									[
										41652,
										41653
									],
									[
										41690,
										41691
									],
									[
										41700,
										41701
									],
									[
										41717,
										41718
									],
									[
										41745,
										41746
									],
									[
										41754,
										41755
									],
									[
										41837,
										41838
									],
									[
										41838,
										41839
									],
									[
										41859,
										41860
									],
									[
										41860,
										41861
									],
									[
										41941,
										41942
									],
									[
										41953,
										41954
									],
									[
										42032,
										42033
									],
									[
										42037,
										42038
									],
									[
										42044,
										42045
									],
									[
										42110,
										42111
									],
									[
										42287,
										42288
									],
									[
										42306,
										42307
									],
									[
										42352,
										42353
									],
									[
										42422,
										42423
									],
									[
										42487,
										42488
									],
									[
										42505,
										42506
									],
									[
										42584,
										42585
									],
									[
										42667,
										42668
									],
									[
										42703,
										42704
									],
									[
										42746,
										42747
									],
									[
										42918,
										42919
									],
									[
										43165,
										43166
									],
									[
										43268,
										43269
									],
									[
										43271,
										43272
									],
									[
										43531,
										43532
									],
									[
										43537,
										43538
									],
									[
										43590,
										43591
									],
									[
										43695,
										43696
									],
									[
										43706,
										43707
									],
									[
										43721,
										43722
									],
									[
										43744,
										43745
									],
									[
										43903,
										43904
									],
									[
										43918,
										43919
									],
									[
										43971,
										43972
									],
									[
										43972,
										43973
									],
									[
										44076,
										44077
									],
									[
										44110,
										44111
									],
									[
										44167,
										44168
									],
									[
										44390,
										44391
									],
									[
										44432,
										44433
									],
									[
										44475,
										44476
									],
									[
										44597,
										44598
									],
									[
										44600,
										44601
									],
									[
										44610,
										44611
									],
									[
										44641,
										44642
									],
									[
										44713,
										44714
									],
									[
										44741,
										44742
									],
									[
										44760,
										44761
									],
									[
										44825,
										44826
									],
									[
										44947,
										44948
									],
									[
										44976,
										44977
									],
									[
										44990,
										44991
									],
									[
										45002,
										45003
									],
									[
										45008,
										45009
									],
									[
										45014,
										45015
									],
									[
										45037,
										45038
									],
									[
										45162,
										45163
									],
									[
										45173,
										45174
									],
									[
										45199,
										45200
									],
									[
										45236,
										45237
									],
									[
										45237,
										45238
									],
									[
										45262,
										45263
									],
									[
										45316,
										45317
									],
									[
										45516,
										45517
									],
									[
										45517,
										45518
									],
									[
										45540,
										45541
									],
									[
										45547,
										45548
									],
									[
										45684,
										45685
									],
									[
										45733,
										45734
									],
									[
										45760,
										45761
									],
									[
										45836,
										45837
									],
									[
										45850,
										45851
									],
									[
										45861,
										45862
									],
									[
										45888,
										45889
									],
									[
										45921,
										45922
									],
									[
										46110,
										46111
									],
									[
										46327,
										46328
									],
									[
										46415,
										46416
									],
									[
										46433,
										46434
									],
									[
										46462,
										46463
									],
									[
										46550,
										46551
									],
									[
										46563,
										46564
									],
									[
										46669,
										46670
									],
									[
										46696,
										46697
									],
									[
										46898,
										46899
									],
									[
										46957,
										46958
									],
									[
										46983,
										46984
									],
									[
										47007,
										47008
									],
									[
										47081,
										47082
									],
									[
										47165,
										47166
									],
									[
										47246,
										47247
									],
									[
										47637,
										47638
									],
									[
										47666,
										47667
									],
									[
										47681,
										47682
									],
									[
										47699,
										47700
									],
									[
										47712,
										47713
									],
									[
										47849,
										47850
									],
									[
										47883,
										47884
									],
									[
										47990,
										47991
									],
									[
										48007,
										48008
									],
									[
										48035,
										48036
									],
									[
										48043,
										48044
									],
									[
										48071,
										48072
									],
									[
										48097,
										48098
									],
									[
										48175,
										48176
									],
									[
										48202,
										48203
									],
									[
										48238,
										48239
									],
									[
										48249,
										48250
									],
									[
										48293,
										48294
									],
									[
										48304,
										48305
									],
									[
										48328,
										48329
									],
									[
										48332,
										48333
									],
									[
										48333,
										48334
									],
									[
										48347,
										48348
									],
									[
										48382,
										48383
									],
									[
										48393,
										48394
									],
									[
										48425,
										48426
									],
									[
										48436,
										48437
									],
									[
										48489,
										48490
									],
									[
										48514,
										48515
									],
									[
										48520,
										48521
									],
									[
										48529,
										48530
									],
									[
										48536,
										48537
									],
									[
										48556,
										48557
									],
									[
										48625,
										48626
									],
									[
										48646,
										48647
									],
									[
										48651,
										48652
									],
									[
										48675,
										48676
									],
									[
										48679,
										48680
									],
									[
										48681,
										48682
									],
									[
										48703,
										48704
									],
									[
										48704,
										48705
									],
									[
										48713,
										48714
									],
									[
										48739,
										48740
									],
									[
										48749,
										48750
									],
									[
										48758,
										48759
									],
									[
										48783,
										48784
									],
									[
										48830,
										48831
									],
									[
										48856,
										48857
									],
									[
										48880,
										48881
									],
									[
										48891,
										48892
									],
									[
										48906,
										48907
									],
									[
										49001,
										49002
									],
									[
										49010,
										49011
									],
									[
										49017,
										49018
									],
									[
										49049,
										49050
									],
									[
										49059,
										49060
									],
									[
										49134,
										49135
									],
									[
										49137,
										49138
									],
									[
										49262,
										49263
									],
									[
										49271,
										49272
									],
									[
										49299,
										49300
									],
									[
										49337,
										49338
									],
									[
										49385,
										49386
									],
									[
										49396,
										49397
									],
									[
										49421,
										49422
									],
									[
										49440,
										49441
									],
									[
										49487,
										49488
									],
									[
										49525,
										49526
									],
									[
										49529,
										49530
									],
									[
										49584,
										49585
									],
									[
										49611,
										49612
									],
									[
										49636,
										49637
									],
									[
										49687,
										49688
									],
									[
										49745,
										49746
									],
									[
										49748,
										49749
									],
									[
										49860,
										49861
									],
									[
										49900,
										49901
									],
									[
										49942,
										49943
									],
									[
										49950,
										49951
									],
									[
										49971,
										49972
									],
									[
										50056,
										50057
									],
									[
										50064,
										50065
									],
									[
										50069,
										50070
									],
									[
										50142,
										50143
									],
									[
										50153,
										50154
									],
									[
										50157,
										50158
									],
									[
										50167,
										50168
									],
									[
										50198,
										50199
									],
									[
										50201,
										50202
									],
									[
										50330,
										50331
									],
									[
										50336,
										50337
									],
									[
										50378,
										50379
									],
									[
										50391,
										50392
									],
									[
										50507,
										50508
									],
									[
										50536,
										50537
									],
									[
										50647,
										50648
									],
									[
										50677,
										50678
									],
									[
										50682,
										50683
									],
									[
										50744,
										50745
									],
									[
										50782,
										50783
									],
									[
										50799,
										50800
									],
									[
										50820,
										50821
									],
									[
										50850,
										50851
									],
									[
										50884,
										50885
									],
									[
										50902,
										50903
									],
									[
										50908,
										50909
									],
									[
										50914,
										50915
									],
									[
										50931,
										50932
									],
									[
										50980,
										50981
									],
									[
										50985,
										50986
									],
									[
										51010,
										51011
									],
									[
										51022,
										51023
									],
									[
										51035,
										51036
									],
									[
										51046,
										51047
									],
									[
										51067,
										51068
									],
									[
										51084,
										51085
									],
									[
										51095,
										51096
									],
									[
										51109,
										51110
									],
									[
										51117,
										51118
									],
									[
										51122,
										51123
									],
									[
										51124,
										51125
									],
									[
										51125,
										51126
									],
									[
										51162,
										51163
									],
									[
										51184,
										51185
									],
									[
										51189,
										51190
									],
									[
										51215,
										51216
									],
									[
										51218,
										51219
									],
									[
										51238,
										51239
									],
									[
										51258,
										51259
									],
									[
										51261,
										51262
									],
									[
										51275,
										51276
									],
									[
										51295,
										51296
									],
									[
										51312,
										51313
									],
									[
										51334,
										51335
									],
									[
										51342,
										51343
									],
									[
										51347,
										51348
									],
									[
										51349,
										51350
									],
									[
										51350,
										51351
									],
									[
										51363,
										51364
									],
									[
										51378,
										51379
									],
									[
										51388,
										51389
									],
									[
										51408,
										51409
									],
									[
										51410,
										51411
									],
									[
										51424,
										51425
									],
									[
										51446,
										51447
									],
									[
										51454,
										51455
									],
									[
										51459,
										51460
									],
									[
										51461,
										51462
									],
									[
										51462,
										51463
									],
									[
										51475,
										51476
									],
									[
										51483,
										51484
									],
									[
										51498,
										51499
									],
									[
										51499,
										51500
									],
									[
										51521,
										51522
									],
									[
										51542,
										51543
									],
									[
										51552,
										51553
									],
									[
										51574,
										51575
									],
									[
										51582,
										51583
									],
									[
										51587,
										51588
									],
									[
										51589,
										51590
									],
									[
										51590,
										51591
									],
									[
										51603,
										51604
									],
									[
										51629,
										51630
									],
									[
										51635,
										51636
									],
									[
										51657,
										51658
									],
									[
										51674,
										51675
									],
									[
										51699,
										51700
									],
									[
										51718,
										51719
									],
									[
										51725,
										51726
									],
									[
										51733,
										51734
									],
									[
										51739,
										51740
									],
									[
										51757,
										51758
									],
									[
										51788,
										51789
									],
									[
										51805,
										51806
									],
									[
										51816,
										51817
									],
									[
										51830,
										51831
									],
									[
										51838,
										51839
									],
									[
										51843,
										51844
									],
									[
										51845,
										51846
									],
									[
										51846,
										51847
									],
									[
										51883,
										51884
									],
									[
										51905,
										51906
									],
									[
										51910,
										51911
									],
									[
										51951,
										51952
									],
									[
										51973,
										51974
									],
									[
										51981,
										51982
									],
									[
										51986,
										51987
									],
									[
										51988,
										51989
									],
									[
										51989,
										51990
									],
									[
										52008,
										52009
									],
									[
										52018,
										52019
									],
									[
										52036,
										52037
									],
									[
										52044,
										52045
									],
									[
										52054,
										52055
									],
									[
										52061,
										52062
									],
									[
										52076,
										52077
									],
									[
										52083,
										52084
									],
									[
										52085,
										52086
									],
									[
										52121,
										52122
									],
									[
										52148,
										52149
									],
									[
										52150,
										52151
									],
									[
										52151,
										52152
									],
									[
										52189,
										52190
									],
									[
										52199,
										52200
									],
									[
										52209,
										52210
									],
									[
										52231,
										52232
									],
									[
										52239,
										52240
									],
									[
										52267,
										52268
									],
									[
										52277,
										52278
									],
									[
										52280,
										52281
									],
									[
										52309,
										52310
									],
									[
										52321,
										52322
									],
									[
										52329,
										52330
									],
									[
										52334,
										52335
									],
									[
										52336,
										52337
									],
									[
										52337,
										52338
									],
									[
										52377,
										52378
									],
									[
										52380,
										52381
									],
									[
										52399,
										52400
									],
									[
										52410,
										52411
									],
									[
										52432,
										52433
									],
									[
										52440,
										52441
									],
									[
										52445,
										52446
									],
									[
										52447,
										52448
									],
									[
										52448,
										52449
									],
									[
										52489,
										52490
									],
									[
										52493,
										52494
									],
									[
										52515,
										52516
									],
									[
										52528,
										52529
									],
									[
										52535,
										52536
									],
									[
										52550,
										52551
									],
									[
										52565,
										52566
									],
									[
										52587,
										52588
									],
									[
										52595,
										52596
									],
									[
										52600,
										52601
									],
									[
										52602,
										52603
									],
									[
										52603,
										52604
									],
									[
										52631,
										52632
									],
									[
										52639,
										52640
									],
									[
										52661,
										52662
									],
									[
										52691,
										52692
									],
									[
										52713,
										52714
									],
									[
										52721,
										52722
									],
									[
										52726,
										52727
									],
									[
										52728,
										52729
									],
									[
										52729,
										52730
									],
									[
										52742,
										52743
									],
									[
										52782,
										52783
									],
									[
										52798,
										52799
									],
									[
										52806,
										52807
									],
									[
										52811,
										52812
									],
									[
										52813,
										52814
									],
									[
										52814,
										52815
									],
									[
										52853,
										52854
									],
									[
										52860,
										52861
									],
									[
										52880,
										52881
									],
									[
										52893,
										52894
									],
									[
										52909,
										52910
									],
									[
										52936,
										52937
									],
									[
										52944,
										52945
									],
									[
										52949,
										52950
									],
									[
										52951,
										52952
									],
									[
										52952,
										52953
									],
									[
										52965,
										52966
									],
									[
										52975,
										52976
									],
									[
										52985,
										52986
									],
									[
										53009,
										53010
									],
									[
										53019,
										53020
									],
									[
										53036,
										53037
									],
									[
										53047,
										53048
									],
									[
										53061,
										53062
									],
									[
										53069,
										53070
									],
									[
										53074,
										53075
									],
									[
										53076,
										53077
									],
									[
										53077,
										53078
									],
									[
										53112,
										53113
									],
									[
										53115,
										53116
									],
									[
										53137,
										53138
									],
									[
										53142,
										53143
									],
									[
										53170,
										53171
									],
									[
										53178,
										53179
									],
									[
										53188,
										53189
									],
									[
										53195,
										53196
									],
									[
										53206,
										53207
									],
									[
										53236,
										53237
									],
									[
										53246,
										53247
									],
									[
										53262,
										53263
									],
									[
										53273,
										53274
									],
									[
										53298,
										53299
									],
									[
										53317,
										53318
									],
									[
										53334,
										53335
									],
									[
										53356,
										53357
									],
									[
										53364,
										53365
									],
									[
										53369,
										53370
									],
									[
										53371,
										53372
									],
									[
										53372,
										53373
									],
									[
										53402,
										53403
									],
									[
										53412,
										53413
									],
									[
										53450,
										53451
									],
									[
										53472,
										53473
									],
									[
										53480,
										53481
									],
									[
										53485,
										53486
									],
									[
										53487,
										53488
									],
									[
										53488,
										53489
									],
									[
										53554,
										53555
									],
									[
										53561,
										53562
									],
									[
										53598,
										53599
									],
									[
										53620,
										53621
									],
									[
										53640,
										53641
									],
									[
										53648,
										53649
									],
									[
										53658,
										53659
									],
									[
										53665,
										53666
									],
									[
										53706,
										53707
									],
									[
										53714,
										53715
									],
									[
										53719,
										53720
									],
									[
										53721,
										53722
									],
									[
										53722,
										53723
									],
									[
										53786,
										53787
									],
									[
										53794,
										53795
									],
									[
										53799,
										53800
									],
									[
										53801,
										53802
									],
									[
										53802,
										53803
									],
									[
										53838,
										53839
									],
									[
										53879,
										53880
									],
									[
										53887,
										53888
									],
									[
										53892,
										53893
									],
									[
										53894,
										53895
									],
									[
										53895,
										53896
									],
									[
										53945,
										53946
									],
									[
										53962,
										53963
									],
									[
										53972,
										53973
									],
									[
										53973,
										53974
									],
									[
										53992,
										53993
									],
									[
										54001,
										54002
									],
									[
										54015,
										54016
									],
									[
										54016,
										54017
									],
									[
										54022,
										54023
									],
									[
										54041,
										54042
									],
									[
										54054,
										54055
									],
									[
										54073,
										54074
									],
									[
										54087,
										54088
									],
									[
										54109,
										54110
									],
									[
										54117,
										54118
									],
									[
										54122,
										54123
									],
									[
										54124,
										54125
									],
									[
										54125,
										54126
									],
									[
										54155,
										54156
									],
									[
										54162,
										54163
									],
									[
										54182,
										54183
									],
									[
										54194,
										54195
									],
									[
										54202,
										54203
									],
									[
										54207,
										54208
									],
									[
										54209,
										54210
									],
									[
										54210,
										54211
									],
									[
										54245,
										54246
									],
									[
										54271,
										54272
									],
									[
										54282,
										54283
									],
									[
										54304,
										54305
									],
									[
										54312,
										54313
									],
									[
										54317,
										54318
									],
									[
										54319,
										54320
									],
									[
										54320,
										54321
									],
									[
										54357,
										54358
									],
									[
										54361,
										54362
									],
									[
										54401,
										54402
									],
									[
										54409,
										54410
									],
									[
										54414,
										54415
									],
									[
										54416,
										54417
									],
									[
										54417,
										54418
									],
									[
										54459,
										54460
									],
									[
										54499,
										54500
									],
									[
										54507,
										54508
									],
									[
										54512,
										54513
									],
									[
										54514,
										54515
									],
									[
										54515,
										54516
									],
									[
										54532,
										54533
									],
									[
										54553,
										54554
									],
									[
										54597,
										54598
									],
									[
										54601,
										54602
									],
									[
										54602,
										54603
									],
									[
										54606,
										54607
									],
									[
										54622,
										54623
									],
									[
										54638,
										54639
									],
									[
										54664,
										54665
									],
									[
										54674,
										54675
									],
									[
										54688,
										54689
									],
									[
										54694,
										54695
									],
									[
										54713,
										54714
									],
									[
										54727,
										54728
									],
									[
										54735,
										54736
									],
									[
										54740,
										54741
									],
									[
										54742,
										54743
									],
									[
										54743,
										54744
									],
									[
										54774,
										54775
									],
									[
										54779,
										54780
									],
									[
										54796,
										54797
									],
									[
										54821,
										54822
									],
									[
										54842,
										54843
									],
									[
										54861,
										54862
									],
									[
										54883,
										54884
									],
									[
										54888,
										54889
									],
									[
										54912,
										54913
									],
									[
										54920,
										54921
									],
									[
										54925,
										54926
									],
									[
										54927,
										54928
									],
									[
										54928,
										54929
									],
									[
										54962,
										54963
									],
									[
										54994,
										54995
									],
									[
										55002,
										55003
									],
									[
										55007,
										55008
									],
									[
										55009,
										55010
									],
									[
										55010,
										55011
									],
									[
										55053,
										55054
									],
									[
										55055,
										55056
									],
									[
										55060,
										55061
									],
									[
										55062,
										55063
									],
									[
										55072,
										55073
									],
									[
										55125,
										55126
									],
									[
										55169,
										55170
									],
									[
										55172,
										55173
									],
									[
										55224,
										55225
									],
									[
										55231,
										55232
									],
									[
										55245,
										55246
									],
									[
										55255,
										55256
									],
									[
										55353,
										55354
									],
									[
										55433,
										55434
									],
									[
										55448,
										55449
									],
									[
										55495,
										55496
									],
									[
										55504,
										55505
									],
									[
										55635,
										55636
									],
									[
										55643,
										55644
									],
									[
										55654,
										55655
									],
									[
										55685,
										55686
									],
									[
										55693,
										55694
									],
									[
										55698,
										55699
									],
									[
										55716,
										55717
									],
									[
										55723,
										55724
									],
									[
										55732,
										55733
									],
									[
										55739,
										55740
									],
									[
										55753,
										55754
									],
									[
										55763,
										55764
									],
									[
										55768,
										55769
									],
									[
										55814,
										55815
									],
									[
										55818,
										55819
									],
									[
										55902,
										55903
									],
									[
										55906,
										55907
									],
									[
										55990,
										55991
									],
									[
										55994,
										55995
									],
									[
										56078,
										56079
									],
									[
										56082,
										56083
									],
									[
										56166,
										56167
									],
									[
										56170,
										56171
									],
									[
										56258,
										56259
									],
									[
										56262,
										56263
									],
									[
										56350,
										56351
									],
									[
										56354,
										56355
									],
									[
										56442,
										56443
									],
									[
										56446,
										56447
									],
									[
										56534,
										56535
									],
									[
										56538,
										56539
									],
									[
										56657,
										56658
									],
									[
										56661,
										56662
									],
									[
										56743,
										56744
									],
									[
										56747,
										56748
									],
									[
										56829,
										56830
									],
									[
										56833,
										56834
									],
									[
										56922,
										56923
									],
									[
										56926,
										56927
									],
									[
										57008,
										57009
									],
									[
										57012,
										57013
									],
									[
										57049,
										57050
									],
									[
										57066,
										57067
									],
									[
										57070,
										57071
									],
									[
										57098,
										57099
									],
									[
										57114,
										57115
									],
									[
										57132,
										57133
									],
									[
										57176,
										57177
									],
									[
										57241,
										57242
									],
									[
										57276,
										57277
									],
									[
										57368,
										57369
									],
									[
										57369,
										57370
									],
									[
										57388,
										57389
									],
									[
										57390,
										57391
									],
									[
										57443,
										57444
									],
									[
										57444,
										57445
									],
									[
										57550,
										57551
									],
									[
										57551,
										57552
									],
									[
										57626,
										57627
									],
									[
										57627,
										57628
									],
									[
										57653,
										57654
									],
									[
										57717,
										57718
									],
									[
										57718,
										57719
									],
									[
										57740,
										57741
									],
									[
										57803,
										57804
									],
									[
										57805,
										57806
									],
									[
										57857,
										57858
									],
									[
										57858,
										57859
									],
									[
										57868,
										57869
									],
									[
										57942,
										57943
									],
									[
										57987,
										57988
									],
									[
										58010,
										58011
									],
									[
										58017,
										58018
									],
									[
										58133,
										58134
									],
									[
										58134,
										58135
									],
									[
										58197,
										58198
									],
									[
										58199,
										58200
									],
									[
										58200,
										58201
									],
									[
										58208,
										58209
									],
									[
										58210,
										58211
									],
									[
										58211,
										58212
									],
									[
										58258,
										58259
									],
									[
										58277,
										58278
									],
									[
										58325,
										58326
									],
									[
										58341,
										58342
									],
									[
										58480,
										58481
									],
									[
										58483,
										58484
									],
									[
										58492,
										58493
									],
									[
										58531,
										58532
									],
									[
										58562,
										58563
									],
									[
										58563,
										58564
									],
									[
										58599,
										58600
									],
									[
										58601,
										58602
									],
									[
										58637,
										58638
									],
									[
										58638,
										58639
									],
									[
										58690,
										58691
									],
									[
										58763,
										58764
									],
									[
										58807,
										58808
									],
									[
										58814,
										58815
									],
									[
										58841,
										58842
									],
									[
										58848,
										58849
									],
									[
										58883,
										58884
									],
									[
										58952,
										58953
									],
									[
										58983,
										58984
									],
									[
										58986,
										58987
									],
									[
										58989,
										58990
									],
									[
										59057,
										59058
									],
									[
										59101,
										59102
									],
									[
										59156,
										59157
									],
									[
										59190,
										59191
									],
									[
										59321,
										59322
									],
									[
										59322,
										59323
									],
									[
										59354,
										59355
									],
									[
										59355,
										59356
									],
									[
										59362,
										59363
									],
									[
										59368,
										59369
									],
									[
										59372,
										59373
									],
									[
										59383,
										59384
									],
									[
										59390,
										59391
									],
									[
										59528,
										59529
									],
									[
										59547,
										59548
									],
									[
										59659,
										59660
									],
									[
										59662,
										59663
									],
									[
										59671,
										59672
									],
									[
										59729,
										59730
									],
									[
										59750,
										59751
									],
									[
										59871,
										59872
									],
									[
										59880,
										59881
									],
									[
										59998,
										59999
									],
									[
										60017,
										60018
									],
									[
										60056,
										60057
									],
									[
										60065,
										60066
									],
									[
										60099,
										60100
									],
									[
										60205,
										60206
									],
									[
										60214,
										60215
									],
									[
										60300,
										60301
									],
									[
										60338,
										60339
									],
									[
										60339,
										60340
									],
									[
										60350,
										60351
									],
									[
										60379,
										60380
									],
									[
										60402,
										60403
									],
									[
										60408,
										60409
									],
									[
										60415,
										60416
									],
									[
										60422,
										60423
									],
									[
										60475,
										60476
									],
									[
										60485,
										60486
									],
									[
										60519,
										60520
									],
									[
										60642,
										60643
									],
									[
										60678,
										60679
									],
									[
										60687,
										60688
									],
									[
										60766,
										60767
									],
									[
										60812,
										60813
									],
									[
										60904,
										60905
									],
									[
										61053,
										61054
									],
									[
										61114,
										61115
									],
									[
										61144,
										61145
									],
									[
										61240,
										61241
									],
									[
										61297,
										61298
									],
									[
										61306,
										61307
									],
									[
										61324,
										61325
									],
									[
										61348,
										61349
									],
									[
										61357,
										61358
									],
									[
										61375,
										61376
									],
									[
										61410,
										61411
									],
									[
										61426,
										61427
									],
									[
										61435,
										61436
									],
									[
										61439,
										61440
									],
									[
										61443,
										61444
									],
									[
										61525,
										61526
									],
									[
										61541,
										61542
									],
									[
										61550,
										61551
									],
									[
										61554,
										61555
									],
									[
										61558,
										61559
									],
									[
										61590,
										61591
									],
									[
										61603,
										61604
									],
									[
										61622,
										61623
									],
									[
										61742,
										61743
									],
									[
										61786,
										61787
									],
									[
										61789,
										61790
									],
									[
										61798,
										61799
									],
									[
										61812,
										61813
									],
									[
										61845,
										61846
									],
									[
										61848,
										61849
									],
									[
										61861,
										61862
									],
									[
										61887,
										61888
									],
									[
										61890,
										61891
									],
									[
										61960,
										61961
									],
									[
										62002,
										62003
									],
									[
										62041,
										62042
									],
									[
										62043,
										62044
									],
									[
										62046,
										62047
									],
									[
										62055,
										62056
									],
									[
										62069,
										62070
									],
									[
										62102,
										62103
									],
									[
										62104,
										62105
									],
									[
										62107,
										62108
									],
									[
										62120,
										62121
									],
									[
										62132,
										62133
									],
									[
										62165,
										62166
									],
									[
										62167,
										62168
									],
									[
										62170,
										62171
									],
									[
										62255,
										62256
									],
									[
										62300,
										62301
									],
									[
										62339,
										62340
									],
									[
										62341,
										62342
									],
									[
										62344,
										62345
									],
									[
										62353,
										62354
									],
									[
										62367,
										62368
									],
									[
										62400,
										62401
									],
									[
										62402,
										62403
									],
									[
										62405,
										62406
									],
									[
										62418,
										62419
									],
									[
										62430,
										62431
									],
									[
										62463,
										62464
									],
									[
										62465,
										62466
									],
									[
										62468,
										62469
									],
									[
										62586,
										62587
									],
									[
										62622,
										62623
									],
									[
										62624,
										62625
									],
									[
										62627,
										62628
									],
									[
										62636,
										62637
									],
									[
										62664,
										62665
									],
									[
										62666,
										62667
									],
									[
										62669,
										62670
									],
									[
										62678,
										62679
									],
									[
										62692,
										62693
									],
									[
										62725,
										62726
									],
									[
										62727,
										62728
									],
									[
										62730,
										62731
									],
									[
										62743,
										62744
									],
									[
										62755,
										62756
									],
									[
										62788,
										62789
									],
									[
										62790,
										62791
									],
									[
										62793,
										62794
									],
									[
										62913,
										62914
									],
									[
										62952,
										62953
									],
									[
										62954,
										62955
									],
									[
										62957,
										62958
									],
									[
										62966,
										62967
									],
									[
										62980,
										62981
									],
									[
										63032,
										63033
									],
									[
										63034,
										63035
									],
									[
										63037,
										63038
									],
									[
										63046,
										63047
									],
									[
										63060,
										63061
									],
									[
										63090,
										63091
									],
									[
										63092,
										63093
									],
									[
										63095,
										63096
									],
									[
										63108,
										63109
									],
									[
										63131,
										63132
									],
									[
										63133,
										63134
									],
									[
										63136,
										63137
									],
									[
										63256,
										63257
									],
									[
										63296,
										63297
									],
									[
										63298,
										63299
									],
									[
										63301,
										63302
									],
									[
										63310,
										63311
									],
									[
										63357,
										63358
									],
									[
										63401,
										63402
									],
									[
										63415,
										63416
									],
									[
										63450,
										63451
									],
									[
										63466,
										63467
									],
									[
										63566,
										63567
									],
									[
										63608,
										63609
									],
									[
										63651,
										63652
									],
									[
										63653,
										63654
									],
									[
										63656,
										63657
									],
									[
										63665,
										63666
									],
									[
										63715,
										63716
									],
									[
										63762,
										63763
									],
									[
										63776,
										63777
									],
									[
										63814,
										63815
									],
									[
										63830,
										63831
									],
									[
										63951,
										63952
									],
									[
										63967,
										63968
									],
									[
										64023,
										64024
									],
									[
										64173,
										64174
									],
									[
										64175,
										64176
									],
									[
										64185,
										64186
									],
									[
										64193,
										64194
									],
									[
										64202,
										64203
									],
									[
										64297,
										64298
									],
									[
										64428,
										64429
									],
									[
										64460,
										64461
									],
									[
										64461,
										64462
									],
									[
										64517,
										64518
									],
									[
										64569,
										64570
									],
									[
										64579,
										64580
									],
									[
										64580,
										64581
									],
									[
										64607,
										64608
									],
									[
										64608,
										64609
									],
									[
										64615,
										64616
									],
									[
										64639,
										64640
									],
									[
										64664,
										64665
									],
									[
										64665,
										64666
									],
									[
										64681,
										64682
									],
									[
										64699,
										64700
									],
									[
										64715,
										64716
									],
									[
										64758,
										64759
									],
									[
										64759,
										64760
									],
									[
										64766,
										64767
									],
									[
										64790,
										64791
									],
									[
										64815,
										64816
									],
									[
										64838,
										64839
									],
									[
										64844,
										64845
									],
									[
										64953,
										64954
									],
									[
										64991,
										64992
									],
									[
										64992,
										64993
									],
									[
										65001,
										65002
									],
									[
										65021,
										65022
									],
									[
										65022,
										65023
									],
									[
										65038,
										65039
									],
									[
										65105,
										65106
									],
									[
										65106,
										65107
									],
									[
										65115,
										65116
									],
									[
										65192,
										65193
									],
									[
										65199,
										65200
									],
									[
										65259,
										65260
									],
									[
										65266,
										65267
									],
									[
										65371,
										65372
									],
									[
										65386,
										65387
									],
									[
										65387,
										65388
									],
									[
										65394,
										65395
									],
									[
										65414,
										65415
									],
									[
										65415,
										65416
									],
									[
										65431,
										65432
									],
									[
										65449,
										65450
									],
									[
										65465,
										65466
									],
									[
										65508,
										65509
									],
									[
										65514,
										65515
									],
									[
										65524,
										65525
									],
									[
										65525,
										65526
									],
									[
										65532,
										65533
									],
									[
										65552,
										65553
									],
									[
										65553,
										65554
									],
									[
										65569,
										65570
									],
									[
										65587,
										65588
									],
									[
										65601,
										65602
									],
									[
										65621,
										65622
									],
									[
										65659,
										65660
									],
									[
										65673,
										65674
									],
									[
										65674,
										65675
									],
									[
										65681,
										65682
									],
									[
										65701,
										65702
									],
									[
										65702,
										65703
									],
									[
										65718,
										65719
									],
									[
										65755,
										65756
									],
									[
										65825,
										65826
									],
									[
										65866,
										65867
									],
									[
										65867,
										65868
									],
									[
										65879,
										65880
									],
									[
										65906,
										65907
									],
									[
										65907,
										65908
									],
									[
										65947,
										65948
									],
									[
										65955,
										65956
									],
									[
										65992,
										65993
									],
									[
										66045,
										66046
									],
									[
										66046,
										66047
									],
									[
										66138,
										66139
									],
									[
										66139,
										66140
									],
									[
										66189,
										66190
									],
									[
										66292,
										66293
									],
									[
										66315,
										66316
									],
									[
										66316,
										66317
									],
									[
										66332,
										66333
									],
									[
										66355,
										66356
									],
									[
										66367,
										66368
									],
									[
										66377,
										66378
									],
									[
										66385,
										66386
									],
									[
										66386,
										66387
									],
									[
										66409,
										66410
									],
									[
										66468,
										66469
									],
									[
										66486,
										66487
									],
									[
										66495,
										66496
									],
									[
										66577,
										66578
									],
									[
										66620,
										66621
									],
									[
										66621,
										66622
									],
									[
										66630,
										66631
									],
									[
										66650,
										66651
									],
									[
										66651,
										66652
									],
									[
										66667,
										66668
									],
									[
										66710,
										66711
									],
									[
										66711,
										66712
									],
									[
										66720,
										66721
									],
									[
										66787,
										66788
									],
									[
										66802,
										66803
									],
									[
										66803,
										66804
									],
									[
										66810,
										66811
									],
									[
										66830,
										66831
									],
									[
										66831,
										66832
									],
									[
										66847,
										66848
									],
									[
										66865,
										66866
									],
									[
										66881,
										66882
									],
									[
										66940,
										66941
									],
									[
										66954,
										66955
									],
									[
										66955,
										66956
									],
									[
										66962,
										66963
									],
									[
										66982,
										66983
									],
									[
										66983,
										66984
									],
									[
										66999,
										67000
									],
									[
										67036,
										67037
									],
									[
										67124,
										67125
									],
									[
										67127,
										67128
									],
									[
										67130,
										67131
									],
									[
										67150,
										67151
									],
									[
										67151,
										67152
									],
									[
										67165,
										67166
									],
									[
										67189,
										67190
									],
									[
										67190,
										67191
									],
									[
										67219,
										67220
									],
									[
										67227,
										67228
									],
									[
										67228,
										67229
									],
									[
										67237,
										67238
									],
									[
										67266,
										67267
									],
									[
										67274,
										67275
									],
									[
										67277,
										67278
									],
									[
										67280,
										67281
									],
									[
										67304,
										67305
									],
									[
										67305,
										67306
									],
									[
										67314,
										67315
									],
									[
										67345,
										67346
									],
									[
										67346,
										67347
									],
									[
										67355,
										67356
									],
									[
										67384,
										67385
									],
									[
										67387,
										67388
									],
									[
										67409,
										67410
									],
									[
										67514,
										67515
									],
									[
										67525,
										67526
									],
									[
										67526,
										67527
									],
									[
										67547,
										67548
									],
									[
										67558,
										67559
									],
									[
										67571,
										67572
									],
									[
										67587,
										67588
									],
									[
										67594,
										67595
									],
									[
										67595,
										67596
									],
									[
										67611,
										67612
									],
									[
										67679,
										67680
									],
									[
										67690,
										67691
									],
									[
										67691,
										67692
									],
									[
										67712,
										67713
									],
									[
										67723,
										67724
									],
									[
										67736,
										67737
									],
									[
										67755,
										67756
									],
									[
										67756,
										67757
									],
									[
										67772,
										67773
									],
									[
										67942,
										67943
									],
									[
										67967,
										67968
									],
									[
										68010,
										68011
									],
									[
										68024,
										68025
									],
									[
										68048,
										68049
									],
									[
										68064,
										68065
									],
									[
										68116,
										68117
									],
									[
										68118,
										68119
									],
									[
										68173,
										68174
									],
									[
										68249,
										68250
									],
									[
										68259,
										68260
									],
									[
										68310,
										68311
									],
									[
										68355,
										68356
									],
									[
										68369,
										68370
									],
									[
										68389,
										68390
									],
									[
										68450,
										68451
									],
									[
										68499,
										68500
									],
									[
										68513,
										68514
									],
									[
										68557,
										68558
									],
									[
										68572,
										68573
									],
									[
										68593,
										68594
									],
									[
										68639,
										68640
									],
									[
										68651,
										68652
									],
									[
										68670,
										68671
									],
									[
										68727,
										68728
									],
									[
										68746,
										68747
									],
									[
										68818,
										68819
									],
									[
										68870,
										68871
									],
									[
										68881,
										68882
									],
									[
										68972,
										68973
									],
									[
										68981,
										68982
									],
									[
										69002,
										69003
									],
									[
										69052,
										69053
									],
									[
										69067,
										69068
									],
									[
										69111,
										69112
									],
									[
										69117,
										69118
									],
									[
										69163,
										69164
									],
									[
										69169,
										69170
									],
									[
										69178,
										69179
									],
									[
										69238,
										69239
									],
									[
										69299,
										69300
									],
									[
										69300,
										69301
									],
									[
										69310,
										69311
									],
									[
										69364,
										69365
									],
									[
										69367,
										69368
									],
									[
										69370,
										69371
									],
									[
										69409,
										69410
									],
									[
										69419,
										69420
									],
									[
										69431,
										69432
									],
									[
										69476,
										69477
									],
									[
										69512,
										69513
									],
									[
										69517,
										69518
									],
									[
										69520,
										69521
									],
									[
										69529,
										69530
									],
									[
										69532,
										69533
									],
									[
										69545,
										69546
									],
									[
										69564,
										69565
									],
									[
										69633,
										69634
									],
									[
										69636,
										69637
									],
									[
										69639,
										69640
									],
									[
										69647,
										69648
									],
									[
										69681,
										69682
									],
									[
										69843,
										69844
									],
									[
										69872,
										69873
									],
									[
										69950,
										69951
									],
									[
										70011,
										70012
									],
									[
										70014,
										70015
									],
									[
										70188,
										70189
									],
									[
										70217,
										70218
									],
									[
										70505,
										70506
									],
									[
										70518,
										70519
									],
									[
										70561,
										70562
									],
									[
										70586,
										70587
									],
									[
										70593,
										70594
									],
									[
										70645,
										70646
									],
									[
										70665,
										70666
									],
									[
										70678,
										70679
									],
									[
										70703,
										70704
									],
									[
										70710,
										70711
									],
									[
										70827,
										70828
									],
									[
										70840,
										70841
									],
									[
										70883,
										70884
									],
									[
										70898,
										70899
									],
									[
										71069,
										71070
									],
									[
										71082,
										71083
									],
									[
										71125,
										71126
									],
									[
										71140,
										71141
									],
									[
										71200,
										71201
									],
									[
										71215,
										71216
									],
									[
										71378,
										71379
									],
									[
										71391,
										71392
									],
									[
										71434,
										71435
									],
									[
										71448,
										71449
									],
									[
										71451,
										71452
									],
									[
										71485,
										71486
									],
									[
										71506,
										71507
									],
									[
										71518,
										71519
									],
									[
										71522,
										71523
									],
									[
										71530,
										71531
									],
									[
										71544,
										71545
									],
									[
										71547,
										71548
									],
									[
										71585,
										71586
									],
									[
										71592,
										71593
									],
									[
										71593,
										71594
									],
									[
										71612,
										71613
									],
									[
										71619,
										71620
									],
									[
										71620,
										71621
									],
									[
										71626,
										71627
									],
									[
										71630,
										71631
									],
									[
										71638,
										71639
									],
									[
										71652,
										71653
									],
									[
										71655,
										71656
									],
									[
										71688,
										71689
									],
									[
										71695,
										71696
									],
									[
										71699,
										71700
									],
									[
										71714,
										71715
									],
									[
										71718,
										71719
									],
									[
										71740,
										71741
									],
									[
										71747,
										71748
									],
									[
										71751,
										71752
									],
									[
										71766,
										71767
									],
									[
										71770,
										71771
									],
									[
										71784,
										71785
									],
									[
										71788,
										71789
									],
									[
										71796,
										71797
									],
									[
										71810,
										71811
									],
									[
										71813,
										71814
									],
									[
										71846,
										71847
									],
									[
										71853,
										71854
									],
									[
										71857,
										71858
									],
									[
										71872,
										71873
									],
									[
										71892,
										71893
									],
									[
										71899,
										71900
									],
									[
										71903,
										71904
									],
									[
										71918,
										71919
									],
									[
										71930,
										71931
									],
									[
										71934,
										71935
									],
									[
										71942,
										71943
									],
									[
										71956,
										71957
									],
									[
										71959,
										71960
									],
									[
										71978,
										71979
									],
									[
										71985,
										71986
									],
									[
										71989,
										71990
									],
									[
										72008,
										72009
									],
									[
										72030,
										72031
									],
									[
										72037,
										72038
									],
									[
										72041,
										72042
									],
									[
										72060,
										72061
									],
									[
										72074,
										72075
									],
									[
										72078,
										72079
									],
									[
										72086,
										72087
									],
									[
										72100,
										72101
									],
									[
										72103,
										72104
									],
									[
										72122,
										72123
									],
									[
										72129,
										72130
									],
									[
										72133,
										72134
									],
									[
										72148,
										72149
									],
									[
										72167,
										72168
									],
									[
										72174,
										72175
									],
									[
										72178,
										72179
									],
									[
										72193,
										72194
									],
									[
										72204,
										72205
									],
									[
										72208,
										72209
									],
									[
										72216,
										72217
									],
									[
										72230,
										72231
									],
									[
										72233,
										72234
									],
									[
										72266,
										72267
									],
									[
										72273,
										72274
									],
									[
										72298,
										72299
									],
									[
										72318,
										72319
									],
									[
										72325,
										72326
									],
									[
										72350,
										72351
									],
									[
										72362,
										72363
									],
									[
										72366,
										72367
									],
									[
										72374,
										72375
									],
									[
										72388,
										72389
									],
									[
										72391,
										72392
									],
									[
										72424,
										72425
									],
									[
										72431,
										72432
									],
									[
										72435,
										72436
									],
									[
										72436,
										72437
									],
									[
										72444,
										72445
									],
									[
										72466,
										72467
									],
									[
										72473,
										72474
									],
									[
										72477,
										72478
									],
									[
										72478,
										72479
									],
									[
										72486,
										72487
									],
									[
										72500,
										72501
									],
									[
										72504,
										72505
									],
									[
										72512,
										72513
									],
									[
										72526,
										72527
									],
									[
										72529,
										72530
									],
									[
										72562,
										72563
									],
									[
										72569,
										72570
									],
									[
										72593,
										72594
									],
									[
										72600,
										72601
									],
									[
										72616,
										72617
									],
									[
										72620,
										72621
									],
									[
										72628,
										72629
									],
									[
										72642,
										72643
									],
									[
										72645,
										72646
									],
									[
										72678,
										72679
									],
									[
										72685,
										72686
									],
									[
										72711,
										72712
									],
									[
										72718,
										72719
									],
									[
										72736,
										72737
									],
									[
										72740,
										72741
									],
									[
										72748,
										72749
									],
									[
										72762,
										72763
									],
									[
										72765,
										72766
									],
									[
										72841,
										72842
									],
									[
										72875,
										72876
									],
									[
										72891,
										72892
									],
									[
										72920,
										72921
									],
									[
										72936,
										72937
									],
									[
										72974,
										72975
									],
									[
										73017,
										73018
									],
									[
										73039,
										73040
									],
									[
										73205,
										73206
									],
									[
										73208,
										73209
									],
									[
										73229,
										73230
									],
									[
										73442,
										73443
									],
									[
										73557,
										73558
									],
									[
										73583,
										73584
									],
									[
										73685,
										73686
									],
									[
										73751,
										73752
									],
									[
										73830,
										73831
									],
									[
										73858,
										73859
									],
									[
										73864,
										73865
									],
									[
										73901,
										73902
									],
									[
										73922,
										73923
									],
									[
										73961,
										73962
									],
									[
										73970,
										73971
									],
									[
										73997,
										73998
									],
									[
										74025,
										74026
									],
									[
										74053,
										74054
									],
									[
										74063,
										74064
									],
									[
										74091,
										74092
									],
									[
										74263,
										74264
									],
									[
										74347,
										74348
									],
									[
										74349,
										74350
									],
									[
										74364,
										74365
									],
									[
										74485,
										74486
									],
									[
										74491,
										74492
									],
									[
										74559,
										74560
									],
									[
										74562,
										74563
									],
									[
										74600,
										74601
									],
									[
										74694,
										74695
									],
									[
										74696,
										74697
									],
									[
										74777,
										74778
									],
									[
										74823,
										74824
									],
									[
										74824,
										74825
									],
									[
										74841,
										74842
									],
									[
										74853,
										74854
									],
									[
										74869,
										74870
									],
									[
										74948,
										74949
									],
									[
										74988,
										74989
									],
									[
										75093,
										75094
									],
									[
										75115,
										75116
									],
									[
										75116,
										75117
									],
									[
										75138,
										75139
									],
									[
										75182,
										75183
									],
									[
										75185,
										75186
									],
									[
										75207,
										75208
									],
									[
										75234,
										75235
									],
									[
										75269,
										75270
									],
									[
										75275,
										75276
									],
									[
										75289,
										75290
									],
									[
										75362,
										75363
									],
									[
										75366,
										75367
									],
									[
										75425,
										75426
									],
									[
										75474,
										75475
									],
									[
										75487,
										75488
									],
									[
										75490,
										75491
									],
									[
										75539,
										75540
									],
									[
										75540,
										75541
									],
									[
										75550,
										75551
									],
									[
										75555,
										75556
									],
									[
										75567,
										75568
									],
									[
										75691,
										75692
									],
									[
										75736,
										75737
									],
									[
										75791,
										75792
									],
									[
										75800,
										75801
									],
									[
										75813,
										75814
									],
									[
										75817,
										75818
									],
									[
										75840,
										75841
									],
									[
										75853,
										75854
									],
									[
										75877,
										75878
									],
									[
										75886,
										75887
									],
									[
										75892,
										75893
									],
									[
										75909,
										75910
									],
									[
										75967,
										75968
									],
									[
										76035,
										76036
									],
									[
										76040,
										76041
									],
									[
										76046,
										76047
									],
									[
										76047,
										76048
									],
									[
										76052,
										76053
									],
									[
										76100,
										76101
									],
									[
										76140,
										76141
									],
									[
										76157,
										76158
									],
									[
										76194,
										76195
									],
									[
										76205,
										76206
									],
									[
										76221,
										76222
									],
									[
										76249,
										76250
									],
									[
										76282,
										76283
									],
									[
										76284,
										76285
									],
									[
										76290,
										76291
									],
									[
										76291,
										76292
									],
									[
										76301,
										76302
									],
									[
										76315,
										76316
									],
									[
										76357,
										76358
									],
									[
										76373,
										76374
									],
									[
										76391,
										76392
									],
									[
										76411,
										76412
									],
									[
										76418,
										76419
									],
									[
										76426,
										76427
									],
									[
										76438,
										76439
									],
									[
										76535,
										76536
									],
									[
										76558,
										76559
									],
									[
										76559,
										76560
									],
									[
										76621,
										76622
									],
									[
										76633,
										76634
									],
									[
										76634,
										76635
									],
									[
										76640,
										76641
									],
									[
										76649,
										76650
									],
									[
										76657,
										76658
									],
									[
										76708,
										76709
									],
									[
										76720,
										76721
									],
									[
										76727,
										76728
									],
									[
										76728,
										76729
									],
									[
										76731,
										76732
									],
									[
										76742,
										76743
									],
									[
										76749,
										76750
									],
									[
										76761,
										76762
									],
									[
										76788,
										76789
									],
									[
										76804,
										76805
									],
									[
										76836,
										76837
									],
									[
										76840,
										76841
									],
									[
										76900,
										76901
									],
									[
										76928,
										76929
									],
									[
										76939,
										76940
									],
									[
										76990,
										76991
									],
									[
										76994,
										76995
									],
									[
										77081,
										77082
									],
									[
										77107,
										77108
									],
									[
										77108,
										77109
									],
									[
										77113,
										77114
									],
									[
										77136,
										77137
									],
									[
										77141,
										77142
									],
									[
										77158,
										77159
									],
									[
										77168,
										77169
									],
									[
										77197,
										77198
									],
									[
										77198,
										77199
									],
									[
										77204,
										77205
									],
									[
										77213,
										77214
									],
									[
										77315,
										77316
									],
									[
										77328,
										77329
									],
									[
										77335,
										77336
									],
									[
										77370,
										77371
									],
									[
										77391,
										77392
									],
									[
										77415,
										77416
									],
									[
										77524,
										77525
									],
									[
										77555,
										77556
									],
									[
										77556,
										77557
									],
									[
										77562,
										77563
									],
									[
										77606,
										77607
									],
									[
										77640,
										77641
									],
									[
										77642,
										77643
									],
									[
										77656,
										77657
									],
									[
										77657,
										77658
									],
									[
										77684,
										77685
									],
									[
										77692,
										77693
									],
									[
										77726,
										77727
									],
									[
										77745,
										77746
									],
									[
										77794,
										77795
									],
									[
										77807,
										77808
									],
									[
										77837,
										77838
									],
									[
										77843,
										77844
									],
									[
										77853,
										77854
									],
									[
										77861,
										77862
									],
									[
										77872,
										77873
									],
									[
										77889,
										77890
									],
									[
										77898,
										77899
									],
									[
										77925,
										77926
									],
									[
										77928,
										77929
									],
									[
										77942,
										77943
									],
									[
										77952,
										77953
									],
									[
										77966,
										77967
									],
									[
										77977,
										77978
									],
									[
										77981,
										77982
									],
									[
										78015,
										78016
									],
									[
										78067,
										78068
									],
									[
										78074,
										78075
									],
									[
										78075,
										78076
									],
									[
										78087,
										78088
									],
									[
										78124,
										78125
									],
									[
										78129,
										78130
									],
									[
										78132,
										78133
									],
									[
										78148,
										78149
									],
									[
										78157,
										78158
									],
									[
										78186,
										78187
									],
									[
										78196,
										78197
									],
									[
										78209,
										78210
									],
									[
										78212,
										78213
									],
									[
										78251,
										78252
									],
									[
										78252,
										78253
									],
									[
										78315,
										78316
									],
									[
										78349,
										78350
									],
									[
										78350,
										78351
									],
									[
										78374,
										78375
									],
									[
										78410,
										78411
									],
									[
										78433,
										78434
									],
									[
										78454,
										78455
									],
									[
										78487,
										78488
									],
									[
										78565,
										78566
									],
									[
										78572,
										78573
									],
									[
										78623,
										78624
									],
									[
										78640,
										78641
									],
									[
										78659,
										78660
									],
									[
										78675,
										78676
									],
									[
										78760,
										78761
									],
									[
										78762,
										78763
									],
									[
										78768,
										78769
									],
									[
										78774,
										78775
									],
									[
										78798,
										78799
									],
									[
										78916,
										78917
									],
									[
										78941,
										78942
									],
									[
										78973,
										78974
									],
									[
										79012,
										79013
									],
									[
										79014,
										79015
									],
									[
										79084,
										79085
									],
									[
										79190,
										79191
									],
									[
										79231,
										79232
									],
									[
										79267,
										79268
									],
									[
										79274,
										79275
									],
									[
										79283,
										79284
									],
									[
										79307,
										79308
									],
									[
										79317,
										79318
									],
									[
										79353,
										79354
									],
									[
										79359,
										79360
									],
									[
										79454,
										79455
									],
									[
										79459,
										79460
									],
									[
										79466,
										79467
									],
									[
										79475,
										79476
									],
									[
										79506,
										79507
									],
									[
										79508,
										79509
									],
									[
										79521,
										79522
									],
									[
										79532,
										79533
									],
									[
										79541,
										79542
									],
									[
										79572,
										79573
									],
									[
										79608,
										79609
									],
									[
										79613,
										79614
									],
									[
										79614,
										79615
									],
									[
										79619,
										79620
									],
									[
										79684,
										79685
									],
									[
										79694,
										79695
									],
									[
										79712,
										79713
									],
									[
										79719,
										79720
									],
									[
										79729,
										79730
									],
									[
										79730,
										79731
									],
									[
										79776,
										79777
									],
									[
										79790,
										79791
									],
									[
										79793,
										79794
									],
									[
										79794,
										79795
									],
									[
										79797,
										79798
									],
									[
										79817,
										79818
									],
									[
										79826,
										79827
									],
									[
										79843,
										79844
									],
									[
										79865,
										79866
									],
									[
										79871,
										79872
									],
									[
										79876,
										79877
									],
									[
										79887,
										79888
									],
									[
										79908,
										79909
									],
									[
										79915,
										79916
									],
									[
										79948,
										79949
									],
									[
										79979,
										79980
									],
									[
										79989,
										79990
									],
									[
										79999,
										80000
									],
									[
										80003,
										80004
									],
									[
										80048,
										80049
									],
									[
										80055,
										80056
									],
									[
										80065,
										80066
									],
									[
										80069,
										80070
									],
									[
										80102,
										80103
									],
									[
										80106,
										80107
									],
									[
										80107,
										80108
									],
									[
										80110,
										80111
									],
									[
										80127,
										80128
									],
									[
										80134,
										80135
									],
									[
										80144,
										80145
									],
									[
										80181,
										80182
									],
									[
										80191,
										80192
									],
									[
										80255,
										80256
									],
									[
										80262,
										80263
									],
									[
										80263,
										80264
									],
									[
										80272,
										80273
									],
									[
										80276,
										80277
									],
									[
										80296,
										80297
									],
									[
										80323,
										80324
									],
									[
										80347,
										80348
									],
									[
										80354,
										80355
									],
									[
										80355,
										80356
									],
									[
										80363,
										80364
									],
									[
										80365,
										80366
									],
									[
										80395,
										80396
									],
									[
										80402,
										80403
									],
									[
										80418,
										80419
									],
									[
										80436,
										80437
									],
									[
										80437,
										80438
									],
									[
										80451,
										80452
									],
									[
										80466,
										80467
									],
									[
										80467,
										80468
									],
									[
										80470,
										80471
									],
									[
										80484,
										80485
									],
									[
										80498,
										80499
									],
									[
										80525,
										80526
									],
									[
										80544,
										80545
									],
									[
										80561,
										80562
									],
									[
										80593,
										80594
									],
									[
										80637,
										80638
									],
									[
										80654,
										80655
									],
									[
										80768,
										80769
									],
									[
										80771,
										80772
									],
									[
										80774,
										80775
									],
									[
										80776,
										80777
									],
									[
										80788,
										80789
									],
									[
										80807,
										80808
									],
									[
										80823,
										80824
									],
									[
										80838,
										80839
									],
									[
										80858,
										80859
									],
									[
										80903,
										80904
									],
									[
										80910,
										80911
									],
									[
										80922,
										80923
									],
									[
										80929,
										80930
									],
									[
										80933,
										80934
									],
									[
										80944,
										80945
									],
									[
										80971,
										80972
									],
									[
										80973,
										80974
									],
									[
										81001,
										81002
									],
									[
										81021,
										81022
									],
									[
										81031,
										81032
									],
									[
										81048,
										81049
									],
									[
										81087,
										81088
									],
									[
										81105,
										81106
									],
									[
										81110,
										81111
									],
									[
										81153,
										81154
									],
									[
										81175,
										81176
									],
									[
										81179,
										81180
									],
									[
										81201,
										81202
									],
									[
										81211,
										81212
									],
									[
										81235,
										81236
									],
									[
										81270,
										81271
									],
									[
										81280,
										81281
									],
									[
										81281,
										81282
									],
									[
										81284,
										81285
									],
									[
										81293,
										81294
									],
									[
										81351,
										81352
									],
									[
										81366,
										81367
									],
									[
										81373,
										81374
									],
									[
										81385,
										81386
									],
									[
										81409,
										81410
									],
									[
										81439,
										81440
									],
									[
										81440,
										81441
									],
									[
										81445,
										81446
									],
									[
										81464,
										81465
									],
									[
										81466,
										81467
									],
									[
										81482,
										81483
									],
									[
										81494,
										81495
									],
									[
										81512,
										81513
									],
									[
										81522,
										81523
									],
									[
										81532,
										81533
									],
									[
										81555,
										81556
									],
									[
										81579,
										81580
									],
									[
										81581,
										81582
									],
									[
										81591,
										81592
									],
									[
										81592,
										81593
									],
									[
										81615,
										81616
									],
									[
										81652,
										81653
									],
									[
										81658,
										81659
									],
									[
										81683,
										81684
									],
									[
										81696,
										81697
									],
									[
										81704,
										81705
									],
									[
										81707,
										81708
									],
									[
										81709,
										81710
									],
									[
										81717,
										81718
									],
									[
										81721,
										81722
									],
									[
										81722,
										81723
									],
									[
										81757,
										81758
									],
									[
										81774,
										81775
									],
									[
										81782,
										81783
									],
									[
										81807,
										81808
									],
									[
										81814,
										81815
									],
									[
										81830,
										81831
									],
									[
										81836,
										81837
									],
									[
										81857,
										81858
									],
									[
										81867,
										81868
									],
									[
										81868,
										81869
									],
									[
										81871,
										81872
									],
									[
										81880,
										81881
									],
									[
										81883,
										81884
									],
									[
										81924,
										81925
									],
									[
										81925,
										81926
									],
									[
										81936,
										81937
									],
									[
										81937,
										81938
									],
									[
										81942,
										81943
									],
									[
										81952,
										81953
									],
									[
										81970,
										81971
									],
									[
										81988,
										81989
									],
									[
										82035,
										82036
									],
									[
										82038,
										82039
									],
									[
										82047,
										82048
									],
									[
										82064,
										82065
									],
									[
										82070,
										82071
									],
									[
										82080,
										82081
									],
									[
										82085,
										82086
									],
									[
										82108,
										82109
									],
									[
										82166,
										82167
									],
									[
										82190,
										82191
									],
									[
										82226,
										82227
									],
									[
										82250,
										82251
									],
									[
										82259,
										82260
									],
									[
										82274,
										82275
									],
									[
										82294,
										82295
									],
									[
										82322,
										82323
									],
									[
										82325,
										82326
									],
									[
										82328,
										82329
									],
									[
										82350,
										82351
									],
									[
										82369,
										82370
									],
									[
										82390,
										82391
									],
									[
										82395,
										82396
									],
									[
										82404,
										82405
									],
									[
										82448,
										82449
									],
									[
										82449,
										82450
									],
									[
										82458,
										82459
									],
									[
										82461,
										82462
									],
									[
										82519,
										82520
									],
									[
										82527,
										82528
									],
									[
										82531,
										82532
									],
									[
										82550,
										82551
									],
									[
										82561,
										82562
									],
									[
										82597,
										82598
									],
									[
										82603,
										82604
									],
									[
										82621,
										82622
									],
									[
										82628,
										82629
									],
									[
										82637,
										82638
									],
									[
										82638,
										82639
									],
									[
										82650,
										82651
									],
									[
										82722,
										82723
									],
									[
										82760,
										82761
									],
									[
										82812,
										82813
									],
									[
										82817,
										82818
									],
									[
										82820,
										82821
									],
									[
										82823,
										82824
									],
									[
										82916,
										82917
									],
									[
										82933,
										82934
									],
									[
										82966,
										82967
									],
									[
										82977,
										82978
									],
									[
										82985,
										82986
									],
									[
										83004,
										83005
									],
									[
										83023,
										83024
									],
									[
										83057,
										83058
									],
									[
										83082,
										83083
									],
									[
										83123,
										83124
									],
									[
										83179,
										83180
									],
									[
										83182,
										83183
									],
									[
										83191,
										83192
									],
									[
										83209,
										83210
									],
									[
										83225,
										83226
									],
									[
										83226,
										83227
									],
									[
										83235,
										83236
									],
									[
										83262,
										83263
									],
									[
										83265,
										83266
									],
									[
										83285,
										83286
									],
									[
										83286,
										83287
									],
									[
										83343,
										83344
									],
									[
										83350,
										83351
									],
									[
										83351,
										83352
									],
									[
										83397,
										83398
									],
									[
										83408,
										83409
									],
									[
										83414,
										83415
									],
									[
										83436,
										83437
									],
									[
										83462,
										83463
									],
									[
										83486,
										83487
									],
									[
										83491,
										83492
									],
									[
										83500,
										83501
									],
									[
										83517,
										83518
									],
									[
										83545,
										83546
									],
									[
										83561,
										83562
									],
									[
										83562,
										83563
									],
									[
										83569,
										83570
									],
									[
										83591,
										83592
									],
									[
										83615,
										83616
									],
									[
										83623,
										83624
									],
									[
										83636,
										83637
									],
									[
										83637,
										83638
									],
									[
										83723,
										83724
									],
									[
										83734,
										83735
									],
									[
										83761,
										83762
									],
									[
										83784,
										83785
									],
									[
										83800,
										83801
									],
									[
										83801,
										83802
									],
									[
										83808,
										83809
									],
									[
										83817,
										83818
									],
									[
										83836,
										83837
									],
									[
										83854,
										83855
									],
									[
										83862,
										83863
									],
									[
										83875,
										83876
									],
									[
										83876,
										83877
									],
									[
										83947,
										83948
									],
									[
										83961,
										83962
									],
									[
										83972,
										83973
									],
									[
										84011,
										84012
									],
									[
										84012,
										84013
									],
									[
										84041,
										84042
									],
									[
										84065,
										84066
									],
									[
										84080,
										84081
									],
									[
										84081,
										84082
									],
									[
										84126,
										84127
									],
									[
										84127,
										84128
									],
									[
										84136,
										84137
									],
									[
										84156,
										84157
									],
									[
										84177,
										84178
									],
									[
										84220,
										84221
									],
									[
										84240,
										84241
									],
									[
										84241,
										84242
									],
									[
										84250,
										84251
									],
									[
										84270,
										84271
									],
									[
										84291,
										84292
									],
									[
										84299,
										84300
									],
									[
										84351,
										84352
									],
									[
										84378,
										84379
									],
									[
										84434,
										84435
									],
									[
										84437,
										84438
									],
									[
										84446,
										84447
									],
									[
										84464,
										84465
									],
									[
										84480,
										84481
									],
									[
										84481,
										84482
									],
									[
										84490,
										84491
									],
									[
										84517,
										84518
									],
									[
										84520,
										84521
									],
									[
										84540,
										84541
									],
									[
										84541,
										84542
									],
									[
										84598,
										84599
									],
									[
										84605,
										84606
									],
									[
										84606,
										84607
									],
									[
										84652,
										84653
									],
									[
										84663,
										84664
									],
									[
										84669,
										84670
									],
									[
										84691,
										84692
									],
									[
										84717,
										84718
									],
									[
										84735,
										84736
									],
									[
										84752,
										84753
									],
									[
										84756,
										84757
									],
									[
										84761,
										84762
									],
									[
										84770,
										84771
									],
									[
										84787,
										84788
									],
									[
										84801,
										84802
									],
									[
										84803,
										84804
									],
									[
										84821,
										84822
									],
									[
										84822,
										84823
									],
									[
										84829,
										84830
									],
									[
										84846,
										84847
									],
									[
										84854,
										84855
									],
									[
										84867,
										84868
									],
									[
										84868,
										84869
									],
									[
										84928,
										84929
									],
									[
										84939,
										84940
									],
									[
										84966,
										84967
									],
									[
										84986,
										84987
									],
									[
										85000,
										85001
									],
									[
										85002,
										85003
									],
									[
										85020,
										85021
									],
									[
										85021,
										85022
									],
									[
										85028,
										85029
									],
									[
										85037,
										85038
									],
									[
										85051,
										85052
									],
									[
										85059,
										85060
									],
									[
										85072,
										85073
									],
									[
										85073,
										85074
									],
									[
										85110,
										85111
									],
									[
										85118,
										85119
									],
									[
										85138,
										85139
									],
									[
										85152,
										85153
									],
									[
										85163,
										85164
									],
									[
										85202,
										85203
									],
									[
										85203,
										85204
									],
									[
										85232,
										85233
									],
									[
										85256,
										85257
									],
									[
										85271,
										85272
									],
									[
										85272,
										85273
									],
									[
										85303,
										85304
									],
									[
										85321,
										85322
									],
									[
										85322,
										85323
									],
									[
										85331,
										85332
									],
									[
										85365,
										85366
									],
									[
										85370,
										85371
									],
									[
										85390,
										85391
									],
									[
										85391,
										85392
									],
									[
										85400,
										85401
									],
									[
										85411,
										85412
									],
									[
										85479,
										85480
									],
									[
										85483,
										85484
									],
									[
										85493,
										85494
									],
									[
										85516,
										85517
									],
									[
										85540,
										85541
									],
									[
										85551,
										85552
									],
									[
										85552,
										85553
									],
									[
										85597,
										85598
									],
									[
										85607,
										85608
									],
									[
										85634,
										85635
									],
									[
										85658,
										85659
									],
									[
										85669,
										85670
									],
									[
										85670,
										85671
									],
									[
										85765,
										85766
									],
									[
										85772,
										85773
									],
									[
										85791,
										85792
									],
									[
										85793,
										85794
									],
									[
										85810,
										85811
									],
									[
										85820,
										85821
									],
									[
										85849,
										85850
									],
									[
										85897,
										85898
									],
									[
										85916,
										85917
									],
									[
										85924,
										85925
									],
									[
										85981,
										85982
									],
									[
										86001,
										86002
									],
									[
										86003,
										86004
									],
									[
										86014,
										86015
									],
									[
										86096,
										86097
									],
									[
										86121,
										86122
									],
									[
										86133,
										86134
									],
									[
										86142,
										86143
									],
									[
										86151,
										86152
									],
									[
										86152,
										86153
									],
									[
										86162,
										86163
									],
									[
										86173,
										86174
									],
									[
										86191,
										86192
									],
									[
										86223,
										86224
									],
									[
										86248,
										86249
									],
									[
										86255,
										86256
									],
									[
										86260,
										86261
									],
									[
										86281,
										86282
									],
									[
										86304,
										86305
									],
									[
										86313,
										86314
									],
									[
										86399,
										86400
									],
									[
										86424,
										86425
									],
									[
										86436,
										86437
									],
									[
										86445,
										86446
									],
									[
										86454,
										86455
									],
									[
										86455,
										86456
									],
									[
										86465,
										86466
									],
									[
										86476,
										86477
									],
									[
										86494,
										86495
									],
									[
										86526,
										86527
									],
									[
										86551,
										86552
									],
									[
										86558,
										86559
									],
									[
										86563,
										86564
									],
									[
										86584,
										86585
									],
									[
										86665,
										86666
									],
									[
										86684,
										86685
									],
									[
										86686,
										86687
									],
									[
										86703,
										86704
									],
									[
										86713,
										86714
									],
									[
										86742,
										86743
									],
									[
										86790,
										86791
									],
									[
										86822,
										86823
									],
									[
										86904,
										86905
									],
									[
										87237,
										87238
									],
									[
										87255,
										87256
									],
									[
										87257,
										87258
									],
									[
										87274,
										87275
									],
									[
										87284,
										87285
									],
									[
										87313,
										87314
									],
									[
										87361,
										87362
									],
									[
										87380,
										87381
									],
									[
										87388,
										87389
									],
									[
										87466,
										87467
									],
									[
										87485,
										87486
									],
									[
										87510,
										87511
									],
									[
										87552,
										87553
									],
									[
										87555,
										87556
									],
									[
										87580,
										87581
									],
									[
										87625,
										87626
									],
									[
										87658,
										87659
									],
									[
										87661,
										87662
									],
									[
										87665,
										87666
									],
									[
										87719,
										87720
									],
									[
										87755,
										87756
									],
									[
										87774,
										87775
									],
									[
										87819,
										87820
									],
									[
										87824,
										87825
									],
									[
										87834,
										87835
									],
									[
										87850,
										87851
									],
									[
										87859,
										87860
									],
									[
										87877,
										87878
									],
									[
										87891,
										87892
									],
									[
										87899,
										87900
									],
									[
										87921,
										87922
									],
									[
										87960,
										87961
									],
									[
										87991,
										87992
									],
									[
										88037,
										88038
									],
									[
										88049,
										88050
									],
									[
										88059,
										88060
									],
									[
										88060,
										88061
									],
									[
										88158,
										88159
									],
									[
										88170,
										88171
									],
									[
										88173,
										88174
									],
									[
										88175,
										88176
									],
									[
										88195,
										88196
									],
									[
										88207,
										88208
									],
									[
										88210,
										88211
									],
									[
										88212,
										88213
									],
									[
										88232,
										88233
									],
									[
										88244,
										88245
									],
									[
										88247,
										88248
									],
									[
										88249,
										88250
									],
									[
										88269,
										88270
									],
									[
										88281,
										88282
									],
									[
										88284,
										88285
									],
									[
										88286,
										88287
									],
									[
										88306,
										88307
									],
									[
										88318,
										88319
									],
									[
										88321,
										88322
									],
									[
										88323,
										88324
									],
									[
										88343,
										88344
									],
									[
										88352,
										88353
									],
									[
										88358,
										88359
									],
									[
										88377,
										88378
									],
									[
										88388,
										88389
									],
									[
										88394,
										88395
									],
									[
										88413,
										88414
									],
									[
										88422,
										88423
									],
									[
										88428,
										88429
									],
									[
										88447,
										88448
									],
									[
										88463,
										88464
									],
									[
										88482,
										88483
									],
									[
										88495,
										88496
									],
									[
										88499,
										88500
									],
									[
										88530,
										88531
									],
									[
										88566,
										88567
									],
									[
										88579,
										88580
									],
									[
										88588,
										88589
									],
									[
										88598,
										88599
									],
									[
										88626,
										88627
									],
									[
										88652,
										88653
									],
									[
										88691,
										88692
									],
									[
										88701,
										88702
									],
									[
										88704,
										88705
									],
									[
										88726,
										88727
									],
									[
										88754,
										88755
									],
									[
										88801,
										88802
									],
									[
										88807,
										88808
									],
									[
										88809,
										88810
									],
									[
										88820,
										88821
									],
									[
										88821,
										88822
									],
									[
										88858,
										88859
									],
									[
										88877,
										88878
									],
									[
										88915,
										88916
									],
									[
										88948,
										88949
									],
									[
										88954,
										88955
									],
									[
										88967,
										88968
									],
									[
										88973,
										88974
									],
									[
										88999,
										89000
									],
									[
										89012,
										89013
									],
									[
										89041,
										89042
									],
									[
										89065,
										89066
									],
									[
										89077,
										89078
									],
									[
										89087,
										89088
									],
									[
										89110,
										89111
									],
									[
										89171,
										89172
									],
									[
										89199,
										89200
									],
									[
										89216,
										89217
									],
									[
										89241,
										89242
									],
									[
										89245,
										89246
									],
									[
										89263,
										89264
									],
									[
										89271,
										89272
									],
									[
										89312,
										89313
									],
									[
										89325,
										89326
									],
									[
										89338,
										89339
									],
									[
										89347,
										89348
									],
									[
										89480,
										89481
									],
									[
										89535,
										89536
									],
									[
										89556,
										89557
									],
									[
										89574,
										89575
									],
									[
										89600,
										89601
									],
									[
										89644,
										89645
									],
									[
										89670,
										89671
									],
									[
										89671,
										89672
									],
									[
										89674,
										89675
									],
									[
										89728,
										89729
									],
									[
										89746,
										89747
									],
									[
										89756,
										89757
									],
									[
										89823,
										89824
									],
									[
										89931,
										89932
									],
									[
										89955,
										89956
									],
									[
										89960,
										89961
									],
									[
										89997,
										89998
									],
									[
										90009,
										90010
									],
									[
										90029,
										90030
									],
									[
										90037,
										90038
									],
									[
										90038,
										90039
									],
									[
										90050,
										90051
									],
									[
										90059,
										90060
									],
									[
										90086,
										90087
									],
									[
										90142,
										90143
									],
									[
										90159,
										90160
									],
									[
										90160,
										90161
									],
									[
										90173,
										90174
									],
									[
										90188,
										90189
									],
									[
										90195,
										90196
									],
									[
										90209,
										90210
									],
									[
										90211,
										90212
									],
									[
										90237,
										90238
									],
									[
										90242,
										90243
									],
									[
										90263,
										90264
									],
									[
										90265,
										90266
									],
									[
										90296,
										90297
									],
									[
										90310,
										90311
									],
									[
										90311,
										90312
									],
									[
										90313,
										90314
									],
									[
										90322,
										90323
									],
									[
										90342,
										90343
									],
									[
										90354,
										90355
									],
									[
										90367,
										90368
									],
									[
										90371,
										90372
									],
									[
										90373,
										90374
									],
									[
										90392,
										90393
									],
									[
										90434,
										90435
									],
									[
										90482,
										90483
									],
									[
										90508,
										90509
									],
									[
										90539,
										90540
									],
									[
										90599,
										90600
									],
									[
										90606,
										90607
									],
									[
										90616,
										90617
									],
									[
										90617,
										90618
									],
									[
										90643,
										90644
									],
									[
										90680,
										90681
									],
									[
										90683,
										90684
									],
									[
										90684,
										90685
									],
									[
										90687,
										90688
									],
									[
										90732,
										90733
									],
									[
										90734,
										90735
									],
									[
										90737,
										90738
									],
									[
										90738,
										90739
									],
									[
										90740,
										90741
									],
									[
										90778,
										90779
									],
									[
										90795,
										90796
									],
									[
										90810,
										90811
									],
									[
										90848,
										90849
									],
									[
										90899,
										90900
									],
									[
										90944,
										90945
									],
									[
										90982,
										90983
									],
									[
										90996,
										90997
									],
									[
										91019,
										91020
									],
									[
										91053,
										91054
									],
									[
										91099,
										91100
									],
									[
										91143,
										91144
									],
									[
										91188,
										91189
									],
									[
										91217,
										91218
									],
									[
										91231,
										91232
									],
									[
										91246,
										91247
									],
									[
										91275,
										91276
									],
									[
										91314,
										91315
									],
									[
										91321,
										91322
									],
									[
										91345,
										91346
									],
									[
										91372,
										91373
									],
									[
										91407,
										91408
									],
									[
										91414,
										91415
									],
									[
										91424,
										91425
									],
									[
										91439,
										91440
									],
									[
										91446,
										91447
									],
									[
										91471,
										91472
									],
									[
										91577,
										91578
									],
									[
										91580,
										91581
									],
									[
										91615,
										91616
									],
									[
										91635,
										91636
									],
									[
										91723,
										91724
									],
									[
										91729,
										91730
									],
									[
										91768,
										91769
									],
									[
										91786,
										91787
									],
									[
										91821,
										91822
									],
									[
										91829,
										91830
									],
									[
										91854,
										91855
									],
									[
										91859,
										91860
									],
									[
										91863,
										91864
									],
									[
										91884,
										91885
									],
									[
										91919,
										91920
									],
									[
										91942,
										91943
									],
									[
										91967,
										91968
									],
									[
										91990,
										91991
									],
									[
										92009,
										92010
									],
									[
										92064,
										92065
									],
									[
										92068,
										92069
									],
									[
										92132,
										92133
									],
									[
										92138,
										92139
									],
									[
										92143,
										92144
									],
									[
										92153,
										92154
									],
									[
										92173,
										92174
									],
									[
										92221,
										92222
									],
									[
										92259,
										92260
									],
									[
										92277,
										92278
									],
									[
										92338,
										92339
									],
									[
										92364,
										92365
									],
									[
										92369,
										92370
									],
									[
										92390,
										92391
									],
									[
										92434,
										92435
									],
									[
										92439,
										92440
									],
									[
										92458,
										92459
									],
									[
										92468,
										92469
									],
									[
										92479,
										92480
									],
									[
										92511,
										92512
									],
									[
										92560,
										92561
									],
									[
										92576,
										92577
									],
									[
										92586,
										92587
									],
									[
										92597,
										92598
									],
									[
										92641,
										92642
									],
									[
										92667,
										92668
									],
									[
										92699,
										92700
									],
									[
										92701,
										92702
									],
									[
										92732,
										92733
									],
									[
										92754,
										92755
									],
									[
										92803,
										92804
									],
									[
										92819,
										92820
									],
									[
										92829,
										92830
									],
									[
										92840,
										92841
									],
									[
										92884,
										92885
									],
									[
										92941,
										92942
									],
									[
										92964,
										92965
									],
									[
										92989,
										92990
									],
									[
										93012,
										93013
									],
									[
										93031,
										93032
									],
									[
										93083,
										93084
									],
									[
										93093,
										93094
									],
									[
										93124,
										93125
									],
									[
										93125,
										93126
									],
									[
										93187,
										93188
									],
									[
										93191,
										93192
									],
									[
										93297,
										93298
									],
									[
										93329,
										93330
									],
									[
										93445,
										93446
									],
									[
										93451,
										93452
									],
									[
										93461,
										93462
									],
									[
										93474,
										93475
									],
									[
										93528,
										93529
									],
									[
										93537,
										93538
									],
									[
										93544,
										93545
									],
									[
										93568,
										93569
									],
									[
										93620,
										93621
									],
									[
										93628,
										93629
									],
									[
										93637,
										93638
									],
									[
										93646,
										93647
									],
									[
										93656,
										93657
									],
									[
										93682,
										93683
									],
									[
										93692,
										93693
									],
									[
										93715,
										93716
									],
									[
										93719,
										93720
									],
									[
										93721,
										93722
									],
									[
										93743,
										93744
									],
									[
										93782,
										93783
									],
									[
										93839,
										93840
									],
									[
										93852,
										93853
									],
									[
										93919,
										93920
									],
									[
										93938,
										93939
									],
									[
										93948,
										93949
									],
									[
										93966,
										93967
									],
									[
										94027,
										94028
									],
									[
										94035,
										94036
									],
									[
										94046,
										94047
									],
									[
										94053,
										94054
									],
									[
										94068,
										94069
									],
									[
										94073,
										94074
									],
									[
										94100,
										94101
									],
									[
										94148,
										94149
									],
									[
										94184,
										94185
									],
									[
										94204,
										94205
									],
									[
										94209,
										94210
									],
									[
										94213,
										94214
									],
									[
										94218,
										94219
									],
									[
										94271,
										94272
									],
									[
										94281,
										94282
									],
									[
										94292,
										94293
									],
									[
										94330,
										94331
									],
									[
										94339,
										94340
									],
									[
										94346,
										94347
									],
									[
										94370,
										94371
									],
									[
										94422,
										94423
									],
									[
										94430,
										94431
									],
									[
										94439,
										94440
									],
									[
										94448,
										94449
									],
									[
										94458,
										94459
									],
									[
										94512,
										94513
									],
									[
										94536,
										94537
									],
									[
										94540,
										94541
									],
									[
										94560,
										94561
									],
									[
										94644,
										94645
									],
									[
										94645,
										94646
									],
									[
										94711,
										94712
									],
									[
										94719,
										94720
									],
									[
										94730,
										94731
									],
									[
										94737,
										94738
									],
									[
										94752,
										94753
									],
									[
										94757,
										94758
									],
									[
										94784,
										94785
									],
									[
										94852,
										94853
									],
									[
										94902,
										94903
									],
									[
										94903,
										94904
									],
									[
										94946,
										94947
									],
									[
										94969,
										94970
									],
									[
										94977,
										94978
									],
									[
										94988,
										94989
									],
									[
										94995,
										94996
									],
									[
										95010,
										95011
									],
									[
										95015,
										95016
									],
									[
										95042,
										95043
									],
									[
										95119,
										95120
									],
									[
										95162,
										95163
									],
									[
										95163,
										95164
									],
									[
										95229,
										95230
									],
									[
										95242,
										95243
									],
									[
										95329,
										95330
									],
									[
										95348,
										95349
									],
									[
										95358,
										95359
									],
									[
										95376,
										95377
									],
									[
										95425,
										95426
									],
									[
										95426,
										95427
									],
									[
										95490,
										95491
									],
									[
										95498,
										95499
									],
									[
										95509,
										95510
									],
									[
										95516,
										95517
									],
									[
										95531,
										95532
									],
									[
										95536,
										95537
									],
									[
										95563,
										95564
									],
									[
										95650,
										95651
									],
									[
										95706,
										95707
									],
									[
										95711,
										95712
									],
									[
										95716,
										95717
									],
									[
										95736,
										95737
									],
									[
										95777,
										95778
									],
									[
										95793,
										95794
									],
									[
										95869,
										95870
									],
									[
										95885,
										95886
									],
									[
										95947,
										95948
									],
									[
										95969,
										95970
									],
									[
										95996,
										95997
									],
									[
										96030,
										96031
									],
									[
										96040,
										96041
									],
									[
										96054,
										96055
									],
									[
										96093,
										96094
									],
									[
										96109,
										96110
									],
									[
										96113,
										96114
									],
									[
										96136,
										96137
									],
									[
										96145,
										96146
									],
									[
										96169,
										96170
									],
									[
										96208,
										96209
									],
									[
										96265,
										96266
									],
									[
										96276,
										96277
									],
									[
										96343,
										96344
									],
									[
										96363,
										96364
									],
									[
										96371,
										96372
									],
									[
										96425,
										96426
									],
									[
										96430,
										96431
									],
									[
										96436,
										96437
									],
									[
										96442,
										96443
									],
									[
										96493,
										96494
									],
									[
										96503,
										96504
									],
									[
										96516,
										96517
									],
									[
										96572,
										96573
									],
									[
										96594,
										96595
									],
									[
										96621,
										96622
									],
									[
										96655,
										96656
									],
									[
										96665,
										96666
									],
									[
										96679,
										96680
									],
									[
										96748,
										96749
									],
									[
										96760,
										96761
									],
									[
										96776,
										96777
									],
									[
										96780,
										96781
									],
									[
										96803,
										96804
									],
									[
										96832,
										96833
									],
									[
										96875,
										96876
									],
									[
										96916,
										96917
									],
									[
										96917,
										96918
									],
									[
										96985,
										96986
									],
									[
										96996,
										96997
									],
									[
										97083,
										97084
									],
									[
										97103,
										97104
									],
									[
										97111,
										97112
									],
									[
										97149,
										97150
									],
									[
										97150,
										97151
									],
									[
										97218,
										97219
									],
									[
										97223,
										97224
									],
									[
										97229,
										97230
									],
									[
										97235,
										97236
									],
									[
										97325,
										97326
									],
									[
										97343,
										97344
									],
									[
										97389,
										97390
									],
									[
										97399,
										97400
									],
									[
										97415,
										97416
									],
									[
										97425,
										97426
									],
									[
										97429,
										97430
									],
									[
										97479,
										97480
									],
									[
										97482,
										97483
									],
									[
										97507,
										97508
									],
									[
										97530,
										97531
									],
									[
										97540,
										97541
									],
									[
										97555,
										97556
									],
									[
										97578,
										97579
									],
									[
										97626,
										97627
									],
									[
										97695,
										97696
									],
									[
										97703,
										97704
									],
									[
										97748,
										97749
									],
									[
										97753,
										97754
									],
									[
										97761,
										97762
									],
									[
										97817,
										97818
									],
									[
										97828,
										97829
									],
									[
										97832,
										97833
									],
									[
										97949,
										97950
									],
									[
										98024,
										98025
									],
									[
										98030,
										98031
									],
									[
										98052,
										98053
									],
									[
										98062,
										98063
									],
									[
										98086,
										98087
									],
									[
										98118,
										98119
									],
									[
										98179,
										98180
									],
									[
										98275,
										98276
									],
									[
										98300,
										98301
									],
									[
										98337,
										98338
									],
									[
										98370,
										98371
									],
									[
										98515,
										98516
									],
									[
										98597,
										98598
									],
									[
										98628,
										98629
									],
									[
										98703,
										98704
									],
									[
										98730,
										98731
									],
									[
										98742,
										98743
									],
									[
										98832,
										98833
									],
									[
										98834,
										98835
									],
									[
										98897,
										98898
									],
									[
										99012,
										99013
									],
									[
										99080,
										99081
									],
									[
										99093,
										99094
									],
									[
										99100,
										99101
									],
									[
										99116,
										99117
									],
									[
										99226,
										99227
									],
									[
										99291,
										99292
									],
									[
										99340,
										99341
									],
									[
										99405,
										99406
									],
									[
										99454,
										99455
									],
									[
										99481,
										99482
									],
									[
										99548,
										99549
									],
									[
										99571,
										99572
									],
									[
										99583,
										99584
									],
									[
										99665,
										99666
									],
									[
										99711,
										99712
									],
									[
										99725,
										99726
									],
									[
										99733,
										99734
									],
									[
										99742,
										99743
									],
									[
										99787,
										99788
									],
									[
										99790,
										99791
									],
									[
										99851,
										99852
									],
									[
										99881,
										99882
									],
									[
										99944,
										99945
									],
									[
										99946,
										99947
									],
									[
										100035,
										100036
									],
									[
										100085,
										100086
									],
									[
										100114,
										100115
									],
									[
										100151,
										100152
									],
									[
										100154,
										100155
									],
									[
										100155,
										100156
									],
									[
										100158,
										100159
									],
									[
										100194,
										100195
									],
									[
										100243,
										100244
									],
									[
										100284,
										100285
									],
									[
										100291,
										100292
									],
									[
										100335,
										100336
									],
									[
										100350,
										100351
									],
									[
										100500,
										100501
									],
									[
										100659,
										100660
									],
									[
										100815,
										100816
									],
									[
										100933,
										100934
									],
									[
										101019,
										101020
									],
									[
										101061,
										101062
									],
									[
										101107,
										101108
									],
									[
										101130,
										101131
									],
									[
										101278,
										101279
									],
									[
										101437,
										101438
									],
									[
										101514,
										101515
									],
									[
										101548,
										101549
									],
									[
										101594,
										101595
									],
									[
										101609,
										101610
									],
									[
										101680,
										101681
									],
									[
										101752,
										101753
									],
									[
										101835,
										101836
									],
									[
										101864,
										101865
									],
									[
										101888,
										101889
									],
									[
										102028,
										102029
									],
									[
										102105,
										102106
									],
									[
										102144,
										102145
									],
									[
										102152,
										102153
									],
									[
										102194,
										102195
									],
									[
										102209,
										102210
									],
									[
										102216,
										102217
									],
									[
										102279,
										102280
									],
									[
										102284,
										102285
									],
									[
										102321,
										102322
									],
									[
										102326,
										102327
									],
									[
										102367,
										102368
									],
									[
										102436,
										102437
									],
									[
										102461,
										102462
									],
									[
										102524,
										102525
									],
									[
										102563,
										102564
									],
									[
										102592,
										102593
									],
									[
										102662,
										102663
									],
									[
										102682,
										102683
									],
									[
										102701,
										102702
									],
									[
										102704,
										102705
									],
									[
										102781,
										102782
									],
									[
										102789,
										102790
									],
									[
										102798,
										102799
									],
									[
										102859,
										102860
									],
									[
										103023,
										103024
									],
									[
										103060,
										103061
									],
									[
										103088,
										103089
									],
									[
										103129,
										103130
									],
									[
										103130,
										103131
									],
									[
										103239,
										103240
									],
									[
										103300,
										103301
									],
									[
										103382,
										103383
									],
									[
										103513,
										103514
									],
									[
										103614,
										103615
									],
									[
										103687,
										103688
									],
									[
										103751,
										103752
									],
									[
										103788,
										103789
									],
									[
										103817,
										103818
									],
									[
										103823,
										103824
									],
									[
										103843,
										103844
									],
									[
										103885,
										103886
									],
									[
										103930,
										103931
									],
									[
										103959,
										103960
									],
									[
										104083,
										104084
									],
									[
										104108,
										104109
									],
									[
										104112,
										104113
									],
									[
										104134,
										104135
									],
									[
										104159,
										104160
									],
									[
										104175,
										104176
									],
									[
										104214,
										104215
									],
									[
										104282,
										104283
									],
									[
										104337,
										104338
									],
									[
										104490,
										104491
									],
									[
										104511,
										104512
									],
									[
										104519,
										104520
									],
									[
										104565,
										104566
									],
									[
										104572,
										104573
									],
									[
										104578,
										104579
									],
									[
										104620,
										104621
									],
									[
										104644,
										104645
									],
									[
										104650,
										104651
									],
									[
										104670,
										104671
									],
									[
										104687,
										104688
									],
									[
										104722,
										104723
									],
									[
										104751,
										104752
									],
									[
										104767,
										104768
									],
									[
										104771,
										104772
									],
									[
										104778,
										104779
									],
									[
										104786,
										104787
									],
									[
										104787,
										104788
									],
									[
										104828,
										104829
									],
									[
										104854,
										104855
									],
									[
										104884,
										104885
									],
									[
										104906,
										104907
									],
									[
										104908,
										104909
									],
									[
										104922,
										104923
									],
									[
										104930,
										104931
									],
									[
										105058,
										105059
									],
									[
										105061,
										105062
									],
									[
										105068,
										105069
									],
									[
										105091,
										105092
									],
									[
										105134,
										105135
									],
									[
										105189,
										105190
									],
									[
										105212,
										105213
									],
									[
										105246,
										105247
									],
									[
										105281,
										105282
									],
									[
										105335,
										105336
									],
									[
										105365,
										105366
									],
									[
										105369,
										105370
									],
									[
										105389,
										105390
									],
									[
										105399,
										105400
									],
									[
										105415,
										105416
									],
									[
										105417,
										105418
									],
									[
										105424,
										105425
									],
									[
										105425,
										105426
									],
									[
										105438,
										105439
									],
									[
										105460,
										105461
									],
									[
										105502,
										105503
									],
									[
										105563,
										105564
									],
									[
										105581,
										105582
									],
									[
										105610,
										105611
									],
									[
										105634,
										105635
									],
									[
										105717,
										105718
									],
									[
										105730,
										105731
									],
									[
										105777,
										105778
									],
									[
										105789,
										105790
									],
									[
										105813,
										105814
									],
									[
										105815,
										105816
									],
									[
										105825,
										105826
									],
									[
										105881,
										105882
									],
									[
										105892,
										105893
									],
									[
										105893,
										105894
									],
									[
										105910,
										105911
									],
									[
										105977,
										105978
									],
									[
										105998,
										105999
									],
									[
										106008,
										106009
									],
									[
										106053,
										106054
									],
									[
										106074,
										106075
									],
									[
										106086,
										106087
									],
									[
										106132,
										106133
									],
									[
										106152,
										106153
									],
									[
										106205,
										106206
									],
									[
										106305,
										106306
									],
									[
										106306,
										106307
									],
									[
										106338,
										106339
									],
									[
										106380,
										106381
									],
									[
										106412,
										106413
									],
									[
										106432,
										106433
									],
									[
										106454,
										106455
									],
									[
										106458,
										106459
									],
									[
										106473,
										106474
									],
									[
										106477,
										106478
									],
									[
										106488,
										106489
									],
									[
										106492,
										106493
									],
									[
										106509,
										106510
									],
									[
										106533,
										106534
									],
									[
										106537,
										106538
									],
									[
										106552,
										106553
									],
									[
										106556,
										106557
									],
									[
										106569,
										106570
									],
									[
										106573,
										106574
									],
									[
										106591,
										106592
									],
									[
										106605,
										106606
									],
									[
										106622,
										106623
									],
									[
										106626,
										106627
									],
									[
										106644,
										106645
									],
									[
										106708,
										106709
									],
									[
										106713,
										106714
									],
									[
										106744,
										106745
									],
									[
										106775,
										106776
									],
									[
										106793,
										106794
									],
									[
										106813,
										106814
									],
									[
										106818,
										106819
									],
									[
										106856,
										106857
									],
									[
										106869,
										106870
									],
									[
										106892,
										106893
									],
									[
										106904,
										106905
									],
									[
										106953,
										106954
									],
									[
										106956,
										106957
									],
									[
										106991,
										106992
									],
									[
										107042,
										107043
									],
									[
										107063,
										107064
									],
									[
										107068,
										107069
									],
									[
										107079,
										107080
									],
									[
										107118,
										107119
									],
									[
										107123,
										107124
									],
									[
										107140,
										107141
									],
									[
										107145,
										107146
									],
									[
										107151,
										107152
									],
									[
										107154,
										107155
									],
									[
										107159,
										107160
									],
									[
										107189,
										107190
									],
									[
										107194,
										107195
									],
									[
										107200,
										107201
									],
									[
										107203,
										107204
									],
									[
										107210,
										107211
									],
									[
										107252,
										107253
									],
									[
										107257,
										107258
									],
									[
										107280,
										107281
									],
									[
										107285,
										107286
									],
									[
										107314,
										107315
									],
									[
										107404,
										107405
									],
									[
										107415,
										107416
									],
									[
										107435,
										107436
									],
									[
										107449,
										107450
									],
									[
										107495,
										107496
									],
									[
										107503,
										107504
									],
									[
										107542,
										107543
									],
									[
										107607,
										107608
									],
									[
										107628,
										107629
									],
									[
										107633,
										107634
									],
									[
										107655,
										107656
									],
									[
										107724,
										107725
									],
									[
										107745,
										107746
									],
									[
										107777,
										107778
									],
									[
										107833,
										107834
									],
									[
										107840,
										107841
									],
									[
										107867,
										107868
									],
									[
										108017,
										108018
									],
									[
										108018,
										108019
									],
									[
										108027,
										108028
									],
									[
										108039,
										108040
									],
									[
										108043,
										108044
									],
									[
										108173,
										108174
									],
									[
										108187,
										108188
									],
									[
										108195,
										108196
									],
									[
										108196,
										108197
									],
									[
										108212,
										108213
									],
									[
										108218,
										108219
									],
									[
										108236,
										108237
									],
									[
										108262,
										108263
									],
									[
										108276,
										108277
									],
									[
										108282,
										108283
									],
									[
										108300,
										108301
									],
									[
										108307,
										108308
									],
									[
										108310,
										108311
									],
									[
										108313,
										108314
									],
									[
										108335,
										108336
									],
									[
										108339,
										108340
									],
									[
										108343,
										108344
									],
									[
										108356,
										108357
									],
									[
										108367,
										108368
									],
									[
										108378,
										108379
									],
									[
										108401,
										108402
									],
									[
										108416,
										108417
									],
									[
										108421,
										108422
									],
									[
										108433,
										108434
									],
									[
										108448,
										108449
									],
									[
										108455,
										108456
									],
									[
										108460,
										108461
									],
									[
										108484,
										108485
									],
									[
										108515,
										108516
									],
									[
										108574,
										108575
									],
									[
										108619,
										108620
									],
									[
										108671,
										108672
									],
									[
										108688,
										108689
									],
									[
										108696,
										108697
									],
									[
										108769,
										108770
									],
									[
										108772,
										108773
									],
									[
										108801,
										108802
									],
									[
										108804,
										108805
									],
									[
										108807,
										108808
									],
									[
										108821,
										108822
									],
									[
										108826,
										108827
									],
									[
										108841,
										108842
									],
									[
										108870,
										108871
									],
									[
										108896,
										108897
									],
									[
										108944,
										108945
									],
									[
										108954,
										108955
									],
									[
										108962,
										108963
									],
									[
										109064,
										109065
									],
									[
										109078,
										109079
									],
									[
										109207,
										109208
									],
									[
										109230,
										109231
									],
									[
										109285,
										109286
									],
									[
										109304,
										109305
									],
									[
										109367,
										109368
									],
									[
										109403,
										109404
									],
									[
										109420,
										109421
									],
									[
										109432,
										109433
									],
									[
										109442,
										109443
									],
									[
										109450,
										109451
									],
									[
										109509,
										109510
									],
									[
										109547,
										109548
									],
									[
										109566,
										109567
									],
									[
										109578,
										109579
									],
									[
										109590,
										109591
									],
									[
										109598,
										109599
									],
									[
										109713,
										109714
									],
									[
										109718,
										109719
									],
									[
										109750,
										109751
									],
									[
										109751,
										109752
									],
									[
										109755,
										109756
									],
									[
										109780,
										109781
									],
									[
										109875,
										109876
									],
									[
										109926,
										109927
									],
									[
										109934,
										109935
									],
									[
										110003,
										110004
									],
									[
										110059,
										110060
									],
									[
										110067,
										110068
									],
									[
										110134,
										110135
									],
									[
										110152,
										110153
									],
									[
										110179,
										110180
									],
									[
										110219,
										110220
									],
									[
										110226,
										110227
									],
									[
										110263,
										110264
									],
									[
										110317,
										110318
									],
									[
										110357,
										110358
									],
									[
										110375,
										110376
									],
									[
										110386,
										110387
									],
									[
										110394,
										110395
									],
									[
										110412,
										110413
									],
									[
										110434,
										110435
									],
									[
										110458,
										110459
									],
									[
										110481,
										110482
									],
									[
										110497,
										110498
									],
									[
										110502,
										110503
									],
									[
										110515,
										110516
									],
									[
										110519,
										110520
									],
									[
										110536,
										110537
									],
									[
										110559,
										110560
									],
									[
										110563,
										110564
									],
									[
										110607,
										110608
									],
									[
										110672,
										110673
									],
									[
										110752,
										110753
									],
									[
										110787,
										110788
									],
									[
										110839,
										110840
									],
									[
										110868,
										110869
									],
									[
										110893,
										110894
									],
									[
										110908,
										110909
									],
									[
										110935,
										110936
									],
									[
										110958,
										110959
									],
									[
										110964,
										110965
									],
									[
										110966,
										110967
									],
									[
										110982,
										110983
									],
									[
										110984,
										110985
									],
									[
										111028,
										111029
									],
									[
										111071,
										111072
									],
									[
										111097,
										111098
									],
									[
										111110,
										111111
									],
									[
										111166,
										111167
									],
									[
										111189,
										111190
									],
									[
										111203,
										111204
									],
									[
										111207,
										111208
									],
									[
										111238,
										111239
									],
									[
										111252,
										111253
									],
									[
										111292,
										111293
									],
									[
										111303,
										111304
									],
									[
										111306,
										111307
									],
									[
										111353,
										111354
									],
									[
										111362,
										111363
									],
									[
										111375,
										111376
									],
									[
										111395,
										111396
									],
									[
										111417,
										111418
									],
									[
										111424,
										111425
									],
									[
										111443,
										111444
									],
									[
										111454,
										111455
									],
									[
										111462,
										111463
									],
									[
										111473,
										111474
									],
									[
										111522,
										111523
									],
									[
										111553,
										111554
									],
									[
										111581,
										111582
									],
									[
										111597,
										111598
									],
									[
										111617,
										111618
									],
									[
										111637,
										111638
									],
									[
										111666,
										111667
									],
									[
										111673,
										111674
									],
									[
										111692,
										111693
									],
									[
										111703,
										111704
									],
									[
										111711,
										111712
									],
									[
										111722,
										111723
									],
									[
										111747,
										111748
									],
									[
										111811,
										111812
									],
									[
										111850,
										111851
									],
									[
										111861,
										111862
									],
									[
										111876,
										111877
									],
									[
										111882,
										111883
									],
									[
										111894,
										111895
									],
									[
										111909,
										111910
									],
									[
										111916,
										111917
									],
									[
										111919,
										111920
									],
									[
										111936,
										111937
									],
									[
										111948,
										111949
									],
									[
										111956,
										111957
									],
									[
										111966,
										111967
									],
									[
										111969,
										111970
									],
									[
										111982,
										111983
									],
									[
										111985,
										111986
									],
									[
										111997,
										111998
									],
									[
										112004,
										112005
									],
									[
										112015,
										112016
									],
									[
										112026,
										112027
									],
									[
										112037,
										112038
									],
									[
										112043,
										112044
									],
									[
										112046,
										112047
									],
									[
										112074,
										112075
									],
									[
										112085,
										112086
									],
									[
										112094,
										112095
									],
									[
										112122,
										112123
									],
									[
										112125,
										112126
									],
									[
										112166,
										112167
									],
									[
										112175,
										112176
									],
									[
										112190,
										112191
									],
									[
										112209,
										112210
									],
									[
										112229,
										112230
									],
									[
										112236,
										112237
									],
									[
										112239,
										112240
									],
									[
										112267,
										112268
									],
									[
										112274,
										112275
									],
									[
										112288,
										112289
									],
									[
										112348,
										112349
									],
									[
										112351,
										112352
									],
									[
										112370,
										112371
									],
									[
										112379,
										112380
									],
									[
										112385,
										112386
									],
									[
										112388,
										112389
									],
									[
										112432,
										112433
									],
									[
										112439,
										112440
									],
									[
										112463,
										112464
									],
									[
										112479,
										112480
									],
									[
										112485,
										112486
									],
									[
										112508,
										112509
									],
									[
										112511,
										112512
									],
									[
										112513,
										112514
									],
									[
										112524,
										112525
									],
									[
										112543,
										112544
									],
									[
										112553,
										112554
									],
									[
										112572,
										112573
									],
									[
										112591,
										112592
									],
									[
										112597,
										112598
									],
									[
										112605,
										112606
									],
									[
										112608,
										112609
									],
									[
										112634,
										112635
									],
									[
										112640,
										112641
									],
									[
										112641,
										112642
									],
									[
										112653,
										112654
									],
									[
										112658,
										112659
									],
									[
										112678,
										112679
									],
									[
										112684,
										112685
									],
									[
										112718,
										112719
									],
									[
										112732,
										112733
									],
									[
										112743,
										112744
									],
									[
										112823,
										112824
									],
									[
										112863,
										112864
									],
									[
										112899,
										112900
									],
									[
										112919,
										112920
									],
									[
										112930,
										112931
									],
									[
										112950,
										112951
									],
									[
										112989,
										112990
									],
									[
										112994,
										112995
									],
									[
										113012,
										113013
									],
									[
										113046,
										113047
									],
									[
										113048,
										113049
									],
									[
										113072,
										113073
									],
									[
										113076,
										113077
									],
									[
										113100,
										113101
									],
									[
										113114,
										113115
									],
									[
										113120,
										113121
									],
									[
										113133,
										113134
									],
									[
										113152,
										113153
									],
									[
										113162,
										113163
									],
									[
										113190,
										113191
									],
									[
										113318,
										113319
									],
									[
										113324,
										113325
									],
									[
										113327,
										113328
									],
									[
										113354,
										113355
									],
									[
										113390,
										113391
									],
									[
										113416,
										113417
									],
									[
										113419,
										113420
									],
									[
										113428,
										113429
									],
									[
										113448,
										113449
									],
									[
										113472,
										113473
									],
									[
										113486,
										113487
									],
									[
										113495,
										113496
									],
									[
										113500,
										113501
									],
									[
										113559,
										113560
									],
									[
										113562,
										113563
									],
									[
										113599,
										113600
									],
									[
										113604,
										113605
									],
									[
										113646,
										113647
									],
									[
										113649,
										113650
									],
									[
										113673,
										113674
									],
									[
										113678,
										113679
									],
									[
										113730,
										113731
									],
									[
										113757,
										113758
									],
									[
										113768,
										113769
									],
									[
										113797,
										113798
									],
									[
										113802,
										113803
									],
									[
										113833,
										113834
									],
									[
										113843,
										113844
									],
									[
										113858,
										113859
									],
									[
										113892,
										113893
									],
									[
										113924,
										113925
									],
									[
										113928,
										113929
									],
									[
										113969,
										113970
									],
									[
										114078,
										114079
									],
									[
										114086,
										114087
									],
									[
										114093,
										114094
									],
									[
										114109,
										114110
									],
									[
										114131,
										114132
									],
									[
										114138,
										114139
									],
									[
										114178,
										114179
									],
									[
										114185,
										114186
									],
									[
										114318,
										114319
									],
									[
										114328,
										114329
									],
									[
										114329,
										114330
									],
									[
										114344,
										114345
									],
									[
										114356,
										114357
									],
									[
										114410,
										114411
									],
									[
										114422,
										114423
									],
									[
										114456,
										114457
									],
									[
										114465,
										114466
									],
									[
										114536,
										114537
									],
									[
										114546,
										114547
									],
									[
										114553,
										114554
									],
									[
										114560,
										114561
									],
									[
										114561,
										114562
									],
									[
										114629,
										114630
									],
									[
										114645,
										114646
									],
									[
										114662,
										114663
									],
									[
										114667,
										114668
									],
									[
										114686,
										114687
									],
									[
										114691,
										114692
									],
									[
										114708,
										114709
									],
									[
										114916,
										114917
									],
									[
										115018,
										115019
									],
									[
										115096,
										115097
									],
									[
										115105,
										115106
									],
									[
										115126,
										115127
									],
									[
										115131,
										115132
									],
									[
										115231,
										115232
									],
									[
										115238,
										115239
									],
									[
										115266,
										115267
									],
									[
										115273,
										115274
									],
									[
										115354,
										115355
									],
									[
										115357,
										115358
									],
									[
										115364,
										115365
									],
									[
										115421,
										115422
									],
									[
										115485,
										115486
									],
									[
										115494,
										115495
									],
									[
										115528,
										115529
									],
									[
										115544,
										115545
									],
									[
										115619,
										115620
									],
									[
										115657,
										115658
									],
									[
										115667,
										115668
									],
									[
										115705,
										115706
									],
									[
										115748,
										115749
									],
									[
										115856,
										115857
									],
									[
										115879,
										115880
									],
									[
										115890,
										115891
									],
									[
										115911,
										115912
									],
									[
										115946,
										115947
									],
									[
										115958,
										115959
									],
									[
										116032,
										116033
									],
									[
										116044,
										116045
									],
									[
										116120,
										116121
									],
									[
										116132,
										116133
									],
									[
										116209,
										116210
									],
									[
										116221,
										116222
									],
									[
										116298,
										116299
									],
									[
										116310,
										116311
									],
									[
										116320,
										116321
									],
									[
										116384,
										116385
									],
									[
										116396,
										116397
									],
									[
										116406,
										116407
									],
									[
										116495,
										116496
									],
									[
										116528,
										116529
									],
									[
										116551,
										116552
									],
									[
										116622,
										116623
									],
									[
										116645,
										116646
									],
									[
										116718,
										116719
									],
									[
										116741,
										116742
									],
									[
										116815,
										116816
									],
									[
										116838,
										116839
									],
									[
										116912,
										116913
									],
									[
										116935,
										116936
									],
									[
										116942,
										116943
									],
									[
										117006,
										117007
									],
									[
										117029,
										117030
									],
									[
										117036,
										117037
									],
									[
										117108,
										117109
									],
									[
										117191,
										117192
									],
									[
										117276,
										117277
									],
									[
										117362,
										117363
									],
									[
										117448,
										117449
									],
									[
										117467,
										117468
									],
									[
										117531,
										117532
									],
									[
										117550,
										117551
									],
									[
										117625,
										117626
									],
									[
										117678,
										117679
									],
									[
										117909,
										117910
									],
									[
										117943,
										117944
									],
									[
										117974,
										117975
									],
									[
										117997,
										117998
									],
									[
										118017,
										118018
									],
									[
										118058,
										118059
									],
									[
										118160,
										118161
									],
									[
										118162,
										118163
									],
									[
										118180,
										118181
									],
									[
										118234,
										118235
									],
									[
										118265,
										118266
									],
									[
										118288,
										118289
									],
									[
										118308,
										118309
									],
									[
										118349,
										118350
									],
									[
										118491,
										118492
									],
									[
										118512,
										118513
									],
									[
										118615,
										118616
									],
									[
										118646,
										118647
									],
									[
										118669,
										118670
									],
									[
										118689,
										118690
									],
									[
										118730,
										118731
									],
									[
										118814,
										118815
									],
									[
										118816,
										118817
									],
									[
										118834,
										118835
									],
									[
										118875,
										118876
									],
									[
										118959,
										118960
									],
									[
										119015,
										119016
									],
									[
										119046,
										119047
									],
									[
										119069,
										119070
									],
									[
										119089,
										119090
									],
									[
										119130,
										119131
									],
									[
										119154,
										119155
									],
									[
										119182,
										119183
									],
									[
										119264,
										119265
									],
									[
										119301,
										119302
									],
									[
										119334,
										119335
									],
									[
										119346,
										119347
									],
									[
										119352,
										119353
									],
									[
										119355,
										119356
									],
									[
										119359,
										119360
									],
									[
										119439,
										119440
									],
									[
										119452,
										119453
									],
									[
										119456,
										119457
									],
									[
										119464,
										119465
									],
									[
										119476,
										119477
									],
									[
										119520,
										119521
									],
									[
										119533,
										119534
									],
									[
										119575,
										119576
									],
									[
										119612,
										119613
									],
									[
										119620,
										119621
									],
									[
										119657,
										119658
									],
									[
										119687,
										119688
									],
									[
										119807,
										119808
									],
									[
										119815,
										119816
									],
									[
										119867,
										119868
									],
									[
										119919,
										119920
									],
									[
										119990,
										119991
									],
									[
										119998,
										119999
									],
									[
										120022,
										120023
									],
									[
										120030,
										120031
									],
									[
										120075,
										120076
									],
									[
										120104,
										120105
									],
									[
										120134,
										120135
									],
									[
										120141,
										120142
									],
									[
										120179,
										120180
									],
									[
										120247,
										120248
									],
									[
										120251,
										120252
									],
									[
										120252,
										120253
									],
									[
										120263,
										120264
									],
									[
										120274,
										120275
									],
									[
										120289,
										120290
									],
									[
										120387,
										120388
									],
									[
										120464,
										120465
									],
									[
										120468,
										120469
									],
									[
										120469,
										120470
									],
									[
										120487,
										120488
									],
									[
										120502,
										120503
									],
									[
										120536,
										120537
									],
									[
										120540,
										120541
									],
									[
										120541,
										120542
									],
									[
										120561,
										120562
									],
									[
										120576,
										120577
									],
									[
										120634,
										120635
									],
									[
										120647,
										120648
									],
									[
										120677,
										120678
									],
									[
										120777,
										120778
									],
									[
										120822,
										120823
									],
									[
										120876,
										120877
									],
									[
										120903,
										120904
									],
									[
										120936,
										120937
									],
									[
										120943,
										120944
									],
									[
										121009,
										121010
									],
									[
										121017,
										121018
									],
									[
										121041,
										121042
									],
									[
										121049,
										121050
									],
									[
										121094,
										121095
									],
									[
										121123,
										121124
									],
									[
										121153,
										121154
									],
									[
										121160,
										121161
									],
									[
										121198,
										121199
									],
									[
										121225,
										121226
									],
									[
										121229,
										121230
									],
									[
										121230,
										121231
									],
									[
										121241,
										121242
									],
									[
										121252,
										121253
									],
									[
										121267,
										121268
									],
									[
										121274,
										121275
									],
									[
										121367,
										121368
									],
									[
										121431,
										121432
									],
									[
										121438,
										121439
									],
									[
										121457,
										121458
									],
									[
										121464,
										121465
									],
									[
										121521,
										121522
									],
									[
										121525,
										121526
									],
									[
										121526,
										121527
									],
									[
										121544,
										121545
									],
									[
										121559,
										121560
									],
									[
										121568,
										121569
									],
									[
										121595,
										121596
									],
									[
										121599,
										121600
									],
									[
										121600,
										121601
									],
									[
										121620,
										121621
									],
									[
										121635,
										121636
									],
									[
										121645,
										121646
									],
									[
										121695,
										121696
									],
									[
										121708,
										121709
									],
									[
										121738,
										121739
									],
									[
										121745,
										121746
									],
									[
										121840,
										121841
									],
									[
										121885,
										121886
									],
									[
										121939,
										121940
									],
									[
										121966,
										121967
									],
									[
										121999,
										122000
									],
									[
										122038,
										122039
									],
									[
										122048,
										122049
									],
									[
										122087,
										122088
									],
									[
										122134,
										122135
									],
									[
										122182,
										122183
									],
									[
										122192,
										122193
									],
									[
										122197,
										122198
									],
									[
										122224,
										122225
									],
									[
										122245,
										122246
									],
									[
										122255,
										122256
									],
									[
										122280,
										122281
									],
									[
										122296,
										122297
									],
									[
										122300,
										122301
									],
									[
										122329,
										122330
									],
									[
										122341,
										122342
									],
									[
										122364,
										122365
									],
									[
										122403,
										122404
									],
									[
										122411,
										122412
									],
									[
										122424,
										122425
									],
									[
										122441,
										122442
									],
									[
										122454,
										122455
									],
									[
										122464,
										122465
									],
									[
										122485,
										122486
									],
									[
										122509,
										122510
									],
									[
										122532,
										122533
									],
									[
										122562,
										122563
									],
									[
										122577,
										122578
									],
									[
										122587,
										122588
									],
									[
										122608,
										122609
									],
									[
										122632,
										122633
									],
									[
										122655,
										122656
									],
									[
										122691,
										122692
									],
									[
										122702,
										122703
									],
									[
										122723,
										122724
									],
									[
										122766,
										122767
									],
									[
										122788,
										122789
									],
									[
										122889,
										122890
									],
									[
										122930,
										122931
									],
									[
										122963,
										122964
									],
									[
										123044,
										123045
									],
									[
										123146,
										123147
									],
									[
										123148,
										123149
									],
									[
										123155,
										123156
									],
									[
										123166,
										123167
									],
									[
										123183,
										123184
									],
									[
										123216,
										123217
									],
									[
										123302,
										123303
									],
									[
										123309,
										123310
									],
									[
										123387,
										123388
									],
									[
										123448,
										123449
									],
									[
										123461,
										123462
									],
									[
										123518,
										123519
									],
									[
										123528,
										123529
									],
									[
										123573,
										123574
									],
									[
										123586,
										123587
									],
									[
										123634,
										123635
									],
									[
										123672,
										123673
									],
									[
										123709,
										123710
									],
									[
										123768,
										123769
									],
									[
										123868,
										123869
									],
									[
										123941,
										123942
									],
									[
										123954,
										123955
									],
									[
										124088,
										124089
									],
									[
										124130,
										124131
									],
									[
										124140,
										124141
									],
									[
										124158,
										124159
									],
									[
										124377,
										124378
									],
									[
										124385,
										124386
									],
									[
										124571,
										124572
									],
									[
										124595,
										124596
									],
									[
										124609,
										124610
									],
									[
										124647,
										124648
									],
									[
										124670,
										124671
									],
									[
										124720,
										124721
									],
									[
										124743,
										124744
									],
									[
										124774,
										124775
									],
									[
										124802,
										124803
									],
									[
										124839,
										124840
									],
									[
										124858,
										124859
									],
									[
										124881,
										124882
									],
									[
										124886,
										124887
									],
									[
										124915,
										124916
									],
									[
										125012,
										125013
									],
									[
										125018,
										125019
									],
									[
										125072,
										125073
									],
									[
										125073,
										125074
									],
									[
										125114,
										125115
									],
									[
										125160,
										125161
									],
									[
										125204,
										125205
									],
									[
										125228,
										125229
									],
									[
										125359,
										125360
									],
									[
										125383,
										125384
									],
									[
										125456,
										125457
									],
									[
										125464,
										125465
									],
									[
										125474,
										125475
									],
									[
										125483,
										125484
									],
									[
										125503,
										125504
									],
									[
										125526,
										125527
									],
									[
										125541,
										125542
									],
									[
										125551,
										125552
									],
									[
										125573,
										125574
									],
									[
										125592,
										125593
									],
									[
										125614,
										125615
									],
									[
										125625,
										125626
									],
									[
										125626,
										125627
									],
									[
										125635,
										125636
									],
									[
										125657,
										125658
									],
									[
										125675,
										125676
									],
									[
										125725,
										125726
									],
									[
										125741,
										125742
									],
									[
										125764,
										125765
									],
									[
										125777,
										125778
									],
									[
										125800,
										125801
									],
									[
										125815,
										125816
									],
									[
										125838,
										125839
									],
									[
										125845,
										125846
									],
									[
										125846,
										125847
									],
									[
										125877,
										125878
									],
									[
										125894,
										125895
									],
									[
										125915,
										125916
									],
									[
										125916,
										125917
									],
									[
										125922,
										125923
									],
									[
										125946,
										125947
									],
									[
										125947,
										125948
									],
									[
										125954,
										125955
									],
									[
										126029,
										126030
									],
									[
										126053,
										126054
									],
									[
										126069,
										126070
									],
									[
										126135,
										126136
									],
									[
										126166,
										126167
									],
									[
										126177,
										126178
									],
									[
										126245,
										126246
									],
									[
										126271,
										126272
									],
									[
										126274,
										126275
									],
									[
										126278,
										126279
									],
									[
										126310,
										126311
									],
									[
										126321,
										126322
									],
									[
										126328,
										126329
									],
									[
										126435,
										126436
									],
									[
										126446,
										126447
									],
									[
										126538,
										126539
									],
									[
										126569,
										126570
									],
									[
										126644,
										126645
									],
									[
										126697,
										126698
									],
									[
										126765,
										126766
									],
									[
										126796,
										126797
									],
									[
										126819,
										126820
									],
									[
										126839,
										126840
									],
									[
										126930,
										126931
									],
									[
										126936,
										126937
									],
									[
										126958,
										126959
									],
									[
										126973,
										126974
									],
									[
										126993,
										126994
									],
									[
										127018,
										127019
									],
									[
										127061,
										127062
									],
									[
										127068,
										127069
									],
									[
										127091,
										127092
									],
									[
										127186,
										127187
									],
									[
										127251,
										127252
									],
									[
										127289,
										127290
									],
									[
										127290,
										127291
									],
									[
										127345,
										127346
									],
									[
										127393,
										127394
									],
									[
										127405,
										127406
									],
									[
										127413,
										127414
									],
									[
										127422,
										127423
									],
									[
										127467,
										127468
									],
									[
										127468,
										127469
									],
									[
										127477,
										127478
									],
									[
										127496,
										127497
									],
									[
										127500,
										127501
									],
									[
										127561,
										127562
									],
									[
										127592,
										127593
									],
									[
										127615,
										127616
									],
									[
										127635,
										127636
									],
									[
										127690,
										127691
									],
									[
										127732,
										127733
									],
									[
										127761,
										127762
									],
									[
										127878,
										127879
									],
									[
										127906,
										127907
									],
									[
										127907,
										127908
									],
									[
										127928,
										127929
									],
									[
										127952,
										127953
									],
									[
										127991,
										127992
									],
									[
										128020,
										128021
									],
									[
										128082,
										128083
									],
									[
										128099,
										128100
									],
									[
										128151,
										128152
									],
									[
										128180,
										128181
									],
									[
										128206,
										128207
									],
									[
										128273,
										128274
									],
									[
										128321,
										128322
									],
									[
										128322,
										128323
									],
									[
										128385,
										128386
									],
									[
										128433,
										128434
									],
									[
										128442,
										128443
									],
									[
										128531,
										128532
									],
									[
										128537,
										128538
									],
									[
										128661,
										128662
									],
									[
										128692,
										128693
									],
									[
										128699,
										128700
									],
									[
										128700,
										128701
									],
									[
										128732,
										128733
									],
									[
										128851,
										128852
									],
									[
										128891,
										128892
									],
									[
										128923,
										128924
									],
									[
										129010,
										129011
									],
									[
										129041,
										129042
									],
									[
										129064,
										129065
									],
									[
										129084,
										129085
									],
									[
										129129,
										129130
									],
									[
										129189,
										129190
									],
									[
										129222,
										129223
									],
									[
										129289,
										129290
									],
									[
										129295,
										129296
									],
									[
										129383,
										129384
									],
									[
										129421,
										129422
									],
									[
										129452,
										129453
									],
									[
										129537,
										129538
									],
									[
										129568,
										129569
									],
									[
										129621,
										129622
									],
									[
										129711,
										129712
									],
									[
										129742,
										129743
									],
									[
										129765,
										129766
									],
									[
										129785,
										129786
									],
									[
										130051,
										130052
									],
									[
										130086,
										130087
									],
									[
										130122,
										130123
									],
									[
										130159,
										130160
									],
									[
										130317,
										130318
									],
									[
										130355,
										130356
									],
									[
										130392,
										130393
									],
									[
										130423,
										130424
									],
									[
										130459,
										130460
									],
									[
										130476,
										130477
									],
									[
										130501,
										130502
									],
									[
										130511,
										130512
									],
									[
										130521,
										130522
									],
									[
										130546,
										130547
									],
									[
										130564,
										130565
									],
									[
										130589,
										130590
									],
									[
										130770,
										130771
									],
									[
										130795,
										130796
									],
									[
										130855,
										130856
									],
									[
										130863,
										130864
									],
									[
										130877,
										130878
									],
									[
										130885,
										130886
									],
									[
										130920,
										130921
									],
									[
										130939,
										130940
									],
									[
										130959,
										130960
									],
									[
										130966,
										130967
									],
									[
										130994,
										130995
									],
									[
										131069,
										131070
									],
									[
										131104,
										131105
									],
									[
										131148,
										131149
									],
									[
										131211,
										131212
									],
									[
										131245,
										131246
									],
									[
										131252,
										131253
									],
									[
										131261,
										131262
									],
									[
										131268,
										131269
									],
									[
										131318,
										131319
									],
									[
										131321,
										131322
									],
									[
										131349,
										131350
									],
									[
										131356,
										131357
									],
									[
										131363,
										131364
									],
									[
										131388,
										131389
									],
									[
										131420,
										131421
									],
									[
										131445,
										131446
									],
									[
										131461,
										131462
									],
									[
										131487,
										131488
									],
									[
										131512,
										131513
									],
									[
										131529,
										131530
									],
									[
										131556,
										131557
									],
									[
										131581,
										131582
									],
									[
										131606,
										131607
									],
									[
										131773,
										131774
									],
									[
										131798,
										131799
									],
									[
										131863,
										131864
									],
									[
										131871,
										131872
									],
									[
										131885,
										131886
									],
									[
										131893,
										131894
									],
									[
										131928,
										131929
									],
									[
										131947,
										131948
									],
									[
										131967,
										131968
									],
									[
										131974,
										131975
									],
									[
										132002,
										132003
									],
									[
										132077,
										132078
									],
									[
										132112,
										132113
									],
									[
										132156,
										132157
									],
									[
										132219,
										132220
									],
									[
										132253,
										132254
									],
									[
										132260,
										132261
									],
									[
										132269,
										132270
									],
									[
										132276,
										132277
									],
									[
										132326,
										132327
									],
									[
										132329,
										132330
									],
									[
										132357,
										132358
									],
									[
										132364,
										132365
									],
									[
										132371,
										132372
									],
									[
										132396,
										132397
									],
									[
										132433,
										132434
									],
									[
										132458,
										132459
									],
									[
										132479,
										132480
									],
									[
										132510,
										132511
									],
									[
										132535,
										132536
									],
									[
										132557,
										132558
									],
									[
										132649,
										132650
									],
									[
										132825,
										132826
									],
									[
										133127,
										133128
									],
									[
										133251,
										133252
									],
									[
										133477,
										133478
									],
									[
										133503,
										133504
									],
									[
										133576,
										133577
									],
									[
										133613,
										133614
									],
									[
										133709,
										133710
									],
									[
										133711,
										133712
									],
									[
										133827,
										133828
									],
									[
										133834,
										133835
									],
									[
										133859,
										133860
									],
									[
										133957,
										133958
									],
									[
										134127,
										134128
									],
									[
										134419,
										134420
									],
									[
										134539,
										134540
									],
									[
										134757,
										134758
									],
									[
										134791,
										134792
									],
									[
										134870,
										134871
									],
									[
										134905,
										134906
									],
									[
										135015,
										135016
									],
									[
										135017,
										135018
									],
									[
										135137,
										135138
									],
									[
										135152,
										135153
									],
									[
										135316,
										135317
									],
									[
										135341,
										135342
									],
									[
										135351,
										135352
									],
									[
										135403,
										135404
									],
									[
										135411,
										135412
									],
									[
										135425,
										135426
									],
									[
										135433,
										135434
									],
									[
										135468,
										135469
									],
									[
										135487,
										135488
									],
									[
										135507,
										135508
									],
									[
										135514,
										135515
									],
									[
										135542,
										135543
									],
									[
										135617,
										135618
									],
									[
										135652,
										135653
									],
									[
										135696,
										135697
									],
									[
										135759,
										135760
									],
									[
										135793,
										135794
									],
									[
										135800,
										135801
									],
									[
										135809,
										135810
									],
									[
										135816,
										135817
									],
									[
										135866,
										135867
									],
									[
										135869,
										135870
									],
									[
										135897,
										135898
									],
									[
										135904,
										135905
									],
									[
										135911,
										135912
									],
									[
										135936,
										135937
									],
									[
										135946,
										135947
									],
									[
										135970,
										135971
									],
									[
										135995,
										135996
									],
									[
										136005,
										136006
									],
									[
										136013,
										136014
									],
									[
										136023,
										136024
									],
									[
										136041,
										136042
									],
									[
										136066,
										136067
									],
									[
										136076,
										136077
									],
									[
										136085,
										136086
									],
									[
										136095,
										136096
									],
									[
										136114,
										136115
									],
									[
										136139,
										136140
									],
									[
										136149,
										136150
									],
									[
										136166,
										136167
									],
									[
										136445,
										136446
									],
									[
										136482,
										136483
									],
									[
										136505,
										136506
									],
									[
										136525,
										136526
									],
									[
										136535,
										136536
									],
									[
										136545,
										136546
									],
									[
										136564,
										136565
									],
									[
										136574,
										136575
									],
									[
										136605,
										136606
									],
									[
										136616,
										136617
									],
									[
										136639,
										136640
									],
									[
										136645,
										136646
									],
									[
										136650,
										136651
									],
									[
										136695,
										136696
									],
									[
										136742,
										136743
									],
									[
										136786,
										136787
									],
									[
										136797,
										136798
									],
									[
										136816,
										136817
									],
									[
										136831,
										136832
									],
									[
										136834,
										136835
									],
									[
										136845,
										136846
									],
									[
										136866,
										136867
									],
									[
										136908,
										136909
									],
									[
										136938,
										136939
									],
									[
										136959,
										136960
									],
									[
										136990,
										136991
									],
									[
										137010,
										137011
									],
									[
										137060,
										137061
									],
									[
										137071,
										137072
									],
									[
										137151,
										137152
									],
									[
										137172,
										137173
									],
									[
										137194,
										137195
									],
									[
										137204,
										137205
									],
									[
										137224,
										137225
									],
									[
										137246,
										137247
									],
									[
										137275,
										137276
									],
									[
										137286,
										137287
									],
									[
										137339,
										137340
									],
									[
										137372,
										137373
									],
									[
										137383,
										137384
									],
									[
										137554,
										137555
									],
									[
										137582,
										137583
									],
									[
										137605,
										137606
									],
									[
										137627,
										137628
									],
									[
										137637,
										137638
									],
									[
										137647,
										137648
									],
									[
										137670,
										137671
									],
									[
										137790,
										137791
									],
									[
										137894,
										137895
									],
									[
										137901,
										137902
									],
									[
										137909,
										137910
									],
									[
										137914,
										137915
									],
									[
										137954,
										137955
									],
									[
										137958,
										137959
									],
									[
										137990,
										137991
									],
									[
										138006,
										138007
									],
									[
										138012,
										138013
									],
									[
										138034,
										138035
									],
									[
										138128,
										138129
									],
									[
										138166,
										138167
									],
									[
										138176,
										138177
									],
									[
										138181,
										138182
									],
									[
										138195,
										138196
									],
									[
										138249,
										138250
									],
									[
										138253,
										138254
									],
									[
										138268,
										138269
									],
									[
										138290,
										138291
									],
									[
										138317,
										138318
									],
									[
										138327,
										138328
									],
									[
										138346,
										138347
									],
									[
										138403,
										138404
									],
									[
										138407,
										138408
									],
									[
										138422,
										138423
									],
									[
										138444,
										138445
									],
									[
										138508,
										138509
									],
									[
										138530,
										138531
									],
									[
										138566,
										138567
									],
									[
										138579,
										138580
									],
									[
										138599,
										138600
									],
									[
										138605,
										138606
									],
									[
										138614,
										138615
									],
									[
										138616,
										138617
									],
									[
										138640,
										138641
									],
									[
										138645,
										138646
									],
									[
										138700,
										138701
									],
									[
										138717,
										138718
									],
									[
										138719,
										138720
									],
									[
										138745,
										138746
									],
									[
										138752,
										138753
									],
									[
										138803,
										138804
									],
									[
										138815,
										138816
									],
									[
										138836,
										138837
									],
									[
										138867,
										138868
									],
									[
										138869,
										138870
									],
									[
										138886,
										138887
									],
									[
										138914,
										138915
									],
									[
										138915,
										138916
									],
									[
										138944,
										138945
									],
									[
										138946,
										138947
									],
									[
										138956,
										138957
									],
									[
										138984,
										138985
									],
									[
										138987,
										138988
									],
									[
										139004,
										139005
									],
									[
										139005,
										139006
									],
									[
										139037,
										139038
									],
									[
										139092,
										139093
									],
									[
										139132,
										139133
									],
									[
										139133,
										139134
									],
									[
										139157,
										139158
									],
									[
										139166,
										139167
									],
									[
										139198,
										139199
									],
									[
										139273,
										139274
									],
									[
										139299,
										139300
									],
									[
										139316,
										139317
									],
									[
										139375,
										139376
									],
									[
										139378,
										139379
									],
									[
										139390,
										139391
									],
									[
										139395,
										139396
									],
									[
										139402,
										139403
									],
									[
										139407,
										139408
									],
									[
										139408,
										139409
									],
									[
										139414,
										139415
									],
									[
										139443,
										139444
									],
									[
										139451,
										139452
									],
									[
										139455,
										139456
									],
									[
										139456,
										139457
									],
									[
										139483,
										139484
									],
									[
										139550,
										139551
									],
									[
										139618,
										139619
									],
									[
										139625,
										139626
									],
									[
										139653,
										139654
									],
									[
										139672,
										139673
									],
									[
										139674,
										139675
									],
									[
										139696,
										139697
									],
									[
										139709,
										139710
									],
									[
										139710,
										139711
									],
									[
										139722,
										139723
									],
									[
										139767,
										139768
									],
									[
										139771,
										139772
									],
									[
										139772,
										139773
									],
									[
										139780,
										139781
									],
									[
										139798,
										139799
									],
									[
										139802,
										139803
									],
									[
										139825,
										139826
									],
									[
										139843,
										139844
									],
									[
										139862,
										139863
									],
									[
										139865,
										139866
									],
									[
										139873,
										139874
									],
									[
										139899,
										139900
									],
									[
										139912,
										139913
									],
									[
										139934,
										139935
									],
									[
										139954,
										139955
									],
									[
										139961,
										139962
									],
									[
										139969,
										139970
									],
									[
										139970,
										139971
									],
									[
										140002,
										140003
									],
									[
										140015,
										140016
									],
									[
										140035,
										140036
									],
									[
										140045,
										140046
									],
									[
										140066,
										140067
									],
									[
										140085,
										140086
									],
									[
										140097,
										140098
									],
									[
										140098,
										140099
									],
									[
										140143,
										140144
									],
									[
										140211,
										140212
									],
									[
										140259,
										140260
									],
									[
										140319,
										140320
									],
									[
										140345,
										140346
									],
									[
										140372,
										140373
									],
									[
										140374,
										140375
									],
									[
										140380,
										140381
									],
									[
										140402,
										140403
									],
									[
										140486,
										140487
									],
									[
										140496,
										140497
									],
									[
										140602,
										140603
									],
									[
										140605,
										140606
									],
									[
										140652,
										140653
									],
									[
										140670,
										140671
									],
									[
										140749,
										140750
									],
									[
										140757,
										140758
									],
									[
										140778,
										140779
									],
									[
										140851,
										140852
									],
									[
										140865,
										140866
									],
									[
										140896,
										140897
									],
									[
										140967,
										140968
									],
									[
										140990,
										140991
									],
									[
										141011,
										141012
									],
									[
										141032,
										141033
									],
									[
										141080,
										141081
									],
									[
										141101,
										141102
									],
									[
										141160,
										141161
									],
									[
										141163,
										141164
									],
									[
										141207,
										141208
									],
									[
										141210,
										141211
									],
									[
										141228,
										141229
									],
									[
										141269,
										141270
									],
									[
										141295,
										141296
									],
									[
										141334,
										141335
									],
									[
										141337,
										141338
									],
									[
										141569,
										141570
									],
									[
										141597,
										141598
									],
									[
										141731,
										141732
									],
									[
										141742,
										141743
									],
									[
										141759,
										141760
									],
									[
										141813,
										141814
									],
									[
										141836,
										141837
									],
									[
										141856,
										141857
									],
									[
										141870,
										141871
									],
									[
										141893,
										141894
									],
									[
										141924,
										141925
									],
									[
										141933,
										141934
									],
									[
										141988,
										141989
									],
									[
										142006,
										142007
									],
									[
										142017,
										142018
									],
									[
										142073,
										142074
									],
									[
										142077,
										142078
									],
									[
										142089,
										142090
									],
									[
										142094,
										142095
									],
									[
										142119,
										142120
									],
									[
										142128,
										142129
									],
									[
										142132,
										142133
									],
									[
										142157,
										142158
									],
									[
										142174,
										142175
									],
									[
										142178,
										142179
									],
									[
										142180,
										142181
									],
									[
										142183,
										142184
									],
									[
										142228,
										142229
									],
									[
										142259,
										142260
									],
									[
										142312,
										142313
									],
									[
										142335,
										142336
									],
									[
										142348,
										142349
									],
									[
										142361,
										142362
									],
									[
										142400,
										142401
									],
									[
										142431,
										142432
									],
									[
										142451,
										142452
									],
									[
										142467,
										142468
									],
									[
										142499,
										142500
									],
									[
										142533,
										142534
									],
									[
										142539,
										142540
									],
									[
										142545,
										142546
									],
									[
										142561,
										142562
									],
									[
										142576,
										142577
									],
									[
										142621,
										142622
									],
									[
										142636,
										142637
									],
									[
										142639,
										142640
									],
									[
										142646,
										142647
									],
									[
										142647,
										142648
									],
									[
										142691,
										142692
									],
									[
										142758,
										142759
									],
									[
										142775,
										142776
									],
									[
										142784,
										142785
									],
									[
										142832,
										142833
									],
									[
										142862,
										142863
									],
									[
										142918,
										142919
									],
									[
										142985,
										142986
									],
									[
										143008,
										143009
									],
									[
										143038,
										143039
									],
									[
										143053,
										143054
									],
									[
										143096,
										143097
									],
									[
										143136,
										143137
									],
									[
										143168,
										143169
									],
									[
										143197,
										143198
									],
									[
										143214,
										143215
									],
									[
										143255,
										143256
									],
									[
										143282,
										143283
									],
									[
										143373,
										143374
									],
									[
										143377,
										143378
									],
									[
										143394,
										143395
									],
									[
										143422,
										143423
									],
									[
										143430,
										143431
									],
									[
										143453,
										143454
									],
									[
										143480,
										143481
									],
									[
										143501,
										143502
									],
									[
										143507,
										143508
									],
									[
										143538,
										143539
									],
									[
										143558,
										143559
									],
									[
										143614,
										143615
									],
									[
										143683,
										143684
									],
									[
										143728,
										143729
									],
									[
										143737,
										143738
									],
									[
										143770,
										143771
									],
									[
										143801,
										143802
									],
									[
										143838,
										143839
									],
									[
										143850,
										143851
									],
									[
										143851,
										143852
									],
									[
										143873,
										143874
									],
									[
										143964,
										143965
									],
									[
										143975,
										143976
									],
									[
										143990,
										143991
									],
									[
										144025,
										144026
									],
									[
										144072,
										144073
									],
									[
										144171,
										144172
									],
									[
										144215,
										144216
									],
									[
										144229,
										144230
									],
									[
										144303,
										144304
									],
									[
										144318,
										144319
									],
									[
										144348,
										144349
									],
									[
										144379,
										144380
									],
									[
										144386,
										144387
									],
									[
										144412,
										144413
									],
									[
										144429,
										144430
									],
									[
										144520,
										144521
									],
									[
										144525,
										144526
									],
									[
										144567,
										144568
									],
									[
										144573,
										144574
									],
									[
										144589,
										144590
									],
									[
										144608,
										144609
									],
									[
										144623,
										144624
									],
									[
										144644,
										144645
									],
									[
										144668,
										144669
									],
									[
										144733,
										144734
									],
									[
										144744,
										144745
									],
									[
										144750,
										144751
									],
									[
										144756,
										144757
									],
									[
										144762,
										144763
									],
									[
										144781,
										144782
									],
									[
										144788,
										144789
									],
									[
										144795,
										144796
									],
									[
										144817,
										144818
									],
									[
										144826,
										144827
									],
									[
										144833,
										144834
									],
									[
										144841,
										144842
									],
									[
										144847,
										144848
									],
									[
										144926,
										144927
									],
									[
										144951,
										144952
									],
									[
										144961,
										144962
									],
									[
										144968,
										144969
									],
									[
										145018,
										145019
									],
									[
										145028,
										145029
									],
									[
										145035,
										145036
									],
									[
										145043,
										145044
									],
									[
										145049,
										145050
									],
									[
										145093,
										145094
									],
									[
										145174,
										145175
									],
									[
										145208,
										145209
									],
									[
										145211,
										145212
									],
									[
										145251,
										145252
									],
									[
										145354,
										145355
									],
									[
										145380,
										145381
									],
									[
										145432,
										145433
									],
									[
										145613,
										145614
									],
									[
										145717,
										145718
									],
									[
										145786,
										145787
									],
									[
										145824,
										145825
									],
									[
										145840,
										145841
									],
									[
										145864,
										145865
									],
									[
										145894,
										145895
									],
									[
										145953,
										145954
									],
									[
										145972,
										145973
									],
									[
										145977,
										145978
									],
									[
										145987,
										145988
									],
									[
										145994,
										145995
									],
									[
										146014,
										146015
									],
									[
										146033,
										146034
									],
									[
										146065,
										146066
									],
									[
										146070,
										146071
									],
									[
										146079,
										146080
									],
									[
										146087,
										146088
									],
									[
										146106,
										146107
									],
									[
										146120,
										146121
									],
									[
										146186,
										146187
									],
									[
										146191,
										146192
									],
									[
										146203,
										146204
									],
									[
										146228,
										146229
									],
									[
										146235,
										146236
									],
									[
										146273,
										146274
									],
									[
										146283,
										146284
									],
									[
										146327,
										146328
									],
									[
										146334,
										146335
									],
									[
										146340,
										146341
									],
									[
										146370,
										146371
									],
									[
										146403,
										146404
									],
									[
										146412,
										146413
									],
									[
										146425,
										146426
									],
									[
										146447,
										146448
									],
									[
										146502,
										146503
									],
									[
										146531,
										146532
									],
									[
										146559,
										146560
									],
									[
										146731,
										146732
									],
									[
										146836,
										146837
									],
									[
										146950,
										146951
									],
									[
										147048,
										147049
									],
									[
										147162,
										147163
									],
									[
										147195,
										147196
									],
									[
										147371,
										147372
									],
									[
										147397,
										147398
									],
									[
										147447,
										147448
									],
									[
										147532,
										147533
									],
									[
										147533,
										147534
									],
									[
										147551,
										147552
									],
									[
										147562,
										147563
									],
									[
										147592,
										147593
									],
									[
										147601,
										147602
									],
									[
										147619,
										147620
									],
									[
										147628,
										147629
									],
									[
										147659,
										147660
									],
									[
										147695,
										147696
									],
									[
										147703,
										147704
									],
									[
										147712,
										147713
									],
									[
										147744,
										147745
									],
									[
										147753,
										147754
									],
									[
										147793,
										147794
									],
									[
										147834,
										147835
									],
									[
										147853,
										147854
									],
									[
										147885,
										147886
									],
									[
										147902,
										147903
									],
									[
										147935,
										147936
									],
									[
										147975,
										147976
									],
									[
										148008,
										148009
									],
									[
										148016,
										148017
									],
									[
										148044,
										148045
									],
									[
										148071,
										148072
									],
									[
										148158,
										148159
									],
									[
										148216,
										148217
									],
									[
										148225,
										148226
									],
									[
										148245,
										148246
									],
									[
										148279,
										148280
									],
									[
										148322,
										148323
									],
									[
										148371,
										148372
									],
									[
										148437,
										148438
									],
									[
										148521,
										148522
									],
									[
										148551,
										148552
									],
									[
										148587,
										148588
									],
									[
										148613,
										148614
									],
									[
										148620,
										148621
									],
									[
										148646,
										148647
									],
									[
										148679,
										148680
									],
									[
										148737,
										148738
									],
									[
										148774,
										148775
									],
									[
										148775,
										148776
									],
									[
										148777,
										148778
									],
									[
										148782,
										148783
									],
									[
										148808,
										148809
									],
									[
										148847,
										148848
									],
									[
										148852,
										148853
									],
									[
										148888,
										148889
									],
									[
										148893,
										148894
									],
									[
										148900,
										148901
									],
									[
										148906,
										148907
									],
									[
										148907,
										148908
									],
									[
										148919,
										148920
									],
									[
										148945,
										148946
									],
									[
										148967,
										148968
									],
									[
										148972,
										148973
									],
									[
										148984,
										148985
									],
									[
										148991,
										148992
									],
									[
										149029,
										149030
									],
									[
										149034,
										149035
									],
									[
										149106,
										149107
									],
									[
										149112,
										149113
									],
									[
										149148,
										149149
									],
									[
										149158,
										149159
									],
									[
										149174,
										149175
									],
									[
										149183,
										149184
									],
									[
										149208,
										149209
									],
									[
										149211,
										149212
									],
									[
										149218,
										149219
									],
									[
										149223,
										149224
									],
									[
										149230,
										149231
									],
									[
										149321,
										149322
									],
									[
										149327,
										149328
									],
									[
										149459,
										149460
									],
									[
										149466,
										149467
									],
									[
										149473,
										149474
									],
									[
										149478,
										149479
									],
									[
										149588,
										149589
									],
									[
										149593,
										149594
									],
									[
										149600,
										149601
									],
									[
										149617,
										149618
									],
									[
										149622,
										149623
									],
									[
										149629,
										149630
									],
									[
										149646,
										149647
									],
									[
										149647,
										149648
									],
									[
										149659,
										149660
									],
									[
										149706,
										149707
									],
									[
										149736,
										149737
									],
									[
										149742,
										149743
									],
									[
										149839,
										149840
									],
									[
										149923,
										149924
									],
									[
										149926,
										149927
									],
									[
										149969,
										149970
									],
									[
										150027,
										150028
									],
									[
										150045,
										150046
									],
									[
										150129,
										150130
									],
									[
										150145,
										150146
									],
									[
										150214,
										150215
									],
									[
										150230,
										150231
									],
									[
										150300,
										150301
									],
									[
										150332,
										150333
									],
									[
										150337,
										150338
									],
									[
										150349,
										150350
									],
									[
										150366,
										150367
									],
									[
										150371,
										150372
									],
									[
										150426,
										150427
									],
									[
										150431,
										150432
									],
									[
										150451,
										150452
									],
									[
										150468,
										150469
									],
									[
										150497,
										150498
									],
									[
										150513,
										150514
									],
									[
										150569,
										150570
									],
									[
										150573,
										150574
									],
									[
										150603,
										150604
									],
									[
										150609,
										150610
									],
									[
										150706,
										150707
									],
									[
										150790,
										150791
									],
									[
										150793,
										150794
									],
									[
										150836,
										150837
									],
									[
										150894,
										150895
									],
									[
										150912,
										150913
									],
									[
										150996,
										150997
									],
									[
										151012,
										151013
									],
									[
										151077,
										151078
									],
									[
										151117,
										151118
									],
									[
										151155,
										151156
									],
									[
										151161,
										151162
									],
									[
										151193,
										151194
									],
									[
										151203,
										151204
									],
									[
										151206,
										151207
									],
									[
										151212,
										151213
									],
									[
										151260,
										151261
									],
									[
										151276,
										151277
									],
									[
										151282,
										151283
									],
									[
										151289,
										151290
									],
									[
										151354,
										151355
									],
									[
										151366,
										151367
									],
									[
										151392,
										151393
									],
									[
										151393,
										151394
									],
									[
										151403,
										151404
									],
									[
										151429,
										151430
									],
									[
										151478,
										151479
									],
									[
										151514,
										151515
									],
									[
										151519,
										151520
									],
									[
										151533,
										151534
									],
									[
										151538,
										151539
									],
									[
										151545,
										151546
									],
									[
										151574,
										151575
									],
									[
										151610,
										151611
									],
									[
										151615,
										151616
									],
									[
										151664,
										151665
									],
									[
										151745,
										151746
									],
									[
										151750,
										151751
									],
									[
										151757,
										151758
									],
									[
										151804,
										151805
									],
									[
										151810,
										151811
									],
									[
										151817,
										151818
									],
									[
										151843,
										151844
									],
									[
										151858,
										151859
									],
									[
										151861,
										151862
									],
									[
										151930,
										151931
									],
									[
										151931,
										151932
									],
									[
										151973,
										151974
									],
									[
										151980,
										151981
									],
									[
										151987,
										151988
									],
									[
										152029,
										152030
									],
									[
										152034,
										152035
									],
									[
										152136,
										152137
									],
									[
										152142,
										152143
									],
									[
										152287,
										152288
									],
									[
										152361,
										152362
									],
									[
										152463,
										152464
									],
									[
										152477,
										152478
									],
									[
										152567,
										152568
									],
									[
										152572,
										152573
									],
									[
										152597,
										152598
									],
									[
										152602,
										152603
									],
									[
										152609,
										152610
									],
									[
										152626,
										152627
									],
									[
										152631,
										152632
									],
									[
										152656,
										152657
									],
									[
										152661,
										152662
									],
									[
										152745,
										152746
									],
									[
										152751,
										152752
									],
									[
										152848,
										152849
									],
									[
										152926,
										152927
									],
									[
										152949,
										152950
									],
									[
										152980,
										152981
									],
									[
										152987,
										152988
									],
									[
										153003,
										153004
									],
									[
										153071,
										153072
									],
									[
										153111,
										153112
									],
									[
										153151,
										153152
									],
									[
										153206,
										153207
									],
									[
										153211,
										153212
									],
									[
										153226,
										153227
									],
									[
										153231,
										153232
									],
									[
										153239,
										153240
									],
									[
										153272,
										153273
									],
									[
										153346,
										153347
									],
									[
										153376,
										153377
									],
									[
										153382,
										153383
									],
									[
										153479,
										153480
									],
									[
										153530,
										153531
									],
									[
										153617,
										153618
									],
									[
										153640,
										153641
									],
									[
										153671,
										153672
									],
									[
										153678,
										153679
									],
									[
										153694,
										153695
									],
									[
										153738,
										153739
									],
									[
										153744,
										153745
									],
									[
										153794,
										153795
									],
									[
										153800,
										153801
									],
									[
										153807,
										153808
									],
									[
										153833,
										153834
									],
									[
										153848,
										153849
									],
									[
										153851,
										153852
									],
									[
										153901,
										153902
									],
									[
										153996,
										153997
									],
									[
										153997,
										153998
									],
									[
										154035,
										154036
									],
									[
										154085,
										154086
									],
									[
										154111,
										154112
									],
									[
										154223,
										154224
									],
									[
										154229,
										154230
									],
									[
										154234,
										154235
									],
									[
										154243,
										154244
									],
									[
										154250,
										154251
									],
									[
										154259,
										154260
									],
									[
										154315,
										154316
									],
									[
										154324,
										154325
									],
									[
										154331,
										154332
									],
									[
										154351,
										154352
									],
									[
										154360,
										154361
									],
									[
										154367,
										154368
									],
									[
										154395,
										154396
									],
									[
										154405,
										154406
									],
									[
										154438,
										154439
									],
									[
										154477,
										154478
									],
									[
										154495,
										154496
									],
									[
										154504,
										154505
									],
									[
										154514,
										154515
									],
									[
										154523,
										154524
									],
									[
										154577,
										154578
									],
									[
										154580,
										154581
									],
									[
										154600,
										154601
									],
									[
										154653,
										154654
									],
									[
										154720,
										154721
									],
									[
										154735,
										154736
									],
									[
										154750,
										154751
									],
									[
										154759,
										154760
									],
									[
										154791,
										154792
									],
									[
										154856,
										154857
									],
									[
										154857,
										154858
									],
									[
										154867,
										154868
									],
									[
										154893,
										154894
									],
									[
										154942,
										154943
									],
									[
										154978,
										154979
									],
									[
										154983,
										154984
									],
									[
										154997,
										154998
									],
									[
										155002,
										155003
									],
									[
										155043,
										155044
									],
									[
										155127,
										155128
									],
									[
										155137,
										155138
									],
									[
										155182,
										155183
									],
									[
										155266,
										155267
									],
									[
										155267,
										155268
									],
									[
										155306,
										155307
									],
									[
										155323,
										155324
									],
									[
										155367,
										155368
									],
									[
										155386,
										155387
									],
									[
										155425,
										155426
									],
									[
										155439,
										155440
									],
									[
										155445,
										155446
									],
									[
										155469,
										155470
									],
									[
										155578,
										155579
									],
									[
										155584,
										155585
									],
									[
										155724,
										155725
									],
									[
										155821,
										155822
									],
									[
										155826,
										155827
									],
									[
										155851,
										155852
									],
									[
										155856,
										155857
									],
									[
										155892,
										155893
									],
									[
										155967,
										155968
									],
									[
										155973,
										155974
									],
									[
										156070,
										156071
									],
									[
										156148,
										156149
									],
									[
										156172,
										156173
									],
									[
										156203,
										156204
									],
									[
										156231,
										156232
									],
									[
										156299,
										156300
									],
									[
										156339,
										156340
									],
									[
										156379,
										156380
									],
									[
										156434,
										156435
									],
									[
										156439,
										156440
									],
									[
										156455,
										156456
									],
									[
										156460,
										156461
									],
									[
										156506,
										156507
									],
									[
										156580,
										156581
									],
									[
										156610,
										156611
									],
									[
										156616,
										156617
									],
									[
										156713,
										156714
									],
									[
										156764,
										156765
									],
									[
										156851,
										156852
									],
									[
										156872,
										156873
									],
									[
										156903,
										156904
									],
									[
										156912,
										156913
									],
									[
										156926,
										156927
									],
									[
										156973,
										156974
									],
									[
										156974,
										156975
									],
									[
										157009,
										157010
									],
									[
										157017,
										157018
									],
									[
										157054,
										157055
									],
									[
										157106,
										157107
									],
									[
										157135,
										157136
									],
									[
										157141,
										157142
									],
									[
										157156,
										157157
									],
									[
										157178,
										157179
									],
									[
										157220,
										157221
									],
									[
										157232,
										157233
									],
									[
										157295,
										157296
									],
									[
										157322,
										157323
									],
									[
										157328,
										157329
									],
									[
										157475,
										157476
									],
									[
										157562,
										157563
									],
									[
										157571,
										157572
									],
									[
										157585,
										157586
									],
									[
										157622,
										157623
									],
									[
										157647,
										157648
									],
									[
										157667,
										157668
									],
									[
										157672,
										157673
									],
									[
										157722,
										157723
									],
									[
										157774,
										157775
									],
									[
										157874,
										157875
									],
									[
										157892,
										157893
									],
									[
										157934,
										157935
									],
									[
										157940,
										157941
									],
									[
										158021,
										158022
									],
									[
										158026,
										158027
									],
									[
										158041,
										158042
									],
									[
										158045,
										158046
									],
									[
										158092,
										158093
									],
									[
										158106,
										158107
									],
									[
										158153,
										158154
									],
									[
										158167,
										158168
									],
									[
										158215,
										158216
									],
									[
										158227,
										158228
									],
									[
										158267,
										158268
									],
									[
										158282,
										158283
									],
									[
										158482,
										158483
									],
									[
										158492,
										158493
									],
									[
										158525,
										158526
									],
									[
										158568,
										158569
									],
									[
										158593,
										158594
									],
									[
										158625,
										158626
									],
									[
										158632,
										158633
									],
									[
										158640,
										158641
									],
									[
										158645,
										158646
									],
									[
										158685,
										158686
									],
									[
										158689,
										158690
									],
									[
										158755,
										158756
									],
									[
										158763,
										158764
									],
									[
										158799,
										158800
									],
									[
										158815,
										158816
									],
									[
										158821,
										158822
									],
									[
										158843,
										158844
									],
									[
										158937,
										158938
									],
									[
										158975,
										158976
									],
									[
										158985,
										158986
									],
									[
										158990,
										158991
									],
									[
										159004,
										159005
									],
									[
										159058,
										159059
									],
									[
										159062,
										159063
									],
									[
										159077,
										159078
									],
									[
										159099,
										159100
									],
									[
										159126,
										159127
									],
									[
										159136,
										159137
									],
									[
										159155,
										159156
									],
									[
										159212,
										159213
									],
									[
										159216,
										159217
									],
									[
										159231,
										159232
									],
									[
										159253,
										159254
									],
									[
										159317,
										159318
									],
									[
										159339,
										159340
									],
									[
										159375,
										159376
									],
									[
										159388,
										159389
									],
									[
										159408,
										159409
									],
									[
										159414,
										159415
									],
									[
										159423,
										159424
									],
									[
										159425,
										159426
									],
									[
										159449,
										159450
									],
									[
										159454,
										159455
									],
									[
										159509,
										159510
									],
									[
										159526,
										159527
									],
									[
										159528,
										159529
									],
									[
										159554,
										159555
									],
									[
										159561,
										159562
									],
									[
										159612,
										159613
									],
									[
										159624,
										159625
									],
									[
										159645,
										159646
									],
									[
										159676,
										159677
									],
									[
										159678,
										159679
									],
									[
										159695,
										159696
									],
									[
										159723,
										159724
									],
									[
										159724,
										159725
									],
									[
										159753,
										159754
									],
									[
										159755,
										159756
									],
									[
										159765,
										159766
									],
									[
										159793,
										159794
									],
									[
										159796,
										159797
									],
									[
										159813,
										159814
									],
									[
										159814,
										159815
									],
									[
										159846,
										159847
									],
									[
										159901,
										159902
									],
									[
										159941,
										159942
									],
									[
										159942,
										159943
									],
									[
										159966,
										159967
									],
									[
										159975,
										159976
									],
									[
										160007,
										160008
									],
									[
										160082,
										160083
									],
									[
										160108,
										160109
									],
									[
										160125,
										160126
									],
									[
										160184,
										160185
									],
									[
										160187,
										160188
									],
									[
										160199,
										160200
									],
									[
										160204,
										160205
									],
									[
										160211,
										160212
									],
									[
										160216,
										160217
									],
									[
										160217,
										160218
									],
									[
										160223,
										160224
									],
									[
										160252,
										160253
									],
									[
										160260,
										160261
									],
									[
										160264,
										160265
									],
									[
										160265,
										160266
									],
									[
										160292,
										160293
									],
									[
										160359,
										160360
									],
									[
										160427,
										160428
									],
									[
										160434,
										160435
									],
									[
										160462,
										160463
									],
									[
										160481,
										160482
									],
									[
										160483,
										160484
									],
									[
										160505,
										160506
									],
									[
										160518,
										160519
									],
									[
										160519,
										160520
									],
									[
										160531,
										160532
									],
									[
										160586,
										160587
									],
									[
										160594,
										160595
									],
									[
										160609,
										160610
									],
									[
										160636,
										160637
									],
									[
										160656,
										160657
									],
									[
										160691,
										160692
									],
									[
										160723,
										160724
									],
									[
										160727,
										160728
									],
									[
										160745,
										160746
									],
									[
										160763,
										160764
									],
									[
										160789,
										160790
									],
									[
										160848,
										160849
									],
									[
										160862,
										160863
									],
									[
										160900,
										160901
									],
									[
										160949,
										160950
									],
									[
										160951,
										160952
									],
									[
										160957,
										160958
									],
									[
										161069,
										161070
									],
									[
										161180,
										161181
									],
									[
										161192,
										161193
									],
									[
										161222,
										161223
									],
									[
										161232,
										161233
									],
									[
										161277,
										161278
									],
									[
										161322,
										161323
									],
									[
										161367,
										161368
									],
									[
										161427,
										161428
									],
									[
										161446,
										161447
									],
									[
										161494,
										161495
									],
									[
										161620,
										161621
									],
									[
										161627,
										161628
									],
									[
										161719,
										161720
									],
									[
										161744,
										161745
									],
									[
										161777,
										161778
									],
									[
										161802,
										161803
									],
									[
										161835,
										161836
									],
									[
										161860,
										161861
									],
									[
										161893,
										161894
									],
									[
										161918,
										161919
									],
									[
										161951,
										161952
									],
									[
										161976,
										161977
									],
									[
										162010,
										162011
									],
									[
										162036,
										162037
									],
									[
										162070,
										162071
									],
									[
										162096,
										162097
									],
									[
										162130,
										162131
									],
									[
										162156,
										162157
									],
									[
										162248,
										162249
									],
									[
										162374,
										162375
									],
									[
										162381,
										162382
									],
									[
										162474,
										162475
									],
									[
										162500,
										162501
									],
									[
										162534,
										162535
									],
									[
										162560,
										162561
									],
									[
										162594,
										162595
									],
									[
										162620,
										162621
									],
									[
										162654,
										162655
									],
									[
										162680,
										162681
									],
									[
										162713,
										162714
									],
									[
										162738,
										162739
									],
									[
										162771,
										162772
									],
									[
										162796,
										162797
									],
									[
										162829,
										162830
									],
									[
										162854,
										162855
									],
									[
										162887,
										162888
									],
									[
										162912,
										162913
									],
									[
										163002,
										163003
									],
									[
										163009,
										163010
									],
									[
										163057,
										163058
									],
									[
										163068,
										163069
									],
									[
										163092,
										163093
									],
									[
										163119,
										163120
									],
									[
										163129,
										163130
									],
									[
										163144,
										163145
									],
									[
										163219,
										163220
									],
									[
										163273,
										163274
									],
									[
										163276,
										163277
									],
									[
										163291,
										163292
									],
									[
										163328,
										163329
									],
									[
										163450,
										163451
									],
									[
										163548,
										163549
									],
									[
										163558,
										163559
									],
									[
										163579,
										163580
									],
									[
										163614,
										163615
									],
									[
										163756,
										163757
									],
									[
										163788,
										163789
									],
									[
										163791,
										163792
									],
									[
										163815,
										163816
									],
									[
										163962,
										163963
									],
									[
										164124,
										164125
									],
									[
										164177,
										164178
									],
									[
										164207,
										164208
									],
									[
										164288,
										164289
									],
									[
										164297,
										164298
									],
									[
										164318,
										164319
									],
									[
										164355,
										164356
									],
									[
										164372,
										164373
									],
									[
										164407,
										164408
									],
									[
										164549,
										164550
									],
									[
										164581,
										164582
									],
									[
										164584,
										164585
									],
									[
										164608,
										164609
									],
									[
										164764,
										164765
									],
									[
										164767,
										164768
									],
									[
										164793,
										164794
									],
									[
										164825,
										164826
									],
									[
										164828,
										164829
									],
									[
										164854,
										164855
									],
									[
										164877,
										164878
									],
									[
										165048,
										165049
									],
									[
										165051,
										165052
									],
									[
										165077,
										165078
									],
									[
										165110,
										165111
									],
									[
										165113,
										165114
									],
									[
										165139,
										165140
									],
									[
										165163,
										165164
									],
									[
										165216,
										165217
									],
									[
										165246,
										165247
									],
									[
										165344,
										165345
									],
									[
										165406,
										165407
									],
									[
										165412,
										165413
									],
									[
										165418,
										165419
									],
									[
										165424,
										165425
									],
									[
										165451,
										165452
									],
									[
										165458,
										165459
									],
									[
										165491,
										165492
									],
									[
										165497,
										165498
									],
									[
										165503,
										165504
									],
									[
										165509,
										165510
									],
									[
										165515,
										165516
									],
									[
										165543,
										165544
									],
									[
										165553,
										165554
									],
									[
										165659,
										165660
									],
									[
										165754,
										165755
									],
									[
										165779,
										165780
									],
									[
										165917,
										165918
									],
									[
										166012,
										166013
									],
									[
										166037,
										166038
									],
									[
										166249,
										166250
									],
									[
										166502,
										166503
									],
									[
										166755,
										166756
									],
									[
										167008,
										167009
									],
									[
										167258,
										167259
									],
									[
										167452,
										167453
									],
									[
										167548,
										167549
									],
									[
										167553,
										167554
									],
									[
										167700,
										167701
									],
									[
										167713,
										167714
									],
									[
										167772,
										167773
									],
									[
										167781,
										167782
									],
									[
										167826,
										167827
									],
									[
										167890,
										167891
									],
									[
										167903,
										167904
									],
									[
										168079,
										168080
									],
									[
										168156,
										168157
									],
									[
										168165,
										168166
									],
									[
										168183,
										168184
									],
									[
										168199,
										168200
									],
									[
										168247,
										168248
									],
									[
										168254,
										168255
									],
									[
										168262,
										168263
									],
									[
										168267,
										168268
									],
									[
										168307,
										168308
									],
									[
										168311,
										168312
									],
									[
										168343,
										168344
									],
									[
										168359,
										168360
									],
									[
										168365,
										168366
									],
									[
										168387,
										168388
									],
									[
										168481,
										168482
									],
									[
										168519,
										168520
									],
									[
										168529,
										168530
									],
									[
										168534,
										168535
									],
									[
										168548,
										168549
									],
									[
										168602,
										168603
									],
									[
										168606,
										168607
									],
									[
										168621,
										168622
									],
									[
										168643,
										168644
									],
									[
										168670,
										168671
									],
									[
										168680,
										168681
									],
									[
										168699,
										168700
									],
									[
										168756,
										168757
									],
									[
										168760,
										168761
									],
									[
										168775,
										168776
									],
									[
										168797,
										168798
									],
									[
										168861,
										168862
									],
									[
										168883,
										168884
									],
									[
										168919,
										168920
									],
									[
										168932,
										168933
									],
									[
										168952,
										168953
									],
									[
										168958,
										168959
									],
									[
										168967,
										168968
									],
									[
										168969,
										168970
									],
									[
										168993,
										168994
									],
									[
										168998,
										168999
									],
									[
										169053,
										169054
									],
									[
										169070,
										169071
									],
									[
										169072,
										169073
									],
									[
										169098,
										169099
									],
									[
										169105,
										169106
									],
									[
										169156,
										169157
									],
									[
										169168,
										169169
									],
									[
										169189,
										169190
									],
									[
										169220,
										169221
									],
									[
										169222,
										169223
									],
									[
										169239,
										169240
									],
									[
										169267,
										169268
									],
									[
										169268,
										169269
									],
									[
										169297,
										169298
									],
									[
										169299,
										169300
									],
									[
										169309,
										169310
									],
									[
										169337,
										169338
									],
									[
										169340,
										169341
									],
									[
										169357,
										169358
									],
									[
										169358,
										169359
									],
									[
										169390,
										169391
									],
									[
										169445,
										169446
									],
									[
										169485,
										169486
									],
									[
										169486,
										169487
									],
									[
										169510,
										169511
									],
									[
										169519,
										169520
									],
									[
										169551,
										169552
									],
									[
										169626,
										169627
									],
									[
										169652,
										169653
									],
									[
										169669,
										169670
									],
									[
										169728,
										169729
									],
									[
										169731,
										169732
									],
									[
										169743,
										169744
									],
									[
										169748,
										169749
									],
									[
										169755,
										169756
									],
									[
										169760,
										169761
									],
									[
										169761,
										169762
									],
									[
										169767,
										169768
									],
									[
										169796,
										169797
									],
									[
										169804,
										169805
									],
									[
										169808,
										169809
									],
									[
										169809,
										169810
									],
									[
										169836,
										169837
									],
									[
										169903,
										169904
									],
									[
										169971,
										169972
									],
									[
										169978,
										169979
									],
									[
										170006,
										170007
									],
									[
										170025,
										170026
									],
									[
										170027,
										170028
									],
									[
										170049,
										170050
									],
									[
										170062,
										170063
									],
									[
										170063,
										170064
									],
									[
										170075,
										170076
									],
									[
										170159,
										170160
									],
									[
										170165,
										170166
									],
									[
										170200,
										170201
									],
									[
										170332,
										170333
									],
									[
										170373,
										170374
									],
									[
										170415,
										170416
									],
									[
										170457,
										170458
									],
									[
										170519,
										170520
									],
									[
										170553,
										170554
									],
									[
										170580,
										170581
									],
									[
										170584,
										170585
									],
									[
										170587,
										170588
									],
									[
										170625,
										170626
									],
									[
										170649,
										170650
									],
									[
										170684,
										170685
									],
									[
										170710,
										170711
									],
									[
										170716,
										170717
									],
									[
										170742,
										170743
									],
									[
										170751,
										170752
									],
									[
										170759,
										170760
									],
									[
										170792,
										170793
									],
									[
										170808,
										170809
									],
									[
										170812,
										170813
									],
									[
										170816,
										170817
									],
									[
										170843,
										170844
									],
									[
										170887,
										170888
									],
									[
										170893,
										170894
									],
									[
										170917,
										170918
									],
									[
										170956,
										170957
									],
									[
										170982,
										170983
									],
									[
										171025,
										171026
									],
									[
										171086,
										171087
									],
									[
										171092,
										171093
									],
									[
										171150,
										171151
									],
									[
										171210,
										171211
									],
									[
										171241,
										171242
									],
									[
										171242,
										171243
									],
									[
										171321,
										171322
									],
									[
										171393,
										171394
									],
									[
										171422,
										171423
									],
									[
										171435,
										171436
									],
									[
										171465,
										171466
									],
									[
										171479,
										171480
									],
									[
										171485,
										171486
									],
									[
										171525,
										171526
									],
									[
										171531,
										171532
									],
									[
										171580,
										171581
									],
									[
										171581,
										171582
									],
									[
										171588,
										171589
									],
									[
										171603,
										171604
									],
									[
										171625,
										171626
									],
									[
										171629,
										171630
									],
									[
										171649,
										171650
									],
									[
										171656,
										171657
									],
									[
										171663,
										171664
									],
									[
										171687,
										171688
									],
									[
										171697,
										171698
									],
									[
										171704,
										171705
									],
									[
										171762,
										171763
									],
									[
										171830,
										171831
									],
									[
										171898,
										171899
									],
									[
										171905,
										171906
									],
									[
										171941,
										171942
									],
									[
										171951,
										171952
									],
									[
										171971,
										171972
									],
									[
										172016,
										172017
									],
									[
										172025,
										172026
									],
									[
										172053,
										172054
									],
									[
										172082,
										172083
									],
									[
										172127,
										172128
									],
									[
										172142,
										172143
									],
									[
										172190,
										172191
									],
									[
										172435,
										172436
									],
									[
										172485,
										172486
									],
									[
										172488,
										172489
									],
									[
										172503,
										172504
									],
									[
										172577,
										172578
									],
									[
										172603,
										172604
									],
									[
										172660,
										172661
									],
									[
										172674,
										172675
									],
									[
										172713,
										172714
									],
									[
										172793,
										172794
									],
									[
										172798,
										172799
									],
									[
										172973,
										172974
									],
									[
										172992,
										172993
									],
									[
										172995,
										172996
									],
									[
										173018,
										173019
									],
									[
										173019,
										173020
									],
									[
										173043,
										173044
									],
									[
										173044,
										173045
									],
									[
										173085,
										173086
									],
									[
										173108,
										173109
									],
									[
										173136,
										173137
									],
									[
										173137,
										173138
									],
									[
										173147,
										173148
									],
									[
										173153,
										173154
									],
									[
										173167,
										173168
									],
									[
										173173,
										173174
									],
									[
										173221,
										173222
									],
									[
										173222,
										173223
									],
									[
										173281,
										173282
									],
									[
										173284,
										173285
									],
									[
										173308,
										173309
									],
									[
										173309,
										173310
									],
									[
										173333,
										173334
									],
									[
										173334,
										173335
									],
									[
										173342,
										173343
									],
									[
										173374,
										173375
									],
									[
										173393,
										173394
									],
									[
										173407,
										173408
									],
									[
										173439,
										173440
									],
									[
										173445,
										173446
									],
									[
										173490,
										173491
									],
									[
										173491,
										173492
									],
									[
										173531,
										173532
									],
									[
										173534,
										173535
									],
									[
										173544,
										173545
									],
									[
										173547,
										173548
									],
									[
										173549,
										173550
									],
									[
										173574,
										173575
									],
									[
										173575,
										173576
									],
									[
										173608,
										173609
									],
									[
										173642,
										173643
									],
									[
										173670,
										173671
									],
									[
										173671,
										173672
									],
									[
										173686,
										173687
									],
									[
										173704,
										173705
									],
									[
										173727,
										173728
									],
									[
										173739,
										173740
									],
									[
										173792,
										173793
									],
									[
										173793,
										173794
									],
									[
										173852,
										173853
									],
									[
										173855,
										173856
									],
									[
										173865,
										173866
									],
									[
										173868,
										173869
									],
									[
										173870,
										173871
									],
									[
										173899,
										173900
									],
									[
										173900,
										173901
									],
									[
										173933,
										173934
									],
									[
										173958,
										173959
									],
									[
										173986,
										173987
									],
									[
										173987,
										173988
									],
									[
										174002,
										174003
									],
									[
										174020,
										174021
									],
									[
										174046,
										174047
									],
									[
										174058,
										174059
									],
									[
										174065,
										174066
									],
									[
										174109,
										174110
									],
									[
										174110,
										174111
									],
									[
										174169,
										174170
									],
									[
										174174,
										174175
									],
									[
										174188,
										174189
									],
									[
										174189,
										174190
									],
									[
										174213,
										174214
									],
									[
										174214,
										174215
									],
									[
										174255,
										174256
									],
									[
										174278,
										174279
									],
									[
										174314,
										174315
									],
									[
										174320,
										174321
									],
									[
										174321,
										174322
									],
									[
										174329,
										174330
									],
									[
										174351,
										174352
									],
									[
										174380,
										174381
									],
									[
										174381,
										174382
									],
									[
										174391,
										174392
									],
									[
										174397,
										174398
									],
									[
										174399,
										174400
									],
									[
										174445,
										174446
									],
									[
										174446,
										174447
									],
									[
										174528,
										174529
									],
									[
										174533,
										174534
									],
									[
										174541,
										174542
									],
									[
										174554,
										174555
									],
									[
										174555,
										174556
									],
									[
										174579,
										174580
									],
									[
										174580,
										174581
									],
									[
										174620,
										174621
									],
									[
										174651,
										174652
									],
									[
										174675,
										174676
									],
									[
										174676,
										174677
									],
									[
										174686,
										174687
									],
									[
										174703,
										174704
									],
									[
										174707,
										174708
									],
									[
										174731,
										174732
									],
									[
										174733,
										174734
									],
									[
										174748,
										174749
									],
									[
										174801,
										174802
									],
									[
										174802,
										174803
									],
									[
										174861,
										174862
									],
									[
										174866,
										174867
									],
									[
										174875,
										174876
									],
									[
										174881,
										174882
									],
									[
										174894,
										174895
									],
									[
										174895,
										174896
									],
									[
										174919,
										174920
									],
									[
										174920,
										174921
									],
									[
										174961,
										174962
									],
									[
										174984,
										174985
									],
									[
										175020,
										175021
									],
									[
										175027,
										175028
									],
									[
										175049,
										175050
									],
									[
										175078,
										175079
									],
									[
										175079,
										175080
									],
									[
										175089,
										175090
									],
									[
										175095,
										175096
									],
									[
										175097,
										175098
									],
									[
										175173,
										175174
									],
									[
										175200,
										175201
									],
									[
										175269,
										175270
									],
									[
										175270,
										175271
									],
									[
										175313,
										175314
									],
									[
										175346,
										175347
									],
									[
										175347,
										175348
									],
									[
										175421,
										175422
									],
									[
										175422,
										175423
									],
									[
										175531,
										175532
									],
									[
										175536,
										175537
									],
									[
										175547,
										175548
									],
									[
										175560,
										175561
									],
									[
										175561,
										175562
									],
									[
										175593,
										175594
									],
									[
										175613,
										175614
									],
									[
										175639,
										175640
									],
									[
										175640,
										175641
									],
									[
										175654,
										175655
									],
									[
										175682,
										175683
									],
									[
										175708,
										175709
									],
									[
										175709,
										175710
									],
									[
										175768,
										175769
									],
									[
										175773,
										175774
									],
									[
										175797,
										175798
									],
									[
										175798,
										175799
									],
									[
										175830,
										175831
									],
									[
										175836,
										175837
									],
									[
										175837,
										175838
									],
									[
										175862,
										175863
									],
									[
										175888,
										175889
									],
									[
										175889,
										175890
									],
									[
										175903,
										175904
									],
									[
										175926,
										175927
									],
									[
										175955,
										175956
									],
									[
										175956,
										175957
									],
									[
										176015,
										176016
									],
									[
										176020,
										176021
									],
									[
										176023,
										176024
									],
									[
										176048,
										176049
									],
									[
										176049,
										176050
									],
									[
										176073,
										176074
									],
									[
										176074,
										176075
									],
									[
										176114,
										176115
									],
									[
										176120,
										176121
									],
									[
										176121,
										176122
									],
									[
										176137,
										176138
									],
									[
										176141,
										176142
									],
									[
										176153,
										176154
									],
									[
										176157,
										176158
									],
									[
										176203,
										176204
									],
									[
										176204,
										176205
									],
									[
										176260,
										176261
									],
									[
										176266,
										176267
									],
									[
										176267,
										176268
									],
									[
										176276,
										176277
									],
									[
										176334,
										176335
									],
									[
										176335,
										176336
									],
									[
										176390,
										176391
									],
									[
										176391,
										176392
									],
									[
										176408,
										176409
									],
									[
										176409,
										176410
									],
									[
										176424,
										176425
									],
									[
										176430,
										176431
									],
									[
										176437,
										176438
									],
									[
										176463,
										176464
									],
									[
										176478,
										176479
									],
									[
										176481,
										176482
									],
									[
										176518,
										176519
									],
									[
										176519,
										176520
									],
									[
										176601,
										176602
									],
									[
										176611,
										176612
									],
									[
										176627,
										176628
									],
									[
										176628,
										176629
									],
									[
										176652,
										176653
									],
									[
										176653,
										176654
									],
									[
										176694,
										176695
									],
									[
										176717,
										176718
									],
									[
										176748,
										176749
									],
									[
										176754,
										176755
									],
									[
										176761,
										176762
									],
									[
										176766,
										176767
									],
									[
										176798,
										176799
									],
									[
										176799,
										176800
									],
									[
										176807,
										176808
									],
									[
										176813,
										176814
									],
									[
										176849,
										176850
									],
									[
										176850,
										176851
									],
									[
										176858,
										176859
									],
									[
										176864,
										176865
									],
									[
										176900,
										176901
									],
									[
										176901,
										176902
									],
									[
										176960,
										176961
									],
									[
										176970,
										176971
									],
									[
										176984,
										176985
									],
									[
										176997,
										176998
									],
									[
										176998,
										176999
									],
									[
										177022,
										177023
									],
									[
										177023,
										177024
									],
									[
										177064,
										177065
									],
									[
										177086,
										177087
									],
									[
										177117,
										177118
									],
									[
										177123,
										177124
									],
									[
										177130,
										177131
									],
									[
										177135,
										177136
									],
									[
										177167,
										177168
									],
									[
										177168,
										177169
									],
									[
										177176,
										177177
									],
									[
										177182,
										177183
									],
									[
										177218,
										177219
									],
									[
										177219,
										177220
									],
									[
										177227,
										177228
									],
									[
										177233,
										177234
									],
									[
										177268,
										177269
									],
									[
										177269,
										177270
									],
									[
										177328,
										177329
									],
									[
										177338,
										177339
									],
									[
										177352,
										177353
									],
									[
										177365,
										177366
									],
									[
										177366,
										177367
									],
									[
										177390,
										177391
									],
									[
										177391,
										177392
									],
									[
										177432,
										177433
									],
									[
										177456,
										177457
									],
									[
										177487,
										177488
									],
									[
										177493,
										177494
									],
									[
										177500,
										177501
									],
									[
										177505,
										177506
									],
									[
										177537,
										177538
									],
									[
										177538,
										177539
									],
									[
										177546,
										177547
									],
									[
										177552,
										177553
									],
									[
										177588,
										177589
									],
									[
										177589,
										177590
									],
									[
										177597,
										177598
									],
									[
										177603,
										177604
									],
									[
										177639,
										177640
									],
									[
										177640,
										177641
									],
									[
										177699,
										177700
									],
									[
										177704,
										177705
									],
									[
										177726,
										177727
									],
									[
										177727,
										177728
									],
									[
										177751,
										177752
									],
									[
										177752,
										177753
									],
									[
										177793,
										177794
									],
									[
										177816,
										177817
									],
									[
										177844,
										177845
									],
									[
										177845,
										177846
									],
									[
										177855,
										177856
									],
									[
										177861,
										177862
									],
									[
										177875,
										177876
									],
									[
										177881,
										177882
									],
									[
										177937,
										177938
									],
									[
										177943,
										177944
									],
									[
										177948,
										177949
									],
									[
										177970,
										177971
									],
									[
										178017,
										178018
									],
									[
										178024,
										178025
									],
									[
										178044,
										178045
									],
									[
										178077,
										178078
									],
									[
										178078,
										178079
									],
									[
										178091,
										178092
									],
									[
										178104,
										178105
									],
									[
										178109,
										178110
									],
									[
										178112,
										178113
									],
									[
										178114,
										178115
									],
									[
										178186,
										178187
									],
									[
										178206,
										178207
									],
									[
										178243,
										178244
									],
									[
										178244,
										178245
									],
									[
										178257,
										178258
									],
									[
										178263,
										178264
									],
									[
										178271,
										178272
									],
									[
										178276,
										178277
									],
									[
										178279,
										178280
									],
									[
										178281,
										178282
									],
									[
										178337,
										178338
									],
									[
										178338,
										178339
									],
									[
										178461,
										178462
									],
									[
										178466,
										178467
									],
									[
										178483,
										178484
									],
									[
										178489,
										178490
									],
									[
										178502,
										178503
									],
									[
										178503,
										178504
									],
									[
										178527,
										178528
									],
									[
										178528,
										178529
									],
									[
										178565,
										178566
									],
									[
										178579,
										178580
									],
									[
										178581,
										178582
									],
									[
										178589,
										178590
									],
									[
										178604,
										178605
									],
									[
										178608,
										178609
									],
									[
										178663,
										178664
									],
									[
										178683,
										178684
									],
									[
										178706,
										178707
									],
									[
										178707,
										178708
									],
									[
										178720,
										178721
									],
									[
										178726,
										178727
									],
									[
										178734,
										178735
									],
									[
										178739,
										178740
									],
									[
										178742,
										178743
									],
									[
										178744,
										178745
									],
									[
										178820,
										178821
									],
									[
										178845,
										178846
									],
									[
										178846,
										178847
									],
									[
										178859,
										178860
									],
									[
										178865,
										178866
									],
									[
										178873,
										178874
									],
									[
										178878,
										178879
									],
									[
										178881,
										178882
									],
									[
										178883,
										178884
									],
									[
										178923,
										178924
									],
									[
										178924,
										178925
									],
									[
										179004,
										179005
									],
									[
										179009,
										179010
									],
									[
										179028,
										179029
									],
									[
										179034,
										179035
									],
									[
										179047,
										179048
									],
									[
										179048,
										179049
									],
									[
										179077,
										179078
									],
									[
										179126,
										179127
									],
									[
										179154,
										179155
									],
									[
										179167,
										179168
									],
									[
										179255,
										179256
									],
									[
										179265,
										179266
									],
									[
										179285,
										179286
									],
									[
										179306,
										179307
									],
									[
										179307,
										179308
									],
									[
										179317,
										179318
									],
									[
										179355,
										179356
									],
									[
										179384,
										179385
									],
									[
										179407,
										179408
									],
									[
										179408,
										179409
									],
									[
										179419,
										179420
									],
									[
										179441,
										179442
									],
									[
										179442,
										179443
									],
									[
										179662,
										179663
									],
									[
										179678,
										179679
									],
									[
										179683,
										179684
									],
									[
										179685,
										179686
									],
									[
										179718,
										179719
									],
									[
										179735,
										179736
									],
									[
										179738,
										179739
									],
									[
										179761,
										179762
									],
									[
										179762,
										179763
									],
									[
										179782,
										179783
									],
									[
										179783,
										179784
									],
									[
										179899,
										179900
									],
									[
										179922,
										179923
									],
									[
										179946,
										179947
									],
									[
										179947,
										179948
									],
									[
										179957,
										179958
									],
									[
										179963,
										179964
									],
									[
										179977,
										179978
									],
									[
										179985,
										179986
									],
									[
										179994,
										179995
									],
									[
										180023,
										180024
									],
									[
										180030,
										180031
									],
									[
										180174,
										180175
									],
									[
										180175,
										180176
									],
									[
										180207,
										180208
									],
									[
										180229,
										180230
									],
									[
										180297,
										180298
									],
									[
										180347,
										180348
									],
									[
										180352,
										180353
									],
									[
										180373,
										180374
									],
									[
										180374,
										180375
									],
									[
										180394,
										180395
									],
									[
										180395,
										180396
									],
									[
										180433,
										180434
									],
									[
										180565,
										180566
									],
									[
										180571,
										180572
									],
									[
										180576,
										180577
									],
									[
										180623,
										180624
									],
									[
										180624,
										180625
									],
									[
										180634,
										180635
									],
									[
										180682,
										180683
									],
									[
										180711,
										180712
									],
									[
										180861,
										180862
									],
									[
										180862,
										180863
									],
									[
										180892,
										180893
									],
									[
										180912,
										180913
									],
									[
										180978,
										180979
									],
									[
										181028,
										181029
									],
									[
										181050,
										181051
									],
									[
										181051,
										181052
									],
									[
										181071,
										181072
									],
									[
										181072,
										181073
									],
									[
										181112,
										181113
									],
									[
										181159,
										181160
									],
									[
										181165,
										181166
									],
									[
										181282,
										181283
									],
									[
										181289,
										181290
									],
									[
										181332,
										181333
									],
									[
										181333,
										181334
									],
									[
										181497,
										181498
									],
									[
										181498,
										181499
									],
									[
										181528,
										181529
									],
									[
										181548,
										181549
									],
									[
										181614,
										181615
									],
									[
										181664,
										181665
									],
									[
										181669,
										181670
									],
									[
										181695,
										181696
									],
									[
										181696,
										181697
									],
									[
										181716,
										181717
									],
									[
										181717,
										181718
									],
									[
										181761,
										181762
									],
									[
										181778,
										181779
									],
									[
										181782,
										181783
									],
									[
										181845,
										181846
									],
									[
										181878,
										181879
									],
									[
										181941,
										181942
									],
									[
										181945,
										181946
									],
									[
										182014,
										182015
									],
									[
										182019,
										182020
									],
									[
										182020,
										182021
									],
									[
										182081,
										182082
									],
									[
										182086,
										182087
									],
									[
										182087,
										182088
									],
									[
										182094,
										182095
									],
									[
										182116,
										182117
									],
									[
										182177,
										182178
									],
									[
										182235,
										182236
									],
									[
										182236,
										182237
									],
									[
										182246,
										182247
									],
									[
										182291,
										182292
									],
									[
										182292,
										182293
									],
									[
										182301,
										182302
									],
									[
										182321,
										182322
									],
									[
										182383,
										182384
									],
									[
										182384,
										182385
									],
									[
										182394,
										182395
									],
									[
										182552,
										182553
									],
									[
										182553,
										182554
									],
									[
										182562,
										182563
									],
									[
										182582,
										182583
									],
									[
										182644,
										182645
									],
									[
										182645,
										182646
									],
									[
										182656,
										182657
									],
									[
										182833,
										182834
									],
									[
										182971,
										182972
									],
									[
										182972,
										182973
									],
									[
										183008,
										183009
									],
									[
										183034,
										183035
									],
									[
										183127,
										183128
									],
									[
										183329,
										183330
									],
									[
										183348,
										183349
									],
									[
										183351,
										183352
									],
									[
										183374,
										183375
									],
									[
										183375,
										183376
									],
									[
										183402,
										183403
									],
									[
										183419,
										183420
									],
									[
										183423,
										183424
									],
									[
										183449,
										183450
									],
									[
										183450,
										183451
									],
									[
										183460,
										183461
									],
									[
										183466,
										183467
									],
									[
										183480,
										183481
									],
									[
										183486,
										183487
									],
									[
										183533,
										183534
									],
									[
										183539,
										183540
									],
									[
										183546,
										183547
									],
									[
										183551,
										183552
									],
									[
										183579,
										183580
									],
									[
										183580,
										183581
									],
									[
										183588,
										183589
									],
									[
										183594,
										183595
									],
									[
										183626,
										183627
									],
									[
										183627,
										183628
									],
									[
										183635,
										183636
									],
									[
										183641,
										183642
									],
									[
										183673,
										183674
									],
									[
										183674,
										183675
									],
									[
										183714,
										183715
									],
									[
										183717,
										183718
									],
									[
										183730,
										183731
									],
									[
										183743,
										183744
									],
									[
										183744,
										183745
									],
									[
										183770,
										183771
									],
									[
										183776,
										183777
									],
									[
										183780,
										183781
									],
									[
										183790,
										183791
									],
									[
										183803,
										183804
									],
									[
										183821,
										183822
									],
									[
										183848,
										183849
									],
									[
										183865,
										183866
									],
									[
										183869,
										183870
									],
									[
										183896,
										183897
									],
									[
										183902,
										183903
									],
									[
										183909,
										183910
									],
									[
										183914,
										183915
									],
									[
										183942,
										183943
									],
									[
										183943,
										183944
									],
									[
										183951,
										183952
									],
									[
										183957,
										183958
									],
									[
										183989,
										183990
									],
									[
										183990,
										183991
									],
									[
										183998,
										183999
									],
									[
										184004,
										184005
									],
									[
										184036,
										184037
									],
									[
										184037,
										184038
									],
									[
										184077,
										184078
									],
									[
										184080,
										184081
									],
									[
										184090,
										184091
									],
									[
										184093,
										184094
									],
									[
										184095,
										184096
									],
									[
										184120,
										184121
									],
									[
										184121,
										184122
									],
									[
										184145,
										184146
									],
									[
										184146,
										184147
									],
									[
										184156,
										184157
									],
									[
										184180,
										184181
									],
									[
										184184,
										184185
									],
									[
										184199,
										184200
									],
									[
										184230,
										184231
									],
									[
										184252,
										184253
									],
									[
										184253,
										184254
									],
									[
										184293,
										184294
									],
									[
										184296,
										184297
									],
									[
										184306,
										184307
									],
									[
										184309,
										184310
									],
									[
										184326,
										184327
									],
									[
										184327,
										184328
									],
									[
										184351,
										184352
									],
									[
										184352,
										184353
									],
									[
										184362,
										184363
									],
									[
										184386,
										184387
									],
									[
										184390,
										184391
									],
									[
										184404,
										184405
									],
									[
										184431,
										184432
									],
									[
										184443,
										184444
									],
									[
										184450,
										184451
									],
									[
										184487,
										184488
									],
									[
										184488,
										184489
									],
									[
										184528,
										184529
									],
									[
										184533,
										184534
									],
									[
										184547,
										184548
									],
									[
										184548,
										184549
									],
									[
										184572,
										184573
									],
									[
										184573,
										184574
									],
									[
										184590,
										184591
									],
									[
										184592,
										184593
									],
									[
										184600,
										184601
									],
									[
										184601,
										184602
									],
									[
										184619,
										184620
									],
									[
										184623,
										184624
									],
									[
										184635,
										184636
									],
									[
										184680,
										184681
									],
									[
										184681,
										184682
									],
									[
										184721,
										184722
									],
									[
										184726,
										184727
									],
									[
										184734,
										184735
									],
									[
										184747,
										184748
									],
									[
										184748,
										184749
									],
									[
										184777,
										184778
									],
									[
										184791,
										184792
									],
									[
										184793,
										184794
									],
									[
										184801,
										184802
									],
									[
										184802,
										184803
									],
									[
										184830,
										184831
									],
									[
										184831,
										184832
									],
									[
										184841,
										184842
									],
									[
										184858,
										184859
									],
									[
										184862,
										184863
									],
									[
										184886,
										184887
									],
									[
										184888,
										184889
									],
									[
										184923,
										184924
									],
									[
										184924,
										184925
									],
									[
										184964,
										184965
									],
									[
										184969,
										184970
									],
									[
										184978,
										184979
									],
									[
										184996,
										184997
									],
									[
										184997,
										184998
									],
									[
										185021,
										185022
									],
									[
										185022,
										185023
									],
									[
										185039,
										185040
									],
									[
										185041,
										185042
									],
									[
										185060,
										185061
									],
									[
										185064,
										185065
									],
									[
										185076,
										185077
									],
									[
										185121,
										185122
									],
									[
										185122,
										185123
									],
									[
										185132,
										185133
									],
									[
										185155,
										185156
									],
									[
										185157,
										185158
									],
									[
										185165,
										185166
									],
									[
										185166,
										185167
									],
									[
										185181,
										185182
									],
									[
										185224,
										185225
									],
									[
										185249,
										185250
									],
									[
										185250,
										185251
									],
									[
										185260,
										185261
									],
									[
										185283,
										185284
									],
									[
										185285,
										185286
									],
									[
										185301,
										185302
									],
									[
										185344,
										185345
									],
									[
										185369,
										185370
									],
									[
										185370,
										185371
									],
									[
										185410,
										185411
									],
									[
										185415,
										185416
									],
									[
										185429,
										185430
									],
									[
										185442,
										185443
									],
									[
										185443,
										185444
									],
									[
										185467,
										185468
									],
									[
										185468,
										185469
									],
									[
										185478,
										185479
									],
									[
										185501,
										185502
									],
									[
										185503,
										185504
									],
									[
										185514,
										185515
									],
									[
										185545,
										185546
									],
									[
										185567,
										185568
									],
									[
										185568,
										185569
									],
									[
										185608,
										185609
									],
									[
										185613,
										185614
									],
									[
										185640,
										185641
									],
									[
										185641,
										185642
									],
									[
										185665,
										185666
									],
									[
										185666,
										185667
									],
									[
										185676,
										185677
									],
									[
										185699,
										185700
									],
									[
										185701,
										185702
									],
									[
										185709,
										185710
									],
									[
										185710,
										185711
									],
									[
										185722,
										185723
									],
									[
										185748,
										185749
									],
									[
										185773,
										185774
									],
									[
										185774,
										185775
									],
									[
										185814,
										185815
									],
									[
										185819,
										185820
									],
									[
										185831,
										185832
									],
									[
										185834,
										185835
									],
									[
										185849,
										185850
									],
									[
										185850,
										185851
									],
									[
										185874,
										185875
									],
									[
										185875,
										185876
									],
									[
										185885,
										185886
									],
									[
										185908,
										185909
									],
									[
										185910,
										185911
									],
									[
										185918,
										185919
									],
									[
										185919,
										185920
									],
									[
										185935,
										185936
									],
									[
										185960,
										185961
									],
									[
										185963,
										185964
									],
									[
										185975,
										185976
									],
									[
										186012,
										186013
									],
									[
										186013,
										186014
									],
									[
										186053,
										186054
									],
									[
										186058,
										186059
									],
									[
										186061,
										186062
									],
									[
										186086,
										186087
									],
									[
										186087,
										186088
									],
									[
										186111,
										186112
									],
									[
										186112,
										186113
									],
									[
										186144,
										186145
									],
									[
										186145,
										186146
									],
									[
										186162,
										186163
									],
									[
										186164,
										186165
									],
									[
										186172,
										186173
									],
									[
										186173,
										186174
									],
									[
										186189,
										186190
									],
									[
										186193,
										186194
									],
									[
										186205,
										186206
									],
									[
										186209,
										186210
									],
									[
										186232,
										186233
									],
									[
										186233,
										186234
									],
									[
										186243,
										186244
									],
									[
										186287,
										186288
									],
									[
										186289,
										186290
									],
									[
										186297,
										186298
									],
									[
										186298,
										186299
									],
									[
										186307,
										186308
									],
									[
										186356,
										186357
									],
									[
										186357,
										186358
									],
									[
										186397,
										186398
									],
									[
										186407,
										186408
									],
									[
										186423,
										186424
									],
									[
										186424,
										186425
									],
									[
										186451,
										186452
									],
									[
										186468,
										186469
									],
									[
										186472,
										186473
									],
									[
										186501,
										186502
									],
									[
										186507,
										186508
									],
									[
										186514,
										186515
									],
									[
										186519,
										186520
									],
									[
										186547,
										186548
									],
									[
										186548,
										186549
									],
									[
										186556,
										186557
									],
									[
										186562,
										186563
									],
									[
										186594,
										186595
									],
									[
										186595,
										186596
									],
									[
										186603,
										186604
									],
									[
										186609,
										186610
									],
									[
										186641,
										186642
									],
									[
										186642,
										186643
									],
									[
										186682,
										186683
									],
									[
										186692,
										186693
									],
									[
										186706,
										186707
									],
									[
										186719,
										186720
									],
									[
										186720,
										186721
									],
									[
										186747,
										186748
									],
									[
										186764,
										186765
									],
									[
										186768,
										186769
									],
									[
										186796,
										186797
									],
									[
										186802,
										186803
									],
									[
										186809,
										186810
									],
									[
										186814,
										186815
									],
									[
										186842,
										186843
									],
									[
										186843,
										186844
									],
									[
										186851,
										186852
									],
									[
										186857,
										186858
									],
									[
										186889,
										186890
									],
									[
										186890,
										186891
									],
									[
										186898,
										186899
									],
									[
										186904,
										186905
									],
									[
										186935,
										186936
									],
									[
										186936,
										186937
									],
									[
										186976,
										186977
									],
									[
										186986,
										186987
									],
									[
										187000,
										187001
									],
									[
										187013,
										187014
									],
									[
										187014,
										187015
									],
									[
										187041,
										187042
									],
									[
										187058,
										187059
									],
									[
										187062,
										187063
									],
									[
										187092,
										187093
									],
									[
										187098,
										187099
									],
									[
										187105,
										187106
									],
									[
										187110,
										187111
									],
									[
										187138,
										187139
									],
									[
										187139,
										187140
									],
									[
										187147,
										187148
									],
									[
										187153,
										187154
									],
									[
										187185,
										187186
									],
									[
										187186,
										187187
									],
									[
										187194,
										187195
									],
									[
										187200,
										187201
									],
									[
										187232,
										187233
									],
									[
										187233,
										187234
									],
									[
										187273,
										187274
									],
									[
										187278,
										187279
									],
									[
										187300,
										187301
									],
									[
										187301,
										187302
									],
									[
										187328,
										187329
									],
									[
										187345,
										187346
									],
									[
										187349,
										187350
									],
									[
										187375,
										187376
									],
									[
										187376,
										187377
									],
									[
										187386,
										187387
									],
									[
										187392,
										187393
									],
									[
										187406,
										187407
									],
									[
										187412,
										187413
									],
									[
										187461,
										187462
									],
									[
										187475,
										187476
									],
									[
										187477,
										187478
									],
									[
										187485,
										187486
									],
									[
										187490,
										187491
									],
									[
										187513,
										187514
									],
									[
										187514,
										187515
									],
									[
										187536,
										187537
									],
									[
										187544,
										187545
									],
									[
										187551,
										187552
									],
									[
										187560,
										187561
									],
									[
										187565,
										187566
									],
									[
										187568,
										187569
									],
									[
										187570,
										187571
									],
									[
										187606,
										187607
									],
									[
										187607,
										187608
									],
									[
										187631,
										187632
									],
									[
										187646,
										187647
									],
									[
										187656,
										187657
									],
									[
										187661,
										187662
									],
									[
										187664,
										187665
									],
									[
										187666,
										187667
									],
									[
										187706,
										187707
									],
									[
										187707,
										187708
									],
									[
										187747,
										187748
									],
									[
										187752,
										187753
									],
									[
										187769,
										187770
									],
									[
										187775,
										187776
									],
									[
										187788,
										187789
									],
									[
										187789,
										187790
									],
									[
										187813,
										187814
									],
									[
										187814,
										187815
									],
									[
										187838,
										187839
									],
									[
										187850,
										187851
									],
									[
										187851,
										187852
									],
									[
										187865,
										187866
									],
									[
										187870,
										187871
									],
									[
										187873,
										187874
									],
									[
										187875,
										187876
									],
									[
										187915,
										187916
									],
									[
										187916,
										187917
									],
									[
										187940,
										187941
									],
									[
										187959,
										187960
									],
									[
										187964,
										187965
									],
									[
										187967,
										187968
									],
									[
										187969,
										187970
									],
									[
										188009,
										188010
									],
									[
										188010,
										188011
									],
									[
										188034,
										188035
									],
									[
										188042,
										188043
									],
									[
										188043,
										188044
									],
									[
										188061,
										188062
									],
									[
										188066,
										188067
									],
									[
										188069,
										188070
									],
									[
										188071,
										188072
									],
									[
										188111,
										188112
									],
									[
										188112,
										188113
									],
									[
										188152,
										188153
									],
									[
										188157,
										188158
									],
									[
										188176,
										188177
									],
									[
										188182,
										188183
									],
									[
										188195,
										188196
									],
									[
										188196,
										188197
									],
									[
										188225,
										188226
									],
									[
										188274,
										188275
									],
									[
										188302,
										188303
									],
									[
										188315,
										188316
									],
									[
										188398,
										188399
									],
									[
										188407,
										188408
									],
									[
										188417,
										188418
									],
									[
										188437,
										188438
									],
									[
										188458,
										188459
									],
									[
										188459,
										188460
									],
									[
										188469,
										188470
									],
									[
										188517,
										188518
									],
									[
										188526,
										188527
									],
									[
										188555,
										188556
									],
									[
										188576,
										188577
									],
									[
										188577,
										188578
									],
									[
										188588,
										188589
									],
									[
										188622,
										188623
									],
									[
										188623,
										188624
									],
									[
										188663,
										188664
									],
									[
										188674,
										188675
									],
									[
										188687,
										188688
									],
									[
										188688,
										188689
									],
									[
										188717,
										188718
									],
									[
										188731,
										188732
									],
									[
										188733,
										188734
									],
									[
										188741,
										188742
									],
									[
										188756,
										188757
									],
									[
										188760,
										188761
									],
									[
										188786,
										188787
									],
									[
										188787,
										188788
									],
									[
										188797,
										188798
									],
									[
										188817,
										188818
									],
									[
										188821,
										188822
									],
									[
										188835,
										188836
									],
									[
										188856,
										188857
									],
									[
										188877,
										188878
									],
									[
										188878,
										188879
									],
									[
										188918,
										188919
									],
									[
										188929,
										188930
									],
									[
										188942,
										188943
									],
									[
										188943,
										188944
									],
									[
										188972,
										188973
									],
									[
										188986,
										188987
									],
									[
										188988,
										188989
									],
									[
										188996,
										188997
									],
									[
										189011,
										189012
									],
									[
										189015,
										189016
									],
									[
										189041,
										189042
									],
									[
										189042,
										189043
									],
									[
										189052,
										189053
									],
									[
										189072,
										189073
									],
									[
										189076,
										189077
									],
									[
										189090,
										189091
									],
									[
										189111,
										189112
									],
									[
										189132,
										189133
									],
									[
										189133,
										189134
									],
									[
										189143,
										189144
									],
									[
										189172,
										189173
									],
									[
										189185,
										189186
									],
									[
										189190,
										189191
									],
									[
										189191,
										189192
									],
									[
										189203,
										189204
									],
									[
										189217,
										189218
									],
									[
										189238,
										189239
									],
									[
										189239,
										189240
									],
									[
										189363,
										189364
									],
									[
										189442,
										189443
									],
									[
										189473,
										189474
									],
									[
										189476,
										189477
									],
									[
										189504,
										189505
									],
									[
										189515,
										189516
									],
									[
										189536,
										189537
									],
									[
										189550,
										189551
									],
									[
										189554,
										189555
									],
									[
										189567,
										189568
									],
									[
										189570,
										189571
									],
									[
										189571,
										189572
									],
									[
										189622,
										189623
									],
									[
										189679,
										189680
									],
									[
										189690,
										189691
									],
									[
										189707,
										189708
									],
									[
										189719,
										189720
									],
									[
										189788,
										189789
									],
									[
										189841,
										189842
									],
									[
										189856,
										189857
									],
									[
										189859,
										189860
									],
									[
										189878,
										189879
									],
									[
										189883,
										189884
									],
									[
										189946,
										189947
									],
									[
										190015,
										190016
									],
									[
										190036,
										190037
									],
									[
										190050,
										190051
									],
									[
										190064,
										190065
									],
									[
										190065,
										190066
									],
									[
										190079,
										190080
									],
									[
										190137,
										190138
									],
									[
										190146,
										190147
									],
									[
										190162,
										190163
									],
									[
										190164,
										190165
									],
									[
										190169,
										190170
									],
									[
										190170,
										190171
									],
									[
										190203,
										190204
									],
									[
										190251,
										190252
									],
									[
										190290,
										190291
									],
									[
										190308,
										190309
									],
									[
										190321,
										190322
									],
									[
										190379,
										190380
									],
									[
										190383,
										190384
									],
									[
										190409,
										190410
									],
									[
										190505,
										190506
									],
									[
										190536,
										190537
									],
									[
										190576,
										190577
									],
									[
										190579,
										190580
									],
									[
										190581,
										190582
									],
									[
										190589,
										190590
									],
									[
										190612,
										190613
									],
									[
										190632,
										190633
									],
									[
										190652,
										190653
									],
									[
										190691,
										190692
									],
									[
										190706,
										190707
									],
									[
										190730,
										190731
									],
									[
										190746,
										190747
									],
									[
										190887,
										190888
									],
									[
										190895,
										190896
									],
									[
										190933,
										190934
									],
									[
										190934,
										190935
									],
									[
										190966,
										190967
									],
									[
										190985,
										190986
									],
									[
										191014,
										191015
									],
									[
										191092,
										191093
									],
									[
										191119,
										191120
									],
									[
										191122,
										191123
									],
									[
										191168,
										191169
									],
									[
										191171,
										191172
									],
									[
										191223,
										191224
									],
									[
										191226,
										191227
									],
									[
										191252,
										191253
									],
									[
										191280,
										191281
									],
									[
										191283,
										191284
									],
									[
										191333,
										191334
									],
									[
										191336,
										191337
									],
									[
										191382,
										191383
									],
									[
										191385,
										191386
									],
									[
										191409,
										191410
									],
									[
										191437,
										191438
									],
									[
										191440,
										191441
									],
									[
										191460,
										191461
									],
									[
										191488,
										191489
									],
									[
										191491,
										191492
									],
									[
										191545,
										191546
									],
									[
										191548,
										191549
									],
									[
										191623,
										191624
									],
									[
										191628,
										191629
									],
									[
										191631,
										191632
									],
									[
										191657,
										191658
									],
									[
										191666,
										191667
									],
									[
										191675,
										191676
									],
									[
										191678,
										191679
									],
									[
										191717,
										191718
									],
									[
										191723,
										191724
									],
									[
										191726,
										191727
									],
									[
										191750,
										191751
									],
									[
										191797,
										191798
									],
									[
										191841,
										191842
									],
									[
										191845,
										191846
									],
									[
										191849,
										191850
									],
									[
										191860,
										191861
									],
									[
										191905,
										191906
									],
									[
										191960,
										191961
									],
									[
										192024,
										192025
									],
									[
										192071,
										192072
									],
									[
										192175,
										192176
									],
									[
										192176,
										192177
									],
									[
										192182,
										192183
									],
									[
										192226,
										192227
									],
									[
										192260,
										192261
									],
									[
										192262,
										192263
									],
									[
										192276,
										192277
									],
									[
										192277,
										192278
									],
									[
										192304,
										192305
									],
									[
										192319,
										192320
									],
									[
										192346,
										192347
									],
									[
										192365,
										192366
									],
									[
										192421,
										192422
									],
									[
										192427,
										192428
									],
									[
										192457,
										192458
									],
									[
										192470,
										192471
									],
									[
										192480,
										192481
									],
									[
										192488,
										192489
									],
									[
										192499,
										192500
									],
									[
										192509,
										192510
									],
									[
										192518,
										192519
									],
									[
										192552,
										192553
									],
									[
										192555,
										192556
									],
									[
										192569,
										192570
									],
									[
										192579,
										192580
									],
									[
										192586,
										192587
									],
									[
										192597,
										192598
									],
									[
										192601,
										192602
									],
									[
										192642,
										192643
									],
									[
										192694,
										192695
									],
									[
										192701,
										192702
									],
									[
										192702,
										192703
									],
									[
										192714,
										192715
									],
									[
										192751,
										192752
									],
									[
										192756,
										192757
									],
									[
										192759,
										192760
									],
									[
										192775,
										192776
									],
									[
										192784,
										192785
									],
									[
										192813,
										192814
									],
									[
										192823,
										192824
									],
									[
										192836,
										192837
									],
									[
										192839,
										192840
									],
									[
										192885,
										192886
									],
									[
										192886,
										192887
									],
									[
										192942,
										192943
									],
									[
										192976,
										192977
									],
									[
										192977,
										192978
									],
									[
										193001,
										193002
									],
									[
										193044,
										193045
									],
									[
										193060,
										193061
									],
									[
										193081,
										193082
									],
									[
										193121,
										193122
									],
									[
										193199,
										193200
									],
									[
										193206,
										193207
									],
									[
										193257,
										193258
									],
									[
										193274,
										193275
									],
									[
										193293,
										193294
									],
									[
										193302,
										193303
									],
									[
										193438,
										193439
									],
									[
										193472,
										193473
									],
									[
										193486,
										193487
									],
									[
										193600,
										193601
									],
									[
										193602,
										193603
									],
									[
										193607,
										193608
									],
									[
										193612,
										193613
									],
									[
										193614,
										193615
									],
									[
										193615,
										193616
									],
									[
										193631,
										193632
									],
									[
										193633,
										193634
									],
									[
										193634,
										193635
									],
									[
										193657,
										193658
									],
									[
										193690,
										193691
									],
									[
										193691,
										193692
									],
									[
										193709,
										193710
									],
									[
										193756,
										193757
									],
									[
										193757,
										193758
									],
									[
										193775,
										193776
									],
									[
										193834,
										193835
									],
									[
										193835,
										193836
									],
									[
										193872,
										193873
									],
									[
										193873,
										193874
									],
									[
										193898,
										193899
									],
									[
										193909,
										193910
									],
									[
										193910,
										193911
									],
									[
										193915,
										193916
									],
									[
										193919,
										193920
									],
									[
										193948,
										193949
									],
									[
										193959,
										193960
									],
									[
										194018,
										194019
									],
									[
										194030,
										194031
									],
									[
										194105,
										194106
									],
									[
										194230,
										194231
									],
									[
										194284,
										194285
									],
									[
										194297,
										194298
									],
									[
										194332,
										194333
									],
									[
										194449,
										194450
									],
									[
										194505,
										194506
									],
									[
										194535,
										194536
									],
									[
										194542,
										194543
									],
									[
										194654,
										194655
									],
									[
										194667,
										194668
									],
									[
										194712,
										194713
									],
									[
										194725,
										194726
									],
									[
										194848,
										194849
									],
									[
										194890,
										194891
									],
									[
										194970,
										194971
									],
									[
										195005,
										195006
									],
									[
										195086,
										195087
									],
									[
										195104,
										195105
									],
									[
										195126,
										195127
									],
									[
										195162,
										195163
									],
									[
										195164,
										195165
									],
									[
										195169,
										195170
									],
									[
										195222,
										195223
									],
									[
										195234,
										195235
									],
									[
										195273,
										195274
									],
									[
										195281,
										195282
									],
									[
										195355,
										195356
									],
									[
										195361,
										195362
									],
									[
										195395,
										195396
									],
									[
										195426,
										195427
									],
									[
										195432,
										195433
									],
									[
										195457,
										195458
									],
									[
										195470,
										195471
									],
									[
										195476,
										195477
									],
									[
										195493,
										195494
									],
									[
										195504,
										195505
									],
									[
										195523,
										195524
									],
									[
										195553,
										195554
									],
									[
										195574,
										195575
									],
									[
										195633,
										195634
									],
									[
										195664,
										195665
									],
									[
										195686,
										195687
									],
									[
										195702,
										195703
									],
									[
										195752,
										195753
									],
									[
										195774,
										195775
									],
									[
										195784,
										195785
									],
									[
										195826,
										195827
									],
									[
										195835,
										195836
									],
									[
										195866,
										195867
									],
									[
										195875,
										195876
									],
									[
										195924,
										195925
									],
									[
										195970,
										195971
									],
									[
										196090,
										196091
									],
									[
										196141,
										196142
									],
									[
										196181,
										196182
									],
									[
										196185,
										196186
									],
									[
										196228,
										196229
									],
									[
										196247,
										196248
									],
									[
										196290,
										196291
									],
									[
										196420,
										196421
									],
									[
										196427,
										196428
									],
									[
										196428,
										196429
									],
									[
										196554,
										196555
									],
									[
										196589,
										196590
									],
									[
										196620,
										196621
									],
									[
										196664,
										196665
									],
									[
										196672,
										196673
									],
									[
										196722,
										196723
									],
									[
										196732,
										196733
									],
									[
										196743,
										196744
									],
									[
										196785,
										196786
									],
									[
										196811,
										196812
									],
									[
										196834,
										196835
									],
									[
										196839,
										196840
									],
									[
										196862,
										196863
									],
									[
										196938,
										196939
									],
									[
										196964,
										196965
									],
									[
										196974,
										196975
									],
									[
										197042,
										197043
									],
									[
										197114,
										197115
									],
									[
										197132,
										197133
									],
									[
										197160,
										197161
									],
									[
										197172,
										197173
									],
									[
										197257,
										197258
									],
									[
										197308,
										197309
									],
									[
										197334,
										197335
									],
									[
										197367,
										197368
									],
									[
										197414,
										197415
									],
									[
										197587,
										197588
									],
									[
										197686,
										197687
									],
									[
										197735,
										197736
									],
									[
										197768,
										197769
									],
									[
										197824,
										197825
									],
									[
										197842,
										197843
									],
									[
										197860,
										197861
									],
									[
										197882,
										197883
									],
									[
										197957,
										197958
									],
									[
										198029,
										198030
									],
									[
										198081,
										198082
									],
									[
										198132,
										198133
									],
									[
										198211,
										198212
									],
									[
										198292,
										198293
									],
									[
										198456,
										198457
									],
									[
										198485,
										198486
									],
									[
										198487,
										198488
									],
									[
										198528,
										198529
									],
									[
										198529,
										198530
									],
									[
										198568,
										198569
									],
									[
										198570,
										198571
									],
									[
										198592,
										198593
									],
									[
										198605,
										198606
									],
									[
										198607,
										198608
									],
									[
										198631,
										198632
									],
									[
										198675,
										198676
									],
									[
										198700,
										198701
									],
									[
										198929,
										198930
									],
									[
										199089,
										199090
									],
									[
										199153,
										199154
									],
									[
										199179,
										199180
									],
									[
										199210,
										199211
									],
									[
										199231,
										199232
									],
									[
										199266,
										199267
									],
									[
										199289,
										199290
									],
									[
										199321,
										199322
									],
									[
										199364,
										199365
									],
									[
										199426,
										199427
									],
									[
										199428,
										199429
									],
									[
										199446,
										199447
									],
									[
										199507,
										199508
									],
									[
										199541,
										199542
									],
									[
										199609,
										199610
									],
									[
										199628,
										199629
									],
									[
										199744,
										199745
									],
									[
										199810,
										199811
									],
									[
										199845,
										199846
									],
									[
										199867,
										199868
									],
									[
										199894,
										199895
									],
									[
										199915,
										199916
									],
									[
										199946,
										199947
									],
									[
										199965,
										199966
									],
									[
										199993,
										199994
									],
									[
										200032,
										200033
									],
									[
										200122,
										200123
									],
									[
										200136,
										200137
									],
									[
										200144,
										200145
									],
									[
										200153,
										200154
									],
									[
										200166,
										200167
									],
									[
										200177,
										200178
									],
									[
										200202,
										200203
									],
									[
										200205,
										200206
									],
									[
										200266,
										200267
									],
									[
										200296,
										200297
									],
									[
										200311,
										200312
									],
									[
										200367,
										200368
									],
									[
										200369,
										200370
									],
									[
										200387,
										200388
									],
									[
										200530,
										200531
									],
									[
										200559,
										200560
									],
									[
										200598,
										200599
									],
									[
										200601,
										200602
									],
									[
										200602,
										200603
									],
									[
										200605,
										200606
									],
									[
										200641,
										200642
									],
									[
										200661,
										200662
									],
									[
										200719,
										200720
									],
									[
										200758,
										200759
									],
									[
										200786,
										200787
									],
									[
										200806,
										200807
									],
									[
										200825,
										200826
									],
									[
										200828,
										200829
									],
									[
										200905,
										200906
									],
									[
										200913,
										200914
									],
									[
										200922,
										200923
									],
									[
										200935,
										200936
									],
									[
										200946,
										200947
									],
									[
										201061,
										201062
									],
									[
										201100,
										201101
									],
									[
										201121,
										201122
									],
									[
										201187,
										201188
									],
									[
										201277,
										201278
									],
									[
										201316,
										201317
									],
									[
										201319,
										201320
									],
									[
										201343,
										201344
									],
									[
										201454,
										201455
									],
									[
										201487,
										201488
									],
									[
										201560,
										201561
									],
									[
										201657,
										201658
									],
									[
										201686,
										201687
									],
									[
										201692,
										201693
									],
									[
										201713,
										201714
									],
									[
										201855,
										201856
									],
									[
										201926,
										201927
									],
									[
										202065,
										202066
									],
									[
										202138,
										202139
									],
									[
										202142,
										202143
									],
									[
										202152,
										202153
									],
									[
										202174,
										202175
									],
									[
										202178,
										202179
									],
									[
										202182,
										202183
									],
									[
										202183,
										202184
									],
									[
										202274,
										202275
									],
									[
										202358,
										202359
									],
									[
										202525,
										202526
									],
									[
										202562,
										202563
									],
									[
										202707,
										202708
									],
									[
										202711,
										202712
									],
									[
										202847,
										202848
									],
									[
										202875,
										202876
									],
									[
										202884,
										202885
									],
									[
										203006,
										203007
									],
									[
										203029,
										203030
									],
									[
										203042,
										203043
									],
									[
										203052,
										203053
									],
									[
										203071,
										203072
									],
									[
										203081,
										203082
									],
									[
										203082,
										203083
									],
									[
										203157,
										203158
									],
									[
										203185,
										203186
									],
									[
										203297,
										203298
									],
									[
										203309,
										203310
									],
									[
										203335,
										203336
									],
									[
										203457,
										203458
									],
									[
										203772,
										203773
									],
									[
										203773,
										203774
									],
									[
										203786,
										203787
									],
									[
										203790,
										203791
									],
									[
										203902,
										203903
									],
									[
										204158,
										204159
									],
									[
										204159,
										204160
									],
									[
										204169,
										204170
									],
									[
										204170,
										204171
									],
									[
										204182,
										204183
									],
									[
										204197,
										204198
									],
									[
										204271,
										204272
									],
									[
										204371,
										204372
									],
									[
										204461,
										204462
									],
									[
										204480,
										204481
									],
									[
										204488,
										204489
									],
									[
										204586,
										204587
									],
									[
										204599,
										204600
									],
									[
										204683,
										204684
									],
									[
										204684,
										204685
									],
									[
										204726,
										204727
									],
									[
										204732,
										204733
									],
									[
										204739,
										204740
									],
									[
										204813,
										204814
									],
									[
										204852,
										204853
									],
									[
										204866,
										204867
									],
									[
										205085,
										205086
									],
									[
										205089,
										205090
									],
									[
										205096,
										205097
									],
									[
										205107,
										205108
									],
									[
										205113,
										205114
									],
									[
										205155,
										205156
									],
									[
										205170,
										205171
									],
									[
										205174,
										205175
									],
									[
										205182,
										205183
									],
									[
										205215,
										205216
									],
									[
										205226,
										205227
									],
									[
										205227,
										205228
									],
									[
										205230,
										205231
									],
									[
										205402,
										205403
									],
									[
										205419,
										205420
									],
									[
										205420,
										205421
									],
									[
										205422,
										205423
									],
									[
										205433,
										205434
									],
									[
										205434,
										205435
									],
									[
										205576,
										205577
									],
									[
										205593,
										205594
									],
									[
										205605,
										205606
									],
									[
										205737,
										205738
									],
									[
										205738,
										205739
									],
									[
										205819,
										205820
									],
									[
										205849,
										205850
									],
									[
										205885,
										205886
									],
									[
										205887,
										205888
									],
									[
										205980,
										205981
									],
									[
										205981,
										205982
									],
									[
										206009,
										206010
									],
									[
										206025,
										206026
									],
									[
										206127,
										206128
									],
									[
										206147,
										206148
									],
									[
										206152,
										206153
									],
									[
										206218,
										206219
									],
									[
										206219,
										206220
									],
									[
										206273,
										206274
									],
									[
										206287,
										206288
									],
									[
										206294,
										206295
									],
									[
										206305,
										206306
									],
									[
										206315,
										206316
									],
									[
										206316,
										206317
									],
									[
										206318,
										206319
									],
									[
										206433,
										206434
									],
									[
										206574,
										206575
									],
									[
										206631,
										206632
									],
									[
										206644,
										206645
									],
									[
										206680,
										206681
									],
									[
										206691,
										206692
									],
									[
										206699,
										206700
									],
									[
										206714,
										206715
									],
									[
										206725,
										206726
									],
									[
										206739,
										206740
									],
									[
										206789,
										206790
									],
									[
										206820,
										206821
									],
									[
										206832,
										206833
									],
									[
										206884,
										206885
									],
									[
										206886,
										206887
									],
									[
										207084,
										207085
									],
									[
										207133,
										207134
									],
									[
										207239,
										207240
									],
									[
										207255,
										207256
									],
									[
										207272,
										207273
									],
									[
										207296,
										207297
									],
									[
										207373,
										207374
									],
									[
										207412,
										207413
									],
									[
										207415,
										207416
									],
									[
										207555,
										207556
									],
									[
										207629,
										207630
									],
									[
										207698,
										207699
									],
									[
										207700,
										207701
									],
									[
										207710,
										207711
									],
									[
										207719,
										207720
									],
									[
										207721,
										207722
									],
									[
										207774,
										207775
									],
									[
										207779,
										207780
									],
									[
										207788,
										207789
									],
									[
										207790,
										207791
									],
									[
										207810,
										207811
									],
									[
										207812,
										207813
									],
									[
										207898,
										207899
									],
									[
										207899,
										207900
									],
									[
										207911,
										207912
									],
									[
										207912,
										207913
									],
									[
										207940,
										207941
									],
									[
										207941,
										207942
									],
									[
										207943,
										207944
									],
									[
										207957,
										207958
									],
									[
										208060,
										208061
									],
									[
										208074,
										208075
									],
									[
										208084,
										208085
									],
									[
										208271,
										208272
									],
									[
										208272,
										208273
									],
									[
										208411,
										208412
									],
									[
										208521,
										208522
									],
									[
										208584,
										208585
									],
									[
										208596,
										208597
									],
									[
										208663,
										208664
									],
									[
										208706,
										208707
									],
									[
										208718,
										208719
									],
									[
										208727,
										208728
									],
									[
										208742,
										208743
									],
									[
										208773,
										208774
									],
									[
										208774,
										208775
									],
									[
										208973,
										208974
									],
									[
										208986,
										208987
									],
									[
										209121,
										209122
									],
									[
										209197,
										209198
									],
									[
										209349,
										209350
									],
									[
										209373,
										209374
									],
									[
										209396,
										209397
									],
									[
										209400,
										209401
									],
									[
										209421,
										209422
									],
									[
										209479,
										209480
									],
									[
										209672,
										209673
									],
									[
										209673,
										209674
									],
									[
										209678,
										209679
									],
									[
										209688,
										209689
									],
									[
										209696,
										209697
									],
									[
										209821,
										209822
									],
									[
										209883,
										209884
									],
									[
										209947,
										209948
									],
									[
										209978,
										209979
									],
									[
										209979,
										209980
									],
									[
										209996,
										209997
									],
									[
										210042,
										210043
									],
									[
										210043,
										210044
									],
									[
										210066,
										210067
									],
									[
										210068,
										210069
									],
									[
										210073,
										210074
									],
									[
										210086,
										210087
									],
									[
										210113,
										210114
									],
									[
										210126,
										210127
									],
									[
										210137,
										210138
									],
									[
										210232,
										210233
									],
									[
										210308,
										210309
									],
									[
										210383,
										210384
									],
									[
										210395,
										210396
									],
									[
										210469,
										210470
									],
									[
										210481,
										210482
									],
									[
										210510,
										210511
									],
									[
										210511,
										210512
									],
									[
										210538,
										210539
									],
									[
										210583,
										210584
									],
									[
										210584,
										210585
									],
									[
										210593,
										210594
									],
									[
										210738,
										210739
									],
									[
										210878,
										210879
									],
									[
										210879,
										210880
									],
									[
										210942,
										210943
									],
									[
										210943,
										210944
									],
									[
										210955,
										210956
									],
									[
										210959,
										210960
									],
									[
										210960,
										210961
									],
									[
										210974,
										210975
									],
									[
										210984,
										210985
									],
									[
										210987,
										210988
									],
									[
										211019,
										211020
									],
									[
										211028,
										211029
									],
									[
										211035,
										211036
									],
									[
										211044,
										211045
									],
									[
										211065,
										211066
									],
									[
										211109,
										211110
									],
									[
										211116,
										211117
									],
									[
										211121,
										211122
									],
									[
										211169,
										211170
									],
									[
										211173,
										211174
									],
									[
										211200,
										211201
									],
									[
										211221,
										211222
									],
									[
										211257,
										211258
									],
									[
										211318,
										211319
									],
									[
										211328,
										211329
									],
									[
										211330,
										211331
									],
									[
										211343,
										211344
									],
									[
										211372,
										211373
									],
									[
										211405,
										211406
									],
									[
										211431,
										211432
									],
									[
										211440,
										211441
									],
									[
										211484,
										211485
									],
									[
										211538,
										211539
									],
									[
										211624,
										211625
									],
									[
										211632,
										211633
									],
									[
										211637,
										211638
									],
									[
										211645,
										211646
									],
									[
										211650,
										211651
									],
									[
										211685,
										211686
									],
									[
										211693,
										211694
									],
									[
										211698,
										211699
									],
									[
										211707,
										211708
									],
									[
										211712,
										211713
									],
									[
										211741,
										211742
									],
									[
										211745,
										211746
									],
									[
										211762,
										211763
									],
									[
										211763,
										211764
									],
									[
										211788,
										211789
									],
									[
										211805,
										211806
									],
									[
										211806,
										211807
									],
									[
										211829,
										211830
									],
									[
										211831,
										211832
									],
									[
										211848,
										211849
									],
									[
										211849,
										211850
									],
									[
										211878,
										211879
									],
									[
										211912,
										211913
									],
									[
										211944,
										211945
									],
									[
										211960,
										211961
									],
									[
										211969,
										211970
									],
									[
										212188,
										212189
									],
									[
										212196,
										212197
									],
									[
										212309,
										212310
									],
									[
										212384,
										212385
									],
									[
										212443,
										212444
									],
									[
										212517,
										212518
									],
									[
										212539,
										212540
									],
									[
										212614,
										212615
									],
									[
										212687,
										212688
									],
									[
										212709,
										212710
									],
									[
										212714,
										212715
									],
									[
										212771,
										212772
									],
									[
										212833,
										212834
									],
									[
										212838,
										212839
									],
									[
										212907,
										212908
									],
									[
										212980,
										212981
									],
									[
										213044,
										213045
									],
									[
										213109,
										213110
									],
									[
										213112,
										213113
									],
									[
										213148,
										213149
									],
									[
										213149,
										213150
									],
									[
										213193,
										213194
									],
									[
										213228,
										213229
									],
									[
										213245,
										213246
									],
									[
										213254,
										213255
									],
									[
										213262,
										213263
									],
									[
										213281,
										213282
									],
									[
										213289,
										213290
									],
									[
										213297,
										213298
									],
									[
										213312,
										213313
									],
									[
										213382,
										213383
									],
									[
										213397,
										213398
									],
									[
										213405,
										213406
									],
									[
										213476,
										213477
									],
									[
										213489,
										213490
									],
									[
										213496,
										213497
									],
									[
										213617,
										213618
									],
									[
										213626,
										213627
									],
									[
										213634,
										213635
									],
									[
										213668,
										213669
									],
									[
										213712,
										213713
									],
									[
										213804,
										213805
									],
									[
										213826,
										213827
									],
									[
										213842,
										213843
									],
									[
										213850,
										213851
									],
									[
										213875,
										213876
									],
									[
										213892,
										213893
									],
									[
										213896,
										213897
									],
									[
										213904,
										213905
									],
									[
										213935,
										213936
									],
									[
										213960,
										213961
									],
									[
										213970,
										213971
									],
									[
										213971,
										213972
									],
									[
										213989,
										213990
									],
									[
										213990,
										213991
									],
									[
										214004,
										214005
									],
									[
										214085,
										214086
									],
									[
										214125,
										214126
									],
									[
										214167,
										214168
									],
									[
										214169,
										214170
									],
									[
										214199,
										214200
									],
									[
										214201,
										214202
									],
									[
										214241,
										214242
									],
									[
										214427,
										214428
									],
									[
										214448,
										214449
									],
									[
										214450,
										214451
									],
									[
										214467,
										214468
									],
									[
										214494,
										214495
									],
									[
										214498,
										214499
									],
									[
										214561,
										214562
									],
									[
										214588,
										214589
									],
									[
										214596,
										214597
									],
									[
										214610,
										214611
									],
									[
										214615,
										214616
									],
									[
										214655,
										214656
									],
									[
										214657,
										214658
									],
									[
										214671,
										214672
									],
									[
										214675,
										214676
									],
									[
										214808,
										214809
									],
									[
										214891,
										214892
									],
									[
										214908,
										214909
									],
									[
										214942,
										214943
									],
									[
										215118,
										215119
									],
									[
										215123,
										215124
									],
									[
										215127,
										215128
									],
									[
										215150,
										215151
									],
									[
										215161,
										215162
									],
									[
										215168,
										215169
									],
									[
										215170,
										215171
									],
									[
										215181,
										215182
									],
									[
										215190,
										215191
									],
									[
										215192,
										215193
									],
									[
										215259,
										215260
									],
									[
										215262,
										215263
									],
									[
										215273,
										215274
									],
									[
										215276,
										215277
									],
									[
										215281,
										215282
									],
									[
										215283,
										215284
									],
									[
										215305,
										215306
									],
									[
										215308,
										215309
									],
									[
										215423,
										215424
									],
									[
										215438,
										215439
									],
									[
										215452,
										215453
									],
									[
										215472,
										215473
									],
									[
										215484,
										215485
									],
									[
										215486,
										215487
									],
									[
										215520,
										215521
									],
									[
										215534,
										215535
									],
									[
										215556,
										215557
									],
									[
										215565,
										215566
									],
									[
										215597,
										215598
									],
									[
										215613,
										215614
									],
									[
										215614,
										215615
									],
									[
										215710,
										215711
									],
									[
										215751,
										215752
									],
									[
										215832,
										215833
									],
									[
										215854,
										215855
									],
									[
										215870,
										215871
									],
									[
										215890,
										215891
									],
									[
										215912,
										215913
									],
									[
										215926,
										215927
									],
									[
										216016,
										216017
									],
									[
										216067,
										216068
									],
									[
										216112,
										216113
									],
									[
										216144,
										216145
									],
									[
										216188,
										216189
									],
									[
										216301,
										216302
									],
									[
										216351,
										216352
									],
									[
										216360,
										216361
									],
									[
										216379,
										216380
									],
									[
										216464,
										216465
									],
									[
										216471,
										216472
									],
									[
										216473,
										216474
									],
									[
										216493,
										216494
									],
									[
										216495,
										216496
									],
									[
										216508,
										216509
									],
									[
										216601,
										216602
									],
									[
										216627,
										216628
									],
									[
										216739,
										216740
									],
									[
										216774,
										216775
									],
									[
										216795,
										216796
									],
									[
										216861,
										216862
									],
									[
										216892,
										216893
									],
									[
										216949,
										216950
									],
									[
										216977,
										216978
									],
									[
										216979,
										216980
									],
									[
										217132,
										217133
									],
									[
										217134,
										217135
									],
									[
										217143,
										217144
									],
									[
										217146,
										217147
									],
									[
										217154,
										217155
									],
									[
										217163,
										217164
									],
									[
										217205,
										217206
									],
									[
										217234,
										217235
									],
									[
										217298,
										217299
									],
									[
										217305,
										217306
									],
									[
										217364,
										217365
									],
									[
										217439,
										217440
									],
									[
										217592,
										217593
									],
									[
										217593,
										217594
									],
									[
										217598,
										217599
									],
									[
										217629,
										217630
									],
									[
										217631,
										217632
									],
									[
										217643,
										217644
									],
									[
										217652,
										217653
									],
									[
										217654,
										217655
									],
									[
										217679,
										217680
									],
									[
										217770,
										217771
									],
									[
										217807,
										217808
									],
									[
										217820,
										217821
									],
									[
										217913,
										217914
									],
									[
										217922,
										217923
									],
									[
										217936,
										217937
									],
									[
										217962,
										217963
									],
									[
										218045,
										218046
									],
									[
										218162,
										218163
									],
									[
										218164,
										218165
									],
									[
										218222,
										218223
									],
									[
										218291,
										218292
									],
									[
										218292,
										218293
									],
									[
										218297,
										218298
									],
									[
										218302,
										218303
									],
									[
										218319,
										218320
									],
									[
										218335,
										218336
									],
									[
										218338,
										218339
									],
									[
										218345,
										218346
									],
									[
										218347,
										218348
									],
									[
										218359,
										218360
									],
									[
										218383,
										218384
									],
									[
										218414,
										218415
									],
									[
										218415,
										218416
									],
									[
										218419,
										218420
									],
									[
										218539,
										218540
									],
									[
										218559,
										218560
									],
									[
										218563,
										218564
									],
									[
										218566,
										218567
									],
									[
										218631,
										218632
									],
									[
										218671,
										218672
									],
									[
										218688,
										218689
									],
									[
										218844,
										218845
									],
									[
										218947,
										218948
									],
									[
										219068,
										219069
									],
									[
										219086,
										219087
									],
									[
										219094,
										219095
									],
									[
										219104,
										219105
									],
									[
										219143,
										219144
									],
									[
										219160,
										219161
									],
									[
										219170,
										219171
									],
									[
										219213,
										219214
									],
									[
										219241,
										219242
									],
									[
										219279,
										219280
									],
									[
										219328,
										219329
									],
									[
										219553,
										219554
									],
									[
										219567,
										219568
									],
									[
										219623,
										219624
									],
									[
										219688,
										219689
									],
									[
										219864,
										219865
									],
									[
										219877,
										219878
									],
									[
										219891,
										219892
									],
									[
										219929,
										219930
									],
									[
										219943,
										219944
									],
									[
										219953,
										219954
									],
									[
										219986,
										219987
									],
									[
										219989,
										219990
									],
									[
										220158,
										220159
									],
									[
										220203,
										220204
									],
									[
										220274,
										220275
									],
									[
										220321,
										220322
									],
									[
										220324,
										220325
									],
									[
										220334,
										220335
									],
									[
										220336,
										220337
									],
									[
										220579,
										220580
									],
									[
										220666,
										220667
									],
									[
										220742,
										220743
									],
									[
										220746,
										220747
									],
									[
										220759,
										220760
									],
									[
										220779,
										220780
									],
									[
										220796,
										220797
									],
									[
										220820,
										220821
									],
									[
										220821,
										220822
									],
									[
										220827,
										220828
									],
									[
										220871,
										220872
									],
									[
										220898,
										220899
									],
									[
										220900,
										220901
									],
									[
										220914,
										220915
									],
									[
										220915,
										220916
									],
									[
										220942,
										220943
									],
									[
										220950,
										220951
									],
									[
										220977,
										220978
									],
									[
										220996,
										220997
									],
									[
										221045,
										221046
									],
									[
										221051,
										221052
									],
									[
										221081,
										221082
									],
									[
										221087,
										221088
									],
									[
										221097,
										221098
									],
									[
										221105,
										221106
									],
									[
										221116,
										221117
									],
									[
										221126,
										221127
									],
									[
										221135,
										221136
									],
									[
										221162,
										221163
									],
									[
										221165,
										221166
									],
									[
										221179,
										221180
									],
									[
										221189,
										221190
									],
									[
										221196,
										221197
									],
									[
										221207,
										221208
									],
									[
										221211,
										221212
									],
									[
										221245,
										221246
									],
									[
										221297,
										221298
									],
									[
										221304,
										221305
									],
									[
										221305,
										221306
									],
									[
										221317,
										221318
									],
									[
										221347,
										221348
									],
									[
										221352,
										221353
									],
									[
										221355,
										221356
									],
									[
										221371,
										221372
									],
									[
										221380,
										221381
									],
									[
										221409,
										221410
									],
									[
										221419,
										221420
									],
									[
										221432,
										221433
									],
									[
										221435,
										221436
									],
									[
										221474,
										221475
									],
									[
										221475,
										221476
									],
									[
										221531,
										221532
									],
									[
										221558,
										221559
									],
									[
										221559,
										221560
									],
									[
										221583,
										221584
									],
									[
										221619,
										221620
									],
									[
										221635,
										221636
									],
									[
										221656,
										221657
									],
									[
										221689,
										221690
									],
									[
										221760,
										221761
									],
									[
										221767,
										221768
									],
									[
										221811,
										221812
									],
									[
										221828,
										221829
									],
									[
										221847,
										221848
									],
									[
										221856,
										221857
									],
									[
										221954,
										221955
									],
									[
										221963,
										221964
									],
									[
										221975,
										221976
									],
									[
										222083,
										222084
									],
									[
										222084,
										222085
									],
									[
										222126,
										222127
									],
									[
										222130,
										222131
									],
									[
										222139,
										222140
									],
									[
										222140,
										222141
									],
									[
										222145,
										222146
									],
									[
										222149,
										222150
									],
									[
										222214,
										222215
									],
									[
										222246,
										222247
									],
									[
										222269,
										222270
									],
									[
										222289,
										222290
									],
									[
										222302,
										222303
									],
									[
										222373,
										222374
									],
									[
										222406,
										222407
									],
									[
										222437,
										222438
									],
									[
										222472,
										222473
									],
									[
										222505,
										222506
									],
									[
										222524,
										222525
									],
									[
										222571,
										222572
									],
									[
										222576,
										222577
									],
									[
										222583,
										222584
									],
									[
										222596,
										222597
									],
									[
										222610,
										222611
									],
									[
										222616,
										222617
									],
									[
										222629,
										222630
									],
									[
										222648,
										222649
									],
									[
										222662,
										222663
									],
									[
										222685,
										222686
									],
									[
										222690,
										222691
									],
									[
										222697,
										222698
									],
									[
										222728,
										222729
									],
									[
										222730,
										222731
									],
									[
										222735,
										222736
									],
									[
										222746,
										222747
									],
									[
										222760,
										222761
									],
									[
										222821,
										222822
									],
									[
										222842,
										222843
									],
									[
										222855,
										222856
									],
									[
										222895,
										222896
									],
									[
										222919,
										222920
									],
									[
										222920,
										222921
									],
									[
										222925,
										222926
									],
									[
										222929,
										222930
									],
									[
										222967,
										222968
									],
									[
										223003,
										223004
									],
									[
										223014,
										223015
									],
									[
										223019,
										223020
									],
									[
										223039,
										223040
									],
									[
										223040,
										223041
									],
									[
										223069,
										223070
									],
									[
										223076,
										223077
									],
									[
										223098,
										223099
									],
									[
										223120,
										223121
									],
									[
										223138,
										223139
									],
									[
										223182,
										223183
									],
									[
										223194,
										223195
									],
									[
										223204,
										223205
									],
									[
										223206,
										223207
									],
									[
										223226,
										223227
									],
									[
										223271,
										223272
									],
									[
										223301,
										223302
									],
									[
										223311,
										223312
									],
									[
										223318,
										223319
									],
									[
										223337,
										223338
									],
									[
										223345,
										223346
									],
									[
										223428,
										223429
									],
									[
										223430,
										223431
									],
									[
										223436,
										223437
									],
									[
										223438,
										223439
									],
									[
										223525,
										223526
									],
									[
										223546,
										223547
									],
									[
										223556,
										223557
									],
									[
										223583,
										223584
									],
									[
										223605,
										223606
									],
									[
										223625,
										223626
									],
									[
										223645,
										223646
									],
									[
										223677,
										223678
									],
									[
										223723,
										223724
									],
									[
										223741,
										223742
									],
									[
										223749,
										223750
									],
									[
										223834,
										223835
									],
									[
										223851,
										223852
									],
									[
										223892,
										223893
									],
									[
										223940,
										223941
									],
									[
										224029,
										224030
									],
									[
										224035,
										224036
									],
									[
										224162,
										224163
									],
									[
										224173,
										224174
									],
									[
										224232,
										224233
									],
									[
										224239,
										224240
									],
									[
										224259,
										224260
									],
									[
										224279,
										224280
									],
									[
										224318,
										224319
									],
									[
										224349,
										224350
									],
									[
										224369,
										224370
									],
									[
										224434,
										224435
									],
									[
										224438,
										224439
									],
									[
										224482,
										224483
									],
									[
										224499,
										224500
									],
									[
										224511,
										224512
									],
									[
										224520,
										224521
									],
									[
										224543,
										224544
									],
									[
										224563,
										224564
									],
									[
										224576,
										224577
									],
									[
										224588,
										224589
									],
									[
										224591,
										224592
									],
									[
										224600,
										224601
									],
									[
										224625,
										224626
									],
									[
										224681,
										224682
									],
									[
										224699,
										224700
									],
									[
										224720,
										224721
									],
									[
										224735,
										224736
									],
									[
										224738,
										224739
									],
									[
										224747,
										224748
									],
									[
										224778,
										224779
									],
									[
										224790,
										224791
									],
									[
										224841,
										224842
									],
									[
										224867,
										224868
									],
									[
										224918,
										224919
									],
									[
										224922,
										224923
									],
									[
										224955,
										224956
									],
									[
										224990,
										224991
									],
									[
										225021,
										225022
									],
									[
										225035,
										225036
									],
									[
										225038,
										225039
									],
									[
										225049,
										225050
									],
									[
										225069,
										225070
									],
									[
										225082,
										225083
									],
									[
										225089,
										225090
									],
									[
										225107,
										225108
									],
									[
										225127,
										225128
									],
									[
										225134,
										225135
									],
									[
										225147,
										225148
									],
									[
										225157,
										225158
									],
									[
										225273,
										225274
									],
									[
										225279,
										225280
									],
									[
										225318,
										225319
									],
									[
										225337,
										225338
									],
									[
										225350,
										225351
									],
									[
										225370,
										225371
									],
									[
										225404,
										225405
									],
									[
										225417,
										225418
									],
									[
										225430,
										225431
									],
									[
										225497,
										225498
									],
									[
										225503,
										225504
									],
									[
										225557,
										225558
									],
									[
										225566,
										225567
									],
									[
										225581,
										225582
									],
									[
										225609,
										225610
									],
									[
										225646,
										225647
									],
									[
										225657,
										225658
									],
									[
										225658,
										225659
									],
									[
										225670,
										225671
									],
									[
										225701,
										225702
									],
									[
										225723,
										225724
									],
									[
										225738,
										225739
									],
									[
										225750,
										225751
									],
									[
										225775,
										225776
									],
									[
										225809,
										225810
									],
									[
										225820,
										225821
									],
									[
										225829,
										225830
									],
									[
										225842,
										225843
									],
									[
										225855,
										225856
									],
									[
										225857,
										225858
									],
									[
										225898,
										225899
									],
									[
										225906,
										225907
									],
									[
										225925,
										225926
									],
									[
										225933,
										225934
									],
									[
										225953,
										225954
									],
									[
										225960,
										225961
									],
									[
										225973,
										225974
									],
									[
										226003,
										226004
									],
									[
										226062,
										226063
									],
									[
										226086,
										226087
									],
									[
										226115,
										226116
									],
									[
										226158,
										226159
									],
									[
										226163,
										226164
									],
									[
										226170,
										226171
									],
									[
										226171,
										226172
									],
									[
										226180,
										226181
									],
									[
										226184,
										226185
									],
									[
										226192,
										226193
									],
									[
										226214,
										226215
									],
									[
										226225,
										226226
									],
									[
										226226,
										226227
									],
									[
										226239,
										226240
									],
									[
										226248,
										226249
									],
									[
										226275,
										226276
									],
									[
										226281,
										226282
									],
									[
										226313,
										226314
									],
									[
										226343,
										226344
									],
									[
										226345,
										226346
									],
									[
										226362,
										226363
									],
									[
										226384,
										226385
									],
									[
										226420,
										226421
									],
									[
										226424,
										226425
									],
									[
										226431,
										226432
									],
									[
										226438,
										226439
									],
									[
										226454,
										226455
									],
									[
										226518,
										226519
									],
									[
										226551,
										226552
									],
									[
										226667,
										226668
									],
									[
										226783,
										226784
									],
									[
										226880,
										226881
									],
									[
										226913,
										226914
									],
									[
										226993,
										226994
									],
									[
										227073,
										227074
									],
									[
										227086,
										227087
									],
									[
										227097,
										227098
									],
									[
										227153,
										227154
									],
									[
										227251,
										227252
									],
									[
										227273,
										227274
									],
									[
										227293,
										227294
									],
									[
										227349,
										227350
									],
									[
										227455,
										227456
									],
									[
										227555,
										227556
									],
									[
										227651,
										227652
									],
									[
										227743,
										227744
									],
									[
										227762,
										227763
									],
									[
										227779,
										227780
									],
									[
										227835,
										227836
									],
									[
										227935,
										227936
									],
									[
										228029,
										228030
									],
									[
										228125,
										228126
									],
									[
										228156,
										228157
									],
									[
										228169,
										228170
									],
									[
										228195,
										228196
									],
									[
										228251,
										228252
									],
									[
										228264,
										228265
									],
									[
										228300,
										228301
									],
									[
										228365,
										228366
									],
									[
										228378,
										228379
									],
									[
										228386,
										228387
									],
									[
										228387,
										228388
									],
									[
										228406,
										228407
									],
									[
										228413,
										228414
									],
									[
										228414,
										228415
									],
									[
										228464,
										228465
									],
									[
										228477,
										228478
									],
									[
										228519,
										228520
									],
									[
										228589,
										228590
									],
									[
										228602,
										228603
									],
									[
										228646,
										228647
									],
									[
										228718,
										228719
									],
									[
										228731,
										228732
									],
									[
										228759,
										228760
									],
									[
										228817,
										228818
									],
									[
										228830,
										228831
									],
									[
										228868,
										228869
									],
									[
										228935,
										228936
									],
									[
										228948,
										228949
									],
									[
										228954,
										228955
									],
									[
										228985,
										228986
									],
									[
										228990,
										228991
									],
									[
										229051,
										229052
									],
									[
										229064,
										229065
									],
									[
										229096,
										229097
									],
									[
										229157,
										229158
									],
									[
										229170,
										229171
									],
									[
										229180,
										229181
									],
									[
										229214,
										229215
									],
									[
										229222,
										229223
									],
									[
										229275,
										229276
									],
									[
										229280,
										229281
									],
									[
										229315,
										229316
									],
									[
										229354,
										229355
									],
									[
										229364,
										229365
									],
									[
										229365,
										229366
									],
									[
										229370,
										229371
									],
									[
										229381,
										229382
									],
									[
										229397,
										229398
									],
									[
										229398,
										229399
									],
									[
										229408,
										229409
									],
									[
										229451,
										229452
									],
									[
										229478,
										229479
									],
									[
										229503,
										229504
									],
									[
										229541,
										229542
									],
									[
										229560,
										229561
									],
									[
										229581,
										229582
									],
									[
										229586,
										229587
									],
									[
										229634,
										229635
									],
									[
										229654,
										229655
									],
									[
										229699,
										229700
									],
									[
										229712,
										229713
									],
									[
										229715,
										229716
									],
									[
										229731,
										229732
									],
									[
										229732,
										229733
									],
									[
										229738,
										229739
									],
									[
										229751,
										229752
									],
									[
										229755,
										229756
									],
									[
										229786,
										229787
									],
									[
										229790,
										229791
									],
									[
										229810,
										229811
									],
									[
										229825,
										229826
									],
									[
										229829,
										229830
									],
									[
										229840,
										229841
									],
									[
										229841,
										229842
									],
									[
										229846,
										229847
									],
									[
										229881,
										229882
									],
									[
										229886,
										229887
									],
									[
										229906,
										229907
									],
									[
										229933,
										229934
									],
									[
										229977,
										229978
									],
									[
										229982,
										229983
									],
									[
										229996,
										229997
									],
									[
										230012,
										230013
									],
									[
										230034,
										230035
									],
									[
										230048,
										230049
									],
									[
										230086,
										230087
									],
									[
										230089,
										230090
									],
									[
										230108,
										230109
									],
									[
										230116,
										230117
									],
									[
										230134,
										230135
									],
									[
										230164,
										230165
									],
									[
										230177,
										230178
									],
									[
										230205,
										230206
									],
									[
										230231,
										230232
									],
									[
										230233,
										230234
									],
									[
										230248,
										230249
									],
									[
										230291,
										230292
									],
									[
										230319,
										230320
									],
									[
										230327,
										230328
									],
									[
										230335,
										230336
									],
									[
										230337,
										230338
									],
									[
										230387,
										230388
									],
									[
										230390,
										230391
									],
									[
										230398,
										230399
									],
									[
										230411,
										230412
									],
									[
										230432,
										230433
									],
									[
										230451,
										230452
									],
									[
										230453,
										230454
									],
									[
										230473,
										230474
									],
									[
										230491,
										230492
									],
									[
										230506,
										230507
									],
									[
										230509,
										230510
									],
									[
										230569,
										230570
									],
									[
										230575,
										230576
									],
									[
										230576,
										230577
									],
									[
										230636,
										230637
									],
									[
										230638,
										230639
									],
									[
										230648,
										230649
									],
									[
										230649,
										230650
									],
									[
										230651,
										230652
									],
									[
										230656,
										230657
									],
									[
										230681,
										230682
									],
									[
										230682,
										230683
									],
									[
										230694,
										230695
									],
									[
										230698,
										230699
									],
									[
										230700,
										230701
									],
									[
										230745,
										230746
									],
									[
										230747,
										230748
									],
									[
										230767,
										230768
									],
									[
										230769,
										230770
									],
									[
										230777,
										230778
									],
									[
										230798,
										230799
									],
									[
										230800,
										230801
									],
									[
										230807,
										230808
									],
									[
										230819,
										230820
									],
									[
										230821,
										230822
									],
									[
										230828,
										230829
									],
									[
										230872,
										230873
									],
									[
										230874,
										230875
									],
									[
										230907,
										230908
									],
									[
										230909,
										230910
									],
									[
										230920,
										230921
									],
									[
										230951,
										230952
									],
									[
										230953,
										230954
									],
									[
										230963,
										230964
									],
									[
										230985,
										230986
									],
									[
										230987,
										230988
									],
									[
										230997,
										230998
									],
									[
										231040,
										231041
									],
									[
										231042,
										231043
									],
									[
										231071,
										231072
									],
									[
										231073,
										231074
									],
									[
										231084,
										231085
									],
									[
										231112,
										231113
									],
									[
										231114,
										231115
									],
									[
										231124,
										231125
									],
									[
										231143,
										231144
									],
									[
										231145,
										231146
									],
									[
										231155,
										231156
									],
									[
										231198,
										231199
									],
									[
										231200,
										231201
									],
									[
										231220,
										231221
									],
									[
										231222,
										231223
									],
									[
										231246,
										231247
									],
									[
										231248,
										231249
									],
									[
										231295,
										231296
									],
									[
										231297,
										231298
									],
									[
										231384,
										231385
									],
									[
										231386,
										231387
									],
									[
										231495,
										231496
									],
									[
										231497,
										231498
									],
									[
										231597,
										231598
									],
									[
										231600,
										231601
									],
									[
										231619,
										231620
									],
									[
										231627,
										231628
									],
									[
										231645,
										231646
									],
									[
										231675,
										231676
									],
									[
										231688,
										231689
									],
									[
										231716,
										231717
									],
									[
										231769,
										231770
									],
									[
										231821,
										231822
									],
									[
										231834,
										231835
									],
									[
										231850,
										231851
									],
									[
										231867,
										231868
									],
									[
										231868,
										231869
									],
									[
										231874,
										231875
									],
									[
										231887,
										231888
									],
									[
										231891,
										231892
									],
									[
										232193,
										232194
									],
									[
										232214,
										232215
									],
									[
										232278,
										232279
									],
									[
										232305,
										232306
									],
									[
										232365,
										232366
									],
									[
										232393,
										232394
									],
									[
										232403,
										232404
									],
									[
										232429,
										232430
									],
									[
										232456,
										232457
									],
									[
										232473,
										232474
									],
									[
										232476,
										232477
									],
									[
										232493,
										232494
									],
									[
										232499,
										232500
									],
									[
										232519,
										232520
									],
									[
										232557,
										232558
									],
									[
										232563,
										232564
									],
									[
										232575,
										232576
									],
									[
										232585,
										232586
									],
									[
										232650,
										232651
									],
									[
										232667,
										232668
									],
									[
										232707,
										232708
									],
									[
										232714,
										232715
									],
									[
										232716,
										232717
									],
									[
										232736,
										232737
									],
									[
										232737,
										232738
									],
									[
										232745,
										232746
									],
									[
										232749,
										232750
									],
									[
										232761,
										232762
									],
									[
										232765,
										232766
									],
									[
										232774,
										232775
									],
									[
										232822,
										232823
									],
									[
										232831,
										232832
									],
									[
										232840,
										232841
									],
									[
										232844,
										232845
									],
									[
										232856,
										232857
									],
									[
										232860,
										232861
									],
									[
										232876,
										232877
									],
									[
										232892,
										232893
									],
									[
										232899,
										232900
									],
									[
										232958,
										232959
									],
									[
										233038,
										233039
									],
									[
										233098,
										233099
									],
									[
										233109,
										233110
									],
									[
										233121,
										233122
									],
									[
										233146,
										233147
									],
									[
										233198,
										233199
									],
									[
										233236,
										233237
									],
									[
										233336,
										233337
									],
									[
										233425,
										233426
									],
									[
										233518,
										233519
									],
									[
										233533,
										233534
									],
									[
										233553,
										233554
									],
									[
										233594,
										233595
									],
									[
										233632,
										233633
									],
									[
										233721,
										233722
									],
									[
										233744,
										233745
									],
									[
										233774,
										233775
									],
									[
										233832,
										233833
									],
									[
										233939,
										233940
									],
									[
										233957,
										233958
									],
									[
										233979,
										233980
									],
									[
										234032,
										234033
									],
									[
										234051,
										234052
									],
									[
										234078,
										234079
									],
									[
										234136,
										234137
									],
									[
										234240,
										234241
									],
									[
										234253,
										234254
									],
									[
										234272,
										234273
									],
									[
										234327,
										234328
									],
									[
										234346,
										234347
									],
									[
										234370,
										234371
									],
									[
										234425,
										234426
									],
									[
										234512,
										234513
									],
									[
										234583,
										234584
									],
									[
										234636,
										234637
									],
									[
										234651,
										234652
									],
									[
										234670,
										234671
									],
									[
										234723,
										234724
									],
									[
										234816,
										234817
									],
									[
										234846,
										234847
									],
									[
										234878,
										234879
									],
									[
										234931,
										234932
									],
									[
										234965,
										234966
									],
									[
										235000,
										235001
									],
									[
										235053,
										235054
									],
									[
										235066,
										235067
									],
									[
										235095,
										235096
									],
									[
										235159,
										235160
									],
									[
										235188,
										235189
									],
									[
										235223,
										235224
									],
									[
										235281,
										235282
									],
									[
										235296,
										235297
									],
									[
										235328,
										235329
									],
									[
										235392,
										235393
									],
									[
										235407,
										235408
									],
									[
										235446,
										235447
									],
									[
										235516,
										235517
									],
									[
										235531,
										235532
									],
									[
										235572,
										235573
									],
									[
										235644,
										235645
									],
									[
										235659,
										235660
									],
									[
										235707,
										235708
									],
									[
										235785,
										235786
									],
									[
										235944,
										235945
									],
									[
										236068,
										236069
									],
									[
										236087,
										236088
									],
									[
										236118,
										236119
									],
									[
										236179,
										236180
									],
									[
										236198,
										236199
									],
									[
										236203,
										236204
									],
									[
										236232,
										236233
									],
									[
										236236,
										236237
									],
									[
										236296,
										236297
									],
									[
										236313,
										236314
									],
									[
										236343,
										236344
									],
									[
										236405,
										236406
									],
									[
										236514,
										236515
									],
									[
										236531,
										236532
									],
									[
										236562,
										236563
									],
									[
										236625,
										236626
									],
									[
										236732,
										236733
									],
									[
										236843,
										236844
									],
									[
										236928,
										236929
									],
									[
										236961,
										236962
									],
									[
										236970,
										236971
									],
									[
										236984,
										236985
									],
									[
										236987,
										236988
									],
									[
										236999,
										237000
									],
									[
										237018,
										237019
									],
									[
										237031,
										237032
									],
									[
										237035,
										237036
									],
									[
										237075,
										237076
									],
									[
										237101,
										237102
									],
									[
										237130,
										237131
									],
									[
										237177,
										237178
									],
									[
										237199,
										237200
									],
									[
										237224,
										237225
									],
									[
										237280,
										237281
									],
									[
										237308,
										237309
									],
									[
										237316,
										237317
									],
									[
										237359,
										237360
									],
									[
										237362,
										237363
									],
									[
										237375,
										237376
									],
									[
										237396,
										237397
									],
									[
										237402,
										237403
									],
									[
										237403,
										237404
									],
									[
										237409,
										237410
									],
									[
										237422,
										237423
									],
									[
										237426,
										237427
									],
									[
										237440,
										237441
									],
									[
										237448,
										237449
									],
									[
										237500,
										237501
									],
									[
										237502,
										237503
									],
									[
										237511,
										237512
									],
									[
										237561,
										237562
									],
									[
										237567,
										237568
									],
									[
										237587,
										237588
									],
									[
										237595,
										237596
									],
									[
										237616,
										237617
									],
									[
										237623,
										237624
									],
									[
										237636,
										237637
									],
									[
										237667,
										237668
									],
									[
										237728,
										237729
									],
									[
										237813,
										237814
									],
									[
										237909,
										237910
									],
									[
										238013,
										238014
									],
									[
										238026,
										238027
									],
									[
										238054,
										238055
									],
									[
										238111,
										238112
									],
									[
										238205,
										238206
									],
									[
										238301,
										238302
									],
									[
										238408,
										238409
									],
									[
										238523,
										238524
									],
									[
										238542,
										238543
									],
									[
										238575,
										238576
									],
									[
										238632,
										238633
									],
									[
										238737,
										238738
									],
									[
										238841,
										238842
									],
									[
										238945,
										238946
									],
									[
										239040,
										239041
									],
									[
										239061,
										239062
									],
									[
										239084,
										239085
									],
									[
										239089,
										239090
									],
									[
										239093,
										239094
									],
									[
										239105,
										239106
									],
									[
										239119,
										239120
									],
									[
										239120,
										239121
									],
									[
										239122,
										239123
									],
									[
										239140,
										239141
									],
									[
										239144,
										239145
									],
									[
										239148,
										239149
									],
									[
										239154,
										239155
									],
									[
										239163,
										239164
									],
									[
										239170,
										239171
									],
									[
										239227,
										239228
									],
									[
										239322,
										239323
									],
									[
										239419,
										239420
									],
									[
										239559,
										239560
									],
									[
										239566,
										239567
									],
									[
										239575,
										239576
									],
									[
										239599,
										239600
									],
									[
										239602,
										239603
									],
									[
										239612,
										239613
									],
									[
										239620,
										239621
									],
									[
										239621,
										239622
									],
									[
										239632,
										239633
									],
									[
										239725,
										239726
									],
									[
										239735,
										239736
									],
									[
										239748,
										239749
									],
									[
										239755,
										239756
									],
									[
										239756,
										239757
									],
									[
										239759,
										239760
									],
									[
										239769,
										239770
									],
									[
										239901,
										239902
									],
									[
										239911,
										239912
									],
									[
										239924,
										239925
									],
									[
										239948,
										239949
									],
									[
										239971,
										239972
									],
									[
										239981,
										239982
									],
									[
										239982,
										239983
									],
									[
										240005,
										240006
									],
									[
										240006,
										240007
									],
									[
										240008,
										240009
									],
									[
										240034,
										240035
									],
									[
										240044,
										240045
									],
									[
										240053,
										240054
									],
									[
										240091,
										240092
									],
									[
										240114,
										240115
									],
									[
										240142,
										240143
									],
									[
										240192,
										240193
									],
									[
										240215,
										240216
									],
									[
										240226,
										240227
									],
									[
										240227,
										240228
									],
									[
										240252,
										240253
									],
									[
										240262,
										240263
									],
									[
										240263,
										240264
									],
									[
										240310,
										240311
									],
									[
										240333,
										240334
									],
									[
										240367,
										240368
									],
									[
										240417,
										240418
									],
									[
										240423,
										240424
									],
									[
										240431,
										240432
									],
									[
										240450,
										240451
									],
									[
										240460,
										240461
									],
									[
										240462,
										240463
									],
									[
										240543,
										240544
									],
									[
										240544,
										240545
									],
									[
										240546,
										240547
									],
									[
										240559,
										240560
									],
									[
										240563,
										240564
									],
									[
										240605,
										240606
									],
									[
										240632,
										240633
									],
									[
										240638,
										240639
									],
									[
										240667,
										240668
									],
									[
										240671,
										240672
									],
									[
										240698,
										240699
									],
									[
										240699,
										240700
									],
									[
										240736,
										240737
									],
									[
										240747,
										240748
									],
									[
										240831,
										240832
									],
									[
										240842,
										240843
									],
									[
										240924,
										240925
									],
									[
										240935,
										240936
									],
									[
										240959,
										240960
									],
									[
										240986,
										240987
									],
									[
										241028,
										241029
									],
									[
										241039,
										241040
									],
									[
										241150,
										241151
									],
									[
										241187,
										241188
									],
									[
										241188,
										241189
									],
									[
										241198,
										241199
									],
									[
										241228,
										241229
									],
									[
										241261,
										241262
									],
									[
										241309,
										241310
									],
									[
										241413,
										241414
									],
									[
										241438,
										241439
									],
									[
										241447,
										241448
									],
									[
										241448,
										241449
									],
									[
										241461,
										241462
									],
									[
										241480,
										241481
									],
									[
										241485,
										241486
									],
									[
										241489,
										241490
									],
									[
										241509,
										241510
									],
									[
										241510,
										241511
									],
									[
										241516,
										241517
									],
									[
										241529,
										241530
									],
									[
										241533,
										241534
									],
									[
										241563,
										241564
									],
									[
										241567,
										241568
									],
									[
										241577,
										241578
									],
									[
										241614,
										241615
									],
									[
										241659,
										241660
									],
									[
										241761,
										241762
									],
									[
										241887,
										241888
									],
									[
										242019,
										242020
									],
									[
										242145,
										242146
									],
									[
										242277,
										242278
									],
									[
										242299,
										242300
									],
									[
										242304,
										242305
									],
									[
										242308,
										242309
									],
									[
										242332,
										242333
									],
									[
										242337,
										242338
									],
									[
										242341,
										242342
									],
									[
										242394,
										242395
									],
									[
										242407,
										242408
									],
									[
										242443,
										242444
									],
									[
										242513,
										242514
									],
									[
										242526,
										242527
									],
									[
										242539,
										242540
									],
									[
										242571,
										242572
									],
									[
										242582,
										242583
									],
									[
										242649,
										242650
									],
									[
										242662,
										242663
									],
									[
										242672,
										242673
									],
									[
										242680,
										242681
									],
									[
										242711,
										242712
									],
									[
										242719,
										242720
									],
									[
										242726,
										242727
									],
									[
										242792,
										242793
									],
									[
										242906,
										242907
									],
									[
										243031,
										243032
									],
									[
										243054,
										243055
									],
									[
										243057,
										243058
									],
									[
										243098,
										243099
									],
									[
										243101,
										243102
									],
									[
										243168,
										243169
									],
									[
										243298,
										243299
									],
									[
										243311,
										243312
									],
									[
										243353,
										243354
									],
									[
										243428,
										243429
									],
									[
										243445,
										243446
									],
									[
										243483,
										243484
									],
									[
										243546,
										243547
									],
									[
										243556,
										243557
									],
									[
										243567,
										243568
									],
									[
										243605,
										243606
									],
									[
										243624,
										243625
									],
									[
										243650,
										243651
									],
									[
										243700,
										243701
									],
									[
										243812,
										243813
									],
									[
										243826,
										243827
									],
									[
										243831,
										243832
									],
									[
										243858,
										243859
									],
									[
										243862,
										243863
									],
									[
										243918,
										243919
									],
									[
										243937,
										243938
									],
									[
										243968,
										243969
									],
									[
										244024,
										244025
									],
									[
										244056,
										244057
									],
									[
										244090,
										244091
									],
									[
										244136,
										244137
									],
									[
										244146,
										244147
									],
									[
										244159,
										244160
									],
									[
										244199,
										244200
									],
									[
										244302,
										244303
									],
									[
										244401,
										244402
									],
									[
										244527,
										244528
									],
									[
										244529,
										244530
									],
									[
										244550,
										244551
									],
									[
										244552,
										244553
									],
									[
										244586,
										244587
									],
									[
										244588,
										244589
									],
									[
										244613,
										244614
									],
									[
										244629,
										244630
									],
									[
										244650,
										244651
									],
									[
										244667,
										244668
									],
									[
										244669,
										244670
									],
									[
										244684,
										244685
									],
									[
										244718,
										244719
									],
									[
										244741,
										244742
									],
									[
										244757,
										244758
									],
									[
										244777,
										244778
									],
									[
										244861,
										244862
									],
									[
										244884,
										244885
									],
									[
										244891,
										244892
									],
									[
										244898,
										244899
									],
									[
										245010,
										245011
									],
									[
										245055,
										245056
									],
									[
										245059,
										245060
									],
									[
										245063,
										245064
									],
									[
										245130,
										245131
									],
									[
										245148,
										245149
									],
									[
										245158,
										245159
									],
									[
										245172,
										245173
									],
									[
										245182,
										245183
									],
									[
										245189,
										245190
									],
									[
										245233,
										245234
									],
									[
										245242,
										245243
									],
									[
										245269,
										245270
									],
									[
										245295,
										245296
									],
									[
										245390,
										245391
									],
									[
										245391,
										245392
									],
									[
										245407,
										245408
									],
									[
										245466,
										245467
									],
									[
										245475,
										245476
									],
									[
										245508,
										245509
									],
									[
										245537,
										245538
									],
									[
										245572,
										245573
									],
									[
										245587,
										245588
									],
									[
										245590,
										245591
									],
									[
										245642,
										245643
									],
									[
										245671,
										245672
									],
									[
										245680,
										245681
									],
									[
										245717,
										245718
									],
									[
										245734,
										245735
									],
									[
										245767,
										245768
									],
									[
										245768,
										245769
									],
									[
										245789,
										245790
									],
									[
										245802,
										245803
									],
									[
										245859,
										245860
									],
									[
										245863,
										245864
									],
									[
										245866,
										245867
									],
									[
										245867,
										245868
									],
									[
										245893,
										245894
									],
									[
										245903,
										245904
									],
									[
										245908,
										245909
									],
									[
										245911,
										245912
									],
									[
										245913,
										245914
									],
									[
										245920,
										245921
									],
									[
										245926,
										245927
									],
									[
										245938,
										245939
									],
									[
										245963,
										245964
									],
									[
										245966,
										245967
									],
									[
										245967,
										245968
									],
									[
										246005,
										246006
									],
									[
										246081,
										246082
									],
									[
										246121,
										246122
									],
									[
										246144,
										246145
									],
									[
										246145,
										246146
									],
									[
										246155,
										246156
									],
									[
										246156,
										246157
									],
									[
										246226,
										246227
									],
									[
										246241,
										246242
									],
									[
										246257,
										246258
									],
									[
										246260,
										246261
									],
									[
										246312,
										246313
									],
									[
										246338,
										246339
									],
									[
										246341,
										246342
									],
									[
										246343,
										246344
									],
									[
										246345,
										246346
									],
									[
										246358,
										246359
									],
									[
										246359,
										246360
									],
									[
										246389,
										246390
									],
									[
										246397,
										246398
									],
									[
										246400,
										246401
									],
									[
										246402,
										246403
									],
									[
										246404,
										246405
									],
									[
										246445,
										246446
									],
									[
										246448,
										246449
									],
									[
										246450,
										246451
									],
									[
										246452,
										246453
									],
									[
										246464,
										246465
									],
									[
										246481,
										246482
									],
									[
										246527,
										246528
									],
									[
										246543,
										246544
									],
									[
										246560,
										246561
									],
									[
										246597,
										246598
									],
									[
										246599,
										246600
									],
									[
										246641,
										246642
									],
									[
										246673,
										246674
									],
									[
										246694,
										246695
									],
									[
										246727,
										246728
									],
									[
										246729,
										246730
									],
									[
										246733,
										246734
									],
									[
										246781,
										246782
									],
									[
										246799,
										246800
									],
									[
										246807,
										246808
									],
									[
										246829,
										246830
									],
									[
										246833,
										246834
									],
									[
										246867,
										246868
									],
									[
										246883,
										246884
									],
									[
										246885,
										246886
									],
									[
										246892,
										246893
									],
									[
										246905,
										246906
									],
									[
										246947,
										246948
									],
									[
										246962,
										246963
									],
									[
										246975,
										246976
									],
									[
										246978,
										246979
									],
									[
										246980,
										246981
									],
									[
										246982,
										246983
									],
									[
										246992,
										246993
									],
									[
										247022,
										247023
									],
									[
										247047,
										247048
									],
									[
										247051,
										247052
									],
									[
										247128,
										247129
									],
									[
										247150,
										247151
									],
									[
										247153,
										247154
									],
									[
										247155,
										247156
									],
									[
										247195,
										247196
									],
									[
										247208,
										247209
									],
									[
										247221,
										247222
									],
									[
										247240,
										247241
									],
									[
										247274,
										247275
									],
									[
										247324,
										247325
									],
									[
										247398,
										247399
									],
									[
										247465,
										247466
									],
									[
										247534,
										247535
									],
									[
										247559,
										247560
									],
									[
										247571,
										247572
									],
									[
										247648,
										247649
									],
									[
										247652,
										247653
									],
									[
										247668,
										247669
									],
									[
										247690,
										247691
									],
									[
										247720,
										247721
									],
									[
										247756,
										247757
									],
									[
										247777,
										247778
									],
									[
										247817,
										247818
									],
									[
										247823,
										247824
									],
									[
										247866,
										247867
									],
									[
										247931,
										247932
									],
									[
										247941,
										247942
									],
									[
										247953,
										247954
									],
									[
										247961,
										247962
									],
									[
										247962,
										247963
									],
									[
										247991,
										247992
									],
									[
										248021,
										248022
									],
									[
										248027,
										248028
									],
									[
										248104,
										248105
									],
									[
										248133,
										248134
									],
									[
										248156,
										248157
									],
									[
										248255,
										248256
									],
									[
										248279,
										248280
									],
									[
										248395,
										248396
									],
									[
										248415,
										248416
									],
									[
										248444,
										248445
									],
									[
										248455,
										248456
									],
									[
										248505,
										248506
									],
									[
										248518,
										248519
									],
									[
										248520,
										248521
									],
									[
										248543,
										248544
									],
									[
										248565,
										248566
									],
									[
										248577,
										248578
									],
									[
										248580,
										248581
									],
									[
										248629,
										248630
									],
									[
										248657,
										248658
									],
									[
										248673,
										248674
									],
									[
										248763,
										248764
									],
									[
										248939,
										248940
									],
									[
										249041,
										249042
									],
									[
										249064,
										249065
									],
									[
										249088,
										249089
									],
									[
										249107,
										249108
									],
									[
										249158,
										249159
									],
									[
										249179,
										249180
									],
									[
										249259,
										249260
									],
									[
										249431,
										249432
									],
									[
										249456,
										249457
									],
									[
										249617,
										249618
									],
									[
										249640,
										249641
									],
									[
										249664,
										249665
									],
									[
										249683,
										249684
									],
									[
										249734,
										249735
									],
									[
										249755,
										249756
									],
									[
										249805,
										249806
									],
									[
										249833,
										249834
									],
									[
										250005,
										250006
									],
									[
										250021,
										250022
									],
									[
										250026,
										250027
									],
									[
										250063,
										250064
									],
									[
										250072,
										250073
									],
									[
										250084,
										250085
									],
									[
										250087,
										250088
									],
									[
										250094,
										250095
									],
									[
										250116,
										250117
									],
									[
										250129,
										250130
									],
									[
										250170,
										250171
									],
									[
										250179,
										250180
									],
									[
										250187,
										250188
									],
									[
										250209,
										250210
									],
									[
										250232,
										250233
									],
									[
										250323,
										250324
									],
									[
										250546,
										250547
									],
									[
										250555,
										250556
									],
									[
										250567,
										250568
									],
									[
										250623,
										250624
									],
									[
										250654,
										250655
									],
									[
										250711,
										250712
									],
									[
										250760,
										250761
									],
									[
										250767,
										250768
									],
									[
										250791,
										250792
									],
									[
										250828,
										250829
									],
									[
										250879,
										250880
									],
									[
										250888,
										250889
									],
									[
										250938,
										250939
									],
									[
										250945,
										250946
									],
									[
										250969,
										250970
									],
									[
										250992,
										250993
									],
									[
										251004,
										251005
									],
									[
										251055,
										251056
									],
									[
										251063,
										251064
									],
									[
										251083,
										251084
									],
									[
										251096,
										251097
									],
									[
										251106,
										251107
									],
									[
										251136,
										251137
									],
									[
										251207,
										251208
									],
									[
										251236,
										251237
									],
									[
										251244,
										251245
									],
									[
										251264,
										251265
									],
									[
										251282,
										251283
									],
									[
										251298,
										251299
									],
									[
										251466,
										251467
									],
									[
										251517,
										251518
									],
									[
										251560,
										251561
									],
									[
										251603,
										251604
									],
									[
										251629,
										251630
									],
									[
										251645,
										251646
									],
									[
										251672,
										251673
									],
									[
										251688,
										251689
									],
									[
										251715,
										251716
									],
									[
										251731,
										251732
									],
									[
										251758,
										251759
									],
									[
										251774,
										251775
									],
									[
										251817,
										251818
									],
									[
										251860,
										251861
									],
									[
										251903,
										251904
									],
									[
										251936,
										251937
									],
									[
										251965,
										251966
									],
									[
										251971,
										251972
									],
									[
										251975,
										251976
									],
									[
										251983,
										251984
									],
									[
										252009,
										252010
									],
									[
										252034,
										252035
									],
									[
										252040,
										252041
									],
									[
										252044,
										252045
									],
									[
										252056,
										252057
									],
									[
										252060,
										252061
									],
									[
										252122,
										252123
									],
									[
										252133,
										252134
									],
									[
										252149,
										252150
									],
									[
										252164,
										252165
									],
									[
										252170,
										252171
									],
									[
										252174,
										252175
									],
									[
										252197,
										252198
									],
									[
										252202,
										252203
									],
									[
										252229,
										252230
									],
									[
										252359,
										252360
									],
									[
										252390,
										252391
									],
									[
										252411,
										252412
									],
									[
										252440,
										252441
									],
									[
										252475,
										252476
									],
									[
										252507,
										252508
									],
									[
										252540,
										252541
									],
									[
										252615,
										252616
									],
									[
										252636,
										252637
									],
									[
										252711,
										252712
									],
									[
										252733,
										252734
									],
									[
										252766,
										252767
									],
									[
										252800,
										252801
									],
									[
										252854,
										252855
									],
									[
										252867,
										252868
									],
									[
										252928,
										252929
									],
									[
										252989,
										252990
									],
									[
										253012,
										253013
									],
									[
										253041,
										253042
									],
									[
										253098,
										253099
									],
									[
										253160,
										253161
									],
									[
										253176,
										253177
									],
									[
										253257,
										253258
									],
									[
										253328,
										253329
									],
									[
										253417,
										253418
									],
									[
										253434,
										253435
									],
									[
										253445,
										253446
									],
									[
										253462,
										253463
									],
									[
										253547,
										253548
									],
									[
										253586,
										253587
									],
									[
										253603,
										253604
									],
									[
										253614,
										253615
									],
									[
										253631,
										253632
									],
									[
										253671,
										253672
									],
									[
										253698,
										253699
									],
									[
										253771,
										253772
									],
									[
										253777,
										253778
									],
									[
										253781,
										253782
									],
									[
										253808,
										253809
									],
									[
										253816,
										253817
									],
									[
										253817,
										253818
									],
									[
										253825,
										253826
									],
									[
										253826,
										253827
									],
									[
										253847,
										253848
									],
									[
										253853,
										253854
									],
									[
										253854,
										253855
									],
									[
										253890,
										253891
									],
									[
										253905,
										253906
									],
									[
										253906,
										253907
									],
									[
										253912,
										253913
									],
									[
										253913,
										253914
									],
									[
										253918,
										253919
									],
									[
										253924,
										253925
									],
									[
										253925,
										253926
									],
									[
										253961,
										253962
									],
									[
										253976,
										253977
									],
									[
										253977,
										253978
									],
									[
										254041,
										254042
									],
									[
										254042,
										254043
									],
									[
										254047,
										254048
									],
									[
										254048,
										254049
									],
									[
										254144,
										254145
									],
									[
										254145,
										254146
									],
									[
										254170,
										254171
									],
									[
										254195,
										254196
									],
									[
										254203,
										254204
									],
									[
										254204,
										254205
									],
									[
										254212,
										254213
									],
									[
										254213,
										254214
									],
									[
										254234,
										254235
									],
									[
										254240,
										254241
									],
									[
										254241,
										254242
									],
									[
										254268,
										254269
									],
									[
										254283,
										254284
									],
									[
										254284,
										254285
									],
									[
										254290,
										254291
									],
									[
										254291,
										254292
									],
									[
										254296,
										254297
									],
									[
										254302,
										254303
									],
									[
										254303,
										254304
									],
									[
										254330,
										254331
									],
									[
										254345,
										254346
									],
									[
										254346,
										254347
									],
									[
										254392,
										254393
									],
									[
										254400,
										254401
									],
									[
										254401,
										254402
									],
									[
										254414,
										254415
									],
									[
										254415,
										254416
									],
									[
										254476,
										254477
									],
									[
										254484,
										254485
									],
									[
										254485,
										254486
									],
									[
										254493,
										254494
									],
									[
										254494,
										254495
									],
									[
										254564,
										254565
									],
									[
										254579,
										254580
									],
									[
										254580,
										254581
									],
									[
										254612,
										254613
									],
									[
										254620,
										254621
									],
									[
										254621,
										254622
									],
									[
										254634,
										254635
									],
									[
										254635,
										254636
									],
									[
										254696,
										254697
									],
									[
										254704,
										254705
									],
									[
										254705,
										254706
									],
									[
										254713,
										254714
									],
									[
										254714,
										254715
									],
									[
										254784,
										254785
									],
									[
										254799,
										254800
									],
									[
										254800,
										254801
									],
									[
										254832,
										254833
									],
									[
										254852,
										254853
									],
									[
										254853,
										254854
									],
									[
										254916,
										254917
									],
									[
										254931,
										254932
									],
									[
										254932,
										254933
									],
									[
										255004,
										255005
									],
									[
										255019,
										255020
									],
									[
										255020,
										255021
									],
									[
										255052,
										255053
									],
									[
										255060,
										255061
									],
									[
										255061,
										255062
									],
									[
										255079,
										255080
									],
									[
										255080,
										255081
									],
									[
										255136,
										255137
									],
									[
										255144,
										255145
									],
									[
										255145,
										255146
									],
									[
										255153,
										255154
									],
									[
										255154,
										255155
									],
									[
										255224,
										255225
									],
									[
										255239,
										255240
									],
									[
										255240,
										255241
									],
									[
										255312,
										255313
									],
									[
										255327,
										255328
									],
									[
										255328,
										255329
									],
									[
										255368,
										255369
									],
									[
										255448,
										255449
									],
									[
										255530,
										255531
									],
									[
										255539,
										255540
									],
									[
										255563,
										255564
									],
									[
										255572,
										255573
									],
									[
										255575,
										255576
									],
									[
										255641,
										255642
									],
									[
										255746,
										255747
									],
									[
										255756,
										255757
									],
									[
										255772,
										255773
									],
									[
										255827,
										255828
									],
									[
										255844,
										255845
									],
									[
										255862,
										255863
									],
									[
										255914,
										255915
									],
									[
										255931,
										255932
									],
									[
										256085,
										256086
									],
									[
										256102,
										256103
									],
									[
										256250,
										256251
									],
									[
										256412,
										256413
									],
									[
										256439,
										256440
									],
									[
										256464,
										256465
									],
									[
										256490,
										256491
									],
									[
										256517,
										256518
									],
									[
										256541,
										256542
									],
									[
										256559,
										256560
									],
									[
										256588,
										256589
									],
									[
										256607,
										256608
									],
									[
										256634,
										256635
									],
									[
										256658,
										256659
									],
									[
										256715,
										256716
									],
									[
										256742,
										256743
									],
									[
										256767,
										256768
									],
									[
										256784,
										256785
									],
									[
										256788,
										256789
									],
									[
										256796,
										256797
									],
									[
										256829,
										256830
									],
									[
										256837,
										256838
									],
									[
										256855,
										256856
									],
									[
										256877,
										256878
									],
									[
										256900,
										256901
									],
									[
										256908,
										256909
									],
									[
										256941,
										256942
									],
									[
										256949,
										256950
									],
									[
										257006,
										257007
									],
									[
										257033,
										257034
									],
									[
										257077,
										257078
									],
									[
										257078,
										257079
									],
									[
										257094,
										257095
									],
									[
										257096,
										257097
									],
									[
										257106,
										257107
									],
									[
										257146,
										257147
									],
									[
										257148,
										257149
									],
									[
										257158,
										257159
									],
									[
										257205,
										257206
									],
									[
										257206,
										257207
									],
									[
										257219,
										257220
									],
									[
										257221,
										257222
									],
									[
										257231,
										257232
									],
									[
										257268,
										257269
									],
									[
										257270,
										257271
									],
									[
										257280,
										257281
									],
									[
										257335,
										257336
									],
									[
										257336,
										257337
									],
									[
										257341,
										257342
									],
									[
										257343,
										257344
									],
									[
										257350,
										257351
									],
									[
										257380,
										257381
									],
									[
										257382,
										257383
									],
									[
										257389,
										257390
									],
									[
										257466,
										257467
									],
									[
										257468,
										257469
									],
									[
										257478,
										257479
									],
									[
										257495,
										257496
									],
									[
										257496,
										257497
									],
									[
										257501,
										257502
									],
									[
										257503,
										257504
									],
									[
										257520,
										257521
									],
									[
										257554,
										257555
									],
									[
										257555,
										257556
									],
									[
										257571,
										257572
									],
									[
										257573,
										257574
									],
									[
										257583,
										257584
									],
									[
										257617,
										257618
									],
									[
										257618,
										257619
									],
									[
										257623,
										257624
									],
									[
										257625,
										257626
									],
									[
										257632,
										257633
									],
									[
										257679,
										257680
									],
									[
										257680,
										257681
									],
									[
										257755,
										257756
									],
									[
										257757,
										257758
									],
									[
										257767,
										257768
									],
									[
										257784,
										257785
									],
									[
										257785,
										257786
									],
									[
										257790,
										257791
									],
									[
										257792,
										257793
									],
									[
										257832,
										257833
									],
									[
										257876,
										257877
									],
									[
										257898,
										257899
									],
									[
										257955,
										257956
									],
									[
										257988,
										257989
									],
									[
										258009,
										258010
									],
									[
										258095,
										258096
									],
									[
										258218,
										258219
									],
									[
										258332,
										258333
									],
									[
										258409,
										258410
									],
									[
										258418,
										258419
									],
									[
										258439,
										258440
									],
									[
										258503,
										258504
									],
									[
										258512,
										258513
									],
									[
										258561,
										258562
									],
									[
										258673,
										258674
									],
									[
										258725,
										258726
									],
									[
										258769,
										258770
									],
									[
										258813,
										258814
									],
									[
										258834,
										258835
									],
									[
										258838,
										258839
									],
									[
										258863,
										258864
									],
									[
										258866,
										258867
									],
									[
										258869,
										258870
									],
									[
										258870,
										258871
									],
									[
										258949,
										258950
									],
									[
										258956,
										258957
									],
									[
										258969,
										258970
									],
									[
										259095,
										259096
									],
									[
										259156,
										259157
									],
									[
										259213,
										259214
									],
									[
										259216,
										259217
									],
									[
										259286,
										259287
									],
									[
										259312,
										259313
									],
									[
										259338,
										259339
									],
									[
										259445,
										259446
									],
									[
										259457,
										259458
									],
									[
										259487,
										259488
									],
									[
										259500,
										259501
									],
									[
										259515,
										259516
									],
									[
										259649,
										259650
									],
									[
										259662,
										259663
									],
									[
										259677,
										259678
									],
									[
										259717,
										259718
									],
									[
										259729,
										259730
									],
									[
										259744,
										259745
									],
									[
										259841,
										259842
									],
									[
										259858,
										259859
									],
									[
										259916,
										259917
									],
									[
										259935,
										259936
									],
									[
										259940,
										259941
									],
									[
										259941,
										259942
									],
									[
										260034,
										260035
									],
									[
										260085,
										260086
									],
									[
										260086,
										260087
									],
									[
										260102,
										260103
									],
									[
										260124,
										260125
									],
									[
										260211,
										260212
									],
									[
										260221,
										260222
									],
									[
										260237,
										260238
									],
									[
										260363,
										260364
									],
									[
										260385,
										260386
									],
									[
										260442,
										260443
									],
									[
										260475,
										260476
									],
									[
										260496,
										260497
									],
									[
										260574,
										260575
									],
									[
										260584,
										260585
									],
									[
										260653,
										260654
									],
									[
										260817,
										260818
									],
									[
										260963,
										260964
									],
									[
										260964,
										260965
									],
									[
										261018,
										261019
									],
									[
										261045,
										261046
									],
									[
										261075,
										261076
									],
									[
										261077,
										261078
									],
									[
										261129,
										261130
									],
									[
										261157,
										261158
									],
									[
										261159,
										261160
									],
									[
										261238,
										261239
									],
									[
										261259,
										261260
									],
									[
										261269,
										261270
									],
									[
										261272,
										261273
									],
									[
										261320,
										261321
									],
									[
										261351,
										261352
									],
									[
										261385,
										261386
									],
									[
										261434,
										261435
									],
									[
										261473,
										261474
									],
									[
										261513,
										261514
									],
									[
										261541,
										261542
									],
									[
										261582,
										261583
									],
									[
										261609,
										261610
									],
									[
										261629,
										261630
									],
									[
										261639,
										261640
									],
									[
										261644,
										261645
									],
									[
										261677,
										261678
									],
									[
										261717,
										261718
									],
									[
										261729,
										261730
									],
									[
										261739,
										261740
									],
									[
										261744,
										261745
									],
									[
										261814,
										261815
									],
									[
										261851,
										261852
									],
									[
										261938,
										261939
									],
									[
										261939,
										261940
									],
									[
										261947,
										261948
									],
									[
										261974,
										261975
									],
									[
										261980,
										261981
									],
									[
										262037,
										262038
									],
									[
										262064,
										262065
									],
									[
										262091,
										262092
									],
									[
										262101,
										262102
									],
									[
										262112,
										262113
									],
									[
										262153,
										262154
									],
									[
										262178,
										262179
									],
									[
										262212,
										262213
									],
									[
										262233,
										262234
									],
									[
										262240,
										262241
									],
									[
										262284,
										262285
									],
									[
										262309,
										262310
									],
									[
										262319,
										262320
									],
									[
										262346,
										262347
									],
									[
										262371,
										262372
									],
									[
										262405,
										262406
									],
									[
										262426,
										262427
									],
									[
										262549,
										262550
									],
									[
										262554,
										262555
									],
									[
										262573,
										262574
									],
									[
										262600,
										262601
									],
									[
										262618,
										262619
									],
									[
										262627,
										262628
									],
									[
										262636,
										262637
									],
									[
										262673,
										262674
									],
									[
										262682,
										262683
									],
									[
										262720,
										262721
									],
									[
										262727,
										262728
									],
									[
										262772,
										262773
									],
									[
										262809,
										262810
									],
									[
										262810,
										262811
									],
									[
										262813,
										262814
									],
									[
										262827,
										262828
									],
									[
										262877,
										262878
									],
									[
										262904,
										262905
									],
									[
										262926,
										262927
									],
									[
										262940,
										262941
									],
									[
										262950,
										262951
									],
									[
										262961,
										262962
									],
									[
										263010,
										263011
									],
									[
										263035,
										263036
									],
									[
										263064,
										263065
									],
									[
										263078,
										263079
									],
									[
										263099,
										263100
									],
									[
										263106,
										263107
									],
									[
										263208,
										263209
									],
									[
										263254,
										263255
									],
									[
										263261,
										263262
									],
									[
										263325,
										263326
									],
									[
										263339,
										263340
									],
									[
										263345,
										263346
									],
									[
										263362,
										263363
									],
									[
										263382,
										263383
									],
									[
										263396,
										263397
									],
									[
										263406,
										263407
									],
									[
										263441,
										263442
									],
									[
										263466,
										263467
									],
									[
										263500,
										263501
									],
									[
										263521,
										263522
									],
									[
										263605,
										263606
									],
									[
										263651,
										263652
									],
									[
										263660,
										263661
									],
									[
										263726,
										263727
									],
									[
										263732,
										263733
									],
									[
										263846,
										263847
									],
									[
										263851,
										263852
									],
									[
										263870,
										263871
									],
									[
										263897,
										263898
									],
									[
										263910,
										263911
									],
									[
										263924,
										263925
									],
									[
										263933,
										263934
									],
									[
										263937,
										263938
									],
									[
										263951,
										263952
									],
									[
										263988,
										263989
									],
									[
										263992,
										263993
									],
									[
										264006,
										264007
									],
									[
										264044,
										264045
									],
									[
										264051,
										264052
									],
									[
										264096,
										264097
									],
									[
										264229,
										264230
									],
									[
										264230,
										264231
									],
									[
										264316,
										264317
									],
									[
										264381,
										264382
									],
									[
										264408,
										264409
									],
									[
										264451,
										264452
									],
									[
										264521,
										264522
									],
									[
										264534,
										264535
									],
									[
										264559,
										264560
									],
									[
										264618,
										264619
									],
									[
										264741,
										264742
									],
									[
										264751,
										264752
									],
									[
										264767,
										264768
									],
									[
										264827,
										264828
									],
									[
										264955,
										264956
									],
									[
										265052,
										265053
									],
									[
										265074,
										265075
									],
									[
										265131,
										265132
									],
									[
										265164,
										265165
									],
									[
										265185,
										265186
									],
									[
										265239,
										265240
									],
									[
										265255,
										265256
									],
									[
										265289,
										265290
									],
									[
										265343,
										265344
									],
									[
										265384,
										265385
									],
									[
										265400,
										265401
									],
									[
										265456,
										265457
									],
									[
										265536,
										265537
									],
									[
										265537,
										265538
									],
									[
										265545,
										265546
									],
									[
										265546,
										265547
									],
									[
										265556,
										265557
									],
									[
										265592,
										265593
									],
									[
										265593,
										265594
									],
									[
										265643,
										265644
									],
									[
										265664,
										265665
									],
									[
										265702,
										265703
									],
									[
										265710,
										265711
									],
									[
										265738,
										265739
									],
									[
										265746,
										265747
									],
									[
										265788,
										265789
									],
									[
										265800,
										265801
									],
									[
										265801,
										265802
									],
									[
										265842,
										265843
									],
									[
										265854,
										265855
									],
									[
										265855,
										265856
									],
									[
										265953,
										265954
									],
									[
										265981,
										265982
									],
									[
										266016,
										266017
									],
									[
										266083,
										266084
									],
									[
										266105,
										266106
									],
									[
										266178,
										266179
									],
									[
										266189,
										266190
									],
									[
										266217,
										266218
									],
									[
										266255,
										266256
									],
									[
										266277,
										266278
									],
									[
										266288,
										266289
									],
									[
										266358,
										266359
									],
									[
										266366,
										266367
									],
									[
										266373,
										266374
									],
									[
										266397,
										266398
									],
									[
										266404,
										266405
									],
									[
										266441,
										266442
									],
									[
										266463,
										266464
									],
									[
										266471,
										266472
									],
									[
										266478,
										266479
									],
									[
										266548,
										266549
									],
									[
										266570,
										266571
									],
									[
										266627,
										266628
									],
									[
										266660,
										266661
									],
									[
										266681,
										266682
									],
									[
										266749,
										266750
									],
									[
										266777,
										266778
									],
									[
										266854,
										266855
									],
									[
										266888,
										266889
									],
									[
										266947,
										266948
									],
									[
										266975,
										266976
									],
									[
										267028,
										267029
									],
									[
										267128,
										267129
									],
									[
										267224,
										267225
									],
									[
										267227,
										267228
									],
									[
										267263,
										267264
									],
									[
										267294,
										267295
									],
									[
										267297,
										267298
									],
									[
										267337,
										267338
									],
									[
										267370,
										267371
									],
									[
										267440,
										267441
									],
									[
										267513,
										267514
									],
									[
										267524,
										267525
									],
									[
										267552,
										267553
									],
									[
										267593,
										267594
									],
									[
										267604,
										267605
									],
									[
										267674,
										267675
									],
									[
										267682,
										267683
									],
									[
										267689,
										267690
									],
									[
										267713,
										267714
									],
									[
										267720,
										267721
									],
									[
										267760,
										267761
									],
									[
										267768,
										267769
									],
									[
										267775,
										267776
									],
									[
										267870,
										267871
									],
									[
										267932,
										267933
									],
									[
										268010,
										268011
									],
									[
										268013,
										268014
									],
									[
										268061,
										268062
									],
									[
										268064,
										268065
									],
									[
										268143,
										268144
									],
									[
										268170,
										268171
									],
									[
										268272,
										268273
									],
									[
										268282,
										268283
									],
									[
										268298,
										268299
									],
									[
										268315,
										268316
									],
									[
										268329,
										268330
									],
									[
										268335,
										268336
									],
									[
										268360,
										268361
									],
									[
										268367,
										268368
									],
									[
										268396,
										268397
									],
									[
										268432,
										268433
									],
									[
										268472,
										268473
									],
									[
										268606,
										268607
									],
									[
										268616,
										268617
									],
									[
										268632,
										268633
									],
									[
										268649,
										268650
									],
									[
										268663,
										268664
									],
									[
										268669,
										268670
									],
									[
										268694,
										268695
									],
									[
										268701,
										268702
									],
									[
										268725,
										268726
									],
									[
										268761,
										268762
									],
									[
										268796,
										268797
									],
									[
										268928,
										268929
									],
									[
										268938,
										268939
									],
									[
										268954,
										268955
									],
									[
										268971,
										268972
									],
									[
										268985,
										268986
									],
									[
										268991,
										268992
									],
									[
										269016,
										269017
									],
									[
										269023,
										269024
									],
									[
										269047,
										269048
									],
									[
										269083,
										269084
									],
									[
										269118,
										269119
									],
									[
										269217,
										269218
									],
									[
										269251,
										269252
									],
									[
										269261,
										269262
									],
									[
										269277,
										269278
									],
									[
										269294,
										269295
									],
									[
										269308,
										269309
									],
									[
										269314,
										269315
									],
									[
										269339,
										269340
									],
									[
										269346,
										269347
									],
									[
										269363,
										269364
									],
									[
										269371,
										269372
									],
									[
										269407,
										269408
									],
									[
										269435,
										269436
									],
									[
										269443,
										269444
									],
									[
										269530,
										269531
									],
									[
										269543,
										269544
									],
									[
										269576,
										269577
									],
									[
										269595,
										269596
									],
									[
										269661,
										269662
									],
									[
										269706,
										269707
									],
									[
										269715,
										269716
									],
									[
										269744,
										269745
									],
									[
										269770,
										269771
									],
									[
										269850,
										269851
									],
									[
										269922,
										269923
									],
									[
										269996,
										269997
									],
									[
										270005,
										270006
									],
									[
										270081,
										270082
									],
									[
										270164,
										270165
									],
									[
										270260,
										270261
									],
									[
										270283,
										270284
									],
									[
										270309,
										270310
									],
									[
										270416,
										270417
									],
									[
										270524,
										270525
									],
									[
										270661,
										270662
									],
									[
										270842,
										270843
									],
									[
										270851,
										270852
									],
									[
										270894,
										270895
									],
									[
										270900,
										270901
									],
									[
										270937,
										270938
									],
									[
										270964,
										270965
									],
									[
										270991,
										270992
									],
									[
										271060,
										271061
									],
									[
										271117,
										271118
									],
									[
										271142,
										271143
									],
									[
										271203,
										271204
									],
									[
										271386,
										271387
									],
									[
										271583,
										271584
									],
									[
										271782,
										271783
									],
									[
										271979,
										271980
									],
									[
										272084,
										272085
									],
									[
										272089,
										272090
									],
									[
										272093,
										272094
									],
									[
										272117,
										272118
									],
									[
										272122,
										272123
									],
									[
										272126,
										272127
									],
									[
										272134,
										272135
									],
									[
										272139,
										272140
									],
									[
										272143,
										272144
									],
									[
										272164,
										272165
									],
									[
										272193,
										272194
									],
									[
										272198,
										272199
									],
									[
										272202,
										272203
									],
									[
										272209,
										272210
									],
									[
										272214,
										272215
									],
									[
										272218,
										272219
									],
									[
										272376,
										272377
									],
									[
										272386,
										272387
									],
									[
										272427,
										272428
									],
									[
										272441,
										272442
									],
									[
										272447,
										272448
									],
									[
										272521,
										272522
									],
									[
										272528,
										272529
									],
									[
										272559,
										272560
									],
									[
										272900,
										272901
									],
									[
										272909,
										272910
									],
									[
										272978,
										272979
									],
									[
										273241,
										273242
									],
									[
										273251,
										273252
									],
									[
										273304,
										273305
									],
									[
										273310,
										273311
									],
									[
										273391,
										273392
									],
									[
										273503,
										273504
									],
									[
										273776,
										273777
									],
									[
										273785,
										273786
									],
									[
										273828,
										273829
									],
									[
										273834,
										273835
									],
									[
										273915,
										273916
									],
									[
										274023,
										274024
									],
									[
										274161,
										274162
									],
									[
										274296,
										274297
									],
									[
										274447,
										274448
									],
									[
										274487,
										274488
									],
									[
										274497,
										274498
									],
									[
										274513,
										274514
									],
									[
										274577,
										274578
									],
									[
										274599,
										274600
									],
									[
										274718,
										274719
									],
									[
										274727,
										274728
									],
									[
										274758,
										274759
									],
									[
										274769,
										274770
									],
									[
										274785,
										274786
									],
									[
										274802,
										274803
									],
									[
										274803,
										274804
									],
									[
										274884,
										274885
									],
									[
										274894,
										274895
									],
									[
										274910,
										274911
									],
									[
										274972,
										274973
									],
									[
										275035,
										275036
									],
									[
										275118,
										275119
									],
									[
										275272,
										275273
									],
									[
										275308,
										275309
									],
									[
										275363,
										275364
									],
									[
										275372,
										275373
									],
									[
										275403,
										275404
									],
									[
										275414,
										275415
									],
									[
										275430,
										275431
									],
									[
										275447,
										275448
									],
									[
										275448,
										275449
									],
									[
										275453,
										275454
									],
									[
										275527,
										275528
									],
									[
										275537,
										275538
									],
									[
										275553,
										275554
									],
									[
										275616,
										275617
									],
									[
										275644,
										275645
									],
									[
										275661,
										275662
									],
									[
										275744,
										275745
									],
									[
										275772,
										275773
									],
									[
										275871,
										275872
									],
									[
										275916,
										275917
									],
									[
										275925,
										275926
									],
									[
										275956,
										275957
									],
									[
										275967,
										275968
									],
									[
										275983,
										275984
									],
									[
										276000,
										276001
									],
									[
										276001,
										276002
									],
									[
										276006,
										276007
									],
									[
										276080,
										276081
									],
									[
										276090,
										276091
									],
									[
										276106,
										276107
									],
									[
										276168,
										276169
									],
									[
										276190,
										276191
									],
									[
										276207,
										276208
									],
									[
										276290,
										276291
									],
									[
										276312,
										276313
									],
									[
										276447,
										276448
									],
									[
										276502,
										276503
									],
									[
										276511,
										276512
									],
									[
										276542,
										276543
									],
									[
										276553,
										276554
									],
									[
										276569,
										276570
									],
									[
										276586,
										276587
									],
									[
										276587,
										276588
									],
									[
										276592,
										276593
									],
									[
										276666,
										276667
									],
									[
										276676,
										276677
									],
									[
										276692,
										276693
									],
									[
										276738,
										276739
									],
									[
										276766,
										276767
									],
									[
										276783,
										276784
									],
									[
										276858,
										276859
									],
									[
										276866,
										276867
									],
									[
										276894,
										276895
									],
									[
										276966,
										276967
									],
									[
										276988,
										276989
									],
									[
										277045,
										277046
									],
									[
										277078,
										277079
									],
									[
										277099,
										277100
									],
									[
										277142,
										277143
									],
									[
										277169,
										277170
									],
									[
										277179,
										277180
									],
									[
										277240,
										277241
									],
									[
										277268,
										277269
									],
									[
										277321,
										277322
									],
									[
										277402,
										277403
									],
									[
										277417,
										277418
									],
									[
										277452,
										277453
									],
									[
										277460,
										277461
									],
									[
										277478,
										277479
									],
									[
										277485,
										277486
									],
									[
										277534,
										277535
									],
									[
										277550,
										277551
									],
									[
										277557,
										277558
									],
									[
										277564,
										277565
									],
									[
										277598,
										277599
									],
									[
										277644,
										277645
									],
									[
										277704,
										277705
									],
									[
										277719,
										277720
									],
									[
										277754,
										277755
									],
									[
										277762,
										277763
									],
									[
										277792,
										277793
									],
									[
										277808,
										277809
									],
									[
										277815,
										277816
									],
									[
										277822,
										277823
									],
									[
										277848,
										277849
									],
									[
										277894,
										277895
									],
									[
										277963,
										277964
									],
									[
										278001,
										278002
									],
									[
										278009,
										278010
									],
									[
										278047,
										278048
									],
									[
										278165,
										278166
									],
									[
										278201,
										278202
									],
									[
										278209,
										278210
									],
									[
										278247,
										278248
									],
									[
										278302,
										278303
									],
									[
										278336,
										278337
									],
									[
										278363,
										278364
									],
									[
										278373,
										278374
									],
									[
										278445,
										278446
									],
									[
										278473,
										278474
									],
									[
										278521,
										278522
									],
									[
										278590,
										278591
									],
									[
										278605,
										278606
									],
									[
										278674,
										278675
									],
									[
										278689,
										278690
									],
									[
										278724,
										278725
									],
									[
										278732,
										278733
									],
									[
										278750,
										278751
									],
									[
										278757,
										278758
									],
									[
										278806,
										278807
									],
									[
										278822,
										278823
									],
									[
										278829,
										278830
									],
									[
										278836,
										278837
									],
									[
										278882,
										278883
									],
									[
										278910,
										278911
									],
									[
										278939,
										278940
									],
									[
										278962,
										278963
									],
									[
										279023,
										279024
									],
									[
										279038,
										279039
									],
									[
										279073,
										279074
									],
									[
										279081,
										279082
									],
									[
										279111,
										279112
									],
									[
										279127,
										279128
									],
									[
										279134,
										279135
									],
									[
										279141,
										279142
									],
									[
										279179,
										279180
									],
									[
										279207,
										279208
									],
									[
										279236,
										279237
									],
									[
										279259,
										279260
									],
									[
										279329,
										279330
									],
									[
										279367,
										279368
									],
									[
										279375,
										279376
									],
									[
										279435,
										279436
									],
									[
										279535,
										279536
									],
									[
										279571,
										279572
									],
									[
										279579,
										279580
									],
									[
										279639,
										279640
									],
									[
										279777,
										279778
									],
									[
										279787,
										279788
									],
									[
										279803,
										279804
									],
									[
										279870,
										279871
									],
									[
										279930,
										279931
									],
									[
										279991,
										279992
									],
									[
										280191,
										280192
									],
									[
										280199,
										280200
									],
									[
										280297,
										280298
									],
									[
										280307,
										280308
									],
									[
										280323,
										280324
									],
									[
										280390,
										280391
									],
									[
										280420,
										280421
									],
									[
										280452,
										280453
									],
									[
										280513,
										280514
									],
									[
										280543,
										280544
									],
									[
										280704,
										280705
									],
									[
										280811,
										280812
									],
									[
										280821,
										280822
									],
									[
										280837,
										280838
									],
									[
										280904,
										280905
									],
									[
										280966,
										280967
									],
									[
										281027,
										281028
									],
									[
										281150,
										281151
									],
									[
										281213,
										281214
									],
									[
										281379,
										281380
									],
									[
										281388,
										281389
									],
									[
										281390,
										281391
									],
									[
										281423,
										281424
									],
									[
										281434,
										281435
									],
									[
										281435,
										281436
									],
									[
										281467,
										281468
									],
									[
										281535,
										281536
									],
									[
										281566,
										281567
									],
									[
										281568,
										281569
									],
									[
										281596,
										281597
									],
									[
										281597,
										281598
									],
									[
										281749,
										281750
									],
									[
										281758,
										281759
									],
									[
										281760,
										281761
									],
									[
										281793,
										281794
									],
									[
										281804,
										281805
									],
									[
										281805,
										281806
									],
									[
										281837,
										281838
									],
									[
										281903,
										281904
									],
									[
										281905,
										281906
									],
									[
										281914,
										281915
									],
									[
										281915,
										281916
									],
									[
										281998,
										281999
									],
									[
										282002,
										282003
									],
									[
										282032,
										282033
									],
									[
										282041,
										282042
									],
									[
										282096,
										282097
									],
									[
										282104,
										282105
									],
									[
										282194,
										282195
									],
									[
										282224,
										282225
									],
									[
										282233,
										282234
									],
									[
										282273,
										282274
									],
									[
										282282,
										282283
									],
									[
										282290,
										282291
									],
									[
										282340,
										282341
									],
									[
										282341,
										282342
									],
									[
										282347,
										282348
									],
									[
										282401,
										282402
									],
									[
										282462,
										282463
									],
									[
										282467,
										282468
									],
									[
										282471,
										282472
									],
									[
										282500,
										282501
									],
									[
										282539,
										282540
									],
									[
										282547,
										282548
									],
									[
										282564,
										282565
									],
									[
										282592,
										282593
									],
									[
										282600,
										282601
									],
									[
										282627,
										282628
									],
									[
										282644,
										282645
									],
									[
										282682,
										282683
									],
									[
										282683,
										282684
									],
									[
										282730,
										282731
									],
									[
										282738,
										282739
									],
									[
										282742,
										282743
									],
									[
										282767,
										282768
									],
									[
										282774,
										282775
									],
									[
										282783,
										282784
									],
									[
										282825,
										282826
									],
									[
										282826,
										282827
									],
									[
										282831,
										282832
									],
									[
										282878,
										282879
									],
									[
										282889,
										282890
									],
									[
										282916,
										282917
									],
									[
										282997,
										282998
									],
									[
										283015,
										283016
									],
									[
										283021,
										283022
									],
									[
										283030,
										283031
									],
									[
										283051,
										283052
									],
									[
										283070,
										283071
									],
									[
										283171,
										283172
									],
									[
										283265,
										283266
									],
									[
										283292,
										283293
									],
									[
										283316,
										283317
									],
									[
										283328,
										283329
									],
									[
										283365,
										283366
									],
									[
										283391,
										283392
									],
									[
										283399,
										283400
									],
									[
										283403,
										283404
									],
									[
										283428,
										283429
									],
									[
										283499,
										283500
									],
									[
										283507,
										283508
									],
									[
										283508,
										283509
									],
									[
										283527,
										283528
									],
									[
										283580,
										283581
									],
									[
										283600,
										283601
									],
									[
										283604,
										283605
									],
									[
										283643,
										283644
									],
									[
										283735,
										283736
									],
									[
										283749,
										283750
									],
									[
										283755,
										283756
									],
									[
										283780,
										283781
									],
									[
										283787,
										283788
									],
									[
										283897,
										283898
									],
									[
										283911,
										283912
									],
									[
										283917,
										283918
									],
									[
										283942,
										283943
									],
									[
										283949,
										283950
									],
									[
										284052,
										284053
									],
									[
										284066,
										284067
									],
									[
										284072,
										284073
									],
									[
										284097,
										284098
									],
									[
										284104,
										284105
									],
									[
										284189,
										284190
									],
									[
										284208,
										284209
									],
									[
										284222,
										284223
									],
									[
										284228,
										284229
									],
									[
										284253,
										284254
									],
									[
										284260,
										284261
									],
									[
										284277,
										284278
									],
									[
										284334,
										284335
									],
									[
										284347,
										284348
									],
									[
										284380,
										284381
									],
									[
										284440,
										284441
									],
									[
										284485,
										284486
									],
									[
										284494,
										284495
									],
									[
										284514,
										284515
									],
									[
										284594,
										284595
									],
									[
										284666,
										284667
									],
									[
										284740,
										284741
									],
									[
										284798,
										284799
									],
									[
										284881,
										284882
									],
									[
										284977,
										284978
									],
									[
										285000,
										285001
									],
									[
										285026,
										285027
									],
									[
										285095,
										285096
									],
									[
										285232,
										285233
									],
									[
										285436,
										285437
									],
									[
										285442,
										285443
									],
									[
										285597,
										285598
									],
									[
										285602,
										285603
									],
									[
										285606,
										285607
									],
									[
										285628,
										285629
									],
									[
										285633,
										285634
									],
									[
										285637,
										285638
									],
									[
										285645,
										285646
									],
									[
										285650,
										285651
									],
									[
										285654,
										285655
									],
									[
										285685,
										285686
									],
									[
										285690,
										285691
									],
									[
										285694,
										285695
									],
									[
										285701,
										285702
									],
									[
										285706,
										285707
									],
									[
										285710,
										285711
									],
									[
										285868,
										285869
									],
									[
										285878,
										285879
									],
									[
										285919,
										285920
									],
									[
										285933,
										285934
									],
									[
										285939,
										285940
									],
									[
										286013,
										286014
									],
									[
										286020,
										286021
									],
									[
										286051,
										286052
									],
									[
										286392,
										286393
									],
									[
										286401,
										286402
									],
									[
										286470,
										286471
									],
									[
										286733,
										286734
									],
									[
										286743,
										286744
									],
									[
										286796,
										286797
									],
									[
										286802,
										286803
									],
									[
										286922,
										286923
									],
									[
										287257,
										287258
									],
									[
										287269,
										287270
									],
									[
										287357,
										287358
									],
									[
										287477,
										287478
									],
									[
										287613,
										287614
									],
									[
										287726,
										287727
									],
									[
										287740,
										287741
									],
									[
										287746,
										287747
									],
									[
										287790,
										287791
									],
									[
										287799,
										287800
									],
									[
										287830,
										287831
									],
									[
										287841,
										287842
									],
									[
										287857,
										287858
									],
									[
										287874,
										287875
									],
									[
										287875,
										287876
									],
									[
										287971,
										287972
									],
									[
										287978,
										287979
									],
									[
										288151,
										288152
									],
									[
										288187,
										288188
									],
									[
										288217,
										288218
									],
									[
										288231,
										288232
									],
									[
										288237,
										288238
									],
									[
										288281,
										288282
									],
									[
										288290,
										288291
									],
									[
										288321,
										288322
									],
									[
										288332,
										288333
									],
									[
										288348,
										288349
									],
									[
										288365,
										288366
									],
									[
										288366,
										288367
									],
									[
										288371,
										288372
									],
									[
										288445,
										288446
									],
									[
										288473,
										288474
									],
									[
										288535,
										288536
									],
									[
										288542,
										288543
									],
									[
										288576,
										288577
									],
									[
										288605,
										288606
									],
									[
										288649,
										288650
									],
									[
										288656,
										288657
									],
									[
										288703,
										288704
									],
									[
										288708,
										288709
									],
									[
										288725,
										288726
									],
									[
										288835,
										288836
									],
									[
										288880,
										288881
									],
									[
										288889,
										288890
									],
									[
										288920,
										288921
									],
									[
										288931,
										288932
									],
									[
										288947,
										288948
									],
									[
										288964,
										288965
									],
									[
										288978,
										288979
									],
									[
										288984,
										288985
									],
									[
										289003,
										289004
									],
									[
										289004,
										289005
									],
									[
										289009,
										289010
									],
									[
										289114,
										289115
									],
									[
										289121,
										289122
									],
									[
										289149,
										289150
									],
									[
										289274,
										289275
									],
									[
										289417,
										289418
									],
									[
										289447,
										289448
									],
									[
										289461,
										289462
									],
									[
										289467,
										289468
									],
									[
										289511,
										289512
									],
									[
										289520,
										289521
									],
									[
										289551,
										289552
									],
									[
										289562,
										289563
									],
									[
										289578,
										289579
									],
									[
										289595,
										289596
									],
									[
										289596,
										289597
									],
									[
										289601,
										289602
									],
									[
										289690,
										289691
									],
									[
										289697,
										289698
									],
									[
										289747,
										289748
									],
									[
										289812,
										289813
									],
									[
										289855,
										289856
									],
									[
										289862,
										289863
									],
									[
										289886,
										289887
									],
									[
										289892,
										289893
									],
									[
										289904,
										289905
									],
									[
										289925,
										289926
									],
									[
										289938,
										289939
									],
									[
										289947,
										289948
									],
									[
										289950,
										289951
									],
									[
										290001,
										290002
									],
									[
										290022,
										290023
									],
									[
										290028,
										290029
									],
									[
										290038,
										290039
									],
									[
										290064,
										290065
									],
									[
										290065,
										290066
									],
									[
										290089,
										290090
									],
									[
										290118,
										290119
									],
									[
										290123,
										290124
									],
									[
										290143,
										290144
									],
									[
										290153,
										290154
									],
									[
										290156,
										290157
									],
									[
										290166,
										290167
									],
									[
										290214,
										290215
									],
									[
										290251,
										290252
									],
									[
										290300,
										290301
									],
									[
										290327,
										290328
									],
									[
										290337,
										290338
									],
									[
										290387,
										290388
									],
									[
										290413,
										290414
									],
									[
										290456,
										290457
									],
									[
										290481,
										290482
									],
									[
										290493,
										290494
									],
									[
										290552,
										290553
									],
									[
										290574,
										290575
									],
									[
										290607,
										290608
									],
									[
										290623,
										290624
									],
									[
										290632,
										290633
									],
									[
										290644,
										290645
									],
									[
										290651,
										290652
									],
									[
										290713,
										290714
									],
									[
										290728,
										290729
									],
									[
										290763,
										290764
									],
									[
										290771,
										290772
									],
									[
										290789,
										290790
									],
									[
										290796,
										290797
									],
									[
										290864,
										290865
									],
									[
										290892,
										290893
									],
									[
										290908,
										290909
									],
									[
										290914,
										290915
									],
									[
										290919,
										290920
									],
									[
										290926,
										290927
									],
									[
										291005,
										291006
									],
									[
										291020,
										291021
									],
									[
										291053,
										291054
									],
									[
										291061,
										291062
									],
									[
										291110,
										291111
									],
									[
										291122,
										291123
									],
									[
										291138,
										291139
									],
									[
										291212,
										291213
									],
									[
										291233,
										291234
									],
									[
										291241,
										291242
									],
									[
										291291,
										291292
									],
									[
										291452,
										291453
									],
									[
										291460,
										291461
									],
									[
										291581,
										291582
									],
									[
										291731,
										291732
									],
									[
										291876,
										291877
									],
									[
										291937,
										291938
									],
									[
										291942,
										291943
									],
									[
										292106,
										292107
									],
									[
										292115,
										292116
									],
									[
										292117,
										292118
									],
									[
										292150,
										292151
									],
									[
										292161,
										292162
									],
									[
										292162,
										292163
									],
									[
										292194,
										292195
									],
									[
										292266,
										292267
									],
									[
										292268,
										292269
									],
									[
										292277,
										292278
									],
									[
										292278,
										292279
									],
									[
										292430,
										292431
									],
									[
										292439,
										292440
									],
									[
										292441,
										292442
									],
									[
										292474,
										292475
									],
									[
										292485,
										292486
									],
									[
										292486,
										292487
									],
									[
										292518,
										292519
									],
									[
										292584,
										292585
									],
									[
										292586,
										292587
									],
									[
										292595,
										292596
									],
									[
										292596,
										292597
									],
									[
										292687,
										292688
									],
									[
										292691,
										292692
									],
									[
										292721,
										292722
									],
									[
										292730,
										292731
									],
									[
										292785,
										292786
									],
									[
										292793,
										292794
									],
									[
										292880,
										292881
									],
									[
										292910,
										292911
									],
									[
										292919,
										292920
									],
									[
										292959,
										292960
									],
									[
										292968,
										292969
									],
									[
										292976,
										292977
									],
									[
										293025,
										293026
									],
									[
										293026,
										293027
									],
									[
										293032,
										293033
									],
									[
										293086,
										293087
									],
									[
										293147,
										293148
									],
									[
										293152,
										293153
									],
									[
										293156,
										293157
									],
									[
										293185,
										293186
									],
									[
										293224,
										293225
									],
									[
										293232,
										293233
									],
									[
										293249,
										293250
									],
									[
										293277,
										293278
									],
									[
										293285,
										293286
									],
									[
										293312,
										293313
									],
									[
										293329,
										293330
									],
									[
										293367,
										293368
									],
									[
										293368,
										293369
									],
									[
										293415,
										293416
									],
									[
										293423,
										293424
									],
									[
										293427,
										293428
									],
									[
										293452,
										293453
									],
									[
										293459,
										293460
									],
									[
										293468,
										293469
									],
									[
										293510,
										293511
									],
									[
										293511,
										293512
									],
									[
										293516,
										293517
									],
									[
										293563,
										293564
									],
									[
										293574,
										293575
									],
									[
										293601,
										293602
									],
									[
										293682,
										293683
									],
									[
										293700,
										293701
									],
									[
										293706,
										293707
									],
									[
										293715,
										293716
									],
									[
										293736,
										293737
									],
									[
										293755,
										293756
									],
									[
										293856,
										293857
									],
									[
										293950,
										293951
									],
									[
										293977,
										293978
									],
									[
										294001,
										294002
									],
									[
										294013,
										294014
									],
									[
										294050,
										294051
									],
									[
										294076,
										294077
									],
									[
										294084,
										294085
									],
									[
										294088,
										294089
									],
									[
										294113,
										294114
									],
									[
										294184,
										294185
									],
									[
										294192,
										294193
									],
									[
										294193,
										294194
									],
									[
										294212,
										294213
									],
									[
										294265,
										294266
									],
									[
										294285,
										294286
									],
									[
										294289,
										294290
									],
									[
										294351,
										294352
									],
									[
										294451,
										294452
									],
									[
										294501,
										294502
									],
									[
										294579,
										294580
									],
									[
										294629,
										294630
									],
									[
										294707,
										294708
									],
									[
										294742,
										294743
									],
									[
										294752,
										294753
									],
									[
										294784,
										294785
									],
									[
										294830,
										294831
									],
									[
										294900,
										294901
									],
									[
										294987,
										294988
									],
									[
										295047,
										295048
									],
									[
										295057,
										295058
									],
									[
										295098,
										295099
									],
									[
										295144,
										295145
									],
									[
										295218,
										295219
									],
									[
										295309,
										295310
									],
									[
										295382,
										295383
									],
									[
										295470,
										295471
									],
									[
										295541,
										295542
									],
									[
										295627,
										295628
									],
									[
										295683,
										295684
									],
									[
										295767,
										295768
									],
									[
										295813,
										295814
									],
									[
										295823,
										295824
									],
									[
										295861,
										295862
									],
									[
										295907,
										295908
									],
									[
										295978,
										295979
									],
									[
										296066,
										296067
									],
									[
										296136,
										296137
									],
									[
										296221,
										296222
									],
									[
										296289,
										296290
									],
									[
										296505,
										296506
									],
									[
										296723,
										296724
									],
									[
										296816,
										296817
									],
									[
										296848,
										296849
									],
									[
										296937,
										296938
									],
									[
										297034,
										297035
									],
									[
										297205,
										297206
									],
									[
										297215,
										297216
									],
									[
										297433,
										297434
									],
									[
										297535,
										297536
									],
									[
										297576,
										297577
									],
									[
										297665,
										297666
									],
									[
										297753,
										297754
									],
									[
										297933,
										297934
									],
									[
										297943,
										297944
									],
									[
										298179,
										298180
									],
									[
										298397,
										298398
									],
									[
										298500,
										298501
									],
									[
										298718,
										298719
									],
									[
										298819,
										298820
									],
									[
										299136,
										299137
									],
									[
										299174,
										299175
									],
									[
										299263,
										299264
									],
									[
										299531,
										299532
									],
									[
										299541,
										299542
									],
									[
										299775,
										299776
									],
									[
										300093,
										300094
									],
									[
										300409,
										300410
									],
									[
										300440,
										300441
									],
									[
										300441,
										300442
									],
									[
										300509,
										300510
									],
									[
										300515,
										300516
									],
									[
										300600,
										300601
									],
									[
										300659,
										300660
									],
									[
										300710,
										300711
									],
									[
										300716,
										300717
									],
									[
										300801,
										300802
									],
									[
										300822,
										300823
									],
									[
										300904,
										300905
									],
									[
										300942,
										300943
									],
									[
										300996,
										300997
									],
									[
										301019,
										301020
									],
									[
										301041,
										301042
									],
									[
										301047,
										301048
									],
									[
										301221,
										301222
									],
									[
										301232,
										301233
									],
									[
										301285,
										301286
									],
									[
										301308,
										301309
									],
									[
										301335,
										301336
									],
									[
										301440,
										301441
									],
									[
										301455,
										301456
									],
									[
										301649,
										301650
									],
									[
										301675,
										301676
									],
									[
										301847,
										301848
									],
									[
										301873,
										301874
									],
									[
										301934,
										301935
									],
									[
										301949,
										301950
									],
									[
										302000,
										302001
									],
									[
										302006,
										302007
									],
									[
										302024,
										302025
									],
									[
										302138,
										302139
									],
									[
										302155,
										302156
									],
									[
										302169,
										302170
									],
									[
										302175,
										302176
									],
									[
										302200,
										302201
									],
									[
										302207,
										302208
									],
									[
										302263,
										302264
									],
									[
										302324,
										302325
									],
									[
										302336,
										302337
									],
									[
										302358,
										302359
									],
									[
										302364,
										302365
									],
									[
										302424,
										302425
									],
									[
										302575,
										302576
									],
									[
										302607,
										302608
									],
									[
										302634,
										302635
									],
									[
										302656,
										302657
									],
									[
										302665,
										302666
									],
									[
										302679,
										302680
									],
									[
										302726,
										302727
									],
									[
										302765,
										302766
									],
									[
										302934,
										302935
									],
									[
										302966,
										302967
									],
									[
										302993,
										302994
									],
									[
										303015,
										303016
									],
									[
										303024,
										303025
									],
									[
										303038,
										303039
									],
									[
										303085,
										303086
									],
									[
										303094,
										303095
									],
									[
										303156,
										303157
									],
									[
										303293,
										303294
									],
									[
										303301,
										303302
									],
									[
										303302,
										303303
									],
									[
										303339,
										303340
									],
									[
										303341,
										303342
									],
									[
										303376,
										303377
									],
									[
										303386,
										303387
									],
									[
										303453,
										303454
									],
									[
										303480,
										303481
									],
									[
										303527,
										303528
									],
									[
										303536,
										303537
									],
									[
										303721,
										303722
									],
									[
										303738,
										303739
									],
									[
										303752,
										303753
									],
									[
										303758,
										303759
									],
									[
										303869,
										303870
									],
									[
										303915,
										303916
									],
									[
										303925,
										303926
									],
									[
										303941,
										303942
									],
									[
										303964,
										303965
									],
									[
										303971,
										303972
									],
									[
										304017,
										304018
									],
									[
										304123,
										304124
									],
									[
										304144,
										304145
									],
									[
										304151,
										304152
									],
									[
										304193,
										304194
									],
									[
										304288,
										304289
									],
									[
										304469,
										304470
									],
									[
										304486,
										304487
									],
									[
										304500,
										304501
									],
									[
										304506,
										304507
									],
									[
										304617,
										304618
									],
									[
										304654,
										304655
									],
									[
										304661,
										304662
									],
									[
										304773,
										304774
									],
									[
										304786,
										304787
									],
									[
										304787,
										304788
									],
									[
										304790,
										304791
									],
									[
										304838,
										304839
									],
									[
										304910,
										304911
									],
									[
										304938,
										304939
									],
									[
										304951,
										304952
									],
									[
										304979,
										304980
									],
									[
										304985,
										304986
									],
									[
										305064,
										305065
									],
									[
										305066,
										305067
									],
									[
										305080,
										305081
									],
									[
										305128,
										305129
									],
									[
										305160,
										305161
									],
									[
										305166,
										305167
									],
									[
										305200,
										305201
									],
									[
										305202,
										305203
									],
									[
										305215,
										305216
									],
									[
										305241,
										305242
									],
									[
										305243,
										305244
									],
									[
										305257,
										305258
									],
									[
										305316,
										305317
									],
									[
										305396,
										305397
									],
									[
										305402,
										305403
									],
									[
										305436,
										305437
									],
									[
										305495,
										305496
									],
									[
										305608,
										305609
									],
									[
										305617,
										305618
									],
									[
										305619,
										305620
									],
									[
										305642,
										305643
									],
									[
										305659,
										305660
									],
									[
										305710,
										305711
									],
									[
										305716,
										305717
									],
									[
										305741,
										305742
									],
									[
										305743,
										305744
									],
									[
										305757,
										305758
									],
									[
										305836,
										305837
									],
									[
										305845,
										305846
									],
									[
										305847,
										305848
									],
									[
										305870,
										305871
									],
									[
										305887,
										305888
									],
									[
										305904,
										305905
									],
									[
										305955,
										305956
									],
									[
										305961,
										305962
									],
									[
										305986,
										305987
									],
									[
										305988,
										305989
									],
									[
										306002,
										306003
									],
									[
										306059,
										306060
									],
									[
										306068,
										306069
									],
									[
										306070,
										306071
									],
									[
										306109,
										306110
									],
									[
										306160,
										306161
									],
									[
										306166,
										306167
									],
									[
										306191,
										306192
									],
									[
										306193,
										306194
									],
									[
										306207,
										306208
									],
									[
										306292,
										306293
									],
									[
										306294,
										306295
									],
									[
										306303,
										306304
									],
									[
										306320,
										306321
									],
									[
										306337,
										306338
									],
									[
										306351,
										306352
									],
									[
										306357,
										306358
									],
									[
										306382,
										306383
									],
									[
										306389,
										306390
									],
									[
										306418,
										306419
									],
									[
										306420,
										306421
									],
									[
										306542,
										306543
									],
									[
										306544,
										306545
									],
									[
										306553,
										306554
									],
									[
										306570,
										306571
									],
									[
										306587,
										306588
									],
									[
										306604,
										306605
									],
									[
										306618,
										306619
									],
									[
										306624,
										306625
									],
									[
										306649,
										306650
									],
									[
										306656,
										306657
									],
									[
										306669,
										306670
									],
									[
										306671,
										306672
									],
									[
										306762,
										306763
									],
									[
										306764,
										306765
									],
									[
										306789,
										306790
									],
									[
										306806,
										306807
									],
									[
										306820,
										306821
									],
									[
										306826,
										306827
									],
									[
										306851,
										306852
									],
									[
										306858,
										306859
									],
									[
										306871,
										306872
									],
									[
										306873,
										306874
									],
									[
										306988,
										306989
									],
									[
										307024,
										307025
									],
									[
										307057,
										307058
									],
									[
										307110,
										307111
									],
									[
										307112,
										307113
									],
									[
										307133,
										307134
									],
									[
										307135,
										307136
									],
									[
										307262,
										307263
									],
									[
										307268,
										307269
									],
									[
										307368,
										307369
									],
									[
										307383,
										307384
									],
									[
										307384,
										307385
									],
									[
										307493,
										307494
									],
									[
										307503,
										307504
									],
									[
										307504,
										307505
									],
									[
										307512,
										307513
									],
									[
										307522,
										307523
									],
									[
										307552,
										307553
									],
									[
										307576,
										307577
									],
									[
										307583,
										307584
									],
									[
										307590,
										307591
									],
									[
										307598,
										307599
									],
									[
										307622,
										307623
									],
									[
										307637,
										307638
									],
									[
										307666,
										307667
									],
									[
										307672,
										307673
									],
									[
										307676,
										307677
									],
									[
										307714,
										307715
									],
									[
										307730,
										307731
									],
									[
										307731,
										307732
									],
									[
										307741,
										307742
									],
									[
										307768,
										307769
									],
									[
										307824,
										307825
									],
									[
										307832,
										307833
									],
									[
										307833,
										307834
									],
									[
										307849,
										307850
									],
									[
										307880,
										307881
									],
									[
										307915,
										307916
									],
									[
										307928,
										307929
									],
									[
										307929,
										307930
									],
									[
										307932,
										307933
									],
									[
										307942,
										307943
									],
									[
										307943,
										307944
									],
									[
										307961,
										307962
									],
									[
										308009,
										308010
									],
									[
										308019,
										308020
									],
									[
										308020,
										308021
									],
									[
										308065,
										308066
									],
									[
										308089,
										308090
									],
									[
										308107,
										308108
									],
									[
										308111,
										308112
									],
									[
										308134,
										308135
									],
									[
										308149,
										308150
									],
									[
										308172,
										308173
									],
									[
										308232,
										308233
									],
									[
										308253,
										308254
									],
									[
										308263,
										308264
									],
									[
										308264,
										308265
									],
									[
										308293,
										308294
									],
									[
										308309,
										308310
									],
									[
										308347,
										308348
									],
									[
										308397,
										308398
									],
									[
										308407,
										308408
									],
									[
										308408,
										308409
									],
									[
										308442,
										308443
									],
									[
										308450,
										308451
									],
									[
										308491,
										308492
									],
									[
										308545,
										308546
									],
									[
										308546,
										308547
									],
									[
										308579,
										308580
									],
									[
										308616,
										308617
									],
									[
										308638,
										308639
									],
									[
										308645,
										308646
									],
									[
										308653,
										308654
									],
									[
										308657,
										308658
									],
									[
										308676,
										308677
									],
									[
										308723,
										308724
									],
									[
										308762,
										308763
									],
									[
										308773,
										308774
									],
									[
										308774,
										308775
									],
									[
										308781,
										308782
									],
									[
										308868,
										308869
									],
									[
										308869,
										308870
									],
									[
										308885,
										308886
									],
									[
										308962,
										308963
									],
									[
										308963,
										308964
									],
									[
										308980,
										308981
									],
									[
										308981,
										308982
									],
									[
										309006,
										309007
									],
									[
										309007,
										309008
									],
									[
										309010,
										309011
									],
									[
										309020,
										309021
									],
									[
										309021,
										309022
									],
									[
										309064,
										309065
									],
									[
										309076,
										309077
									],
									[
										309100,
										309101
									],
									[
										309105,
										309106
									],
									[
										309118,
										309119
									],
									[
										309178,
										309179
									],
									[
										309193,
										309194
									],
									[
										309217,
										309218
									],
									[
										309225,
										309226
									],
									[
										309240,
										309241
									],
									[
										309247,
										309248
									],
									[
										309256,
										309257
									],
									[
										309283,
										309284
									],
									[
										309293,
										309294
									],
									[
										309294,
										309295
									],
									[
										309303,
										309304
									],
									[
										309385,
										309386
									],
									[
										309386,
										309387
									],
									[
										309389,
										309390
									],
									[
										309399,
										309400
									],
									[
										309400,
										309401
									],
									[
										309449,
										309450
									],
									[
										309457,
										309458
									],
									[
										309458,
										309459
									],
									[
										309488,
										309489
									],
									[
										309489,
										309490
									],
									[
										309504,
										309505
									],
									[
										309514,
										309515
									],
									[
										309515,
										309516
									],
									[
										309527,
										309528
									],
									[
										309590,
										309591
									],
									[
										309608,
										309609
									],
									[
										309609,
										309610
									],
									[
										309618,
										309619
									],
									[
										309619,
										309620
									],
									[
										309661,
										309662
									],
									[
										309662,
										309663
									],
									[
										309675,
										309676
									],
									[
										309690,
										309691
									],
									[
										309697,
										309698
									],
									[
										309740,
										309741
									],
									[
										309769,
										309770
									],
									[
										309786,
										309787
									],
									[
										309804,
										309805
									],
									[
										309812,
										309813
									],
									[
										309819,
										309820
									],
									[
										309934,
										309935
									],
									[
										309935,
										309936
									],
									[
										309943,
										309944
									],
									[
										309944,
										309945
									],
									[
										309949,
										309950
									],
									[
										309980,
										309981
									],
									[
										309981,
										309982
									],
									[
										310018,
										310019
									],
									[
										310028,
										310029
									],
									[
										310029,
										310030
									],
									[
										310035,
										310036
									],
									[
										310050,
										310051
									],
									[
										310057,
										310058
									],
									[
										310102,
										310103
									],
									[
										310143,
										310144
									],
									[
										310185,
										310186
									],
									[
										310226,
										310227
									],
									[
										310249,
										310250
									],
									[
										310283,
										310284
									],
									[
										310287,
										310288
									],
									[
										310295,
										310296
									],
									[
										310330,
										310331
									],
									[
										310395,
										310396
									],
									[
										310400,
										310401
									],
									[
										310406,
										310407
									],
									[
										310448,
										310449
									],
									[
										310469,
										310470
									],
									[
										310479,
										310480
									],
									[
										310480,
										310481
									],
									[
										310498,
										310499
									],
									[
										310508,
										310509
									],
									[
										310509,
										310510
									],
									[
										310546,
										310547
									],
									[
										310555,
										310556
									],
									[
										310559,
										310560
									],
									[
										310569,
										310570
									],
									[
										310570,
										310571
									],
									[
										310581,
										310582
									],
									[
										310623,
										310624
									],
									[
										310624,
										310625
									],
									[
										310664,
										310665
									],
									[
										310677,
										310678
									],
									[
										310684,
										310685
									],
									[
										310723,
										310724
									],
									[
										310733,
										310734
									],
									[
										310734,
										310735
									],
									[
										310771,
										310772
									],
									[
										310780,
										310781
									],
									[
										310784,
										310785
									],
									[
										310794,
										310795
									],
									[
										310795,
										310796
									],
									[
										310852,
										310853
									],
									[
										310859,
										310860
									],
									[
										310935,
										310936
									],
									[
										310944,
										310945
									],
									[
										310971,
										310972
									],
									[
										310998,
										310999
									],
									[
										311018,
										311019
									],
									[
										311026,
										311027
									],
									[
										311030,
										311031
									],
									[
										311075,
										311076
									],
									[
										311116,
										311117
									],
									[
										311137,
										311138
									],
									[
										311146,
										311147
									],
									[
										311150,
										311151
									],
									[
										311240,
										311241
									],
									[
										311289,
										311290
									],
									[
										311310,
										311311
									],
									[
										311319,
										311320
									],
									[
										311323,
										311324
									],
									[
										311400,
										311401
									],
									[
										311446,
										311447
									],
									[
										311464,
										311465
									],
									[
										311568,
										311569
									],
									[
										311585,
										311586
									],
									[
										311624,
										311625
									],
									[
										311646,
										311647
									],
									[
										311707,
										311708
									],
									[
										311763,
										311764
									],
									[
										311771,
										311772
									],
									[
										311781,
										311782
									],
									[
										311805,
										311806
									],
									[
										311826,
										311827
									],
									[
										311834,
										311835
									],
									[
										311867,
										311868
									],
									[
										311894,
										311895
									],
									[
										311917,
										311918
									],
									[
										311934,
										311935
									],
									[
										311938,
										311939
									],
									[
										311946,
										311947
									],
									[
										311966,
										311967
									],
									[
										311987,
										311988
									],
									[
										312010,
										312011
									],
									[
										312018,
										312019
									],
									[
										312091,
										312092
									],
									[
										312115,
										312116
									],
									[
										312123,
										312124
									],
									[
										312156,
										312157
									],
									[
										312183,
										312184
									],
									[
										312206,
										312207
									],
									[
										312212,
										312213
									],
									[
										312222,
										312223
									],
									[
										312240,
										312241
									],
									[
										312261,
										312262
									],
									[
										312267,
										312268
									],
									[
										312342,
										312343
									],
									[
										312383,
										312384
									],
									[
										312397,
										312398
									],
									[
										312405,
										312406
									],
									[
										312465,
										312466
									],
									[
										312492,
										312493
									],
									[
										312519,
										312520
									],
									[
										312530,
										312531
									],
									[
										312640,
										312641
									],
									[
										312654,
										312655
									],
									[
										312728,
										312729
									],
									[
										312756,
										312757
									],
									[
										312776,
										312777
									],
									[
										312785,
										312786
									],
									[
										312799,
										312800
									],
									[
										312856,
										312857
									],
									[
										312865,
										312866
									],
									[
										312930,
										312931
									],
									[
										312984,
										312985
									],
									[
										313020,
										313021
									],
									[
										313026,
										313027
									],
									[
										313084,
										313085
									],
									[
										313137,
										313138
									],
									[
										313173,
										313174
									],
									[
										313179,
										313180
									],
									[
										313280,
										313281
									],
									[
										313307,
										313308
									],
									[
										313361,
										313362
									],
									[
										313417,
										313418
									],
									[
										313426,
										313427
									],
									[
										313467,
										313468
									],
									[
										313497,
										313498
									],
									[
										313525,
										313526
									],
									[
										313569,
										313570
									],
									[
										313578,
										313579
									],
									[
										313620,
										313621
									],
									[
										313665,
										313666
									],
									[
										313671,
										313672
									],
									[
										313763,
										313764
									],
									[
										313764,
										313765
									],
									[
										313781,
										313782
									],
									[
										313883,
										313884
									],
									[
										313910,
										313911
									],
									[
										313948,
										313949
									],
									[
										313969,
										313970
									],
									[
										314020,
										314021
									],
									[
										314029,
										314030
									],
									[
										314070,
										314071
									],
									[
										314101,
										314102
									],
									[
										314128,
										314129
									],
									[
										314203,
										314204
									],
									[
										314283,
										314284
									],
									[
										314290,
										314291
									],
									[
										314299,
										314300
									],
									[
										314375,
										314376
									],
									[
										314376,
										314377
									],
									[
										314428,
										314429
									],
									[
										314548,
										314549
									],
									[
										314575,
										314576
									],
									[
										314634,
										314635
									],
									[
										314719,
										314720
									],
									[
										314728,
										314729
									],
									[
										314769,
										314770
									],
									[
										314800,
										314801
									],
									[
										314827,
										314828
									],
									[
										314987,
										314988
									],
									[
										314996,
										314997
									],
									[
										315077,
										315078
									],
									[
										315162,
										315163
									],
									[
										315233,
										315234
									],
									[
										315323,
										315324
									],
									[
										315419,
										315420
									],
									[
										315511,
										315512
									],
									[
										315533,
										315534
									],
									[
										315595,
										315596
									],
									[
										315635,
										315636
									],
									[
										315640,
										315641
									],
									[
										315719,
										315720
									],
									[
										315790,
										315791
									],
									[
										315811,
										315812
									],
									[
										315879,
										315880
									],
									[
										315884,
										315885
									],
									[
										315974,
										315975
									],
									[
										316066,
										316067
									],
									[
										316088,
										316089
									],
									[
										316109,
										316110
									],
									[
										316149,
										316150
									],
									[
										316181,
										316182
									],
									[
										316237,
										316238
									],
									[
										316244,
										316245
									],
									[
										316270,
										316271
									],
									[
										316280,
										316281
									],
									[
										316296,
										316297
									],
									[
										316305,
										316306
									],
									[
										316320,
										316321
									],
									[
										316353,
										316354
									],
									[
										316363,
										316364
									],
									[
										316384,
										316385
									],
									[
										316399,
										316400
									],
									[
										316427,
										316428
									],
									[
										316432,
										316433
									],
									[
										316435,
										316436
									],
									[
										316439,
										316440
									],
									[
										316466,
										316467
									],
									[
										316471,
										316472
									],
									[
										316538,
										316539
									],
									[
										316593,
										316594
									],
									[
										316717,
										316718
									],
									[
										316789,
										316790
									],
									[
										316844,
										316845
									],
									[
										316957,
										316958
									],
									[
										317044,
										317045
									],
									[
										317114,
										317115
									],
									[
										317115,
										317116
									],
									[
										317148,
										317149
									],
									[
										317203,
										317204
									],
									[
										317272,
										317273
									],
									[
										317278,
										317279
									],
									[
										317390,
										317391
									],
									[
										317448,
										317449
									],
									[
										317454,
										317455
									],
									[
										317455,
										317456
									],
									[
										317499,
										317500
									],
									[
										317500,
										317501
									],
									[
										317515,
										317516
									],
									[
										317519,
										317520
									],
									[
										317532,
										317533
									],
									[
										317556,
										317557
									],
									[
										317594,
										317595
									],
									[
										317625,
										317626
									],
									[
										317634,
										317635
									],
									[
										317682,
										317683
									],
									[
										317764,
										317765
									],
									[
										317823,
										317824
									],
									[
										317829,
										317830
									],
									[
										317987,
										317988
									],
									[
										318029,
										318030
									],
									[
										318111,
										318112
									],
									[
										318140,
										318141
									],
									[
										318146,
										318147
									],
									[
										318147,
										318148
									],
									[
										318197,
										318198
									],
									[
										318198,
										318199
									],
									[
										318201,
										318202
									],
									[
										318207,
										318208
									],
									[
										318295,
										318296
									],
									[
										318302,
										318303
									],
									[
										318303,
										318304
									],
									[
										318378,
										318379
									],
									[
										318435,
										318436
									],
									[
										318450,
										318451
									],
									[
										318542,
										318543
									],
									[
										318543,
										318544
									],
									[
										318552,
										318553
									],
									[
										318559,
										318560
									],
									[
										318645,
										318646
									],
									[
										318649,
										318650
									],
									[
										318666,
										318667
									],
									[
										318690,
										318691
									],
									[
										318696,
										318697
									],
									[
										318809,
										318810
									],
									[
										318816,
										318817
									],
									[
										318839,
										318840
									],
									[
										318853,
										318854
									],
									[
										318976,
										318977
									],
									[
										319008,
										319009
									],
									[
										319009,
										319010
									],
									[
										319067,
										319068
									],
									[
										319120,
										319121
									],
									[
										319214,
										319215
									],
									[
										319257,
										319258
									],
									[
										319288,
										319289
									],
									[
										319327,
										319328
									],
									[
										319386,
										319387
									],
									[
										319397,
										319398
									],
									[
										319447,
										319448
									],
									[
										319475,
										319476
									],
									[
										319549,
										319550
									],
									[
										319556,
										319557
									],
									[
										319557,
										319558
									],
									[
										319614,
										319615
									],
									[
										319652,
										319653
									],
									[
										319659,
										319660
									],
									[
										319697,
										319698
									],
									[
										319745,
										319746
									],
									[
										319752,
										319753
									],
									[
										319753,
										319754
									],
									[
										319820,
										319821
									],
									[
										319877,
										319878
									],
									[
										319892,
										319893
									],
									[
										319984,
										319985
									],
									[
										319985,
										319986
									],
									[
										319994,
										319995
									],
									[
										320001,
										320002
									],
									[
										320084,
										320085
									],
									[
										320098,
										320099
									],
									[
										320104,
										320105
									],
									[
										320217,
										320218
									],
									[
										320224,
										320225
									],
									[
										320247,
										320248
									],
									[
										320261,
										320262
									],
									[
										320384,
										320385
									],
									[
										320416,
										320417
									],
									[
										320417,
										320418
									],
									[
										320479,
										320480
									],
									[
										320536,
										320537
									],
									[
										320630,
										320631
									],
									[
										320680,
										320681
									],
									[
										320712,
										320713
									],
									[
										320785,
										320786
									],
									[
										320815,
										320816
									],
									[
										320854,
										320855
									],
									[
										320913,
										320914
									],
									[
										320924,
										320925
									],
									[
										320981,
										320982
									],
									[
										321008,
										321009
									],
									[
										321035,
										321036
									],
									[
										321042,
										321043
									],
									[
										321043,
										321044
									],
									[
										321133,
										321134
									],
									[
										321175,
										321176
									],
									[
										321182,
										321183
									],
									[
										321221,
										321222
									],
									[
										321236,
										321237
									],
									[
										321260,
										321261
									],
									[
										321267,
										321268
									],
									[
										321268,
										321269
									],
									[
										321325,
										321326
									],
									[
										321367,
										321368
									],
									[
										321374,
										321375
									],
									[
										321451,
										321452
									],
									[
										321581,
										321582
									],
									[
										321596,
										321597
									],
									[
										321830,
										321831
									],
									[
										321836,
										321837
									],
									[
										321973,
										321974
									],
									[
										321980,
										321981
									],
									[
										322003,
										322004
									],
									[
										322025,
										322026
									],
									[
										322257,
										322258
									],
									[
										322348,
										322349
									],
									[
										322393,
										322394
									],
									[
										322495,
										322496
									],
									[
										322538,
										322539
									],
									[
										322564,
										322565
									],
									[
										322611,
										322612
									],
									[
										322670,
										322671
									],
									[
										322681,
										322682
									],
									[
										322749,
										322750
									],
									[
										322854,
										322855
									],
									[
										322934,
										322935
									],
									[
										323041,
										323042
									],
									[
										323126,
										323127
									],
									[
										323236,
										323237
									],
									[
										323301,
										323302
									],
									[
										323329,
										323330
									],
									[
										323415,
										323416
									],
									[
										323442,
										323443
									],
									[
										323461,
										323462
									],
									[
										323533,
										323534
									],
									[
										323590,
										323591
									],
									[
										323607,
										323608
									],
									[
										323666,
										323667
									],
									[
										323758,
										323759
									],
									[
										323884,
										323885
									],
									[
										323899,
										323900
									],
									[
										324124,
										324125
									],
									[
										324130,
										324131
									],
									[
										324258,
										324259
									],
									[
										324265,
										324266
									],
									[
										324288,
										324289
									],
									[
										324307,
										324308
									],
									[
										324533,
										324534
									],
									[
										324629,
										324630
									],
									[
										324674,
										324675
									],
									[
										324781,
										324782
									],
									[
										324824,
										324825
									],
									[
										324850,
										324851
									],
									[
										324902,
										324903
									],
									[
										324961,
										324962
									],
									[
										324972,
										324973
									],
									[
										325040,
										325041
									],
									[
										325150,
										325151
									],
									[
										325230,
										325231
									],
									[
										325342,
										325343
									],
									[
										325427,
										325428
									],
									[
										325542,
										325543
									],
									[
										325607,
										325608
									],
									[
										325635,
										325636
									],
									[
										325721,
										325722
									],
									[
										325748,
										325749
									],
									[
										325767,
										325768
									],
									[
										325841,
										325842
									],
									[
										325898,
										325899
									],
									[
										325915,
										325916
									],
									[
										325976,
										325977
									],
									[
										326068,
										326069
									],
									[
										326248,
										326249
									],
									[
										326254,
										326255
									],
									[
										326357,
										326358
									],
									[
										326448,
										326449
									],
									[
										326501,
										326502
									],
									[
										326597,
										326598
									],
									[
										326649,
										326650
									],
									[
										326677,
										326678
									],
									[
										326751,
										326752
									],
									[
										326846,
										326847
									],
									[
										326854,
										326855
									],
									[
										327036,
										327037
									],
									[
										327042,
										327043
									],
									[
										327145,
										327146
									],
									[
										327236,
										327237
									],
									[
										327289,
										327290
									],
									[
										327385,
										327386
									],
									[
										327437,
										327438
									],
									[
										327465,
										327466
									],
									[
										327539,
										327540
									],
									[
										327547,
										327548
									],
									[
										327638,
										327639
									],
									[
										327640,
										327641
									],
									[
										327824,
										327825
									],
									[
										327841,
										327842
									],
									[
										327859,
										327860
									],
									[
										327916,
										327917
									],
									[
										327936,
										327937
									],
									[
										328081,
										328082
									],
									[
										328161,
										328162
									],
									[
										328245,
										328246
									],
									[
										328328,
										328329
									],
									[
										328345,
										328346
									],
									[
										328358,
										328359
									],
									[
										328359,
										328360
									],
									[
										328462,
										328463
									],
									[
										328470,
										328471
									],
									[
										328480,
										328481
									],
									[
										328528,
										328529
									],
									[
										328548,
										328549
									],
									[
										328560,
										328561
									],
									[
										328582,
										328583
									],
									[
										328589,
										328590
									],
									[
										328601,
										328602
									],
									[
										328663,
										328664
									],
									[
										328678,
										328679
									],
									[
										328724,
										328725
									],
									[
										328725,
										328726
									],
									[
										328730,
										328731
									],
									[
										328741,
										328742
									],
									[
										328788,
										328789
									],
									[
										328808,
										328809
									],
									[
										328814,
										328815
									],
									[
										328824,
										328825
									],
									[
										328882,
										328883
									],
									[
										328883,
										328884
									],
									[
										328888,
										328889
									],
									[
										328903,
										328904
									],
									[
										328956,
										328957
									],
									[
										328958,
										328959
									],
									[
										329017,
										329018
									],
									[
										329053,
										329054
									],
									[
										329070,
										329071
									],
									[
										329105,
										329106
									],
									[
										329113,
										329114
									],
									[
										329114,
										329115
									],
									[
										329124,
										329125
									],
									[
										329125,
										329126
									],
									[
										329149,
										329150
									],
									[
										329150,
										329151
									],
									[
										329175,
										329176
									],
									[
										329206,
										329207
									],
									[
										329207,
										329208
									],
									[
										329412,
										329413
									],
									[
										329461,
										329462
									],
									[
										329516,
										329517
									],
									[
										329559,
										329560
									],
									[
										329700,
										329701
									],
									[
										329744,
										329745
									],
									[
										329866,
										329867
									],
									[
										329936,
										329937
									],
									[
										329937,
										329938
									],
									[
										330061,
										330062
									],
									[
										330166,
										330167
									],
									[
										330229,
										330230
									],
									[
										330445,
										330446
									],
									[
										330454,
										330455
									],
									[
										330466,
										330467
									],
									[
										330522,
										330523
									],
									[
										330553,
										330554
									],
									[
										330561,
										330562
									],
									[
										330581,
										330582
									],
									[
										330594,
										330595
									],
									[
										330604,
										330605
									],
									[
										330724,
										330725
									],
									[
										330756,
										330757
									],
									[
										330800,
										330801
									],
									[
										330801,
										330802
									],
									[
										330856,
										330857
									],
									[
										330857,
										330858
									],
									[
										330912,
										330913
									],
									[
										330913,
										330914
									],
									[
										330973,
										330974
									],
									[
										331074,
										331075
									],
									[
										331086,
										331087
									],
									[
										331145,
										331146
									],
									[
										331187,
										331188
									],
									[
										331243,
										331244
									],
									[
										331347,
										331348
									],
									[
										331370,
										331371
									],
									[
										331437,
										331438
									],
									[
										331479,
										331480
									],
									[
										331535,
										331536
									],
									[
										331637,
										331638
									],
									[
										331747,
										331748
									],
									[
										331770,
										331771
									],
									[
										331880,
										331881
									],
									[
										331903,
										331904
									],
									[
										332021,
										332022
									],
									[
										332085,
										332086
									],
									[
										332170,
										332171
									],
									[
										332269,
										332270
									],
									[
										332386,
										332387
									],
									[
										332503,
										332504
									],
									[
										332562,
										332563
									],
									[
										332607,
										332608
									],
									[
										332608,
										332609
									],
									[
										332611,
										332612
									],
									[
										332622,
										332623
									],
									[
										332642,
										332643
									],
									[
										332652,
										332653
									],
									[
										332709,
										332710
									],
									[
										332719,
										332720
									],
									[
										332768,
										332769
									],
									[
										332778,
										332779
									],
									[
										332835,
										332836
									],
									[
										332845,
										332846
									],
									[
										332894,
										332895
									],
									[
										332904,
										332905
									],
									[
										332912,
										332913
									],
									[
										332953,
										332954
									],
									[
										332963,
										332964
									],
									[
										332975,
										332976
									],
									[
										332976,
										332977
									],
									[
										333020,
										333021
									],
									[
										333030,
										333031
									],
									[
										333079,
										333080
									],
									[
										333089,
										333090
									],
									[
										333105,
										333106
									],
									[
										333138,
										333139
									],
									[
										333148,
										333149
									],
									[
										333197,
										333198
									],
									[
										333207,
										333208
									],
									[
										333256,
										333257
									],
									[
										333266,
										333267
									],
									[
										333315,
										333316
									],
									[
										333325,
										333326
									],
									[
										333382,
										333383
									],
									[
										333392,
										333393
									],
									[
										333441,
										333442
									],
									[
										333451,
										333452
									],
									[
										333472,
										333473
									],
									[
										333500,
										333501
									],
									[
										333510,
										333511
									],
									[
										333559,
										333560
									],
									[
										333569,
										333570
									],
									[
										333618,
										333619
									],
									[
										333628,
										333629
									],
									[
										333677,
										333678
									],
									[
										333687,
										333688
									],
									[
										333761,
										333762
									],
									[
										333805,
										333806
									],
									[
										333832,
										333833
									],
									[
										333867,
										333868
									],
									[
										333915,
										333916
									],
									[
										333948,
										333949
									],
									[
										334042,
										334043
									],
									[
										334235,
										334236
									],
									[
										334244,
										334245
									],
									[
										334256,
										334257
									],
									[
										334312,
										334313
									],
									[
										334343,
										334344
									],
									[
										334351,
										334352
									],
									[
										334371,
										334372
									],
									[
										334384,
										334385
									],
									[
										334394,
										334395
									],
									[
										334514,
										334515
									],
									[
										334553,
										334554
									],
									[
										334611,
										334612
									],
									[
										334612,
										334613
									],
									[
										334710,
										334711
									],
									[
										334711,
										334712
									],
									[
										334713,
										334714
									],
									[
										334756,
										334757
									],
									[
										334775,
										334776
									],
									[
										334840,
										334841
									],
									[
										334841,
										334842
									],
									[
										334843,
										334844
									],
									[
										334886,
										334887
									],
									[
										334901,
										334902
									],
									[
										334973,
										334974
									],
									[
										335015,
										335016
									],
									[
										335021,
										335022
									],
									[
										335051,
										335052
									],
									[
										335066,
										335067
									],
									[
										335073,
										335074
									],
									[
										335086,
										335087
									],
									[
										335125,
										335126
									],
									[
										335147,
										335148
									],
									[
										335207,
										335208
									],
									[
										335222,
										335223
									],
									[
										335229,
										335230
									],
									[
										335239,
										335240
									],
									[
										335278,
										335279
									],
									[
										335313,
										335314
									],
									[
										335335,
										335336
									],
									[
										335392,
										335393
									],
									[
										335425,
										335426
									],
									[
										335480,
										335481
									],
									[
										335505,
										335506
									],
									[
										335626,
										335627
									],
									[
										335649,
										335650
									],
									[
										335670,
										335671
									],
									[
										335689,
										335690
									],
									[
										335695,
										335696
									],
									[
										335705,
										335706
									],
									[
										335707,
										335708
									],
									[
										335713,
										335714
									],
									[
										335743,
										335744
									],
									[
										335748,
										335749
									],
									[
										335758,
										335759
									],
									[
										335774,
										335775
									],
									[
										335828,
										335829
									],
									[
										335841,
										335842
									],
									[
										335847,
										335848
									],
									[
										335870,
										335871
									],
									[
										335945,
										335946
									],
									[
										335997,
										335998
									],
									[
										336069,
										336070
									],
									[
										336117,
										336118
									],
									[
										336191,
										336192
									],
									[
										336239,
										336240
									],
									[
										336314,
										336315
									],
									[
										336355,
										336356
									],
									[
										336359,
										336360
									],
									[
										336371,
										336372
									],
									[
										336377,
										336378
									],
									[
										336400,
										336401
									],
									[
										336471,
										336472
									],
									[
										336522,
										336523
									],
									[
										336598,
										336599
									],
									[
										336654,
										336655
									],
									[
										336662,
										336663
									],
									[
										336702,
										336703
									],
									[
										336729,
										336730
									],
									[
										336737,
										336738
									],
									[
										336802,
										336803
									],
									[
										336830,
										336831
									],
									[
										336842,
										336843
									],
									[
										336854,
										336855
									],
									[
										336888,
										336889
									],
									[
										336937,
										336938
									],
									[
										336983,
										336984
									],
									[
										336985,
										336986
									],
									[
										337016,
										337017
									],
									[
										337040,
										337041
									],
									[
										337044,
										337045
									],
									[
										337070,
										337071
									],
									[
										337148,
										337149
									],
									[
										337149,
										337150
									],
									[
										337186,
										337187
									],
									[
										337237,
										337238
									],
									[
										337355,
										337356
									],
									[
										337554,
										337555
									],
									[
										337688,
										337689
									],
									[
										337765,
										337766
									],
									[
										337836,
										337837
									],
									[
										337888,
										337889
									],
									[
										337892,
										337893
									],
									[
										337908,
										337909
									],
									[
										337927,
										337928
									],
									[
										337931,
										337932
									],
									[
										337979,
										337980
									],
									[
										338067,
										338068
									],
									[
										338132,
										338133
									],
									[
										338139,
										338140
									],
									[
										338160,
										338161
									],
									[
										338188,
										338189
									],
									[
										338200,
										338201
									],
									[
										338212,
										338213
									],
									[
										338234,
										338235
									],
									[
										338290,
										338291
									],
									[
										338300,
										338301
									],
									[
										338334,
										338335
									],
									[
										338344,
										338345
									],
									[
										338353,
										338354
									],
									[
										338379,
										338380
									],
									[
										338389,
										338390
									],
									[
										338440,
										338441
									],
									[
										338450,
										338451
									],
									[
										338489,
										338490
									],
									[
										338499,
										338500
									],
									[
										338531,
										338532
									],
									[
										338541,
										338542
									],
									[
										338575,
										338576
									],
									[
										338585,
										338586
									],
									[
										338600,
										338601
									],
									[
										338624,
										338625
									],
									[
										338634,
										338635
									],
									[
										338645,
										338646
									],
									[
										338698,
										338699
									],
									[
										338706,
										338707
									],
									[
										338707,
										338708
									],
									[
										338800,
										338801
									],
									[
										338801,
										338802
									],
									[
										338838,
										338839
									],
									[
										338889,
										338890
									],
									[
										339007,
										339008
									],
									[
										339060,
										339061
									],
									[
										339182,
										339183
									],
									[
										339194,
										339195
									],
									[
										339206,
										339207
									],
									[
										339228,
										339229
									],
									[
										339287,
										339288
									],
									[
										339349,
										339350
									],
									[
										339356,
										339357
									],
									[
										339377,
										339378
									],
									[
										339434,
										339435
									],
									[
										339515,
										339516
									],
									[
										339625,
										339626
									],
									[
										339635,
										339636
									],
									[
										339669,
										339670
									],
									[
										339679,
										339680
									],
									[
										339688,
										339689
									],
									[
										339714,
										339715
									],
									[
										339724,
										339725
									],
									[
										339775,
										339776
									],
									[
										339785,
										339786
									],
									[
										339824,
										339825
									],
									[
										339834,
										339835
									],
									[
										339866,
										339867
									],
									[
										339876,
										339877
									],
									[
										339887,
										339888
									],
									[
										339908,
										339909
									],
									[
										339918,
										339919
									],
									[
										339929,
										339930
									],
									[
										339982,
										339983
									],
									[
										339990,
										339991
									],
									[
										339991,
										339992
									],
									[
										340057,
										340058
									],
									[
										340076,
										340077
									],
									[
										340122,
										340123
									],
									[
										340220,
										340221
									],
									[
										340288,
										340289
									],
									[
										340337,
										340338
									],
									[
										340407,
										340408
									],
									[
										340604,
										340605
									],
									[
										340681,
										340682
									],
									[
										340708,
										340709
									],
									[
										340720,
										340721
									],
									[
										340816,
										340817
									],
									[
										340914,
										340915
									],
									[
										341083,
										341084
									],
									[
										341130,
										341131
									],
									[
										341198,
										341199
									],
									[
										341256,
										341257
									],
									[
										341262,
										341263
									],
									[
										341371,
										341372
									],
									[
										341429,
										341430
									],
									[
										341448,
										341449
									],
									[
										341563,
										341564
									],
									[
										341656,
										341657
									],
									[
										341780,
										341781
									],
									[
										341820,
										341821
									],
									[
										341823,
										341824
									],
									[
										341867,
										341868
									],
									[
										341921,
										341922
									],
									[
										341935,
										341936
									],
									[
										341993,
										341994
									],
									[
										341999,
										342000
									],
									[
										342071,
										342072
									],
									[
										342157,
										342158
									],
									[
										342205,
										342206
									],
									[
										342215,
										342216
									],
									[
										342282,
										342283
									],
									[
										342313,
										342314
									],
									[
										342411,
										342412
									],
									[
										342580,
										342581
									],
									[
										342627,
										342628
									],
									[
										342695,
										342696
									],
									[
										342841,
										342842
									],
									[
										342853,
										342854
									],
									[
										342911,
										342912
									],
									[
										342930,
										342931
									],
									[
										342978,
										342979
									],
									[
										343047,
										343048
									],
									[
										343140,
										343141
									],
									[
										343264,
										343265
									],
									[
										343304,
										343305
									],
									[
										343307,
										343308
									],
									[
										343351,
										343352
									],
									[
										343405,
										343406
									],
									[
										343419,
										343420
									],
									[
										343538,
										343539
									],
									[
										343572,
										343573
									],
									[
										343626,
										343627
									],
									[
										343712,
										343713
									],
									[
										343739,
										343740
									],
									[
										343751,
										343752
									],
									[
										343855,
										343856
									],
									[
										343953,
										343954
									],
									[
										344130,
										344131
									],
									[
										344185,
										344186
									],
									[
										344283,
										344284
									],
									[
										344341,
										344342
									],
									[
										344347,
										344348
									],
									[
										344464,
										344465
									],
									[
										344522,
										344523
									],
									[
										344549,
										344550
									],
									[
										344664,
										344665
									],
									[
										344762,
										344763
									],
									[
										344899,
										344900
									],
									[
										344939,
										344940
									],
									[
										344950,
										344951
									],
									[
										344994,
										344995
									],
									[
										345056,
										345057
									],
									[
										345092,
										345093
									],
									[
										345150,
										345151
									],
									[
										345156,
										345157
									],
									[
										345236,
										345237
									],
									[
										345322,
										345323
									],
									[
										345380,
										345381
									],
									[
										345448,
										345449
									],
									[
										345546,
										345547
									],
									[
										345740,
										345741
									],
									[
										345785,
										345786
									],
									[
										345887,
										345888
									],
									[
										346024,
										346025
									],
									[
										346082,
										346083
									],
									[
										346187,
										346188
									],
									[
										346287,
										346288
									],
									[
										346467,
										346468
									],
									[
										346523,
										346524
									],
									[
										346622,
										346623
									],
									[
										346680,
										346681
									],
									[
										346686,
										346687
									],
									[
										346803,
										346804
									],
									[
										346863,
										346864
									],
									[
										346966,
										346967
									],
									[
										347066,
										347067
									],
									[
										347244,
										347245
									],
									[
										347298,
										347299
									],
									[
										347395,
										347396
									],
									[
										347453,
										347454
									],
									[
										347459,
										347460
									],
									[
										347575,
										347576
									],
									[
										347630,
										347631
									],
									[
										347640,
										347641
									],
									[
										347715,
										347716
									],
									[
										347746,
										347747
									],
									[
										347844,
										347845
									],
									[
										348021,
										348022
									],
									[
										348076,
										348077
									],
									[
										348174,
										348175
									],
									[
										348328,
										348329
									],
									[
										348340,
										348341
									],
									[
										348398,
										348399
									],
									[
										348425,
										348426
									],
									[
										348473,
										348474
									],
									[
										348542,
										348543
									],
									[
										348640,
										348641
									],
									[
										348777,
										348778
									],
									[
										348817,
										348818
									],
									[
										348828,
										348829
									],
									[
										348872,
										348873
									],
									[
										348934,
										348935
									],
									[
										348970,
										348971
									],
									[
										349097,
										349098
									],
									[
										349131,
										349132
									],
									[
										349185,
										349186
									],
									[
										349243,
										349244
									],
									[
										349311,
										349312
									],
									[
										349409,
										349410
									],
									[
										349603,
										349604
									],
									[
										349648,
										349649
									],
									[
										349750,
										349751
									],
									[
										349887,
										349888
									],
									[
										349945,
										349946
									],
									[
										350021,
										350022
									],
									[
										350052,
										350053
									],
									[
										350152,
										350153
									],
									[
										350332,
										350333
									],
									[
										350388,
										350389
									],
									[
										350487,
										350488
									],
									[
										350641,
										350642
									],
									[
										350653,
										350654
									],
									[
										350713,
										350714
									],
									[
										350787,
										350788
									],
									[
										350818,
										350819
									],
									[
										350918,
										350919
									],
									[
										351096,
										351097
									],
									[
										351150,
										351151
									],
									[
										351247,
										351248
									],
									[
										351400,
										351401
									],
									[
										351412,
										351413
									],
									[
										351486,
										351487
									],
									[
										351563,
										351564
									],
									[
										351661,
										351662
									],
									[
										351835,
										351836
									],
									[
										351887,
										351888
									],
									[
										351990,
										351991
									],
									[
										352137,
										352138
									],
									[
										352195,
										352196
									],
									[
										352219,
										352220
									],
									[
										352320,
										352321
									],
									[
										352418,
										352419
									],
									[
										352552,
										352553
									],
									[
										352592,
										352593
									],
									[
										352600,
										352601
									],
									[
										352644,
										352645
									],
									[
										352711,
										352712
									],
									[
										352747,
										352748
									],
									[
										352868,
										352869
									],
									[
										352943,
										352944
									],
									[
										353001,
										353002
									],
									[
										353066,
										353067
									],
									[
										353164,
										353165
									],
									[
										353342,
										353343
									],
									[
										353398,
										353399
									],
									[
										353505,
										353506
									],
									[
										353639,
										353640
									],
									[
										353697,
										353698
									],
									[
										353775,
										353776
									],
									[
										353875,
										353876
									],
									[
										354052,
										354053
									],
									[
										354105,
										354106
									],
									[
										354209,
										354210
									],
									[
										354357,
										354358
									],
									[
										354417,
										354418
									],
									[
										354493,
										354494
									],
									[
										354593,
										354594
									],
									[
										354768,
										354769
									],
									[
										354819,
										354820
									],
									[
										354921,
										354922
									],
									[
										355067,
										355068
									],
									[
										355136,
										355137
									],
									[
										355184,
										355185
									],
									[
										355388,
										355389
									],
									[
										355397,
										355398
									],
									[
										355409,
										355410
									],
									[
										355465,
										355466
									],
									[
										355496,
										355497
									],
									[
										355504,
										355505
									],
									[
										355524,
										355525
									],
									[
										355537,
										355538
									],
									[
										355547,
										355548
									],
									[
										355667,
										355668
									],
									[
										355710,
										355711
									],
									[
										355745,
										355746
									],
									[
										355788,
										355789
									],
									[
										355789,
										355790
									],
									[
										355831,
										355832
									],
									[
										355887,
										355888
									],
									[
										355888,
										355889
									],
									[
										355918,
										355919
									],
									[
										355927,
										355928
									],
									[
										355952,
										355953
									],
									[
										355954,
										355955
									],
									[
										355991,
										355992
									],
									[
										355992,
										355993
									],
									[
										356064,
										356065
									],
									[
										356065,
										356066
									],
									[
										356067,
										356068
									],
									[
										356112,
										356113
									],
									[
										356121,
										356122
									],
									[
										356136,
										356137
									],
									[
										356138,
										356139
									],
									[
										356144,
										356145
									],
									[
										356167,
										356168
									],
									[
										356176,
										356177
									],
									[
										356220,
										356221
									],
									[
										356221,
										356222
									],
									[
										356223,
										356224
									],
									[
										356266,
										356267
									],
									[
										356281,
										356282
									],
									[
										356307,
										356308
									],
									[
										356321,
										356322
									],
									[
										356378,
										356379
									],
									[
										356420,
										356421
									],
									[
										356426,
										356427
									],
									[
										356456,
										356457
									],
									[
										356471,
										356472
									],
									[
										356478,
										356479
									],
									[
										356491,
										356492
									],
									[
										356530,
										356531
									],
									[
										356555,
										356556
									],
									[
										356558,
										356559
									],
									[
										356592,
										356593
									],
									[
										356594,
										356595
									],
									[
										356664,
										356665
									],
									[
										356679,
										356680
									],
									[
										356686,
										356687
									],
									[
										356696,
										356697
									],
									[
										356735,
										356736
									],
									[
										356760,
										356761
									],
									[
										356763,
										356764
									],
									[
										356797,
										356798
									],
									[
										356799,
										356800
									],
									[
										356823,
										356824
									],
									[
										356825,
										356826
									],
									[
										356847,
										356848
									],
									[
										356852,
										356853
									],
									[
										356862,
										356863
									],
									[
										356878,
										356879
									],
									[
										356918,
										356919
									],
									[
										356931,
										356932
									],
									[
										356937,
										356938
									],
									[
										356960,
										356961
									],
									[
										357038,
										357039
									],
									[
										357041,
										357042
									],
									[
										357075,
										357076
									],
									[
										357077,
										357078
									],
									[
										357157,
										357158
									],
									[
										357232,
										357233
									],
									[
										357235,
										357236
									],
									[
										357269,
										357270
									],
									[
										357271,
										357272
									],
									[
										357346,
										357347
									],
									[
										357423,
										357424
									],
									[
										357426,
										357427
									],
									[
										357460,
										357461
									],
									[
										357462,
										357463
									],
									[
										357536,
										357537
									],
									[
										357614,
										357615
									],
									[
										357617,
										357618
									],
									[
										357651,
										357652
									],
									[
										357653,
										357654
									],
									[
										357688,
										357689
									],
									[
										357733,
										357734
									],
									[
										357737,
										357738
									],
									[
										357749,
										357750
									],
									[
										357755,
										357756
									],
									[
										357778,
										357779
									],
									[
										357852,
										357853
									],
									[
										357855,
										357856
									],
									[
										357889,
										357890
									],
									[
										357891,
										357892
									],
									[
										357958,
										357959
									],
									[
										358037,
										358038
									],
									[
										358040,
										358041
									],
									[
										358074,
										358075
									],
									[
										358076,
										358077
									],
									[
										358148,
										358149
									],
									[
										358156,
										358157
									],
									[
										358196,
										358197
									],
									[
										358226,
										358227
									],
									[
										358229,
										358230
									],
									[
										358263,
										358264
									],
									[
										358265,
										358266
									],
									[
										358283,
										358284
									],
									[
										358356,
										358357
									],
									[
										358384,
										358385
									],
									[
										358396,
										358397
									],
									[
										358408,
										358409
									],
									[
										358432,
										358433
									],
									[
										358480,
										358481
									],
									[
										358526,
										358527
									],
									[
										358528,
										358529
									],
									[
										358559,
										358560
									],
									[
										358583,
										358584
									],
									[
										358587,
										358588
									],
									[
										358613,
										358614
									],
									[
										358691,
										358692
									],
									[
										358692,
										358693
									],
									[
										358729,
										358730
									],
									[
										358744,
										358745
									],
									[
										358750,
										358751
									],
									[
										358846,
										358847
									],
									[
										358848,
										358849
									],
									[
										358953,
										358954
									],
									[
										358968,
										358969
									],
									[
										358974,
										358975
									],
									[
										359038,
										359039
									],
									[
										359044,
										359045
									],
									[
										359110,
										359111
									],
									[
										359116,
										359117
									],
									[
										359168,
										359169
									],
									[
										359170,
										359171
									],
									[
										359276,
										359277
									],
									[
										359279,
										359280
									],
									[
										359383,
										359384
									],
									[
										359508,
										359509
									],
									[
										359523,
										359524
									],
									[
										359585,
										359586
									],
									[
										359656,
										359657
									],
									[
										359671,
										359672
									],
									[
										359708,
										359709
									],
									[
										359712,
										359713
									],
									[
										359728,
										359729
									],
									[
										359743,
										359744
									],
									[
										359747,
										359748
									],
									[
										359751,
										359752
									],
									[
										359799,
										359800
									],
									[
										359814,
										359815
									],
									[
										359887,
										359888
									],
									[
										359902,
										359903
									],
									[
										359952,
										359953
									],
									[
										359959,
										359960
									],
									[
										359974,
										359975
									],
									[
										359980,
										359981
									],
									[
										360008,
										360009
									],
									[
										360020,
										360021
									],
									[
										360032,
										360033
									],
									[
										360047,
										360048
									],
									[
										360054,
										360055
									],
									[
										360110,
										360111
									],
									[
										360120,
										360121
									],
									[
										360154,
										360155
									],
									[
										360164,
										360165
									],
									[
										360173,
										360174
									],
									[
										360199,
										360200
									],
									[
										360209,
										360210
									],
									[
										360260,
										360261
									],
									[
										360270,
										360271
									],
									[
										360309,
										360310
									],
									[
										360319,
										360320
									],
									[
										360351,
										360352
									],
									[
										360361,
										360362
									],
									[
										360395,
										360396
									],
									[
										360405,
										360406
									],
									[
										360420,
										360421
									],
									[
										360444,
										360445
									],
									[
										360454,
										360455
									],
									[
										360465,
										360466
									],
									[
										360518,
										360519
									],
									[
										360526,
										360527
									],
									[
										360527,
										360528
									],
									[
										360620,
										360621
									],
									[
										360621,
										360622
									],
									[
										360645,
										360646
									],
									[
										360662,
										360663
									],
									[
										360673,
										360674
									],
									[
										360674,
										360675
									],
									[
										360702,
										360703
									],
									[
										360804,
										360805
									],
									[
										360824,
										360825
									],
									[
										360835,
										360836
									],
									[
										360836,
										360837
									],
									[
										360866,
										360867
									],
									[
										360988,
										360989
									],
									[
										361000,
										361001
									],
									[
										361012,
										361013
									],
									[
										361034,
										361035
									],
									[
										361093,
										361094
									],
									[
										361155,
										361156
									],
									[
										361162,
										361163
									],
									[
										361183,
										361184
									],
									[
										361240,
										361241
									],
									[
										361306,
										361307
									],
									[
										361316,
										361317
									],
									[
										361350,
										361351
									],
									[
										361360,
										361361
									],
									[
										361369,
										361370
									],
									[
										361395,
										361396
									],
									[
										361405,
										361406
									],
									[
										361456,
										361457
									],
									[
										361466,
										361467
									],
									[
										361505,
										361506
									],
									[
										361515,
										361516
									],
									[
										361547,
										361548
									],
									[
										361557,
										361558
									],
									[
										361568,
										361569
									],
									[
										361589,
										361590
									],
									[
										361599,
										361600
									],
									[
										361610,
										361611
									],
									[
										361663,
										361664
									],
									[
										361671,
										361672
									],
									[
										361672,
										361673
									],
									[
										361709,
										361710
									],
									[
										361769,
										361770
									],
									[
										361770,
										361771
									],
									[
										361824,
										361825
									],
									[
										361887,
										361888
									],
									[
										361889,
										361890
									],
									[
										361994,
										361995
									],
									[
										362005,
										362006
									],
									[
										362006,
										362007
									],
									[
										362036,
										362037
									],
									[
										362107,
										362108
									],
									[
										362165,
										362166
									],
									[
										362217,
										362218
									],
									[
										362219,
										362220
									],
									[
										362325,
										362326
									],
									[
										362328,
										362329
									],
									[
										362432,
										362433
									],
									[
										362507,
										362508
									],
									[
										362508,
										362509
									],
									[
										362584,
										362585
									],
									[
										362663,
										362664
									],
									[
										362665,
										362666
									],
									[
										362778,
										362779
									],
									[
										362789,
										362790
									],
									[
										362790,
										362791
									],
									[
										362820,
										362821
									],
									[
										362891,
										362892
									],
									[
										362957,
										362958
									],
									[
										363009,
										363010
									],
									[
										363011,
										363012
									],
									[
										363132,
										363133
									],
									[
										363135,
										363136
									],
									[
										363247,
										363248
									],
									[
										363338,
										363339
									],
									[
										363339,
										363340
									],
									[
										363417,
										363418
									],
									[
										363500,
										363501
									],
									[
										363502,
										363503
									],
									[
										363617,
										363618
									],
									[
										363628,
										363629
									],
									[
										363629,
										363630
									],
									[
										363659,
										363660
									],
									[
										363730,
										363731
									],
									[
										363798,
										363799
									],
									[
										363850,
										363851
									],
									[
										363852,
										363853
									],
									[
										363977,
										363978
									],
									[
										363980,
										363981
									],
									[
										364094,
										364095
									],
									[
										364185,
										364186
									],
									[
										364186,
										364187
									],
									[
										364264,
										364265
									],
									[
										364347,
										364348
									],
									[
										364349,
										364350
									],
									[
										364464,
										364465
									],
									[
										364475,
										364476
									],
									[
										364476,
										364477
									],
									[
										364506,
										364507
									],
									[
										364577,
										364578
									],
									[
										364645,
										364646
									],
									[
										364697,
										364698
									],
									[
										364699,
										364700
									],
									[
										364824,
										364825
									],
									[
										364827,
										364828
									],
									[
										364941,
										364942
									],
									[
										365019,
										365020
									],
									[
										365069,
										365070
									],
									[
										365070,
										365071
									],
									[
										365216,
										365217
									],
									[
										365279,
										365280
									],
									[
										365294,
										365295
									],
									[
										365300,
										365301
									],
									[
										365345,
										365346
									],
									[
										365355,
										365356
									],
									[
										365423,
										365424
									],
									[
										365472,
										365473
									],
									[
										365542,
										365543
									],
									[
										365636,
										365637
									],
									[
										365853,
										365854
									],
									[
										365868,
										365869
									],
									[
										365889,
										365890
									],
									[
										365973,
										365974
									],
									[
										365994,
										365995
									],
									[
										366005,
										366006
									],
									[
										366006,
										366007
									],
									[
										366073,
										366074
									],
									[
										366242,
										366243
									],
									[
										366289,
										366290
									],
									[
										366357,
										366358
									],
									[
										366593,
										366594
									],
									[
										366605,
										366606
									],
									[
										366616,
										366617
									],
									[
										366617,
										366618
									],
									[
										366644,
										366645
									],
									[
										366663,
										366664
									],
									[
										366711,
										366712
									],
									[
										366780,
										366781
									],
									[
										366791,
										366792
									],
									[
										366792,
										366793
									],
									[
										366859,
										366860
									],
									[
										366983,
										366984
									],
									[
										367023,
										367024
									],
									[
										367026,
										367027
									],
									[
										367070,
										367071
									],
									[
										367124,
										367125
									],
									[
										367138,
										367139
									],
									[
										367257,
										367258
									],
									[
										367291,
										367292
									],
									[
										367325,
										367326
									],
									[
										367336,
										367337
									],
									[
										367337,
										367338
									],
									[
										367364,
										367365
									],
									[
										367456,
										367457
									],
									[
										367477,
										367478
									],
									[
										367488,
										367489
									],
									[
										367489,
										367490
									],
									[
										367556,
										367557
									],
									[
										367733,
										367734
									],
									[
										367788,
										367789
									],
									[
										367886,
										367887
									],
									[
										368130,
										368131
									],
									[
										368142,
										368143
									],
									[
										368153,
										368154
									],
									[
										368154,
										368155
									],
									[
										368181,
										368182
									],
									[
										368225,
										368226
									],
									[
										368273,
										368274
									],
									[
										368342,
										368343
									],
									[
										368353,
										368354
									],
									[
										368354,
										368355
									],
									[
										368421,
										368422
									],
									[
										368558,
										368559
									],
									[
										368598,
										368599
									],
									[
										368609,
										368610
									],
									[
										368653,
										368654
									],
									[
										368715,
										368716
									],
									[
										368751,
										368752
									],
									[
										368971,
										368972
									],
									[
										369005,
										369006
									],
									[
										369039,
										369040
									],
									[
										369050,
										369051
									],
									[
										369051,
										369052
									],
									[
										369078,
										369079
									],
									[
										369163,
										369164
									],
									[
										369174,
										369175
									],
									[
										369175,
										369176
									],
									[
										369242,
										369243
									],
									[
										369436,
										369437
									],
									[
										369481,
										369482
									],
									[
										369583,
										369584
									],
									[
										369810,
										369811
									],
									[
										369821,
										369822
									],
									[
										369822,
										369823
									],
									[
										369849,
										369850
									],
									[
										369944,
										369945
									],
									[
										369975,
										369976
									],
									[
										369986,
										369987
									],
									[
										369987,
										369988
									],
									[
										370054,
										370055
									],
									[
										370234,
										370235
									],
									[
										370290,
										370291
									],
									[
										370389,
										370390
									],
									[
										370637,
										370638
									],
									[
										370649,
										370650
									],
									[
										370660,
										370661
									],
									[
										370661,
										370662
									],
									[
										370688,
										370689
									],
									[
										370781,
										370782
									],
									[
										370802,
										370803
									],
									[
										370813,
										370814
									],
									[
										370814,
										370815
									],
									[
										370881,
										370882
									],
									[
										371059,
										371060
									],
									[
										371113,
										371114
									],
									[
										371210,
										371211
									],
									[
										371457,
										371458
									],
									[
										371469,
										371470
									],
									[
										371480,
										371481
									],
									[
										371481,
										371482
									],
									[
										371508,
										371509
									],
									[
										371602,
										371603
									],
									[
										371613,
										371614
									],
									[
										371614,
										371615
									],
									[
										371681,
										371682
									],
									[
										371855,
										371856
									],
									[
										371907,
										371908
									],
									[
										372010,
										372011
									],
									[
										372247,
										372248
									],
									[
										372258,
										372259
									],
									[
										372259,
										372260
									],
									[
										372286,
										372287
									],
									[
										372327,
										372328
									],
									[
										372428,
										372429
									],
									[
										372439,
										372440
									],
									[
										372440,
										372441
									],
									[
										372507,
										372508
									],
									[
										372641,
										372642
									],
									[
										372681,
										372682
									],
									[
										372689,
										372690
									],
									[
										372733,
										372734
									],
									[
										372800,
										372801
									],
									[
										372836,
										372837
									],
									[
										373050,
										373051
									],
									[
										373105,
										373106
									],
									[
										373116,
										373117
									],
									[
										373117,
										373118
									],
									[
										373144,
										373145
									],
									[
										373226,
										373227
									],
									[
										373237,
										373238
									],
									[
										373238,
										373239
									],
									[
										373305,
										373306
									],
									[
										373483,
										373484
									],
									[
										373539,
										373540
									],
									[
										373646,
										373647
									],
									[
										373870,
										373871
									],
									[
										373881,
										373882
									],
									[
										373882,
										373883
									],
									[
										373909,
										373910
									],
									[
										374006,
										374007
									],
									[
										374017,
										374018
									],
									[
										374018,
										374019
									],
									[
										374085,
										374086
									],
									[
										374262,
										374263
									],
									[
										374315,
										374316
									],
									[
										374419,
										374420
									],
									[
										374661,
										374662
									],
									[
										374672,
										374673
									],
									[
										374673,
										374674
									],
									[
										374700,
										374701
									],
									[
										374795,
										374796
									],
									[
										374806,
										374807
									],
									[
										374807,
										374808
									],
									[
										374874,
										374875
									],
									[
										375049,
										375050
									],
									[
										375100,
										375101
									],
									[
										375202,
										375203
									],
									[
										375442,
										375443
									],
									[
										375453,
										375454
									],
									[
										375454,
										375455
									],
									[
										375490,
										375491
									],
									[
										375538,
										375539
									],
									[
										375736,
										375737
									],
									[
										375745,
										375746
									],
									[
										375757,
										375758
									],
									[
										375813,
										375814
									],
									[
										375844,
										375845
									],
									[
										375852,
										375853
									],
									[
										375872,
										375873
									],
									[
										375885,
										375886
									],
									[
										375895,
										375896
									],
									[
										376016,
										376017
									],
									[
										376049,
										376050
									],
									[
										376073,
										376074
									],
									[
										376113,
										376114
									],
									[
										376131,
										376132
									],
									[
										376215,
										376216
									],
									[
										376236,
										376237
									],
									[
										376307,
										376308
									],
									[
										376520,
										376521
									],
									[
										376560,
										376561
									],
									[
										376610,
										376611
									],
									[
										376751,
										376752
									],
									[
										376987,
										376988
									],
									[
										377026,
										377027
									],
									[
										377077,
										377078
									],
									[
										377228,
										377229
									],
									[
										377328,
										377329
									],
									[
										377350,
										377351
									],
									[
										377407,
										377408
									],
									[
										377440,
										377441
									],
									[
										377461,
										377462
									],
									[
										377504,
										377505
									],
									[
										377526,
										377527
									],
									[
										377560,
										377561
									],
									[
										377629,
										377630
									],
									[
										377823,
										377824
									],
									[
										377832,
										377833
									],
									[
										377844,
										377845
									],
									[
										377900,
										377901
									],
									[
										377931,
										377932
									],
									[
										377939,
										377940
									],
									[
										377959,
										377960
									],
									[
										377972,
										377973
									],
									[
										377982,
										377983
									],
									[
										378103,
										378104
									],
									[
										378143,
										378144
									],
									[
										378301,
										378302
									],
									[
										378405,
										378406
									],
									[
										378610,
										378611
									],
									[
										378619,
										378620
									],
									[
										378631,
										378632
									],
									[
										378687,
										378688
									],
									[
										378718,
										378719
									],
									[
										378726,
										378727
									],
									[
										378746,
										378747
									],
									[
										378759,
										378760
									],
									[
										378769,
										378770
									],
									[
										378890,
										378891
									],
									[
										378934,
										378935
									],
									[
										379096,
										379097
									],
									[
										379339,
										379340
									],
									[
										379487,
										379488
									],
									[
										379696,
										379697
									],
									[
										379705,
										379706
									],
									[
										379717,
										379718
									],
									[
										379773,
										379774
									],
									[
										379804,
										379805
									],
									[
										379812,
										379813
									],
									[
										379832,
										379833
									],
									[
										379845,
										379846
									],
									[
										379855,
										379856
									],
									[
										380061,
										380062
									],
									[
										380282,
										380283
									],
									[
										380439,
										380440
									],
									[
										380616,
										380617
									],
									[
										380793,
										380794
									],
									[
										380820,
										380821
									],
									[
										380882,
										380883
									],
									[
										380912,
										380913
									],
									[
										380946,
										380947
									],
									[
										380996,
										380997
									],
									[
										381138,
										381139
									],
									[
										381162,
										381163
									],
									[
										381166,
										381167
									],
									[
										381337,
										381338
									],
									[
										381364,
										381365
									],
									[
										381368,
										381369
									],
									[
										381527,
										381528
									],
									[
										381549,
										381550
									],
									[
										381606,
										381607
									],
									[
										381639,
										381640
									],
									[
										381660,
										381661
									],
									[
										381878,
										381879
									],
									[
										381976,
										381977
									],
									[
										382060,
										382061
									],
									[
										382221,
										382222
									],
									[
										382251,
										382252
									],
									[
										382424,
										382425
									],
									[
										382616,
										382617
									],
									[
										382625,
										382626
									],
									[
										382639,
										382640
									],
									[
										382675,
										382676
									],
									[
										382689,
										382690
									],
									[
										382695,
										382696
									],
									[
										382702,
										382703
									],
									[
										382781,
										382782
									],
									[
										382804,
										382805
									],
									[
										382895,
										382896
									],
									[
										382947,
										382948
									],
									[
										383030,
										383031
									],
									[
										383052,
										383053
									],
									[
										383147,
										383148
									],
									[
										383189,
										383190
									],
									[
										383217,
										383218
									],
									[
										383292,
										383293
									],
									[
										383299,
										383300
									],
									[
										383325,
										383326
									],
									[
										383639,
										383640
									],
									[
										383650,
										383651
									],
									[
										383677,
										383678
									],
									[
										383686,
										383687
									],
									[
										383700,
										383701
									],
									[
										383763,
										383764
									],
									[
										383777,
										383778
									],
									[
										383783,
										383784
									],
									[
										383790,
										383791
									],
									[
										383871,
										383872
									],
									[
										383896,
										383897
									],
									[
										383989,
										383990
									],
									[
										384043,
										384044
									],
									[
										384130,
										384131
									],
									[
										384152,
										384153
									],
									[
										384241,
										384242
									],
									[
										384285,
										384286
									],
									[
										384315,
										384316
									],
									[
										384394,
										384395
									],
									[
										384401,
										384402
									],
									[
										384435,
										384436
									],
									[
										384610,
										384611
									],
									[
										384636,
										384637
									],
									[
										384686,
										384687
									],
									[
										384703,
										384704
									],
									[
										384863,
										384864
									],
									[
										385057,
										385058
									],
									[
										385125,
										385126
									],
									[
										385296,
										385297
									],
									[
										385476,
										385477
									],
									[
										385488,
										385489
									],
									[
										385657,
										385658
									],
									[
										385669,
										385670
									],
									[
										385839,
										385840
									],
									[
										385851,
										385852
									],
									[
										386015,
										386016
									],
									[
										386195,
										386196
									],
									[
										386362,
										386363
									],
									[
										386384,
										386385
									],
									[
										386441,
										386442
									],
									[
										386474,
										386475
									],
									[
										386495,
										386496
									],
									[
										386602,
										386603
									],
									[
										386645,
										386646
									],
									[
										386651,
										386652
									],
									[
										386722,
										386723
									],
									[
										386745,
										386746
									],
									[
										386843,
										386844
									],
									[
										386886,
										386887
									],
									[
										386892,
										386893
									],
									[
										386972,
										386973
									],
									[
										387021,
										387022
									],
									[
										387135,
										387136
									],
									[
										387157,
										387158
									],
									[
										387214,
										387215
									],
									[
										387247,
										387248
									],
									[
										387268,
										387269
									],
									[
										387299,
										387300
									],
									[
										387336,
										387337
									],
									[
										387364,
										387365
									],
									[
										387372,
										387373
									],
									[
										387395,
										387396
									],
									[
										387411,
										387412
									],
									[
										387418,
										387419
									],
									[
										387422,
										387423
									],
									[
										387451,
										387452
									],
									[
										387497,
										387498
									],
									[
										387539,
										387540
									],
									[
										387576,
										387577
									],
									[
										387604,
										387605
									],
									[
										387612,
										387613
									],
									[
										387656,
										387657
									],
									[
										387672,
										387673
									],
									[
										387699,
										387700
									],
									[
										387715,
										387716
									],
									[
										387722,
										387723
									],
									[
										387726,
										387727
									],
									[
										387763,
										387764
									],
									[
										387809,
										387810
									],
									[
										387834,
										387835
									],
									[
										387856,
										387857
									],
									[
										387893,
										387894
									],
									[
										387921,
										387922
									],
									[
										387929,
										387930
									],
									[
										387952,
										387953
									],
									[
										387968,
										387969
									],
									[
										387975,
										387976
									],
									[
										387979,
										387980
									],
									[
										388016,
										388017
									],
									[
										388052,
										388053
									],
									[
										388081,
										388082
									],
									[
										388104,
										388105
									],
									[
										388147,
										388148
									],
									[
										388184,
										388185
									],
									[
										388212,
										388213
									],
									[
										388220,
										388221
									],
									[
										388264,
										388265
									],
									[
										388280,
										388281
									],
									[
										388307,
										388308
									],
									[
										388323,
										388324
									],
									[
										388330,
										388331
									],
									[
										388334,
										388335
									],
									[
										388379,
										388380
									],
									[
										388415,
										388416
									],
									[
										388444,
										388445
									],
									[
										388467,
										388468
									],
									[
										388518,
										388519
									],
									[
										388620,
										388621
									],
									[
										388660,
										388661
									],
									[
										388688,
										388689
									],
									[
										388736,
										388737
									],
									[
										388756,
										388757
									],
									[
										388819,
										388820
									],
									[
										388921,
										388922
									],
									[
										388958,
										388959
									],
									[
										389003,
										389004
									],
									[
										389039,
										389040
									],
									[
										389058,
										389059
									],
									[
										389130,
										389131
									],
									[
										389152,
										389153
									],
									[
										389209,
										389210
									],
									[
										389242,
										389243
									],
									[
										389263,
										389264
									],
									[
										389294,
										389295
									],
									[
										389331,
										389332
									],
									[
										389347,
										389348
									],
									[
										389398,
										389399
									],
									[
										389437,
										389438
									],
									[
										389473,
										389474
									],
									[
										389539,
										389540
									],
									[
										389576,
										389577
									],
									[
										389589,
										389590
									],
									[
										389594,
										389595
									],
									[
										389604,
										389605
									],
									[
										389627,
										389628
									],
									[
										389628,
										389629
									],
									[
										389639,
										389640
									],
									[
										389661,
										389662
									],
									[
										389700,
										389701
									],
									[
										389725,
										389726
									],
									[
										389781,
										389782
									],
									[
										389802,
										389803
									],
									[
										389811,
										389812
									],
									[
										389825,
										389826
									],
									[
										389871,
										389872
									],
									[
										389908,
										389909
									],
									[
										389924,
										389925
									],
									[
										389979,
										389980
									],
									[
										390007,
										390008
									],
									[
										390058,
										390059
									],
									[
										390124,
										390125
									],
									[
										390161,
										390162
									],
									[
										390178,
										390179
									],
									[
										390194,
										390195
									],
									[
										390202,
										390203
									],
									[
										390240,
										390241
									],
									[
										390272,
										390273
									],
									[
										390338,
										390339
									],
									[
										390375,
										390376
									],
									[
										390403,
										390404
									],
									[
										390411,
										390412
									],
									[
										390449,
										390450
									],
									[
										390481,
										390482
									],
									[
										390530,
										390531
									],
									[
										390552,
										390553
									],
									[
										390589,
										390590
									],
									[
										390605,
										390606
									],
									[
										390664,
										390665
									],
									[
										390700,
										390701
									],
									[
										390743,
										390744
									],
									[
										390808,
										390809
									],
									[
										390823,
										390824
									],
									[
										390893,
										390894
									],
									[
										390930,
										390931
									],
									[
										390955,
										390956
									],
									[
										390960,
										390961
									],
									[
										390970,
										390971
									],
									[
										391015,
										391016
									],
									[
										391034,
										391035
									],
									[
										391035,
										391036
									],
									[
										391046,
										391047
									],
									[
										391068,
										391069
									],
									[
										391115,
										391116
									],
									[
										391151,
										391152
									],
									[
										391194,
										391195
									],
									[
										391266,
										391267
									],
									[
										391281,
										391282
									],
									[
										391305,
										391306
									],
									[
										391314,
										391315
									],
									[
										391328,
										391329
									],
									[
										391375,
										391376
									],
									[
										391412,
										391413
									],
									[
										391428,
										391429
									],
									[
										391491,
										391492
									],
									[
										391527,
										391528
									],
									[
										391573,
										391574
									],
									[
										391638,
										391639
									],
									[
										391653,
										391654
									],
									[
										391723,
										391724
									],
									[
										391760,
										391761
									],
									[
										391777,
										391778
									],
									[
										391793,
										391794
									],
									[
										391801,
										391802
									],
									[
										391847,
										391848
									],
									[
										391883,
										391884
									],
									[
										391908,
										391909
									],
									[
										391975,
										391976
									],
									[
										392012,
										392013
									],
									[
										392040,
										392041
									],
									[
										392048,
										392049
									],
									[
										392094,
										392095
									],
									[
										392130,
										392131
									],
									[
										392155,
										392156
									],
									[
										392230,
										392231
									],
									[
										392332,
										392333
									],
									[
										392375,
										392376
									],
									[
										392408,
										392409
									],
									[
										392445,
										392446
									],
									[
										392471,
										392472
									],
									[
										392477,
										392478
									],
									[
										392532,
										392533
									],
									[
										392638,
										392639
									],
									[
										392660,
										392661
									],
									[
										392717,
										392718
									],
									[
										392750,
										392751
									],
									[
										392771,
										392772
									],
									[
										392809,
										392810
									],
									[
										392853,
										392854
									],
									[
										392880,
										392881
									],
									[
										392888,
										392889
									],
									[
										392911,
										392912
									],
									[
										392927,
										392928
									],
									[
										392934,
										392935
									],
									[
										392938,
										392939
									],
									[
										392967,
										392968
									],
									[
										392997,
										392998
									],
									[
										393023,
										393024
									],
									[
										393046,
										393047
									],
									[
										393095,
										393096
									],
									[
										393139,
										393140
									],
									[
										393167,
										393168
									],
									[
										393175,
										393176
									],
									[
										393226,
										393227
									],
									[
										393242,
										393243
									],
									[
										393269,
										393270
									],
									[
										393285,
										393286
									],
									[
										393292,
										393293
									],
									[
										393296,
										393297
									],
									[
										393333,
										393334
									],
									[
										393363,
										393364
									],
									[
										393389,
										393390
									],
									[
										393412,
										393413
									],
									[
										393437,
										393438
									],
									[
										393466,
										393467
									],
									[
										393510,
										393511
									],
									[
										393537,
										393538
									],
									[
										393545,
										393546
									],
									[
										393568,
										393569
									],
									[
										393584,
										393585
									],
									[
										393591,
										393592
									],
									[
										393595,
										393596
									],
									[
										393639,
										393640
									],
									[
										393675,
										393676
									],
									[
										393711,
										393712
									],
									[
										393734,
										393735
									],
									[
										393784,
										393785
									],
									[
										393828,
										393829
									],
									[
										393856,
										393857
									],
									[
										393864,
										393865
									],
									[
										393915,
										393916
									],
									[
										393931,
										393932
									],
									[
										393958,
										393959
									],
									[
										393974,
										393975
									],
									[
										393981,
										393982
									],
									[
										393985,
										393986
									],
									[
										394037,
										394038
									],
									[
										394073,
										394074
									],
									[
										394109,
										394110
									],
									[
										394132,
										394133
									],
									[
										394194,
										394195
									],
									[
										394228,
										394229
									],
									[
										394230,
										394231
									],
									[
										394235,
										394236
									],
									[
										394247,
										394248
									],
									[
										394334,
										394335
									],
									[
										394344,
										394345
									],
									[
										394360,
										394361
									],
									[
										394483,
										394484
									],
									[
										394619,
										394620
									],
									[
										394621,
										394622
									],
									[
										394636,
										394637
									],
									[
										394684,
										394685
									],
									[
										394802,
										394803
									],
									[
										394804,
										394805
									],
									[
										394819,
										394820
									],
									[
										394867,
										394868
									],
									[
										394983,
										394984
									],
									[
										395031,
										395032
									],
									[
										395263,
										395264
									],
									[
										395272,
										395273
									],
									[
										395284,
										395285
									],
									[
										395340,
										395341
									],
									[
										395371,
										395372
									],
									[
										395379,
										395380
									],
									[
										395399,
										395400
									],
									[
										395412,
										395413
									],
									[
										395422,
										395423
									],
									[
										395628,
										395629
									],
									[
										395886,
										395887
									],
									[
										396022,
										396023
									],
									[
										396046,
										396047
									],
									[
										396050,
										396051
									],
									[
										396199,
										396200
									],
									[
										396201,
										396202
									],
									[
										396248,
										396249
									],
									[
										396252,
										396253
									],
									[
										396355,
										396356
									],
									[
										396358,
										396359
									],
									[
										396548,
										396549
									],
									[
										396771,
										396772
									],
									[
										397062,
										397063
									],
									[
										397073,
										397074
									],
									[
										397132,
										397133
									],
									[
										397138,
										397139
									],
									[
										397243,
										397244
									],
									[
										397341,
										397342
									],
									[
										397375,
										397376
									],
									[
										397475,
										397476
									],
									[
										397607,
										397608
									],
									[
										397637,
										397638
									],
									[
										397846,
										397847
									],
									[
										397855,
										397856
									],
									[
										398017,
										398018
									],
									[
										398043,
										398044
									],
									[
										398101,
										398102
									],
									[
										398282,
										398283
									],
									[
										398454,
										398455
									],
									[
										398625,
										398626
									],
									[
										398797,
										398798
									],
									[
										398931,
										398932
									],
									[
										398974,
										398975
									],
									[
										398980,
										398981
									],
									[
										399060,
										399061
									],
									[
										399095,
										399096
									],
									[
										399197,
										399198
									],
									[
										399234,
										399235
									],
									[
										399262,
										399263
									],
									[
										399270,
										399271
									],
									[
										399308,
										399309
									],
									[
										399330,
										399331
									],
									[
										399342,
										399343
									],
									[
										399380,
										399381
									],
									[
										399417,
										399418
									],
									[
										399445,
										399446
									],
									[
										399453,
										399454
									],
									[
										399497,
										399498
									],
									[
										399513,
										399514
									],
									[
										399555,
										399556
									],
									[
										399591,
										399592
									],
									[
										399603,
										399604
									],
									[
										399614,
										399615
									],
									[
										399619,
										399620
									],
									[
										399626,
										399627
									],
									[
										399683,
										399684
									],
									[
										399785,
										399786
									],
									[
										399825,
										399826
									],
									[
										399853,
										399854
									],
									[
										399901,
										399902
									],
									[
										399957,
										399958
									],
									[
										400059,
										400060
									],
									[
										400096,
										400097
									],
									[
										400141,
										400142
									],
									[
										400163,
										400164
									],
									[
										400217,
										400218
									],
									[
										400254,
										400255
									],
									[
										400270,
										400271
									],
									[
										400329,
										400330
									],
									[
										400351,
										400352
									],
									[
										400416,
										400417
									],
									[
										400453,
										400454
									],
									[
										400478,
										400479
									],
									[
										400483,
										400484
									],
									[
										400493,
										400494
									],
									[
										400538,
										400539
									],
									[
										400557,
										400558
									],
									[
										400558,
										400559
									],
									[
										400569,
										400570
									],
									[
										400591,
										400592
									],
									[
										400638,
										400639
									],
									[
										400674,
										400675
									],
									[
										400701,
										400702
									],
									[
										400710,
										400711
									],
									[
										400724,
										400725
									],
									[
										400771,
										400772
									],
									[
										400808,
										400809
									],
									[
										400824,
										400825
									],
									[
										400887,
										400888
									],
									[
										400909,
										400910
									],
									[
										400974,
										400975
									],
									[
										401011,
										401012
									],
									[
										401028,
										401029
									],
									[
										401044,
										401045
									],
									[
										401052,
										401053
									],
									[
										401098,
										401099
									],
									[
										401120,
										401121
									],
									[
										401185,
										401186
									],
									[
										401222,
										401223
									],
									[
										401239,
										401240
									],
									[
										401256,
										401257
									],
									[
										401260,
										401261
									],
									[
										401268,
										401269
									],
									[
										401314,
										401315
									],
									[
										401336,
										401337
									],
									[
										401395,
										401396
									],
									[
										401497,
										401498
									],
									[
										401540,
										401541
									],
									[
										401573,
										401574
									],
									[
										401610,
										401611
									],
									[
										401636,
										401637
									],
									[
										401642,
										401643
									],
									[
										401700,
										401701
									],
									[
										401734,
										401735
									],
									[
										401736,
										401737
									],
									[
										401741,
										401742
									],
									[
										401753,
										401754
									],
									[
										401924,
										401925
									],
									[
										401926,
										401927
									],
									[
										401938,
										401939
									],
									[
										402077,
										402078
									],
									[
										402079,
										402080
									],
									[
										402094,
										402095
									],
									[
										402142,
										402143
									],
									[
										402144,
										402145
									],
									[
										402242,
										402243
									],
									[
										402290,
										402291
									],
									[
										402292,
										402293
									],
									[
										402493,
										402494
									],
									[
										402502,
										402503
									],
									[
										402514,
										402515
									],
									[
										402570,
										402571
									],
									[
										402601,
										402602
									],
									[
										402609,
										402610
									],
									[
										402629,
										402630
									],
									[
										402642,
										402643
									],
									[
										402652,
										402653
									],
									[
										402795,
										402796
									],
									[
										402876,
										402877
									],
									[
										403006,
										403007
									],
									[
										403012,
										403013
									],
									[
										403045,
										403046
									],
									[
										403122,
										403123
									],
									[
										403138,
										403139
									],
									[
										403202,
										403203
									],
									[
										403300,
										403301
									],
									[
										403377,
										403378
									],
									[
										403470,
										403471
									],
									[
										403530,
										403531
									],
									[
										403625,
										403626
									],
									[
										403762,
										403763
									],
									[
										403869,
										403870
									],
									[
										403935,
										403936
									],
									[
										404030,
										404031
									],
									[
										404170,
										404171
									],
									[
										404251,
										404252
									],
									[
										404381,
										404382
									],
									[
										404469,
										404470
									],
									[
										404624,
										404625
									],
									[
										404666,
										404667
									],
									[
										404709,
										404710
									],
									[
										404809,
										404810
									],
									[
										404929,
										404930
									],
									[
										404963,
										404964
									],
									[
										405014,
										405015
									],
									[
										405079,
										405080
									],
									[
										405117,
										405118
									],
									[
										405191,
										405192
									],
									[
										405261,
										405262
									],
									[
										405405,
										405406
									],
									[
										405556,
										405557
									],
									[
										405623,
										405624
									],
									[
										405725,
										405726
									],
									[
										405795,
										405796
									],
									[
										405862,
										405863
									],
									[
										405979,
										405980
									],
									[
										406071,
										406072
									],
									[
										406092,
										406093
									],
									[
										406174,
										406175
									],
									[
										406248,
										406249
									],
									[
										406324,
										406325
									],
									[
										406362,
										406363
									],
									[
										406447,
										406448
									],
									[
										406529,
										406530
									],
									[
										406567,
										406568
									],
									[
										406658,
										406659
									],
									[
										406769,
										406770
									],
									[
										406864,
										406865
									],
									[
										406954,
										406955
									],
									[
										406992,
										406993
									],
									[
										407199,
										407200
									],
									[
										407434,
										407435
									],
									[
										407576,
										407577
									],
									[
										407750,
										407751
									],
									[
										407858,
										407859
									],
									[
										407862,
										407863
									],
									[
										407987,
										407988
									],
									[
										407991,
										407992
									],
									[
										408087,
										408088
									],
									[
										408098,
										408099
									],
									[
										408125,
										408126
									],
									[
										408126,
										408127
									],
									[
										408133,
										408134
									],
									[
										408156,
										408157
									],
									[
										408163,
										408164
									],
									[
										408268,
										408269
									],
									[
										408269,
										408270
									],
									[
										408276,
										408277
									],
									[
										408299,
										408300
									],
									[
										408384,
										408385
									],
									[
										408412,
										408413
									],
									[
										408413,
										408414
									],
									[
										408420,
										408421
									],
									[
										408443,
										408444
									],
									[
										408450,
										408451
									],
									[
										408555,
										408556
									],
									[
										408556,
										408557
									],
									[
										408563,
										408564
									],
									[
										408586,
										408587
									],
									[
										408742,
										408743
									],
									[
										408769,
										408770
									],
									[
										408789,
										408790
									],
									[
										408803,
										408804
									],
									[
										408816,
										408817
									],
									[
										408827,
										408828
									],
									[
										409056,
										409057
									],
									[
										409063,
										409064
									],
									[
										409095,
										409096
									],
									[
										409359,
										409360
									],
									[
										409368,
										409369
									],
									[
										409380,
										409381
									],
									[
										409436,
										409437
									],
									[
										409467,
										409468
									],
									[
										409475,
										409476
									],
									[
										409495,
										409496
									],
									[
										409508,
										409509
									],
									[
										409518,
										409519
									],
									[
										409663,
										409664
									],
									[
										409664,
										409665
									],
									[
										409785,
										409786
									],
									[
										409815,
										409816
									],
									[
										409843,
										409844
									],
									[
										409885,
										409886
									],
									[
										409921,
										409922
									],
									[
										409961,
										409962
									],
									[
										410005,
										410006
									],
									[
										410079,
										410080
									],
									[
										410091,
										410092
									],
									[
										410109,
										410110
									],
									[
										410156,
										410157
									],
									[
										410198,
										410199
									],
									[
										410210,
										410211
									],
									[
										410259,
										410260
									],
									[
										410337,
										410338
									],
									[
										410376,
										410377
									],
									[
										410391,
										410392
									],
									[
										410392,
										410393
									],
									[
										410399,
										410400
									],
									[
										410428,
										410429
									],
									[
										410472,
										410473
									],
									[
										410544,
										410545
									],
									[
										410573,
										410574
									],
									[
										410596,
										410597
									],
									[
										410617,
										410618
									],
									[
										410641,
										410642
									],
									[
										410745,
										410746
									],
									[
										410746,
										410747
									],
									[
										410794,
										410795
									],
									[
										410808,
										410809
									],
									[
										410823,
										410824
									],
									[
										410857,
										410858
									],
									[
										410860,
										410861
									],
									[
										410868,
										410869
									],
									[
										410882,
										410883
									],
									[
										410926,
										410927
									],
									[
										410934,
										410935
									],
									[
										410973,
										410974
									],
									[
										410988,
										410989
									],
									[
										410989,
										410990
									],
									[
										410995,
										410996
									],
									[
										410998,
										410999
									],
									[
										411013,
										411014
									],
									[
										411017,
										411018
									],
									[
										411063,
										411064
									],
									[
										411141,
										411142
									],
									[
										411165,
										411166
									],
									[
										411190,
										411191
									],
									[
										411279,
										411280
									],
									[
										411299,
										411300
									],
									[
										411324,
										411325
									],
									[
										411327,
										411328
									],
									[
										411342,
										411343
									],
									[
										411345,
										411346
									],
									[
										411372,
										411373
									],
									[
										411375,
										411376
									],
									[
										411389,
										411390
									],
									[
										411409,
										411410
									],
									[
										411470,
										411471
									],
									[
										411490,
										411491
									],
									[
										411590,
										411591
									],
									[
										411602,
										411603
									],
									[
										411636,
										411637
									],
									[
										411649,
										411650
									],
									[
										411694,
										411695
									],
									[
										411830,
										411831
									],
									[
										411836,
										411837
									],
									[
										411931,
										411932
									],
									[
										411937,
										411938
									],
									[
										412030,
										412031
									],
									[
										412046,
										412047
									],
									[
										412113,
										412114
									],
									[
										412134,
										412135
									],
									[
										412214,
										412215
									],
									[
										412287,
										412288
									],
									[
										412304,
										412305
									],
									[
										412377,
										412378
									],
									[
										412461,
										412462
									],
									[
										412538,
										412539
									],
									[
										412698,
										412699
									],
									[
										412785,
										412786
									],
									[
										412875,
										412876
									],
									[
										412952,
										412953
									],
									[
										413092,
										413093
									],
									[
										413106,
										413107
									],
									[
										413167,
										413168
									],
									[
										413296,
										413297
									],
									[
										413310,
										413311
									],
									[
										413378,
										413379
									],
									[
										413536,
										413537
									],
									[
										413570,
										413571
									],
									[
										413589,
										413590
									],
									[
										413611,
										413612
									],
									[
										413719,
										413720
									],
									[
										413818,
										413819
									],
									[
										413869,
										413870
									],
									[
										413923,
										413924
									],
									[
										413990,
										413991
									],
									[
										414023,
										414024
									],
									[
										414039,
										414040
									],
									[
										414093,
										414094
									],
									[
										414181,
										414182
									],
									[
										414197,
										414198
									],
									[
										414323,
										414324
									],
									[
										414356,
										414357
									],
									[
										414492,
										414493
									],
									[
										414597,
										414598
									],
									[
										414687,
										414688
									],
									[
										414771,
										414772
									],
									[
										414864,
										414865
									],
									[
										414913,
										414914
									],
									[
										415029,
										415030
									],
									[
										415043,
										415044
									],
									[
										415115,
										415116
									],
									[
										415136,
										415137
									],
									[
										415216,
										415217
									],
									[
										415242,
										415243
									],
									[
										415298,
										415299
									],
									[
										415376,
										415377
									],
									[
										415409,
										415410
									],
									[
										415425,
										415426
									],
									[
										415490,
										415491
									],
									[
										415574,
										415575
									],
									[
										415607,
										415608
									],
									[
										415623,
										415624
									],
									[
										415694,
										415695
									],
									[
										415801,
										415802
									],
									[
										415817,
										415818
									],
									[
										415892,
										415893
									],
									[
										415984,
										415985
									],
									[
										416017,
										416018
									],
									[
										416033,
										416034
									],
									[
										416222,
										416223
									],
									[
										416466,
										416467
									],
									[
										416610,
										416611
									],
									[
										416809,
										416810
									],
									[
										416897,
										416898
									],
									[
										416901,
										416902
									],
									[
										417059,
										417060
									],
									[
										417063,
										417064
									],
									[
										417139,
										417140
									],
									[
										417150,
										417151
									],
									[
										417178,
										417179
									],
									[
										417179,
										417180
									],
									[
										417186,
										417187
									],
									[
										417223,
										417224
									],
									[
										417232,
										417233
									],
									[
										417239,
										417240
									],
									[
										417327,
										417328
									],
									[
										417328,
										417329
									],
									[
										417335,
										417336
									],
									[
										417359,
										417360
									],
									[
										417368,
										417369
									],
									[
										417435,
										417436
									],
									[
										417464,
										417465
									],
									[
										417465,
										417466
									],
									[
										417472,
										417473
									],
									[
										417496,
										417497
									],
									[
										417505,
										417506
									],
									[
										417512,
										417513
									],
									[
										417600,
										417601
									],
									[
										417601,
										417602
									],
									[
										417608,
										417609
									],
									[
										417632,
										417633
									],
									[
										417641,
										417642
									],
									[
										417846,
										417847
									],
									[
										417855,
										417856
									],
									[
										417867,
										417868
									],
									[
										417923,
										417924
									],
									[
										417954,
										417955
									],
									[
										417962,
										417963
									],
									[
										417982,
										417983
									],
									[
										417995,
										417996
									],
									[
										418005,
										418006
									],
									[
										418149,
										418150
									],
									[
										418165,
										418166
									],
									[
										418264,
										418265
									],
									[
										418280,
										418281
									],
									[
										418372,
										418373
									],
									[
										418393,
										418394
									],
									[
										418486,
										418487
									],
									[
										418536,
										418537
									],
									[
										418573,
										418574
									],
									[
										418598,
										418599
									],
									[
										418637,
										418638
									],
									[
										418721,
										418722
									],
									[
										418760,
										418761
									],
									[
										418787,
										418788
									],
									[
										418871,
										418872
									],
									[
										418916,
										418917
									],
									[
										418949,
										418950
									],
									[
										419033,
										419034
									],
									[
										419072,
										419073
									],
									[
										419099,
										419100
									],
									[
										419154,
										419155
									],
									[
										419178,
										419179
									],
									[
										419182,
										419183
									],
									[
										419380,
										419381
									],
									[
										419421,
										419422
									],
									[
										419445,
										419446
									],
									[
										419531,
										419532
									],
									[
										419571,
										419572
									],
									[
										419599,
										419600
									],
									[
										419684,
										419685
									],
									[
										419724,
										419725
									],
									[
										419752,
										419753
									],
									[
										419864,
										419865
									],
									[
										419912,
										419913
									],
									[
										419948,
										419949
									],
									[
										420120,
										420121
									],
									[
										420131,
										420132
									],
									[
										420157,
										420158
									],
									[
										420216,
										420217
									],
									[
										420254,
										420255
									],
									[
										420280,
										420281
									],
									[
										420366,
										420367
									],
									[
										420410,
										420411
									],
									[
										420442,
										420443
									],
									[
										420538,
										420539
									],
									[
										420571,
										420572
									],
									[
										420614,
										420615
									],
									[
										420649,
										420650
									],
									[
										420701,
										420702
									],
									[
										420789,
										420790
									],
									[
										420885,
										420886
									],
									[
										420977,
										420978
									],
									[
										421015,
										421016
									],
									[
										421041,
										421042
									],
									[
										421093,
										421094
									],
									[
										421181,
										421182
									],
									[
										421219,
										421220
									],
									[
										421245,
										421246
									],
									[
										421319,
										421320
									],
									[
										421365,
										421366
									],
									[
										421399,
										421400
									],
									[
										421473,
										421474
									],
									[
										421516,
										421517
									],
									[
										421542,
										421543
									],
									[
										421597,
										421598
									],
									[
										421630,
										421631
									],
									[
										421636,
										421637
									],
									[
										421684,
										421685
									],
									[
										421703,
										421704
									],
									[
										421727,
										421728
									],
									[
										421734,
										421735
									],
									[
										421753,
										421754
									],
									[
										421795,
										421796
									],
									[
										421803,
										421804
									],
									[
										421821,
										421822
									],
									[
										421863,
										421864
									],
									[
										421871,
										421872
									],
									[
										421919,
										421920
									],
									[
										421935,
										421936
									],
									[
										421992,
										421993
									],
									[
										422011,
										422012
									],
									[
										422033,
										422034
									],
									[
										422040,
										422041
									],
									[
										422116,
										422117
									],
									[
										422210,
										422211
									],
									[
										422229,
										422230
									],
									[
										422253,
										422254
									],
									[
										422260,
										422261
									],
									[
										422279,
										422280
									],
									[
										422318,
										422319
									],
									[
										422348,
										422349
									],
									[
										422391,
										422392
									],
									[
										422421,
										422422
									],
									[
										422468,
										422469
									],
									[
										422495,
										422496
									],
									[
										422500,
										422501
									],
									[
										422510,
										422511
									],
									[
										422539,
										422540
									],
									[
										422570,
										422571
									],
									[
										422586,
										422587
									],
									[
										422594,
										422595
									],
									[
										422620,
										422621
									],
									[
										422662,
										422663
									],
									[
										422670,
										422671
									],
									[
										422731,
										422732
									],
									[
										422750,
										422751
									],
									[
										422775,
										422776
									],
									[
										422782,
										422783
									],
									[
										422807,
										422808
									],
									[
										422848,
										422849
									],
									[
										422906,
										422907
									],
									[
										422951,
										422952
									],
									[
										422982,
										422983
									],
									[
										423028,
										423029
									],
									[
										423054,
										423055
									],
									[
										423078,
										423079
									],
									[
										423092,
										423093
									],
									[
										423111,
										423112
									],
									[
										423153,
										423154
									],
									[
										423161,
										423162
									],
									[
										423179,
										423180
									],
									[
										423221,
										423222
									],
									[
										423229,
										423230
									],
									[
										423277,
										423278
									],
									[
										423293,
										423294
									],
									[
										423348,
										423349
									],
									[
										423431,
										423432
									],
									[
										423453,
										423454
									],
									[
										423576,
										423577
									],
									[
										423577,
										423578
									],
									[
										423609,
										423610
									],
									[
										423631,
										423632
									],
									[
										423644,
										423645
									],
									[
										423662,
										423663
									],
									[
										423681,
										423682
									],
									[
										423732,
										423733
									],
									[
										423747,
										423748
									],
									[
										423833,
										423834
									],
									[
										423916,
										423917
									],
									[
										424079,
										424080
									],
									[
										424227,
										424228
									],
									[
										424237,
										424238
									],
									[
										424253,
										424254
									],
									[
										424377,
										424378
									],
									[
										424404,
										424405
									],
									[
										424492,
										424493
									],
									[
										424494,
										424495
									],
									[
										424509,
										424510
									],
									[
										424527,
										424528
									],
									[
										424590,
										424591
									],
									[
										424592,
										424593
									],
									[
										424604,
										424605
									],
									[
										424701,
										424702
									],
									[
										424703,
										424704
									],
									[
										424718,
										424719
									],
									[
										424799,
										424800
									],
									[
										424881,
										424882
									],
									[
										424910,
										424911
									],
									[
										424915,
										424916
									],
									[
										424925,
										424926
									],
									[
										424973,
										424974
									],
									[
										425001,
										425002
									],
									[
										425072,
										425073
									],
									[
										425104,
										425105
									],
									[
										425159,
										425160
									],
									[
										425238,
										425239
									],
									[
										425270,
										425271
									],
									[
										425329,
										425330
									],
									[
										425408,
										425409
									],
									[
										425440,
										425441
									],
									[
										425483,
										425484
									],
									[
										425554,
										425555
									],
									[
										425586,
										425587
									],
									[
										425633,
										425634
									],
									[
										425704,
										425705
									],
									[
										425737,
										425738
									],
									[
										425753,
										425754
									],
									[
										425761,
										425762
									],
									[
										425803,
										425804
									],
									[
										425874,
										425875
									],
									[
										425918,
										425919
									],
									[
										425926,
										425927
									],
									[
										425968,
										425969
									],
									[
										426082,
										426083
									],
									[
										426115,
										426116
									],
									[
										426121,
										426122
									],
									[
										426171,
										426172
									],
									[
										426367,
										426368
									],
									[
										426376,
										426377
									],
									[
										426388,
										426389
									],
									[
										426444,
										426445
									],
									[
										426475,
										426476
									],
									[
										426483,
										426484
									],
									[
										426503,
										426504
									],
									[
										426516,
										426517
									],
									[
										426526,
										426527
									],
									[
										426677,
										426678
									],
									[
										426678,
										426679
									],
									[
										426747,
										426748
									],
									[
										426833,
										426834
									],
									[
										426835,
										426836
									],
									[
										426844,
										426845
									],
									[
										426910,
										426911
									],
									[
										426911,
										426912
									],
									[
										426919,
										426920
									],
									[
										426921,
										426922
									],
									[
										426930,
										426931
									],
									[
										426959,
										426960
									],
									[
										426961,
										426962
									],
									[
										426996,
										426997
									],
									[
										426998,
										426999
									],
									[
										427008,
										427009
									],
									[
										427064,
										427065
									],
									[
										427065,
										427066
									],
									[
										427079,
										427080
									],
									[
										427147,
										427148
									],
									[
										427148,
										427149
									],
									[
										427162,
										427163
									],
									[
										427185,
										427186
									],
									[
										427186,
										427187
									],
									[
										427242,
										427243
									],
									[
										427268,
										427269
									],
									[
										427292,
										427293
									],
									[
										427350,
										427351
									],
									[
										427368,
										427369
									],
									[
										427374,
										427375
									],
									[
										427375,
										427376
									],
									[
										427467,
										427468
									],
									[
										427476,
										427477
									],
									[
										427516,
										427517
									],
									[
										427525,
										427526
									],
									[
										427616,
										427617
									],
									[
										427699,
										427700
									],
									[
										427701,
										427702
									],
									[
										427723,
										427724
									],
									[
										427725,
										427726
									],
									[
										427868,
										427869
									],
									[
										427869,
										427870
									],
									[
										427877,
										427878
									],
									[
										427879,
										427880
									],
									[
										427888,
										427889
									],
									[
										427911,
										427912
									],
									[
										427912,
										427913
									],
									[
										427963,
										427964
									],
									[
										428001,
										428002
									],
									[
										428019,
										428020
									],
									[
										428021,
										428022
									],
									[
										428031,
										428032
									],
									[
										428117,
										428118
									],
									[
										428139,
										428140
									],
									[
										428196,
										428197
									],
									[
										428229,
										428230
									],
									[
										428250,
										428251
									],
									[
										428318,
										428319
									],
									[
										428320,
										428321
									],
									[
										428335,
										428336
									],
									[
										428337,
										428338
									],
									[
										428344,
										428345
									],
									[
										428360,
										428361
									],
									[
										428387,
										428388
									],
									[
										428453,
										428454
									],
									[
										428455,
										428456
									],
									[
										428529,
										428530
									],
									[
										428556,
										428557
									],
									[
										428617,
										428618
									],
									[
										428619,
										428620
									],
									[
										428634,
										428635
									],
									[
										428636,
										428637
									],
									[
										428643,
										428644
									],
									[
										428659,
										428660
									],
									[
										428670,
										428671
									],
									[
										428702,
										428703
									],
									[
										428704,
										428705
									],
									[
										428760,
										428761
									],
									[
										428819,
										428820
									],
									[
										428821,
										428822
									],
									[
										428832,
										428833
									],
									[
										428834,
										428835
									],
									[
										428852,
										428853
									],
									[
										428884,
										428885
									],
									[
										428886,
										428887
									],
									[
										428976,
										428977
									],
									[
										428990,
										428991
									],
									[
										429049,
										429050
									],
									[
										429115,
										429116
									],
									[
										429123,
										429124
									],
									[
										429182,
										429183
									],
									[
										429183,
										429184
									],
									[
										429192,
										429193
									],
									[
										429194,
										429195
									],
									[
										429203,
										429204
									],
									[
										429228,
										429229
									],
									[
										429230,
										429231
									],
									[
										429265,
										429266
									],
									[
										429314,
										429315
									],
									[
										429327,
										429328
									],
									[
										429363,
										429364
									],
									[
										429366,
										429367
									],
									[
										429370,
										429371
									],
									[
										429392,
										429393
									],
									[
										429445,
										429446
									],
									[
										429485,
										429486
									],
									[
										429531,
										429532
									],
									[
										429532,
										429533
									],
									[
										429573,
										429574
									],
									[
										429581,
										429582
									],
									[
										429637,
										429638
									],
									[
										429661,
										429662
									],
									[
										429680,
										429681
									],
									[
										429682,
										429683
									],
									[
										429736,
										429737
									],
									[
										429745,
										429746
									],
									[
										429811,
										429812
									],
									[
										429812,
										429813
									],
									[
										429821,
										429822
									],
									[
										429823,
										429824
									],
									[
										429832,
										429833
									],
									[
										429855,
										429856
									],
									[
										429856,
										429857
									],
									[
										429865,
										429866
									],
									[
										429867,
										429868
									],
									[
										429876,
										429877
									],
									[
										429898,
										429899
									],
									[
										429899,
										429900
									],
									[
										429907,
										429908
									],
									[
										429936,
										429937
									],
									[
										430005,
										430006
									],
									[
										430056,
										430057
									],
									[
										430064,
										430065
									],
									[
										430065,
										430066
									],
									[
										430123,
										430124
									],
									[
										430145,
										430146
									],
									[
										430202,
										430203
									],
									[
										430235,
										430236
									],
									[
										430256,
										430257
									],
									[
										430285,
										430286
									],
									[
										430355,
										430356
									],
									[
										430430,
										430431
									],
									[
										430431,
										430432
									],
									[
										430445,
										430446
									],
									[
										430467,
										430468
									],
									[
										430468,
										430469
									],
									[
										430488,
										430489
									],
									[
										430530,
										430531
									],
									[
										430608,
										430609
									],
									[
										430635,
										430636
									],
									[
										430657,
										430658
									],
									[
										430739,
										430740
									],
									[
										430814,
										430815
									],
									[
										430815,
										430816
									],
									[
										430829,
										430830
									],
									[
										430851,
										430852
									],
									[
										430852,
										430853
									],
									[
										430872,
										430873
									],
									[
										430914,
										430915
									],
									[
										430974,
										430975
									],
									[
										430994,
										430995
									],
									[
										431026,
										431027
									],
									[
										431028,
										431029
									],
									[
										431096,
										431097
									],
									[
										431105,
										431106
									],
									[
										431140,
										431141
									],
									[
										431141,
										431142
									],
									[
										431155,
										431156
									],
									[
										431177,
										431178
									],
									[
										431178,
										431179
									],
									[
										431198,
										431199
									],
									[
										431240,
										431241
									],
									[
										431316,
										431317
									],
									[
										431318,
										431319
									],
									[
										431544,
										431545
									],
									[
										431553,
										431554
									],
									[
										431565,
										431566
									],
									[
										431621,
										431622
									],
									[
										431652,
										431653
									],
									[
										431660,
										431661
									],
									[
										431680,
										431681
									],
									[
										431693,
										431694
									],
									[
										431703,
										431704
									],
									[
										431818,
										431819
									],
									[
										431820,
										431821
									],
									[
										431858,
										431859
									],
									[
										431860,
										431861
									],
									[
										431927,
										431928
									],
									[
										431928,
										431929
									],
									[
										431933,
										431934
									],
									[
										431935,
										431936
									],
									[
										431968,
										431969
									],
									[
										431970,
										431971
									],
									[
										432019,
										432020
									],
									[
										432021,
										432022
									],
									[
										432038,
										432039
									],
									[
										432040,
										432041
									],
									[
										432092,
										432093
									],
									[
										432105,
										432106
									],
									[
										432107,
										432108
									],
									[
										432123,
										432124
									],
									[
										432154,
										432155
									],
									[
										432156,
										432157
									],
									[
										432173,
										432174
									],
									[
										432239,
										432240
									],
									[
										432274,
										432275
									],
									[
										432276,
										432277
									],
									[
										432285,
										432286
									],
									[
										432295,
										432296
									],
									[
										432297,
										432298
									],
									[
										432303,
										432304
									],
									[
										432339,
										432340
									],
									[
										432341,
										432342
									],
									[
										432359,
										432360
									],
									[
										432421,
										432422
									],
									[
										432436,
										432437
									],
									[
										432438,
										432439
									],
									[
										432445,
										432446
									],
									[
										432454,
										432455
									],
									[
										432499,
										432500
									],
									[
										432525,
										432526
									],
									[
										432532,
										432533
									],
									[
										432545,
										432546
									],
									[
										432576,
										432577
									],
									[
										432578,
										432579
									],
									[
										432585,
										432586
									],
									[
										432594,
										432595
									],
									[
										432603,
										432604
									],
									[
										432680,
										432681
									],
									[
										432706,
										432707
									],
									[
										432713,
										432714
									],
									[
										432723,
										432724
									],
									[
										432725,
										432726
									],
									[
										432732,
										432733
									],
									[
										432735,
										432736
									],
									[
										432766,
										432767
									],
									[
										432768,
										432769
									],
									[
										432775,
										432776
									],
									[
										432784,
										432785
									],
									[
										432793,
										432794
									],
									[
										432893,
										432894
									],
									[
										433052,
										433053
									],
									[
										433068,
										433069
									],
									[
										433070,
										433071
									],
									[
										433077,
										433078
									],
									[
										433087,
										433088
									],
									[
										433089,
										433090
									],
									[
										433133,
										433134
									],
									[
										433178,
										433179
									],
									[
										433184,
										433185
									],
									[
										433186,
										433187
									],
									[
										433192,
										433193
									],
									[
										433233,
										433234
									],
									[
										433259,
										433260
									],
									[
										433264,
										433265
									],
									[
										433301,
										433302
									],
									[
										433329,
										433330
									],
									[
										433334,
										433335
									],
									[
										433375,
										433376
									],
									[
										433452,
										433453
									],
									[
										433474,
										433475
									],
									[
										433531,
										433532
									],
									[
										433564,
										433565
									],
									[
										433585,
										433586
									],
									[
										433635,
										433636
									],
									[
										433636,
										433637
									],
									[
										433767,
										433768
									],
									[
										433794,
										433795
									],
									[
										433835,
										433836
									],
									[
										433901,
										433902
									],
									[
										433930,
										433931
									],
									[
										433940,
										433941
									],
									[
										433942,
										433943
									],
									[
										433949,
										433950
									],
									[
										433952,
										433953
									],
									[
										433988,
										433989
									],
									[
										433996,
										433997
									],
									[
										434058,
										434059
									],
									[
										434073,
										434074
									],
									[
										434075,
										434076
									],
									[
										434082,
										434083
									],
									[
										434091,
										434092
									],
									[
										434136,
										434137
									],
									[
										434162,
										434163
									],
									[
										434169,
										434170
									],
									[
										434182,
										434183
									],
									[
										434213,
										434214
									],
									[
										434215,
										434216
									],
									[
										434222,
										434223
									],
									[
										434231,
										434232
									],
									[
										434240,
										434241
									],
									[
										434317,
										434318
									],
									[
										434343,
										434344
									],
									[
										434350,
										434351
									],
									[
										434360,
										434361
									],
									[
										434362,
										434363
									],
									[
										434369,
										434370
									],
									[
										434372,
										434373
									],
									[
										434403,
										434404
									],
									[
										434405,
										434406
									],
									[
										434412,
										434413
									],
									[
										434421,
										434422
									],
									[
										434430,
										434431
									],
									[
										434530,
										434531
									],
									[
										434687,
										434688
									],
									[
										434693,
										434694
									],
									[
										434695,
										434696
									],
									[
										434709,
										434710
									],
									[
										434713,
										434714
									],
									[
										434796,
										434797
									],
									[
										434837,
										434838
									],
									[
										434838,
										434839
									],
									[
										434869,
										434870
									],
									[
										434871,
										434872
									],
									[
										434938,
										434939
									],
									[
										434940,
										434941
									],
									[
										434989,
										434990
									],
									[
										435016,
										435017
									],
									[
										435051,
										435052
									],
									[
										435053,
										435054
									],
									[
										435067,
										435068
									],
									[
										435133,
										435134
									],
									[
										435162,
										435163
									],
									[
										435172,
										435173
									],
									[
										435174,
										435175
									],
									[
										435181,
										435182
									],
									[
										435184,
										435185
									],
									[
										435222,
										435223
									],
									[
										435224,
										435225
									],
									[
										435230,
										435231
									],
									[
										435238,
										435239
									],
									[
										435300,
										435301
									],
									[
										435315,
										435316
									],
									[
										435317,
										435318
									],
									[
										435324,
										435325
									],
									[
										435333,
										435334
									],
									[
										435378,
										435379
									],
									[
										435404,
										435405
									],
									[
										435411,
										435412
									],
									[
										435424,
										435425
									],
									[
										435455,
										435456
									],
									[
										435457,
										435458
									],
									[
										435464,
										435465
									],
									[
										435473,
										435474
									],
									[
										435482,
										435483
									],
									[
										435559,
										435560
									],
									[
										435585,
										435586
									],
									[
										435592,
										435593
									],
									[
										435602,
										435603
									],
									[
										435604,
										435605
									],
									[
										435611,
										435612
									],
									[
										435614,
										435615
									],
									[
										435645,
										435646
									],
									[
										435647,
										435648
									],
									[
										435654,
										435655
									],
									[
										435663,
										435664
									],
									[
										435672,
										435673
									],
									[
										435772,
										435773
									],
									[
										435929,
										435930
									],
									[
										435935,
										435936
									],
									[
										435937,
										435938
									],
									[
										435951,
										435952
									],
									[
										435955,
										435956
									],
									[
										436071,
										436072
									],
									[
										436073,
										436074
									],
									[
										436282,
										436283
									],
									[
										436291,
										436292
									],
									[
										436303,
										436304
									],
									[
										436359,
										436360
									],
									[
										436390,
										436391
									],
									[
										436398,
										436399
									],
									[
										436418,
										436419
									],
									[
										436431,
										436432
									],
									[
										436441,
										436442
									],
									[
										436556,
										436557
									],
									[
										436558,
										436559
									],
									[
										436600,
										436601
									],
									[
										436602,
										436603
									],
									[
										436668,
										436669
									],
									[
										436669,
										436670
									],
									[
										436674,
										436675
									],
									[
										436676,
										436677
									],
									[
										436683,
										436684
									],
									[
										436704,
										436705
									],
									[
										436706,
										436707
									],
									[
										436718,
										436719
									],
									[
										436720,
										436721
									],
									[
										436793,
										436794
									],
									[
										436799,
										436800
									],
									[
										436801,
										436802
									],
									[
										436808,
										436809
									],
									[
										436897,
										436898
									],
									[
										436903,
										436904
									],
									[
										436905,
										436906
									],
									[
										436988,
										436989
									],
									[
										437033,
										437034
									],
									[
										437046,
										437047
									],
									[
										437047,
										437048
									],
									[
										437105,
										437106
									],
									[
										437107,
										437108
									],
									[
										437114,
										437115
									],
									[
										437137,
										437138
									],
									[
										437139,
										437140
									],
									[
										437181,
										437182
									],
									[
										437203,
										437204
									],
									[
										437205,
										437206
									],
									[
										437213,
										437214
									],
									[
										437216,
										437217
									],
									[
										437236,
										437237
									],
									[
										437238,
										437239
									],
									[
										437299,
										437300
									],
									[
										437325,
										437326
									],
									[
										437332,
										437333
									],
									[
										437345,
										437346
									],
									[
										437383,
										437384
									],
									[
										437414,
										437415
									],
									[
										437416,
										437417
									],
									[
										437423,
										437424
									],
									[
										437451,
										437452
									],
									[
										437453,
										437454
									],
									[
										437461,
										437462
									],
									[
										437464,
										437465
									],
									[
										437513,
										437514
									],
									[
										437541,
										437542
									],
									[
										437543,
										437544
									],
									[
										437573,
										437574
									],
									[
										437594,
										437595
									],
									[
										437596,
										437597
									],
									[
										437611,
										437612
									],
									[
										437613,
										437614
									],
									[
										437694,
										437695
									],
									[
										437720,
										437721
									],
									[
										437727,
										437728
									],
									[
										437733,
										437734
									],
									[
										437735,
										437736
									],
									[
										437742,
										437743
									],
									[
										437745,
										437746
									],
									[
										437783,
										437784
									],
									[
										437814,
										437815
									],
									[
										437816,
										437817
									],
									[
										437823,
										437824
									],
									[
										437851,
										437852
									],
									[
										437853,
										437854
									],
									[
										437861,
										437862
									],
									[
										437864,
										437865
									],
									[
										437913,
										437914
									],
									[
										437941,
										437942
									],
									[
										437943,
										437944
									],
									[
										437973,
										437974
									],
									[
										437994,
										437995
									],
									[
										437996,
										437997
									],
									[
										438011,
										438012
									],
									[
										438013,
										438014
									],
									[
										438036,
										438037
									],
									[
										438038,
										438039
									],
									[
										438100,
										438101
									],
									[
										438112,
										438113
									],
									[
										438127,
										438128
									],
									[
										438129,
										438130
									],
									[
										438136,
										438137
									],
									[
										438190,
										438191
									],
									[
										438192,
										438193
									],
									[
										438244,
										438245
									],
									[
										438282,
										438283
									],
									[
										438288,
										438289
									],
									[
										438290,
										438291
									],
									[
										438297,
										438298
									],
									[
										438300,
										438301
									],
									[
										438333,
										438334
									],
									[
										438339,
										438340
									],
									[
										438341,
										438342
									],
									[
										438358,
										438359
									],
									[
										438360,
										438361
									],
									[
										438413,
										438414
									],
									[
										438451,
										438452
									],
									[
										438464,
										438465
									],
									[
										438497,
										438498
									],
									[
										438503,
										438504
									],
									[
										438505,
										438506
									],
									[
										438566,
										438567
									],
									[
										438604,
										438605
									],
									[
										438610,
										438611
									],
									[
										438612,
										438613
									],
									[
										438619,
										438620
									],
									[
										438622,
										438623
									],
									[
										438717,
										438718
									],
									[
										438755,
										438756
									],
									[
										438768,
										438769
									],
									[
										438887,
										438888
									],
									[
										439064,
										439065
									],
									[
										439066,
										439067
									],
									[
										439139,
										439140
									],
									[
										439141,
										439142
									],
									[
										439198,
										439199
									],
									[
										439216,
										439217
									],
									[
										439231,
										439232
									],
									[
										439233,
										439234
									],
									[
										439240,
										439241
									],
									[
										439288,
										439289
									],
									[
										439304,
										439305
									],
									[
										439319,
										439320
									],
									[
										439321,
										439322
									],
									[
										439328,
										439329
									],
									[
										439374,
										439375
									],
									[
										439385,
										439386
									],
									[
										439400,
										439401
									],
									[
										439402,
										439403
									],
									[
										439409,
										439410
									],
									[
										439473,
										439474
									],
									[
										439475,
										439476
									],
									[
										439482,
										439483
									],
									[
										439492,
										439493
									],
									[
										439494,
										439495
									],
									[
										439527,
										439528
									],
									[
										439529,
										439530
									],
									[
										439573,
										439574
									],
									[
										439575,
										439576
									],
									[
										439582,
										439583
									],
									[
										439598,
										439599
									],
									[
										439600,
										439601
									],
									[
										439641,
										439642
									],
									[
										439666,
										439667
									],
									[
										439667,
										439668
									],
									[
										439672,
										439673
									],
									[
										439674,
										439675
									],
									[
										439708,
										439709
									],
									[
										439721,
										439722
									],
									[
										439722,
										439723
									],
									[
										439751,
										439752
									],
									[
										439752,
										439753
									],
									[
										439822,
										439823
									],
									[
										439823,
										439824
									],
									[
										439839,
										439840
									],
									[
										439841,
										439842
									],
									[
										439851,
										439852
									],
									[
										439891,
										439892
									],
									[
										439893,
										439894
									],
									[
										439916,
										439917
									],
									[
										439918,
										439919
									],
									[
										439928,
										439929
									],
									[
										439962,
										439963
									],
									[
										439964,
										439965
									],
									[
										439980,
										439981
									],
									[
										439990,
										439991
									],
									[
										440001,
										440002
									],
									[
										440008,
										440009
									],
									[
										440022,
										440023
									],
									[
										440053,
										440054
									],
									[
										440084,
										440085
									],
									[
										440104,
										440105
									],
									[
										440110,
										440111
									],
									[
										440112,
										440113
									],
									[
										440118,
										440119
									],
									[
										440125,
										440126
									],
									[
										440183,
										440184
									],
									[
										440185,
										440186
									],
									[
										440194,
										440195
									],
									[
										440295,
										440296
									],
									[
										440425,
										440426
									],
									[
										440443,
										440444
									],
									[
										440445,
										440446
									],
									[
										440455,
										440456
									],
									[
										440479,
										440480
									],
									[
										440481,
										440482
									],
									[
										440501,
										440502
									],
									[
										440503,
										440504
									],
									[
										440513,
										440514
									],
									[
										440531,
										440532
									],
									[
										440533,
										440534
									],
									[
										440549,
										440550
									],
									[
										440559,
										440560
									],
									[
										440570,
										440571
									],
									[
										440577,
										440578
									],
									[
										440621,
										440622
									],
									[
										440645,
										440646
									],
									[
										440672,
										440673
									],
									[
										440678,
										440679
									],
									[
										440680,
										440681
									],
									[
										440686,
										440687
									],
									[
										440693,
										440694
									],
									[
										440748,
										440749
									],
									[
										440750,
										440751
									],
									[
										440759,
										440760
									],
									[
										440827,
										440828
									],
									[
										440828,
										440829
									],
									[
										440833,
										440834
									],
									[
										440835,
										440836
									],
									[
										440864,
										440865
									],
									[
										440866,
										440867
									],
									[
										440873,
										440874
									],
									[
										440916,
										440917
									],
									[
										440918,
										440919
									],
									[
										440964,
										440965
									],
									[
										440977,
										440978
									],
									[
										440979,
										440980
									],
									[
										440996,
										440997
									],
									[
										441023,
										441024
									],
									[
										441025,
										441026
									],
									[
										441032,
										441033
									],
									[
										441045,
										441046
									],
									[
										441047,
										441048
									],
									[
										441095,
										441096
									],
									[
										441137,
										441138
									],
									[
										441139,
										441140
									],
									[
										441148,
										441149
									],
									[
										441154,
										441155
									],
									[
										441156,
										441157
									],
									[
										441174,
										441175
									],
									[
										441176,
										441177
									],
									[
										441183,
										441184
									],
									[
										441262,
										441263
									],
									[
										441297,
										441298
									],
									[
										441299,
										441300
									],
									[
										441308,
										441309
									],
									[
										441314,
										441315
									],
									[
										441316,
										441317
									],
									[
										441322,
										441323
									],
									[
										441354,
										441355
									],
									[
										441356,
										441357
									],
									[
										441363,
										441364
									],
									[
										441434,
										441435
									],
									[
										441436,
										441437
									],
									[
										441456,
										441457
									],
									[
										441462,
										441463
									],
									[
										441464,
										441465
									],
									[
										441524,
										441525
									],
									[
										441568,
										441569
									],
									[
										441569,
										441570
									],
									[
										441571,
										441572
									],
									[
										441577,
										441578
									],
									[
										441578,
										441579
									],
									[
										441603,
										441604
									],
									[
										441605,
										441606
									],
									[
										441625,
										441626
									],
									[
										441631,
										441632
									],
									[
										441633,
										441634
									],
									[
										441639,
										441640
									],
									[
										441700,
										441701
									],
									[
										441742,
										441743
									],
									[
										441744,
										441745
									],
									[
										441775,
										441776
									],
									[
										441782,
										441783
									],
									[
										441795,
										441796
									],
									[
										441800,
										441801
									],
									[
										441877,
										441878
									],
									[
										441893,
										441894
									],
									[
										441895,
										441896
									],
									[
										441902,
										441903
									],
									[
										441912,
										441913
									],
									[
										441914,
										441915
									],
									[
										441958,
										441959
									],
									[
										442003,
										442004
									],
									[
										442009,
										442010
									],
									[
										442011,
										442012
									],
									[
										442017,
										442018
									],
									[
										442058,
										442059
									],
									[
										442084,
										442085
									],
									[
										442089,
										442090
									],
									[
										442126,
										442127
									],
									[
										442154,
										442155
									],
									[
										442160,
										442161
									],
									[
										442162,
										442163
									],
									[
										442177,
										442178
									],
									[
										442179,
										442180
									],
									[
										442201,
										442202
									],
									[
										442203,
										442204
									],
									[
										442241,
										442242
									],
									[
										442321,
										442322
									],
									[
										442322,
										442323
									],
									[
										442343,
										442344
									],
									[
										442345,
										442346
									],
									[
										442352,
										442353
									],
									[
										442369,
										442370
									],
									[
										442536,
										442537
									],
									[
										442538,
										442539
									],
									[
										442545,
										442546
									],
									[
										442594,
										442595
									],
									[
										442630,
										442631
									],
									[
										442657,
										442658
									],
									[
										442659,
										442660
									],
									[
										442666,
										442667
									],
									[
										442679,
										442680
									],
									[
										442681,
										442682
									],
									[
										442729,
										442730
									],
									[
										442780,
										442781
									],
									[
										442809,
										442810
									],
									[
										442815,
										442816
									],
									[
										442817,
										442818
									],
									[
										442824,
										442825
									],
									[
										442827,
										442828
									],
									[
										442853,
										442854
									],
									[
										442855,
										442856
									],
									[
										442862,
										442863
									],
									[
										442901,
										442902
									],
									[
										442949,
										442950
									],
									[
										443026,
										443027
									],
									[
										443028,
										443029
									],
									[
										443035,
										443036
									],
									[
										443059,
										443060
									],
									[
										443061,
										443062
									],
									[
										443098,
										443099
									],
									[
										443147,
										443148
									],
									[
										443152,
										443153
									],
									[
										443196,
										443197
									],
									[
										443197,
										443198
									],
									[
										443247,
										443248
									],
									[
										443291,
										443292
									],
									[
										443296,
										443297
									],
									[
										443326,
										443327
									],
									[
										443344,
										443345
									],
									[
										443349,
										443350
									],
									[
										443355,
										443356
									],
									[
										443360,
										443361
									],
									[
										443362,
										443363
									],
									[
										443383,
										443384
									],
									[
										443387,
										443388
									],
									[
										443416,
										443417
									],
									[
										443457,
										443458
									],
									[
										443477,
										443478
									],
									[
										443546,
										443547
									],
									[
										443579,
										443580
									],
									[
										443580,
										443581
									],
									[
										443587,
										443588
									],
									[
										443605,
										443606
									],
									[
										443620,
										443621
									],
									[
										443659,
										443660
									],
									[
										443660,
										443661
									],
									[
										443690,
										443691
									],
									[
										443811,
										443812
									],
									[
										443824,
										443825
									],
									[
										443825,
										443826
									],
									[
										443883,
										443884
									],
									[
										443885,
										443886
									],
									[
										444045,
										444046
									],
									[
										444073,
										444074
									],
									[
										444074,
										444075
									],
									[
										444080,
										444081
									],
									[
										444124,
										444125
									],
									[
										444161,
										444162
									],
									[
										444163,
										444164
									],
									[
										444177,
										444178
									],
									[
										444178,
										444179
									],
									[
										444205,
										444206
									],
									[
										444223,
										444224
									],
									[
										444250,
										444251
									],
									[
										444269,
										444270
									],
									[
										444328,
										444329
									],
									[
										444334,
										444335
									],
									[
										444364,
										444365
									],
									[
										444380,
										444381
									],
									[
										444390,
										444391
									],
									[
										444398,
										444399
									],
									[
										444409,
										444410
									],
									[
										444419,
										444420
									],
									[
										444428,
										444429
									],
									[
										444465,
										444466
									],
									[
										444468,
										444469
									],
									[
										444482,
										444483
									],
									[
										444492,
										444493
									],
									[
										444499,
										444500
									],
									[
										444510,
										444511
									],
									[
										444514,
										444515
									],
									[
										444558,
										444559
									],
									[
										444615,
										444616
									],
									[
										444622,
										444623
									],
									[
										444623,
										444624
									],
									[
										444635,
										444636
									],
									[
										444675,
										444676
									],
									[
										444680,
										444681
									],
									[
										444683,
										444684
									],
									[
										444699,
										444700
									],
									[
										444708,
										444709
									],
									[
										444742,
										444743
									],
									[
										444752,
										444753
									],
									[
										444765,
										444766
									],
									[
										444768,
										444769
									],
									[
										444807,
										444808
									],
									[
										444808,
										444809
									],
									[
										444874,
										444875
									],
									[
										444911,
										444912
									],
									[
										444912,
										444913
									],
									[
										444936,
										444937
									],
									[
										444982,
										444983
									],
									[
										444998,
										444999
									],
									[
										445019,
										445020
									],
									[
										445062,
										445063
									],
									[
										445143,
										445144
									],
									[
										445150,
										445151
									],
									[
										445194,
										445195
									],
									[
										445221,
										445222
									],
									[
										445240,
										445241
									],
									[
										445249,
										445250
									],
									[
										445286,
										445287
									],
									[
										445297,
										445298
									],
									[
										445321,
										445322
									],
									[
										445332,
										445333
									],
									[
										445361,
										445362
									],
									[
										445379,
										445380
									],
									[
										445431,
										445432
									],
									[
										445459,
										445460
									],
									[
										445483,
										445484
									],
									[
										445508,
										445509
									],
									[
										445517,
										445518
									],
									[
										445533,
										445534
									],
									[
										445579,
										445580
									],
									[
										445615,
										445616
									],
									[
										445628,
										445629
									],
									[
										445633,
										445634
									],
									[
										445641,
										445642
									],
									[
										445654,
										445655
									],
									[
										445737,
										445738
									],
									[
										445756,
										445757
									],
									[
										445763,
										445764
									],
									[
										445768,
										445769
									],
									[
										445776,
										445777
									],
									[
										445790,
										445791
									],
									[
										445818,
										445819
									],
									[
										445921,
										445922
									],
									[
										445957,
										445958
									],
									[
										445976,
										445977
									],
									[
										445983,
										445984
									],
									[
										445991,
										445992
									],
									[
										446000,
										446001
									],
									[
										446005,
										446006
									],
									[
										446069,
										446070
									],
									[
										446076,
										446077
									],
									[
										446081,
										446082
									],
									[
										446086,
										446087
									],
									[
										446128,
										446129
									],
									[
										446133,
										446134
									],
									[
										446144,
										446145
									],
									[
										446157,
										446158
									],
									[
										446184,
										446185
									],
									[
										446189,
										446190
									],
									[
										446204,
										446205
									],
									[
										446213,
										446214
									],
									[
										446241,
										446242
									],
									[
										446246,
										446247
									],
									[
										446279,
										446280
									],
									[
										446293,
										446294
									],
									[
										446308,
										446309
									],
									[
										446364,
										446365
									],
									[
										446369,
										446370
									],
									[
										446384,
										446385
									],
									[
										446430,
										446431
									],
									[
										446437,
										446438
									],
									[
										446442,
										446443
									],
									[
										446447,
										446448
									],
									[
										446480,
										446481
									],
									[
										446598,
										446599
									],
									[
										446613,
										446614
									],
									[
										446650,
										446651
									],
									[
										446665,
										446666
									],
									[
										446680,
										446681
									],
									[
										446732,
										446733
									],
									[
										446746,
										446747
									],
									[
										446767,
										446768
									],
									[
										446773,
										446774
									],
									[
										446788,
										446789
									],
									[
										446816,
										446817
									],
									[
										446844,
										446845
									],
									[
										446885,
										446886
									],
									[
										446897,
										446898
									],
									[
										446945,
										446946
									],
									[
										446950,
										446951
									],
									[
										446983,
										446984
									],
									[
										447031,
										447032
									],
									[
										447034,
										447035
									],
									[
										447044,
										447045
									],
									[
										447089,
										447090
									],
									[
										447096,
										447097
									],
									[
										447101,
										447102
									],
									[
										447106,
										447107
									],
									[
										447115,
										447116
									],
									[
										447183,
										447184
									],
									[
										447219,
										447220
									],
									[
										447238,
										447239
									],
									[
										447243,
										447244
									],
									[
										447251,
										447252
									],
									[
										447260,
										447261
									],
									[
										447272,
										447273
									],
									[
										447276,
										447277
									],
									[
										447304,
										447305
									],
									[
										447346,
										447347
									],
									[
										447354,
										447355
									],
									[
										447412,
										447413
									],
									[
										447431,
										447432
									],
									[
										447439,
										447440
									],
									[
										447448,
										447449
									],
									[
										447460,
										447461
									],
									[
										447464,
										447465
									],
									[
										447521,
										447522
									],
									[
										447526,
										447527
									],
									[
										447531,
										447532
									],
									[
										447537,
										447538
									],
									[
										447597,
										447598
									],
									[
										447602,
										447603
									],
									[
										447613,
										447614
									],
									[
										447626,
										447627
									],
									[
										447653,
										447654
									],
									[
										447658,
										447659
									],
									[
										447673,
										447674
									],
									[
										447682,
										447683
									],
									[
										447710,
										447711
									],
									[
										447715,
										447716
									],
									[
										447722,
										447723
									],
									[
										447750,
										447751
									],
									[
										447764,
										447765
									],
									[
										447779,
										447780
									],
									[
										447795,
										447796
									],
									[
										447800,
										447801
									],
									[
										447808,
										447809
									],
									[
										447835,
										447836
									],
									[
										447850,
										447851
									],
									[
										447864,
										447865
									],
									[
										447889,
										447890
									],
									[
										447923,
										447924
									],
									[
										447939,
										447940
									],
									[
										447969,
										447970
									],
									[
										447974,
										447975
									],
									[
										447995,
										447996
									],
									[
										448008,
										448009
									],
									[
										448041,
										448042
									],
									[
										448046,
										448047
									],
									[
										448051,
										448052
									],
									[
										448057,
										448058
									],
									[
										448084,
										448085
									],
									[
										448114,
										448115
									],
									[
										448149,
										448150
									],
									[
										448177,
										448178
									],
									[
										448202,
										448203
									],
									[
										448207,
										448208
									],
									[
										448212,
										448213
									],
									[
										448218,
										448219
									],
									[
										448338,
										448339
									],
									[
										448353,
										448354
									],
									[
										448391,
										448392
									],
									[
										448406,
										448407
									],
									[
										448421,
										448422
									],
									[
										448474,
										448475
									],
									[
										448488,
										448489
									],
									[
										448509,
										448510
									],
									[
										448515,
										448516
									],
									[
										448530,
										448531
									],
									[
										448557,
										448558
									],
									[
										448577,
										448578
									],
									[
										448593,
										448594
									],
									[
										448620,
										448621
									],
									[
										448648,
										448649
									],
									[
										448686,
										448687
									],
									[
										448695,
										448696
									],
									[
										448707,
										448708
									],
									[
										448742,
										448743
									],
									[
										448747,
										448748
									],
									[
										448780,
										448781
									],
									[
										448828,
										448829
									],
									[
										448831,
										448832
									],
									[
										448841,
										448842
									],
									[
										448882,
										448883
									],
									[
										448887,
										448888
									],
									[
										448892,
										448893
									],
									[
										448901,
										448902
									],
									[
										448907,
										448908
									],
									[
										448915,
										448916
									],
									[
										448975,
										448976
									],
									[
										448982,
										448983
									],
									[
										448991,
										448992
									],
									[
										449006,
										449007
									],
									[
										449015,
										449016
									],
									[
										449055,
										449056
									],
									[
										449062,
										449063
									],
									[
										449110,
										449111
									],
									[
										449149,
										449150
									],
									[
										449208,
										449209
									],
									[
										449216,
										449217
									],
									[
										449232,
										449233
									],
									[
										449234,
										449235
									],
									[
										449251,
										449252
									],
									[
										449252,
										449253
									],
									[
										449267,
										449268
									],
									[
										449280,
										449281
									],
									[
										449285,
										449286
									],
									[
										449319,
										449320
									],
									[
										449340,
										449341
									],
									[
										449381,
										449382
									],
									[
										449394,
										449395
									],
									[
										449399,
										449400
									],
									[
										449425,
										449426
									],
									[
										449446,
										449447
									],
									[
										449467,
										449468
									],
									[
										449488,
										449489
									],
									[
										449509,
										449510
									],
									[
										449530,
										449531
									],
									[
										449557,
										449558
									],
									[
										449567,
										449568
									],
									[
										449604,
										449605
									],
									[
										449670,
										449671
									],
									[
										449786,
										449787
									],
									[
										449848,
										449849
									],
									[
										449882,
										449883
									],
									[
										449916,
										449917
									],
									[
										449955,
										449956
									],
									[
										449994,
										449995
									],
									[
										450052,
										450053
									],
									[
										450113,
										450114
									],
									[
										450212,
										450213
									],
									[
										450231,
										450232
									],
									[
										450239,
										450240
									],
									[
										450266,
										450267
									],
									[
										450291,
										450292
									],
									[
										450326,
										450327
									],
									[
										450369,
										450370
									],
									[
										450418,
										450419
									],
									[
										450451,
										450452
									],
									[
										450513,
										450514
									],
									[
										450538,
										450539
									],
									[
										450576,
										450577
									],
									[
										450611,
										450612
									],
									[
										450654,
										450655
									],
									[
										450716,
										450717
									],
									[
										450768,
										450769
									],
									[
										450849,
										450850
									],
									[
										450856,
										450857
									],
									[
										450877,
										450878
									],
									[
										450886,
										450887
									],
									[
										450891,
										450892
									],
									[
										450898,
										450899
									],
									[
										450911,
										450912
									],
									[
										450915,
										450916
									],
									[
										450974,
										450975
									],
									[
										450982,
										450983
									],
									[
										450998,
										450999
									],
									[
										451000,
										451001
									],
									[
										451017,
										451018
									],
									[
										451018,
										451019
									],
									[
										451031,
										451032
									],
									[
										451068,
										451069
									],
									[
										451125,
										451126
									],
									[
										451211,
										451212
									],
									[
										451221,
										451222
									],
									[
										451282,
										451283
									],
									[
										451291,
										451292
									],
									[
										451303,
										451304
									],
									[
										451324,
										451325
									],
									[
										451363,
										451364
									],
									[
										451438,
										451439
									],
									[
										451468,
										451469
									],
									[
										451516,
										451517
									],
									[
										451601,
										451602
									],
									[
										451602,
										451603
									],
									[
										451755,
										451756
									],
									[
										451777,
										451778
									],
									[
										451810,
										451811
									],
									[
										451904,
										451905
									],
									[
										451908,
										451909
									],
									[
										451938,
										451939
									],
									[
										451945,
										451946
									],
									[
										452033,
										452034
									],
									[
										452082,
										452083
									],
									[
										452167,
										452168
									],
									[
										452197,
										452198
									],
									[
										452292,
										452293
									],
									[
										452324,
										452325
									],
									[
										452404,
										452405
									],
									[
										452439,
										452440
									],
									[
										452443,
										452444
									],
									[
										452447,
										452448
									],
									[
										452465,
										452466
									],
									[
										452489,
										452490
									],
									[
										452494,
										452495
									],
									[
										452528,
										452529
									],
									[
										452534,
										452535
									],
									[
										452539,
										452540
									],
									[
										452636,
										452637
									],
									[
										452692,
										452693
									],
									[
										452813,
										452814
									],
									[
										452947,
										452948
									],
									[
										452952,
										452953
									],
									[
										452973,
										452974
									],
									[
										452989,
										452990
									],
									[
										453002,
										453003
									],
									[
										453036,
										453037
									],
									[
										453078,
										453079
									],
									[
										453097,
										453098
									],
									[
										453123,
										453124
									],
									[
										453148,
										453149
									],
									[
										453149,
										453150
									],
									[
										453203,
										453204
									],
									[
										453212,
										453213
									],
									[
										453263,
										453264
									],
									[
										453321,
										453322
									],
									[
										453326,
										453327
									],
									[
										453348,
										453349
									],
									[
										453382,
										453383
									],
									[
										453388,
										453389
									],
									[
										453431,
										453432
									],
									[
										453529,
										453530
									],
									[
										453552,
										453553
									],
									[
										453598,
										453599
									],
									[
										453632,
										453633
									],
									[
										453674,
										453675
									],
									[
										453699,
										453700
									],
									[
										453700,
										453701
									],
									[
										453754,
										453755
									],
									[
										453763,
										453764
									],
									[
										453814,
										453815
									],
									[
										453893,
										453894
									],
									[
										453894,
										453895
									],
									[
										453995,
										453996
									],
									[
										454008,
										454009
									],
									[
										454045,
										454046
									],
									[
										454085,
										454086
									],
									[
										454096,
										454097
									],
									[
										454292,
										454293
									],
									[
										454301,
										454302
									],
									[
										454313,
										454314
									],
									[
										454369,
										454370
									],
									[
										454400,
										454401
									],
									[
										454408,
										454409
									],
									[
										454428,
										454429
									],
									[
										454441,
										454442
									],
									[
										454451,
										454452
									],
									[
										454581,
										454582
									],
									[
										454623,
										454624
									],
									[
										454674,
										454675
									],
									[
										454675,
										454676
									],
									[
										454694,
										454695
									],
									[
										454756,
										454757
									],
									[
										454845,
										454846
									],
									[
										454934,
										454935
									],
									[
										454956,
										454957
									],
									[
										455013,
										455014
									],
									[
										455046,
										455047
									],
									[
										455067,
										455068
									],
									[
										455109,
										455110
									],
									[
										455232,
										455233
									],
									[
										455266,
										455267
									],
									[
										455269,
										455270
									],
									[
										455330,
										455331
									],
									[
										455351,
										455352
									],
									[
										455371,
										455372
									],
									[
										455488,
										455489
									],
									[
										455521,
										455522
									],
									[
										455530,
										455531
									],
									[
										455558,
										455559
									],
									[
										455580,
										455581
									],
									[
										455616,
										455617
									],
									[
										455649,
										455650
									],
									[
										455670,
										455671
									],
									[
										455749,
										455750
									],
									[
										455845,
										455846
									],
									[
										455965,
										455966
									],
									[
										456049,
										456050
									],
									[
										456089,
										456090
									],
									[
										456105,
										456106
									],
									[
										456164,
										456165
									],
									[
										456207,
										456208
									],
									[
										456250,
										456251
									],
									[
										456289,
										456290
									],
									[
										456294,
										456295
									],
									[
										456314,
										456315
									],
									[
										456337,
										456338
									],
									[
										456398,
										456399
									],
									[
										456518,
										456519
									],
									[
										456610,
										456611
									],
									[
										456623,
										456624
									],
									[
										456647,
										456648
									],
									[
										456651,
										456652
									],
									[
										456676,
										456677
									],
									[
										456677,
										456678
									],
									[
										456696,
										456697
									],
									[
										456760,
										456761
									],
									[
										456773,
										456774
									],
									[
										456821,
										456822
									],
									[
										456822,
										456823
									],
									[
										456841,
										456842
									],
									[
										456893,
										456894
									],
									[
										456908,
										456909
									],
									[
										456909,
										456910
									],
									[
										456928,
										456929
									],
									[
										456950,
										456951
									],
									[
										457040,
										457041
									],
									[
										457049,
										457050
									],
									[
										457098,
										457099
									],
									[
										457117,
										457118
									],
									[
										457227,
										457228
									],
									[
										457248,
										457249
									],
									[
										457311,
										457312
									],
									[
										457319,
										457320
									],
									[
										457320,
										457321
									],
									[
										457352,
										457353
									],
									[
										457376,
										457377
									],
									[
										457426,
										457427
									],
									[
										457433,
										457434
									],
									[
										457478,
										457479
									],
									[
										457504,
										457505
									],
									[
										457603,
										457604
									],
									[
										457784,
										457785
									],
									[
										457793,
										457794
									],
									[
										457805,
										457806
									],
									[
										457861,
										457862
									],
									[
										457892,
										457893
									],
									[
										457900,
										457901
									],
									[
										457920,
										457921
									],
									[
										457933,
										457934
									],
									[
										457943,
										457944
									],
									[
										458084,
										458085
									],
									[
										458094,
										458095
									],
									[
										458115,
										458116
									],
									[
										458143,
										458144
									],
									[
										458153,
										458154
									],
									[
										458227,
										458228
									],
									[
										458249,
										458250
									],
									[
										458306,
										458307
									],
									[
										458339,
										458340
									],
									[
										458360,
										458361
									],
									[
										458486,
										458487
									],
									[
										458640,
										458641
									],
									[
										458727,
										458728
									],
									[
										458798,
										458799
									],
									[
										458808,
										458809
									],
									[
										458824,
										458825
									],
									[
										458946,
										458947
									],
									[
										459100,
										459101
									],
									[
										459187,
										459188
									],
									[
										459258,
										459259
									],
									[
										459285,
										459286
									],
									[
										459407,
										459408
									],
									[
										459495,
										459496
									],
									[
										459539,
										459540
									],
									[
										459587,
										459588
									],
									[
										459674,
										459675
									],
									[
										459745,
										459746
									],
									[
										459772,
										459773
									],
									[
										459856,
										459857
									],
									[
										459884,
										459885
									],
									[
										459922,
										459923
									],
									[
										459966,
										459967
									],
									[
										460055,
										460056
									],
									[
										460080,
										460081
									],
									[
										460082,
										460083
									],
									[
										460189,
										460190
									],
									[
										460190,
										460191
									],
									[
										460264,
										460265
									],
									[
										460338,
										460339
									],
									[
										460340,
										460341
									],
									[
										460361,
										460362
									],
									[
										460363,
										460364
									],
									[
										460529,
										460530
									],
									[
										460576,
										460577
									],
									[
										460592,
										460593
									],
									[
										460594,
										460595
									],
									[
										460605,
										460606
									],
									[
										460607,
										460608
									],
									[
										460614,
										460615
									],
									[
										460629,
										460630
									],
									[
										460631,
										460632
									],
									[
										460676,
										460677
									],
									[
										460717,
										460718
									],
									[
										460765,
										460766
									],
									[
										460777,
										460778
									],
									[
										460789,
										460790
									],
									[
										460802,
										460803
									],
									[
										460850,
										460851
									],
									[
										460862,
										460863
									],
									[
										460871,
										460872
									],
									[
										460946,
										460947
									],
									[
										460963,
										460964
									],
									[
										460964,
										460965
									],
									[
										461033,
										461034
									],
									[
										461101,
										461102
									],
									[
										461123,
										461124
									],
									[
										461162,
										461163
									],
									[
										461233,
										461234
									],
									[
										461241,
										461242
									],
									[
										461242,
										461243
									],
									[
										461318,
										461319
									],
									[
										461327,
										461328
									],
									[
										461392,
										461393
									],
									[
										461409,
										461410
									],
									[
										461443,
										461444
									],
									[
										461445,
										461446
									],
									[
										461465,
										461466
									],
									[
										461467,
										461468
									],
									[
										461502,
										461503
									],
									[
										461527,
										461528
									],
									[
										461528,
										461529
									],
									[
										461533,
										461534
									],
									[
										461535,
										461536
									],
									[
										461569,
										461570
									],
									[
										461582,
										461583
									],
									[
										461583,
										461584
									],
									[
										461588,
										461589
									],
									[
										461590,
										461591
									],
									[
										461597,
										461598
									],
									[
										461627,
										461628
									],
									[
										461655,
										461656
									],
									[
										461687,
										461688
									],
									[
										461714,
										461715
									],
									[
										461746,
										461747
									],
									[
										461758,
										461759
									],
									[
										461795,
										461796
									],
									[
										461834,
										461835
									],
									[
										461846,
										461847
									],
									[
										461925,
										461926
									],
									[
										461937,
										461938
									],
									[
										461974,
										461975
									],
									[
										461995,
										461996
									],
									[
										462088,
										462089
									],
									[
										462123,
										462124
									],
									[
										462145,
										462146
									],
									[
										462201,
										462202
									],
									[
										462234,
										462235
									],
									[
										462255,
										462256
									],
									[
										462291,
										462292
									],
									[
										462295,
										462296
									],
									[
										462299,
										462300
									],
									[
										462300,
										462301
									],
									[
										462312,
										462313
									],
									[
										462368,
										462369
									],
									[
										462404,
										462405
									],
									[
										462408,
										462409
									],
									[
										462412,
										462413
									],
									[
										462413,
										462414
									],
									[
										462425,
										462426
									],
									[
										462479,
										462480
									],
									[
										462502,
										462503
									],
									[
										462514,
										462515
									],
									[
										462570,
										462571
									],
									[
										462591,
										462592
									],
									[
										462645,
										462646
									],
									[
										462681,
										462682
									],
									[
										462791,
										462792
									],
									[
										462957,
										462958
									],
									[
										462979,
										462980
									],
									[
										463036,
										463037
									],
									[
										463069,
										463070
									],
									[
										463090,
										463091
									],
									[
										463160,
										463161
									],
									[
										463164,
										463165
									],
									[
										463168,
										463169
									],
									[
										463169,
										463170
									],
									[
										463256,
										463257
									],
									[
										463345,
										463346
									],
									[
										463349,
										463350
									],
									[
										463353,
										463354
									],
									[
										463354,
										463355
									],
									[
										463381,
										463382
									],
									[
										463383,
										463384
									],
									[
										463392,
										463393
									],
									[
										463415,
										463416
									],
									[
										463418,
										463419
									],
									[
										463426,
										463427
									],
									[
										463427,
										463428
									],
									[
										463456,
										463457
									],
									[
										463475,
										463476
									],
									[
										463609,
										463610
									],
									[
										463613,
										463614
									],
									[
										463617,
										463618
									],
									[
										463618,
										463619
									],
									[
										463703,
										463704
									],
									[
										463791,
										463792
									],
									[
										463795,
										463796
									],
									[
										463799,
										463800
									],
									[
										463800,
										463801
									],
									[
										463827,
										463828
									],
									[
										463829,
										463830
									],
									[
										463838,
										463839
									],
									[
										463861,
										463862
									],
									[
										463864,
										463865
									],
									[
										463872,
										463873
									],
									[
										463873,
										463874
									],
									[
										463901,
										463902
									],
									[
										463920,
										463921
									],
									[
										464106,
										464107
									],
									[
										464115,
										464116
									],
									[
										464180,
										464181
									],
									[
										464199,
										464200
									],
									[
										464357,
										464358
									],
									[
										464366,
										464367
									],
									[
										464436,
										464437
									],
									[
										464455,
										464456
									],
									[
										464548,
										464549
									],
									[
										464594,
										464595
									],
									[
										464733,
										464734
									],
									[
										464760,
										464761
									],
									[
										464885,
										464886
									],
									[
										464980,
										464981
									],
									[
										464982,
										464983
									],
									[
										464991,
										464992
									],
									[
										465175,
										465176
									],
									[
										465269,
										465270
									],
									[
										465271,
										465272
									],
									[
										465280,
										465281
									],
									[
										465465,
										465466
									],
									[
										465474,
										465475
									],
									[
										465539,
										465540
									],
									[
										465558,
										465559
									],
									[
										465717,
										465718
									],
									[
										465726,
										465727
									],
									[
										465796,
										465797
									],
									[
										465815,
										465816
									],
									[
										465908,
										465909
									],
									[
										465954,
										465955
									],
									[
										466092,
										466093
									],
									[
										466119,
										466120
									],
									[
										466185,
										466186
									],
									[
										466246,
										466247
									],
									[
										466332,
										466333
									],
									[
										466334,
										466335
									],
									[
										466343,
										466344
									],
									[
										466478,
										466479
									],
									[
										466686,
										466687
									],
									[
										466695,
										466696
									],
									[
										466750,
										466751
									],
									[
										466769,
										466770
									],
									[
										466852,
										466853
									],
									[
										466910,
										466911
									],
									[
										467007,
										467008
									],
									[
										467093,
										467094
									],
									[
										467095,
										467096
									],
									[
										467104,
										467105
									],
									[
										467107,
										467108
									],
									[
										467133,
										467134
									],
									[
										467135,
										467136
									],
									[
										467318,
										467319
									],
									[
										467327,
										467328
									],
									[
										467377,
										467378
									],
									[
										467392,
										467393
									],
									[
										467487,
										467488
									],
									[
										467588,
										467589
									],
									[
										467610,
										467611
									],
									[
										467667,
										467668
									],
									[
										467700,
										467701
									],
									[
										467721,
										467722
									],
									[
										467823,
										467824
									],
									[
										467825,
										467826
									],
									[
										467838,
										467839
									],
									[
										468061,
										468062
									],
									[
										468067,
										468068
									],
									[
										468069,
										468070
									],
									[
										468091,
										468092
									],
									[
										468163,
										468164
									],
									[
										468165,
										468166
									],
									[
										468172,
										468173
									],
									[
										468179,
										468180
									],
									[
										468310,
										468311
									],
									[
										468340,
										468341
									],
									[
										468361,
										468362
									],
									[
										468382,
										468383
									],
									[
										468398,
										468399
									],
									[
										468399,
										468400
									],
									[
										468406,
										468407
									],
									[
										468414,
										468415
									],
									[
										468451,
										468452
									],
									[
										468511,
										468512
									],
									[
										468527,
										468528
									],
									[
										468612,
										468613
									],
									[
										468663,
										468664
									],
									[
										468672,
										468673
									],
									[
										468803,
										468804
									],
									[
										468809,
										468810
									],
									[
										468811,
										468812
									],
									[
										468833,
										468834
									],
									[
										468906,
										468907
									],
									[
										468940,
										468941
									],
									[
										468960,
										468961
									],
									[
										468967,
										468968
									],
									[
										469028,
										469029
									],
									[
										469030,
										469031
									],
									[
										469037,
										469038
									],
									[
										469044,
										469045
									],
									[
										469068,
										469069
									],
									[
										469077,
										469078
									],
									[
										469241,
										469242
									],
									[
										469251,
										469252
									],
									[
										469267,
										469268
									],
									[
										469362,
										469363
									],
									[
										469364,
										469365
									],
									[
										469377,
										469378
									],
									[
										469600,
										469601
									],
									[
										469606,
										469607
									],
									[
										469608,
										469609
									],
									[
										469630,
										469631
									],
									[
										469702,
										469703
									],
									[
										469704,
										469705
									],
									[
										469711,
										469712
									],
									[
										469718,
										469719
									],
									[
										469817,
										469818
									],
									[
										469847,
										469848
									],
									[
										469868,
										469869
									],
									[
										469889,
										469890
									],
									[
										469905,
										469906
									],
									[
										469906,
										469907
									],
									[
										469913,
										469914
									],
									[
										469921,
										469922
									],
									[
										469958,
										469959
									],
									[
										470018,
										470019
									],
									[
										470034,
										470035
									],
									[
										470119,
										470120
									],
									[
										470170,
										470171
									],
									[
										470179,
										470180
									],
									[
										470310,
										470311
									],
									[
										470316,
										470317
									],
									[
										470318,
										470319
									],
									[
										470340,
										470341
									],
									[
										470413,
										470414
									],
									[
										470447,
										470448
									],
									[
										470467,
										470468
									],
									[
										470474,
										470475
									],
									[
										470535,
										470536
									],
									[
										470537,
										470538
									],
									[
										470544,
										470545
									],
									[
										470551,
										470552
									],
									[
										470578,
										470579
									],
									[
										470587,
										470588
									],
									[
										470737,
										470738
									],
									[
										470764,
										470765
									],
									[
										470859,
										470860
									],
									[
										470861,
										470862
									],
									[
										470874,
										470875
									],
									[
										471097,
										471098
									],
									[
										471103,
										471104
									],
									[
										471105,
										471106
									],
									[
										471127,
										471128
									],
									[
										471199,
										471200
									],
									[
										471201,
										471202
									],
									[
										471208,
										471209
									],
									[
										471215,
										471216
									],
									[
										471314,
										471315
									],
									[
										471344,
										471345
									],
									[
										471365,
										471366
									],
									[
										471386,
										471387
									],
									[
										471402,
										471403
									],
									[
										471403,
										471404
									],
									[
										471410,
										471411
									],
									[
										471418,
										471419
									],
									[
										471455,
										471456
									],
									[
										471515,
										471516
									],
									[
										471531,
										471532
									],
									[
										471616,
										471617
									],
									[
										471667,
										471668
									],
									[
										471676,
										471677
									],
									[
										471807,
										471808
									],
									[
										471813,
										471814
									],
									[
										471815,
										471816
									],
									[
										471837,
										471838
									],
									[
										471910,
										471911
									],
									[
										471944,
										471945
									],
									[
										471964,
										471965
									],
									[
										471971,
										471972
									],
									[
										472032,
										472033
									],
									[
										472034,
										472035
									],
									[
										472041,
										472042
									],
									[
										472048,
										472049
									],
									[
										472182,
										472183
									],
									[
										472209,
										472210
									],
									[
										472304,
										472305
									],
									[
										472306,
										472307
									],
									[
										472319,
										472320
									],
									[
										472542,
										472543
									],
									[
										472548,
										472549
									],
									[
										472550,
										472551
									],
									[
										472572,
										472573
									],
									[
										472644,
										472645
									],
									[
										472646,
										472647
									],
									[
										472653,
										472654
									],
									[
										472660,
										472661
									],
									[
										472717,
										472718
									],
									[
										472747,
										472748
									],
									[
										472768,
										472769
									],
									[
										472789,
										472790
									],
									[
										472805,
										472806
									],
									[
										472806,
										472807
									],
									[
										472813,
										472814
									],
									[
										472821,
										472822
									],
									[
										472858,
										472859
									],
									[
										472918,
										472919
									],
									[
										472934,
										472935
									],
									[
										473019,
										473020
									],
									[
										473070,
										473071
									],
									[
										473079,
										473080
									],
									[
										473210,
										473211
									],
									[
										473216,
										473217
									],
									[
										473218,
										473219
									],
									[
										473240,
										473241
									],
									[
										473313,
										473314
									],
									[
										473347,
										473348
									],
									[
										473372,
										473373
									],
									[
										473374,
										473375
									],
									[
										473381,
										473382
									],
									[
										473388,
										473389
									],
									[
										473462,
										473463
									],
									[
										473543,
										473544
									],
									[
										473545,
										473546
									],
									[
										473552,
										473553
									],
									[
										473559,
										473560
									],
									[
										473782,
										473783
									],
									[
										473788,
										473789
									],
									[
										473790,
										473791
									],
									[
										473812,
										473813
									],
									[
										473880,
										473881
									],
									[
										473882,
										473883
									],
									[
										473946,
										473947
									],
									[
										473976,
										473977
									],
									[
										473997,
										473998
									],
									[
										474018,
										474019
									],
									[
										474034,
										474035
									],
									[
										474035,
										474036
									],
									[
										474042,
										474043
									],
									[
										474050,
										474051
									],
									[
										474087,
										474088
									],
									[
										474147,
										474148
									],
									[
										474163,
										474164
									],
									[
										474248,
										474249
									],
									[
										474299,
										474300
									],
									[
										474308,
										474309
									],
									[
										474432,
										474433
									],
									[
										474438,
										474439
									],
									[
										474440,
										474441
									],
									[
										474462,
										474463
									],
									[
										474535,
										474536
									],
									[
										474569,
										474570
									],
									[
										474590,
										474591
									],
									[
										474592,
										474593
									],
									[
										474753,
										474754
									],
									[
										474838,
										474839
									],
									[
										474869,
										474870
									],
									[
										474938,
										474939
									],
									[
										474970,
										474971
									],
									[
										475013,
										475014
									],
									[
										475075,
										475076
									],
									[
										475077,
										475078
									],
									[
										475095,
										475096
									],
									[
										475211,
										475212
									],
									[
										475279,
										475280
									],
									[
										475292,
										475293
									],
									[
										475299,
										475300
									],
									[
										475315,
										475316
									],
									[
										475421,
										475422
									],
									[
										475524,
										475525
									],
									[
										475589,
										475590
									],
									[
										475641,
										475642
									],
									[
										475668,
										475669
									],
									[
										475729,
										475730
									],
									[
										475757,
										475758
									],
									[
										475796,
										475797
									],
									[
										475886,
										475887
									],
									[
										475900,
										475901
									],
									[
										475908,
										475909
									],
									[
										475917,
										475918
									],
									[
										475956,
										475957
									],
									[
										475959,
										475960
									],
									[
										476020,
										476021
									],
									[
										476050,
										476051
									],
									[
										476116,
										476117
									],
									[
										476118,
										476119
									],
									[
										476136,
										476137
									],
									[
										476160,
										476161
									],
									[
										476189,
										476190
									],
									[
										476209,
										476210
									],
									[
										476216,
										476217
									],
									[
										476217,
										476218
									],
									[
										476220,
										476221
									],
									[
										476256,
										476257
									],
									[
										476366,
										476367
									],
									[
										476520,
										476521
									],
									[
										476605,
										476606
									],
									[
										476642,
										476643
									],
									[
										476681,
										476682
									],
									[
										476705,
										476706
									],
									[
										476847,
										476848
									],
									[
										476933,
										476934
									],
									[
										477007,
										477008
									],
									[
										477092,
										477093
									],
									[
										477133,
										477134
									],
									[
										477165,
										477166
									],
									[
										477189,
										477190
									],
									[
										477247,
										477248
									],
									[
										477322,
										477323
									],
									[
										477390,
										477391
									],
									[
										477410,
										477411
									],
									[
										477432,
										477433
									],
									[
										477441,
										477442
									],
									[
										477453,
										477454
									],
									[
										477525,
										477526
									],
									[
										477550,
										477551
									],
									[
										477695,
										477696
									],
									[
										477715,
										477716
									],
									[
										477734,
										477735
									],
									[
										477737,
										477738
									],
									[
										477814,
										477815
									],
									[
										477822,
										477823
									],
									[
										477831,
										477832
									],
									[
										477896,
										477897
									],
									[
										477916,
										477917
									],
									[
										477946,
										477947
									],
									[
										477987,
										477988
									],
									[
										477990,
										477991
									],
									[
										478014,
										478015
									],
									[
										478134,
										478135
									],
									[
										478207,
										478208
									],
									[
										478285,
										478286
									],
									[
										478318,
										478319
									],
									[
										478324,
										478325
									],
									[
										478345,
										478346
									],
									[
										478361,
										478362
									],
									[
										478388,
										478389
									],
									[
										478390,
										478391
									],
									[
										478415,
										478416
									],
									[
										478417,
										478418
									],
									[
										478422,
										478423
									],
									[
										478446,
										478447
									],
									[
										478465,
										478466
									],
									[
										478482,
										478483
									],
									[
										478491,
										478492
									],
									[
										478495,
										478496
									],
									[
										478501,
										478502
									],
									[
										478505,
										478506
									],
									[
										478533,
										478534
									],
									[
										478649,
										478650
									],
									[
										478659,
										478660
									],
									[
										478672,
										478673
									],
									[
										478696,
										478697
									],
									[
										478719,
										478720
									],
									[
										478729,
										478730
									],
									[
										478730,
										478731
									],
									[
										478753,
										478754
									],
									[
										478754,
										478755
									],
									[
										478756,
										478757
									],
									[
										478782,
										478783
									],
									[
										478792,
										478793
									],
									[
										478801,
										478802
									],
									[
										478844,
										478845
									],
									[
										478872,
										478873
									],
									[
										478927,
										478928
									],
									[
										478938,
										478939
									],
									[
										478939,
										478940
									],
									[
										478964,
										478965
									],
									[
										478974,
										478975
									],
									[
										478975,
										478976
									],
									[
										479027,
										479028
									],
									[
										479061,
										479062
									],
									[
										479125,
										479126
									],
									[
										479160,
										479161
									],
									[
										479193,
										479194
									],
									[
										479206,
										479207
									],
									[
										479214,
										479215
									],
									[
										479225,
										479226
									],
									[
										479226,
										479227
									],
									[
										479241,
										479242
									],
									[
										479247,
										479248
									],
									[
										479248,
										479249
									],
									[
										479280,
										479281
									],
									[
										479290,
										479291
									],
									[
										479348,
										479349
									],
									[
										479373,
										479374
									],
									[
										479400,
										479401
									],
									[
										479402,
										479403
									],
									[
										479416,
										479417
									],
									[
										479426,
										479427
									],
									[
										479434,
										479435
									],
									[
										479445,
										479446
									],
									[
										479446,
										479447
									],
									[
										479508,
										479509
									],
									[
										479509,
										479510
									],
									[
										479512,
										479513
									],
									[
										479560,
										479561
									],
									[
										479620,
										479621
									],
									[
										479702,
										479703
									],
									[
										479711,
										479712
									],
									[
										479713,
										479714
									],
									[
										479722,
										479723
									],
									[
										479739,
										479740
									],
									[
										479794,
										479795
									],
									[
										479803,
										479804
									],
									[
										479805,
										479806
									],
									[
										479814,
										479815
									],
									[
										479831,
										479832
									],
									[
										479879,
										479880
									],
									[
										479934,
										479935
									],
									[
										479943,
										479944
									],
									[
										479945,
										479946
									],
									[
										480001,
										480002
									],
									[
										480082,
										480083
									],
									[
										480084,
										480085
									],
									[
										480093,
										480094
									],
									[
										480110,
										480111
									],
									[
										480162,
										480163
									],
									[
										480164,
										480165
									],
									[
										480173,
										480174
									],
									[
										480190,
										480191
									],
									[
										480207,
										480208
									],
									[
										480259,
										480260
									],
									[
										480261,
										480262
									],
									[
										480286,
										480287
									],
									[
										480367,
										480368
									],
									[
										480403,
										480404
									],
									[
										480451,
										480452
									],
									[
										480453,
										480454
									],
									[
										480474,
										480475
									],
									[
										480476,
										480477
									],
									[
										480599,
										480600
									],
									[
										480609,
										480610
									],
									[
										480610,
										480611
									],
									[
										480618,
										480619
									],
									[
										480628,
										480629
									],
									[
										480653,
										480654
									],
									[
										480669,
										480670
									],
									[
										480670,
										480671
									],
									[
										480732,
										480733
									],
									[
										480743,
										480744
									],
									[
										480744,
										480745
									],
									[
										480776,
										480777
									],
									[
										480786,
										480787
									],
									[
										480787,
										480788
									],
									[
										480817,
										480818
									],
									[
										480827,
										480828
									],
									[
										480828,
										480829
									],
									[
										480838,
										480839
									],
									[
										480846,
										480847
									],
									[
										480857,
										480858
									],
									[
										480858,
										480859
									],
									[
										480871,
										480872
									],
									[
										480880,
										480881
									],
									[
										480899,
										480900
									],
									[
										480918,
										480919
									],
									[
										480919,
										480920
									],
									[
										480939,
										480940
									],
									[
										480954,
										480955
									],
									[
										480970,
										480971
									],
									[
										480980,
										480981
									],
									[
										481014,
										481015
									],
									[
										481015,
										481016
									],
									[
										481034,
										481035
									],
									[
										481101,
										481102
									],
									[
										481102,
										481103
									],
									[
										481105,
										481106
									],
									[
										481115,
										481116
									],
									[
										481116,
										481117
									],
									[
										481134,
										481135
									],
									[
										481182,
										481183
									],
									[
										481192,
										481193
									],
									[
										481193,
										481194
									],
									[
										481250,
										481251
									],
									[
										481260,
										481261
									],
									[
										481261,
										481262
									],
									[
										481304,
										481305
									],
									[
										481305,
										481306
									],
									[
										481330,
										481331
									],
									[
										481331,
										481332
									],
									[
										481348,
										481349
									],
									[
										481349,
										481350
									],
									[
										481387,
										481388
									],
									[
										481399,
										481400
									],
									[
										481419,
										481420
									],
									[
										481427,
										481428
									],
									[
										481442,
										481443
									],
									[
										481449,
										481450
									],
									[
										481458,
										481459
									],
									[
										481515,
										481516
									],
									[
										481533,
										481534
									],
									[
										481534,
										481535
									],
									[
										481543,
										481544
									],
									[
										481544,
										481545
									],
									[
										481594,
										481595
									],
									[
										481595,
										481596
									],
									[
										481608,
										481609
									],
									[
										481623,
										481624
									],
									[
										481630,
										481631
									],
									[
										481673,
										481674
									],
									[
										481726,
										481727
									],
									[
										481767,
										481768
									],
									[
										481805,
										481806
									],
									[
										481840,
										481841
									],
									[
										481853,
										481854
									],
									[
										481863,
										481864
									],
									[
										481914,
										481915
									],
									[
										481918,
										481919
									],
									[
										481949,
										481950
									],
									[
										481972,
										481973
									],
									[
										481975,
										481976
									],
									[
										481996,
										481997
									],
									[
										482071,
										482072
									],
									[
										482088,
										482089
									],
									[
										482207,
										482208
									],
									[
										482228,
										482229
									],
									[
										482251,
										482252
									],
									[
										482256,
										482257
									],
									[
										482260,
										482261
									],
									[
										482272,
										482273
									],
									[
										482286,
										482287
									],
									[
										482287,
										482288
									],
									[
										482289,
										482290
									],
									[
										482307,
										482308
									],
									[
										482311,
										482312
									],
									[
										482315,
										482316
									],
									[
										482321,
										482322
									],
									[
										482330,
										482331
									],
									[
										482337,
										482338
									],
									[
										482541,
										482542
									],
									[
										482551,
										482552
									],
									[
										482579,
										482580
									],
									[
										482655,
										482656
									],
									[
										482689,
										482690
									],
									[
										482708,
										482709
									],
									[
										482711,
										482712
									],
									[
										482712,
										482713
									],
									[
										482732,
										482733
									],
									[
										482753,
										482754
									],
									[
										482765,
										482766
									],
									[
										482840,
										482841
									],
									[
										482848,
										482849
									],
									[
										482891,
										482892
									],
									[
										482902,
										482903
									],
									[
										482930,
										482931
									],
									[
										482933,
										482934
									],
									[
										482978,
										482979
									],
									[
										483002,
										483003
									],
									[
										483056,
										483057
									],
									[
										483078,
										483079
									],
									[
										483170,
										483171
									],
									[
										483247,
										483248
									],
									[
										483365,
										483366
									],
									[
										483570,
										483571
									],
									[
										483682,
										483683
									],
									[
										483750,
										483751
									],
									[
										483765,
										483766
									],
									[
										483774,
										483775
									],
									[
										483806,
										483807
									],
									[
										483819,
										483820
									],
									[
										483820,
										483821
									],
									[
										483826,
										483827
									],
									[
										483857,
										483858
									],
									[
										483884,
										483885
									],
									[
										483971,
										483972
									],
									[
										483995,
										483996
									],
									[
										484135,
										484136
									],
									[
										484195,
										484196
									],
									[
										484232,
										484233
									],
									[
										484394,
										484395
									],
									[
										484401,
										484402
									],
									[
										484410,
										484411
									],
									[
										484434,
										484435
									],
									[
										484437,
										484438
									],
									[
										484447,
										484448
									],
									[
										484455,
										484456
									],
									[
										484456,
										484457
									],
									[
										484467,
										484468
									],
									[
										484560,
										484561
									],
									[
										484570,
										484571
									],
									[
										484583,
										484584
									],
									[
										484590,
										484591
									],
									[
										484591,
										484592
									],
									[
										484594,
										484595
									],
									[
										484604,
										484605
									],
									[
										484739,
										484740
									],
									[
										484740,
										484741
									],
									[
										484828,
										484829
									],
									[
										484927,
										484928
									],
									[
										484950,
										484951
									],
									[
										484990,
										484991
									],
									[
										485013,
										485014
									],
									[
										485073,
										485074
									],
									[
										485288,
										485289
									],
									[
										485432,
										485433
									],
									[
										485458,
										485459
									],
									[
										485473,
										485474
									],
									[
										485564,
										485565
									],
									[
										485591,
										485592
									],
									[
										485603,
										485604
									],
									[
										485792,
										485793
									],
									[
										485881,
										485882
									],
									[
										485930,
										485931
									],
									[
										486049,
										486050
									],
									[
										486077,
										486078
									],
									[
										486087,
										486088
									],
									[
										486113,
										486114
									],
									[
										486140,
										486141
									],
									[
										486157,
										486158
									],
									[
										486160,
										486161
									],
									[
										486177,
										486178
									],
									[
										486183,
										486184
									],
									[
										486203,
										486204
									],
									[
										486241,
										486242
									],
									[
										486247,
										486248
									],
									[
										486259,
										486260
									],
									[
										486269,
										486270
									],
									[
										486334,
										486335
									],
									[
										486351,
										486352
									],
									[
										486391,
										486392
									],
									[
										486398,
										486399
									],
									[
										486400,
										486401
									],
									[
										486420,
										486421
									],
									[
										486421,
										486422
									],
									[
										486429,
										486430
									],
									[
										486433,
										486434
									],
									[
										486445,
										486446
									],
									[
										486449,
										486450
									],
									[
										486458,
										486459
									],
									[
										486506,
										486507
									],
									[
										486515,
										486516
									],
									[
										486524,
										486525
									],
									[
										486528,
										486529
									],
									[
										486540,
										486541
									],
									[
										486544,
										486545
									],
									[
										486560,
										486561
									],
									[
										486576,
										486577
									],
									[
										486583,
										486584
									],
									[
										486725,
										486726
									],
									[
										486767,
										486768
									],
									[
										486822,
										486823
									],
									[
										486894,
										486895
									],
									[
										486909,
										486910
									],
									[
										486927,
										486928
									],
									[
										486974,
										486975
									],
									[
										486992,
										486993
									],
									[
										487001,
										487002
									],
									[
										487043,
										487044
									],
									[
										487406,
										487407
									],
									[
										487426,
										487427
									],
									[
										487572,
										487573
									],
									[
										487788,
										487789
									],
									[
										487796,
										487797
									],
									[
										487814,
										487815
									],
									[
										487974,
										487975
									],
									[
										488002,
										488003
									],
									[
										488010,
										488011
									],
									[
										488053,
										488054
									],
									[
										488056,
										488057
									],
									[
										488069,
										488070
									],
									[
										488090,
										488091
									],
									[
										488096,
										488097
									],
									[
										488097,
										488098
									],
									[
										488103,
										488104
									],
									[
										488116,
										488117
									],
									[
										488120,
										488121
									],
									[
										488134,
										488135
									],
									[
										488142,
										488143
									],
									[
										488194,
										488195
									],
									[
										488196,
										488197
									],
									[
										488205,
										488206
									],
									[
										488255,
										488256
									],
									[
										488261,
										488262
									],
									[
										488281,
										488282
									],
									[
										488289,
										488290
									],
									[
										488310,
										488311
									],
									[
										488317,
										488318
									],
									[
										488330,
										488331
									],
									[
										488361,
										488362
									],
									[
										488668,
										488669
									],
									[
										488696,
										488697
									],
									[
										489119,
										489120
									],
									[
										489152,
										489153
									],
									[
										489436,
										489437
									],
									[
										489465,
										489466
									],
									[
										489474,
										489475
									],
									[
										489480,
										489481
									],
									[
										489495,
										489496
									],
									[
										489511,
										489512
									],
									[
										489512,
										489513
									],
									[
										489539,
										489540
									],
									[
										489540,
										489541
									],
									[
										489557,
										489558
									],
									[
										489574,
										489575
									],
									[
										489575,
										489576
									],
									[
										489581,
										489582
									],
									[
										489594,
										489595
									],
									[
										489598,
										489599
									],
									[
										489649,
										489650
									],
									[
										489651,
										489652
									],
									[
										489660,
										489661
									],
									[
										489708,
										489709
									],
									[
										489783,
										489784
									],
									[
										489793,
										489794
									],
									[
										489851,
										489852
									],
									[
										489860,
										489861
									],
									[
										489966,
										489967
									],
									[
										489995,
										489996
									],
									[
										490004,
										490005
									],
									[
										490010,
										490011
									],
									[
										490025,
										490026
									],
									[
										490041,
										490042
									],
									[
										490042,
										490043
									],
									[
										490069,
										490070
									],
									[
										490070,
										490071
									],
									[
										490087,
										490088
									],
									[
										490104,
										490105
									],
									[
										490105,
										490106
									],
									[
										490111,
										490112
									],
									[
										490124,
										490125
									],
									[
										490128,
										490129
									],
									[
										490184,
										490185
									],
									[
										490186,
										490187
									],
									[
										490195,
										490196
									],
									[
										490243,
										490244
									],
									[
										490323,
										490324
									],
									[
										490333,
										490334
									],
									[
										490396,
										490397
									],
									[
										490405,
										490406
									],
									[
										490519,
										490520
									],
									[
										490548,
										490549
									],
									[
										490557,
										490558
									],
									[
										490563,
										490564
									],
									[
										490578,
										490579
									],
									[
										490594,
										490595
									],
									[
										490595,
										490596
									],
									[
										490622,
										490623
									],
									[
										490623,
										490624
									],
									[
										490640,
										490641
									],
									[
										490657,
										490658
									],
									[
										490658,
										490659
									],
									[
										490664,
										490665
									],
									[
										490677,
										490678
									],
									[
										490681,
										490682
									],
									[
										490741,
										490742
									],
									[
										490743,
										490744
									],
									[
										490752,
										490753
									],
									[
										490800,
										490801
									],
									[
										490884,
										490885
									],
									[
										490894,
										490895
									],
									[
										490961,
										490962
									],
									[
										490970,
										490971
									],
									[
										491026,
										491027
									],
									[
										491061,
										491062
									],
									[
										491103,
										491104
									],
									[
										491123,
										491124
									],
									[
										491152,
										491153
									],
									[
										491161,
										491162
									],
									[
										491167,
										491168
									],
									[
										491182,
										491183
									],
									[
										491198,
										491199
									],
									[
										491199,
										491200
									],
									[
										491226,
										491227
									],
									[
										491227,
										491228
									],
									[
										491244,
										491245
									],
									[
										491261,
										491262
									],
									[
										491262,
										491263
									],
									[
										491268,
										491269
									],
									[
										491281,
										491282
									],
									[
										491285,
										491286
									],
									[
										491322,
										491323
									],
									[
										491342,
										491343
									],
									[
										491344,
										491345
									],
									[
										491353,
										491354
									],
									[
										491401,
										491402
									],
									[
										491467,
										491468
									],
									[
										491482,
										491483
									],
									[
										491492,
										491493
									],
									[
										491530,
										491531
									],
									[
										491556,
										491557
									],
									[
										491565,
										491566
									],
									[
										491669,
										491670
									],
									[
										491698,
										491699
									],
									[
										491707,
										491708
									],
									[
										491713,
										491714
									],
									[
										491728,
										491729
									],
									[
										491744,
										491745
									],
									[
										491745,
										491746
									],
									[
										491772,
										491773
									],
									[
										491773,
										491774
									],
									[
										491790,
										491791
									],
									[
										491807,
										491808
									],
									[
										491808,
										491809
									],
									[
										491814,
										491815
									],
									[
										491827,
										491828
									],
									[
										491831,
										491832
									],
									[
										491886,
										491887
									],
									[
										491888,
										491889
									],
									[
										491897,
										491898
									],
									[
										491945,
										491946
									],
									[
										492024,
										492025
									],
									[
										492034,
										492035
									],
									[
										492096,
										492097
									],
									[
										492105,
										492106
									],
									[
										492204,
										492205
									],
									[
										492229,
										492230
									],
									[
										492269,
										492270
									],
									[
										492274,
										492275
									],
									[
										492337,
										492338
									],
									[
										492401,
										492402
									],
									[
										492411,
										492412
									],
									[
										492458,
										492459
									],
									[
										492467,
										492468
									],
									[
										492625,
										492626
									],
									[
										492650,
										492651
									],
									[
										492690,
										492691
									],
									[
										492695,
										492696
									],
									[
										492763,
										492764
									],
									[
										492832,
										492833
									],
									[
										492842,
										492843
									],
									[
										492894,
										492895
									],
									[
										492903,
										492904
									],
									[
										493074,
										493075
									],
									[
										493099,
										493100
									],
									[
										493139,
										493140
									],
									[
										493144,
										493145
									],
									[
										493216,
										493217
									],
									[
										493289,
										493290
									],
									[
										493299,
										493300
									],
									[
										493355,
										493356
									],
									[
										493364,
										493365
									],
									[
										493492,
										493493
									],
									[
										493532,
										493533
									],
									[
										493570,
										493571
									],
									[
										493592,
										493593
									],
									[
										493617,
										493618
									],
									[
										493657,
										493658
									],
									[
										493662,
										493663
									],
									[
										493680,
										493681
									],
									[
										493731,
										493732
									],
									[
										493786,
										493787
									],
									[
										493801,
										493802
									],
									[
										493811,
										493812
									],
									[
										493838,
										493839
									],
									[
										493864,
										493865
									],
									[
										493873,
										493874
									],
									[
										493900,
										493901
									],
									[
										494043,
										494044
									],
									[
										494068,
										494069
									],
									[
										494108,
										494109
									],
									[
										494113,
										494114
									],
									[
										494180,
										494181
									],
									[
										494248,
										494249
									],
									[
										494258,
										494259
									],
									[
										494309,
										494310
									],
									[
										494318,
										494319
									],
									[
										494456,
										494457
									],
									[
										494491,
										494492
									],
									[
										494513,
										494514
									],
									[
										494514,
										494515
									],
									[
										494516,
										494517
									],
									[
										494529,
										494530
									],
									[
										494533,
										494534
									],
									[
										494549,
										494550
									],
									[
										494611,
										494612
									],
									[
										494679,
										494680
									],
									[
										494789,
										494790
									],
									[
										494824,
										494825
									],
									[
										494846,
										494847
									],
									[
										494847,
										494848
									],
									[
										494849,
										494850
									],
									[
										494862,
										494863
									],
									[
										494866,
										494867
									],
									[
										494893,
										494894
									],
									[
										495038,
										495039
									],
									[
										495047,
										495048
									],
									[
										495049,
										495050
									],
									[
										495114,
										495115
									],
									[
										495125,
										495126
									],
									[
										495126,
										495127
									],
									[
										495190,
										495191
									],
									[
										495280,
										495281
									],
									[
										495323,
										495324
									],
									[
										495332,
										495333
									],
									[
										495338,
										495339
									],
									[
										495353,
										495354
									],
									[
										495369,
										495370
									],
									[
										495370,
										495371
									],
									[
										495414,
										495415
									],
									[
										495427,
										495428
									],
									[
										495431,
										495432
									],
									[
										495448,
										495449
									],
									[
										495453,
										495454
									],
									[
										495481,
										495482
									],
									[
										495486,
										495487
									],
									[
										495488,
										495489
									],
									[
										495491,
										495492
									],
									[
										495497,
										495498
									],
									[
										495569,
										495570
									],
									[
										495627,
										495628
									],
									[
										495670,
										495671
									],
									[
										495671,
										495672
									],
									[
										495755,
										495756
									],
									[
										495768,
										495769
									],
									[
										495811,
										495812
									],
									[
										495917,
										495918
									],
									[
										495970,
										495971
									],
									[
										495974,
										495975
									],
									[
										496017,
										496018
									],
									[
										496033,
										496034
									],
									[
										496070,
										496071
									],
									[
										496071,
										496072
									],
									[
										496079,
										496080
									],
									[
										496080,
										496081
									],
									[
										496090,
										496091
									],
									[
										496118,
										496119
									],
									[
										496147,
										496148
									],
									[
										496155,
										496156
									],
									[
										496193,
										496194
									],
									[
										496205,
										496206
									],
									[
										496206,
										496207
									],
									[
										496338,
										496339
									],
									[
										496398,
										496399
									],
									[
										496409,
										496410
									],
									[
										496421,
										496422
									],
									[
										496446,
										496447
									],
									[
										496498,
										496499
									],
									[
										496761,
										496762
									],
									[
										496781,
										496782
									],
									[
										496822,
										496823
									],
									[
										496936,
										496937
									],
									[
										496966,
										496967
									],
									[
										497113,
										497114
									],
									[
										497135,
										497136
									],
									[
										497189,
										497190
									],
									[
										497216,
										497217
									],
									[
										497355,
										497356
									],
									[
										497374,
										497375
									],
									[
										497430,
										497431
									],
									[
										497454,
										497455
									],
									[
										497631,
										497632
									],
									[
										497681,
										497682
									],
									[
										497700,
										497701
									],
									[
										497840,
										497841
									],
									[
										497872,
										497873
									],
									[
										497941,
										497942
									],
									[
										497976,
										497977
									],
									[
										498024,
										498025
									],
									[
										498053,
										498054
									],
									[
										498128,
										498129
									],
									[
										498163,
										498164
									],
									[
										498218,
										498219
									],
									[
										498250,
										498251
									],
									[
										498311,
										498312
									],
									[
										498350,
										498351
									],
									[
										498417,
										498418
									],
									[
										498458,
										498459
									],
									[
										498527,
										498528
									],
									[
										498575,
										498576
									],
									[
										498901,
										498902
									],
									[
										498932,
										498933
									],
									[
										498994,
										498995
									],
									[
										498999,
										499000
									],
									[
										499028,
										499029
									],
									[
										499032,
										499033
									],
									[
										499091,
										499092
									],
									[
										499121,
										499122
									],
									[
										499273,
										499274
									],
									[
										499304,
										499305
									],
									[
										499587,
										499588
									],
									[
										499627,
										499628
									],
									[
										499636,
										499637
									],
									[
										499642,
										499643
									],
									[
										499657,
										499658
									],
									[
										499673,
										499674
									],
									[
										499674,
										499675
									],
									[
										499706,
										499707
									],
									[
										499730,
										499731
									],
									[
										499760,
										499761
									],
									[
										499786,
										499787
									],
									[
										499829,
										499830
									],
									[
										499900,
										499901
									],
									[
										499917,
										499918
									],
									[
										499935,
										499936
									],
									[
										499952,
										499953
									],
									[
										499973,
										499974
									],
									[
										499985,
										499986
									],
									[
										500022,
										500023
									],
									[
										500052,
										500053
									],
									[
										500094,
										500095
									],
									[
										500114,
										500115
									],
									[
										500146,
										500147
									],
									[
										500238,
										500239
									],
									[
										500239,
										500240
									],
									[
										500333,
										500334
									],
									[
										500357,
										500358
									],
									[
										500390,
										500391
									],
									[
										500402,
										500403
									],
									[
										500441,
										500442
									],
									[
										500467,
										500468
									],
									[
										500505,
										500506
									],
									[
										500529,
										500530
									],
									[
										500613,
										500614
									],
									[
										500626,
										500627
									],
									[
										500649,
										500650
									],
									[
										500670,
										500671
									],
									[
										500710,
										500711
									],
									[
										500759,
										500760
									],
									[
										500768,
										500769
									],
									[
										500774,
										500775
									],
									[
										500789,
										500790
									],
									[
										500805,
										500806
									],
									[
										500806,
										500807
									],
									[
										500850,
										500851
									],
									[
										500936,
										500937
									],
									[
										500967,
										500968
									],
									[
										501020,
										501021
									],
									[
										501028,
										501029
									],
									[
										501042,
										501043
									],
									[
										501062,
										501063
									],
									[
										501068,
										501069
									],
									[
										501125,
										501126
									],
									[
										501193,
										501194
									],
									[
										501210,
										501211
									],
									[
										501228,
										501229
									],
									[
										501245,
										501246
									],
									[
										501266,
										501267
									],
									[
										501278,
										501279
									],
									[
										501315,
										501316
									],
									[
										501345,
										501346
									],
									[
										501387,
										501388
									],
									[
										501407,
										501408
									],
									[
										501430,
										501431
									],
									[
										501522,
										501523
									],
									[
										501523,
										501524
									],
									[
										501569,
										501570
									],
									[
										501583,
										501584
									],
									[
										501602,
										501603
									],
									[
										501605,
										501606
									],
									[
										501613,
										501614
									],
									[
										501645,
										501646
									],
									[
										501664,
										501665
									],
									[
										501692,
										501693
									],
									[
										501730,
										501731
									],
									[
										501788,
										501789
									],
									[
										501842,
										501843
									],
									[
										501896,
										501897
									],
									[
										501940,
										501941
									],
									[
										501949,
										501950
									],
									[
										501955,
										501956
									],
									[
										501970,
										501971
									],
									[
										501986,
										501987
									],
									[
										501987,
										501988
									],
									[
										502025,
										502026
									],
									[
										502116,
										502117
									],
									[
										502155,
										502156
									],
									[
										502247,
										502248
									],
									[
										502274,
										502275
									],
									[
										502295,
										502296
									],
									[
										502327,
										502328
									],
									[
										502338,
										502339
									],
									[
										502422,
										502423
									],
									[
										502428,
										502429
									],
									[
										502557,
										502558
									],
									[
										502566,
										502567
									],
									[
										502572,
										502573
									],
									[
										502587,
										502588
									],
									[
										502603,
										502604
									],
									[
										502604,
										502605
									],
									[
										502685,
										502686
									],
									[
										502686,
										502687
									],
									[
										502688,
										502689
									],
									[
										502701,
										502702
									],
									[
										502705,
										502706
									],
									[
										502729,
										502730
									],
									[
										502818,
										502819
									],
									[
										502855,
										502856
									],
									[
										502927,
										502928
									],
									[
										502942,
										502943
									],
									[
										502951,
										502952
									],
									[
										502957,
										502958
									],
									[
										502972,
										502973
									],
									[
										502988,
										502989
									],
									[
										502989,
										502990
									],
									[
										503067,
										503068
									],
									[
										503068,
										503069
									],
									[
										503070,
										503071
									],
									[
										503083,
										503084
									],
									[
										503087,
										503088
									],
									[
										503111,
										503112
									],
									[
										503171,
										503172
									],
									[
										503192,
										503193
									],
									[
										503358,
										503359
									],
									[
										503367,
										503368
									],
									[
										503373,
										503374
									],
									[
										503388,
										503389
									],
									[
										503404,
										503405
									],
									[
										503405,
										503406
									],
									[
										503483,
										503484
									],
									[
										503484,
										503485
									],
									[
										503486,
										503487
									],
									[
										503499,
										503500
									],
									[
										503503,
										503504
									],
									[
										503527,
										503528
									],
									[
										503611,
										503612
									],
									[
										503640,
										503641
									],
									[
										503704,
										503705
									],
									[
										503714,
										503715
									],
									[
										503723,
										503724
									],
									[
										503729,
										503730
									],
									[
										503744,
										503745
									],
									[
										503760,
										503761
									],
									[
										503761,
										503762
									],
									[
										503839,
										503840
									],
									[
										503840,
										503841
									],
									[
										503842,
										503843
									],
									[
										503855,
										503856
									],
									[
										503859,
										503860
									],
									[
										503883,
										503884
									],
									[
										503950,
										503951
									],
									[
										504059,
										504060
									],
									[
										504093,
										504094
									],
									[
										504165,
										504166
									],
									[
										504180,
										504181
									],
									[
										504189,
										504190
									],
									[
										504195,
										504196
									],
									[
										504210,
										504211
									],
									[
										504226,
										504227
									],
									[
										504227,
										504228
									],
									[
										504314,
										504315
									],
									[
										504329,
										504330
									],
									[
										504338,
										504339
									],
									[
										504344,
										504345
									],
									[
										504359,
										504360
									],
									[
										504375,
										504376
									],
									[
										504376,
										504377
									],
									[
										504464,
										504465
									],
									[
										504465,
										504466
									],
									[
										504467,
										504468
									],
									[
										504480,
										504481
									],
									[
										504484,
										504485
									],
									[
										504508,
										504509
									],
									[
										504586,
										504587
									],
									[
										504666,
										504667
									],
									[
										504785,
										504786
									],
									[
										504967,
										504968
									],
									[
										504976,
										504977
									],
									[
										504982,
										504983
									],
									[
										504997,
										504998
									],
									[
										505013,
										505014
									],
									[
										505014,
										505015
									],
									[
										505104,
										505105
									],
									[
										505105,
										505106
									],
									[
										505107,
										505108
									],
									[
										505120,
										505121
									],
									[
										505124,
										505125
									],
									[
										505148,
										505149
									],
									[
										505227,
										505228
									],
									[
										505253,
										505254
									],
									[
										505315,
										505316
									],
									[
										505327,
										505328
									],
									[
										505336,
										505337
									],
									[
										505342,
										505343
									],
									[
										505357,
										505358
									],
									[
										505373,
										505374
									],
									[
										505374,
										505375
									],
									[
										505453,
										505454
									],
									[
										505454,
										505455
									],
									[
										505456,
										505457
									],
									[
										505469,
										505470
									],
									[
										505473,
										505474
									],
									[
										505497,
										505498
									],
									[
										505559,
										505560
									],
									[
										505739,
										505740
									],
									[
										505933,
										505934
									],
									[
										505964,
										505965
									],
									[
										506031,
										506032
									],
									[
										506043,
										506044
									],
									[
										506052,
										506053
									],
									[
										506058,
										506059
									],
									[
										506073,
										506074
									],
									[
										506089,
										506090
									],
									[
										506090,
										506091
									],
									[
										506169,
										506170
									],
									[
										506170,
										506171
									],
									[
										506172,
										506173
									],
									[
										506185,
										506186
									],
									[
										506189,
										506190
									],
									[
										506213,
										506214
									],
									[
										506280,
										506281
									],
									[
										506507,
										506508
									],
									[
										506637,
										506638
									],
									[
										506646,
										506647
									],
									[
										506652,
										506653
									],
									[
										506667,
										506668
									],
									[
										506683,
										506684
									],
									[
										506684,
										506685
									],
									[
										506763,
										506764
									],
									[
										506764,
										506765
									],
									[
										506766,
										506767
									],
									[
										506779,
										506780
									],
									[
										506783,
										506784
									],
									[
										506807,
										506808
									],
									[
										506943,
										506944
									],
									[
										507023,
										507024
									],
									[
										507033,
										507034
									],
									[
										507042,
										507043
									],
									[
										507048,
										507049
									],
									[
										507063,
										507064
									],
									[
										507079,
										507080
									],
									[
										507080,
										507081
									],
									[
										507159,
										507160
									],
									[
										507160,
										507161
									],
									[
										507162,
										507163
									],
									[
										507175,
										507176
									],
									[
										507179,
										507180
									],
									[
										507203,
										507204
									],
									[
										507302,
										507303
									],
									[
										507429,
										507430
									],
									[
										507455,
										507456
									],
									[
										507517,
										507518
									],
									[
										507527,
										507528
									],
									[
										507536,
										507537
									],
									[
										507542,
										507543
									],
									[
										507557,
										507558
									],
									[
										507573,
										507574
									],
									[
										507574,
										507575
									],
									[
										507653,
										507654
									],
									[
										507654,
										507655
									],
									[
										507656,
										507657
									],
									[
										507669,
										507670
									],
									[
										507673,
										507674
									],
									[
										507697,
										507698
									],
									[
										507761,
										507762
									],
									[
										507804,
										507805
									],
									[
										507849,
										507850
									],
									[
										508016,
										508017
									],
									[
										508025,
										508026
									],
									[
										508031,
										508032
									],
									[
										508046,
										508047
									],
									[
										508062,
										508063
									],
									[
										508063,
										508064
									],
									[
										508142,
										508143
									],
									[
										508143,
										508144
									],
									[
										508145,
										508146
									],
									[
										508158,
										508159
									],
									[
										508162,
										508163
									],
									[
										508186,
										508187
									],
									[
										508332,
										508333
									],
									[
										508494,
										508495
									],
									[
										508533,
										508534
									],
									[
										508608,
										508609
									],
									[
										508618,
										508619
									],
									[
										508627,
										508628
									],
									[
										508633,
										508634
									],
									[
										508648,
										508649
									],
									[
										508664,
										508665
									],
									[
										508665,
										508666
									],
									[
										508744,
										508745
									],
									[
										508745,
										508746
									],
									[
										508747,
										508748
									],
									[
										508760,
										508761
									],
									[
										508764,
										508765
									],
									[
										508788,
										508789
									],
									[
										508875,
										508876
									],
									[
										508977,
										508978
									],
									[
										509019,
										509020
									],
									[
										509097,
										509098
									],
									[
										509107,
										509108
									],
									[
										509116,
										509117
									],
									[
										509122,
										509123
									],
									[
										509137,
										509138
									],
									[
										509153,
										509154
									],
									[
										509154,
										509155
									],
									[
										509233,
										509234
									],
									[
										509234,
										509235
									],
									[
										509236,
										509237
									],
									[
										509249,
										509250
									],
									[
										509253,
										509254
									],
									[
										509277,
										509278
									],
									[
										509367,
										509368
									],
									[
										509448,
										509449
									],
									[
										509484,
										509485
									],
									[
										509555,
										509556
									],
									[
										509576,
										509577
									],
									[
										509585,
										509586
									],
									[
										509591,
										509592
									],
									[
										509606,
										509607
									],
									[
										509622,
										509623
									],
									[
										509623,
										509624
									],
									[
										509702,
										509703
									],
									[
										509703,
										509704
									],
									[
										509705,
										509706
									],
									[
										509718,
										509719
									],
									[
										509722,
										509723
									],
									[
										509746,
										509747
									],
									[
										509808,
										509809
									],
									[
										509990,
										509991
									],
									[
										510032,
										510033
									],
									[
										510110,
										510111
									],
									[
										510125,
										510126
									],
									[
										510134,
										510135
									],
									[
										510140,
										510141
									],
									[
										510155,
										510156
									],
									[
										510171,
										510172
									],
									[
										510172,
										510173
									],
									[
										510251,
										510252
									],
									[
										510252,
										510253
									],
									[
										510254,
										510255
									],
									[
										510267,
										510268
									],
									[
										510271,
										510272
									],
									[
										510295,
										510296
									],
									[
										510355,
										510356
									],
									[
										510381,
										510382
									],
									[
										510469,
										510470
									],
									[
										510508,
										510509
									],
									[
										510581,
										510582
									],
									[
										510602,
										510603
									],
									[
										510611,
										510612
									],
									[
										510617,
										510618
									],
									[
										510632,
										510633
									],
									[
										510648,
										510649
									],
									[
										510649,
										510650
									],
									[
										510728,
										510729
									],
									[
										510729,
										510730
									],
									[
										510731,
										510732
									],
									[
										510744,
										510745
									],
									[
										510748,
										510749
									],
									[
										510772,
										510773
									],
									[
										510836,
										510837
									],
									[
										510934,
										510935
									],
									[
										511001,
										511002
									],
									[
										511047,
										511048
									],
									[
										511126,
										511127
									],
									[
										511153,
										511154
									],
									[
										511162,
										511163
									],
									[
										511168,
										511169
									],
									[
										511183,
										511184
									],
									[
										511199,
										511200
									],
									[
										511200,
										511201
									],
									[
										511279,
										511280
									],
									[
										511280,
										511281
									],
									[
										511282,
										511283
									],
									[
										511295,
										511296
									],
									[
										511299,
										511300
									],
									[
										511323,
										511324
									],
									[
										511387,
										511388
									],
									[
										511497,
										511498
									],
									[
										511564,
										511565
									],
									[
										511612,
										511613
									],
									[
										511693,
										511694
									],
									[
										511722,
										511723
									],
									[
										511731,
										511732
									],
									[
										511737,
										511738
									],
									[
										511752,
										511753
									],
									[
										511768,
										511769
									],
									[
										511769,
										511770
									],
									[
										511848,
										511849
									],
									[
										511849,
										511850
									],
									[
										511851,
										511852
									],
									[
										511864,
										511865
									],
									[
										511868,
										511869
									],
									[
										511892,
										511893
									],
									[
										511956,
										511957
									],
									[
										512126,
										512127
									],
									[
										512181,
										512182
									],
									[
										512268,
										512269
									],
									[
										512303,
										512304
									],
									[
										512312,
										512313
									],
									[
										512318,
										512319
									],
									[
										512333,
										512334
									],
									[
										512349,
										512350
									],
									[
										512350,
										512351
									],
									[
										512429,
										512430
									],
									[
										512430,
										512431
									],
									[
										512432,
										512433
									],
									[
										512445,
										512446
									],
									[
										512449,
										512450
									],
									[
										512473,
										512474
									],
									[
										512537,
										512538
									],
									[
										512628,
										512629
									],
									[
										512823,
										512824
									],
									[
										512832,
										512833
									],
									[
										512838,
										512839
									],
									[
										512853,
										512854
									],
									[
										512869,
										512870
									],
									[
										512870,
										512871
									],
									[
										512949,
										512950
									],
									[
										512950,
										512951
									],
									[
										512952,
										512953
									],
									[
										512965,
										512966
									],
									[
										512969,
										512970
									],
									[
										512993,
										512994
									],
									[
										513166,
										513167
									],
									[
										513329,
										513330
									],
									[
										513338,
										513339
									],
									[
										513344,
										513345
									],
									[
										513359,
										513360
									],
									[
										513375,
										513376
									],
									[
										513376,
										513377
									],
									[
										513455,
										513456
									],
									[
										513456,
										513457
									],
									[
										513458,
										513459
									],
									[
										513471,
										513472
									],
									[
										513475,
										513476
									],
									[
										513499,
										513500
									],
									[
										513693,
										513694
									],
									[
										513764,
										513765
									],
									[
										513802,
										513803
									],
									[
										513875,
										513876
									],
									[
										513893,
										513894
									],
									[
										513902,
										513903
									],
									[
										513908,
										513909
									],
									[
										513923,
										513924
									],
									[
										513939,
										513940
									],
									[
										513940,
										513941
									],
									[
										514019,
										514020
									],
									[
										514020,
										514021
									],
									[
										514022,
										514023
									],
									[
										514035,
										514036
									],
									[
										514039,
										514040
									],
									[
										514063,
										514064
									],
									[
										514140,
										514141
									],
									[
										514375,
										514376
									],
									[
										514380,
										514381
									],
									[
										514416,
										514417
									],
									[
										514420,
										514421
									],
									[
										514492,
										514493
									],
									[
										514496,
										514497
									],
									[
										514513,
										514514
									],
									[
										514522,
										514523
									],
									[
										514528,
										514529
									],
									[
										514543,
										514544
									],
									[
										514559,
										514560
									],
									[
										514560,
										514561
									],
									[
										514639,
										514640
									],
									[
										514640,
										514641
									],
									[
										514642,
										514643
									],
									[
										514655,
										514656
									],
									[
										514659,
										514660
									],
									[
										514683,
										514684
									],
									[
										514760,
										514761
									],
									[
										514764,
										514765
									],
									[
										515004,
										515005
									],
									[
										515041,
										515042
									],
									[
										515105,
										515106
									],
									[
										515106,
										515107
									],
									[
										515114,
										515115
									],
									[
										515133,
										515134
									],
									[
										515142,
										515143
									],
									[
										515148,
										515149
									],
									[
										515163,
										515164
									],
									[
										515179,
										515180
									],
									[
										515180,
										515181
									],
									[
										515190,
										515191
									],
									[
										515191,
										515192
									],
									[
										515260,
										515261
									],
									[
										515261,
										515262
									],
									[
										515263,
										515264
									],
									[
										515276,
										515277
									],
									[
										515280,
										515281
									],
									[
										515304,
										515305
									],
									[
										515364,
										515365
									],
									[
										515380,
										515381
									],
									[
										515407,
										515408
									],
									[
										515408,
										515409
									],
									[
										515415,
										515416
									],
									[
										515528,
										515529
									],
									[
										515529,
										515530
									],
									[
										515556,
										515557
									],
									[
										515565,
										515566
									],
									[
										515571,
										515572
									],
									[
										515586,
										515587
									],
									[
										515602,
										515603
									],
									[
										515603,
										515604
									],
									[
										515613,
										515614
									],
									[
										515614,
										515615
									],
									[
										515683,
										515684
									],
									[
										515684,
										515685
									],
									[
										515686,
										515687
									],
									[
										515699,
										515700
									],
									[
										515703,
										515704
									],
									[
										515727,
										515728
									],
									[
										515818,
										515819
									],
									[
										515819,
										515820
									],
									[
										515826,
										515827
									],
									[
										515886,
										515887
									],
									[
										515924,
										515925
									],
									[
										515989,
										515990
									],
									[
										515990,
										515991
									],
									[
										515998,
										515999
									],
									[
										516018,
										516019
									],
									[
										516027,
										516028
									],
									[
										516033,
										516034
									],
									[
										516048,
										516049
									],
									[
										516064,
										516065
									],
									[
										516065,
										516066
									],
									[
										516075,
										516076
									],
									[
										516076,
										516077
									],
									[
										516145,
										516146
									],
									[
										516146,
										516147
									],
									[
										516148,
										516149
									],
									[
										516161,
										516162
									],
									[
										516165,
										516166
									],
									[
										516189,
										516190
									],
									[
										516253,
										516254
									],
									[
										516281,
										516282
									],
									[
										516282,
										516283
									],
									[
										516289,
										516290
									],
									[
										516401,
										516402
									],
									[
										516402,
										516403
									],
									[
										516428,
										516429
									],
									[
										516437,
										516438
									],
									[
										516443,
										516444
									],
									[
										516458,
										516459
									],
									[
										516474,
										516475
									],
									[
										516475,
										516476
									],
									[
										516485,
										516486
									],
									[
										516486,
										516487
									],
									[
										516555,
										516556
									],
									[
										516556,
										516557
									],
									[
										516558,
										516559
									],
									[
										516571,
										516572
									],
									[
										516575,
										516576
									],
									[
										516599,
										516600
									],
									[
										516689,
										516690
									],
									[
										516690,
										516691
									],
									[
										516697,
										516698
									],
									[
										516838,
										516839
									],
									[
										516847,
										516848
									],
									[
										516853,
										516854
									],
									[
										516868,
										516869
									],
									[
										516884,
										516885
									],
									[
										516885,
										516886
									],
									[
										516963,
										516964
									],
									[
										516964,
										516965
									],
									[
										516966,
										516967
									],
									[
										516979,
										516980
									],
									[
										516983,
										516984
									],
									[
										517007,
										517008
									],
									[
										517093,
										517094
									],
									[
										517181,
										517182
									],
									[
										517190,
										517191
									],
									[
										517194,
										517195
									],
									[
										517209,
										517210
									],
									[
										517212,
										517213
									],
									[
										517215,
										517216
									],
									[
										517256,
										517257
									],
									[
										517281,
										517282
									],
									[
										517286,
										517287
									],
									[
										517288,
										517289
									],
									[
										517345,
										517346
									],
									[
										517423,
										517424
									],
									[
										517431,
										517432
									],
									[
										517435,
										517436
									],
									[
										517462,
										517463
									],
									[
										517510,
										517511
									],
									[
										517595,
										517596
									],
									[
										517596,
										517597
									],
									[
										517763,
										517764
									],
									[
										517774,
										517775
									],
									[
										517775,
										517776
									],
									[
										517787,
										517788
									],
									[
										517818,
										517819
									],
									[
										517840,
										517841
									],
									[
										517855,
										517856
									],
									[
										517867,
										517868
									],
									[
										517892,
										517893
									],
									[
										517926,
										517927
									],
									[
										517937,
										517938
									],
									[
										517946,
										517947
									],
									[
										517959,
										517960
									],
									[
										517972,
										517973
									],
									[
										517974,
										517975
									],
									[
										518015,
										518016
									],
									[
										518023,
										518024
									],
									[
										518042,
										518043
									],
									[
										518050,
										518051
									],
									[
										518070,
										518071
									],
									[
										518077,
										518078
									],
									[
										518090,
										518091
									],
									[
										518120,
										518121
									],
									[
										518179,
										518180
									],
									[
										518203,
										518204
									],
									[
										518232,
										518233
									],
									[
										518275,
										518276
									],
									[
										518280,
										518281
									],
									[
										518287,
										518288
									],
									[
										518288,
										518289
									],
									[
										518297,
										518298
									],
									[
										518301,
										518302
									],
									[
										518309,
										518310
									],
									[
										518331,
										518332
									],
									[
										518342,
										518343
									],
									[
										518343,
										518344
									],
									[
										518356,
										518357
									],
									[
										518365,
										518366
									],
									[
										518392,
										518393
									],
									[
										518398,
										518399
									],
									[
										518430,
										518431
									],
									[
										518460,
										518461
									],
									[
										518462,
										518463
									],
									[
										518479,
										518480
									],
									[
										518501,
										518502
									],
									[
										518537,
										518538
									],
									[
										518541,
										518542
									],
									[
										518548,
										518549
									],
									[
										518555,
										518556
									],
									[
										518571,
										518572
									],
									[
										518635,
										518636
									],
									[
										518955,
										518956
									],
									[
										519119,
										519120
									],
									[
										519130,
										519131
									],
									[
										519278,
										519279
									],
									[
										519298,
										519299
									],
									[
										519697,
										519698
									],
									[
										519714,
										519715
									],
									[
										520018,
										520019
									],
									[
										520048,
										520049
									],
									[
										520074,
										520075
									],
									[
										520129,
										520130
									],
									[
										520165,
										520166
									],
									[
										520229,
										520230
									],
									[
										520237,
										520238
									],
									[
										520238,
										520239
									],
									[
										520257,
										520258
									],
									[
										520264,
										520265
									],
									[
										520265,
										520266
									],
									[
										520314,
										520315
									],
									[
										520356,
										520357
									],
									[
										520425,
										520426
									],
									[
										520469,
										520470
									],
									[
										520540,
										520541
									],
									[
										520568,
										520569
									],
									[
										520625,
										520626
									],
									[
										520663,
										520664
									],
									[
										520729,
										520730
									],
									[
										520735,
										520736
									],
									[
										520766,
										520767
									],
									[
										520771,
										520772
									],
									[
										520831,
										520832
									],
									[
										520863,
										520864
									],
									[
										520923,
										520924
									],
									[
										520933,
										520934
									],
									[
										520967,
										520968
									],
									[
										520975,
										520976
									],
									[
										521150,
										521151
									],
									[
										521161,
										521162
									],
									[
										521210,
										521211
									],
									[
										521219,
										521220
									],
									[
										521225,
										521226
									],
									[
										521240,
										521241
									],
									[
										521256,
										521257
									],
									[
										521257,
										521258
									],
									[
										521314,
										521315
									],
									[
										521318,
										521319
									],
									[
										521364,
										521365
									],
									[
										521373,
										521374
									],
									[
										521457,
										521458
									],
									[
										521458,
										521459
									],
									[
										521543,
										521544
									],
									[
										521684,
										521685
									],
									[
										521688,
										521689
									],
									[
										521727,
										521728
									],
									[
										521782,
										521783
									],
									[
										521820,
										521821
									],
									[
										521827,
										521828
									],
									[
										521845,
										521846
									],
									[
										521857,
										521858
									],
									[
										521869,
										521870
									],
									[
										521909,
										521910
									],
									[
										521950,
										521951
									],
									[
										521959,
										521960
									],
									[
										521965,
										521966
									],
									[
										521980,
										521981
									],
									[
										521996,
										521997
									],
									[
										521997,
										521998
									],
									[
										522053,
										522054
									],
									[
										522064,
										522065
									],
									[
										522072,
										522073
									],
									[
										522076,
										522077
									],
									[
										522158,
										522159
									],
									[
										522188,
										522189
									],
									[
										522332,
										522333
									],
									[
										522343,
										522344
									],
									[
										522392,
										522393
									],
									[
										522401,
										522402
									],
									[
										522407,
										522408
									],
									[
										522422,
										522423
									],
									[
										522438,
										522439
									],
									[
										522439,
										522440
									],
									[
										522496,
										522497
									],
									[
										522500,
										522501
									],
									[
										522546,
										522547
									],
									[
										522555,
										522556
									],
									[
										522639,
										522640
									],
									[
										522640,
										522641
									],
									[
										522694,
										522695
									],
									[
										522762,
										522763
									],
									[
										522780,
										522781
									],
									[
										522792,
										522793
									],
									[
										522804,
										522805
									],
									[
										522848,
										522849
									],
									[
										522886,
										522887
									],
									[
										522893,
										522894
									],
									[
										522940,
										522941
									],
									[
										522980,
										522981
									],
									[
										523021,
										523022
									],
									[
										523030,
										523031
									],
									[
										523036,
										523037
									],
									[
										523051,
										523052
									],
									[
										523067,
										523068
									],
									[
										523068,
										523069
									],
									[
										523124,
										523125
									],
									[
										523135,
										523136
									],
									[
										523143,
										523144
									],
									[
										523147,
										523148
									],
									[
										523229,
										523230
									],
									[
										523266,
										523267
									],
									[
										523267,
										523268
									],
									[
										523277,
										523278
									],
									[
										523394,
										523395
									],
									[
										523397,
										523398
									],
									[
										523437,
										523438
									],
									[
										523446,
										523447
									],
									[
										523452,
										523453
									],
									[
										523467,
										523468
									],
									[
										523483,
										523484
									],
									[
										523484,
										523485
									],
									[
										523650,
										523651
									],
									[
										523715,
										523716
									],
									[
										523769,
										523770
									],
									[
										523849,
										523850
									],
									[
										523956,
										523957
									],
									[
										523957,
										523958
									],
									[
										524008,
										524009
									],
									[
										524014,
										524015
									],
									[
										524044,
										524045
									],
									[
										524052,
										524053
									],
									[
										524059,
										524060
									],
									[
										524072,
										524073
									],
									[
										524113,
										524114
									],
									[
										524121,
										524122
									],
									[
										524128,
										524129
									],
									[
										524143,
										524144
									],
									[
										524178,
										524179
									],
									[
										524191,
										524192
									],
									[
										524197,
										524198
									],
									[
										524213,
										524214
									],
									[
										524244,
										524245
									],
									[
										524273,
										524274
									],
									[
										524303,
										524304
									],
									[
										524342,
										524343
									],
									[
										524346,
										524347
									],
									[
										524358,
										524359
									],
									[
										524364,
										524365
									],
									[
										524380,
										524381
									],
									[
										524405,
										524406
									],
									[
										524435,
										524436
									],
									[
										524443,
										524444
									],
									[
										524497,
										524498
									],
									[
										524518,
										524519
									],
									[
										524530,
										524531
									],
									[
										524542,
										524543
									],
									[
										524582,
										524583
									],
									[
										524631,
										524632
									],
									[
										524640,
										524641
									],
									[
										524646,
										524647
									],
									[
										524661,
										524662
									],
									[
										524677,
										524678
									],
									[
										524678,
										524679
									],
									[
										524735,
										524736
									],
									[
										524832,
										524833
									],
									[
										524843,
										524844
									],
									[
										524844,
										524845
									],
									[
										524856,
										524857
									],
									[
										524858,
										524859
									],
									[
										524896,
										524897
									],
									[
										525005,
										525006
									],
									[
										525116,
										525117
									],
									[
										525253,
										525254
									],
									[
										525277,
										525278
									],
									[
										525284,
										525285
									],
									[
										525340,
										525341
									],
									[
										525393,
										525394
									],
									[
										525394,
										525395
									],
									[
										525457,
										525458
									],
									[
										525476,
										525477
									],
									[
										525533,
										525534
									],
									[
										525552,
										525553
									],
									[
										525664,
										525665
									],
									[
										525767,
										525768
									],
									[
										525907,
										525908
									],
									[
										525909,
										525910
									],
									[
										525953,
										525954
									],
									[
										525982,
										525983
									],
									[
										526065,
										526066
									],
									[
										526066,
										526067
									],
									[
										526129,
										526130
									],
									[
										526162,
										526163
									],
									[
										526236,
										526237
									],
									[
										526246,
										526247
									],
									[
										526276,
										526277
									],
									[
										526326,
										526327
									],
									[
										526362,
										526363
									],
									[
										526383,
										526384
									],
									[
										526432,
										526433
									],
									[
										526541,
										526542
									],
									[
										526552,
										526553
									],
									[
										526553,
										526554
									],
									[
										526565,
										526566
									],
									[
										526567,
										526568
									],
									[
										526605,
										526606
									],
									[
										526721,
										526722
									],
									[
										526770,
										526771
									],
									[
										526892,
										526893
									],
									[
										526936,
										526937
									],
									[
										527073,
										527074
									],
									[
										527097,
										527098
									],
									[
										527104,
										527105
									],
									[
										527192,
										527193
									],
									[
										527194,
										527195
									],
									[
										527238,
										527239
									],
									[
										527258,
										527259
									],
									[
										527261,
										527262
									],
									[
										527280,
										527281
									],
									[
										527310,
										527311
									],
									[
										527311,
										527312
									],
									[
										527314,
										527315
									],
									[
										527321,
										527322
									],
									[
										527334,
										527335
									],
									[
										527360,
										527361
									],
									[
										527361,
										527362
									],
									[
										527362,
										527363
									],
									[
										527365,
										527366
									],
									[
										527401,
										527402
									],
									[
										527425,
										527426
									],
									[
										527463,
										527464
									],
									[
										527474,
										527475
									],
									[
										527475,
										527476
									],
									[
										527481,
										527482
									],
									[
										527487,
										527488
									],
									[
										527489,
										527490
									],
									[
										527527,
										527528
									],
									[
										527561,
										527562
									],
									[
										527631,
										527632
									],
									[
										527661,
										527662
									],
									[
										527769,
										527770
									],
									[
										527861,
										527862
									],
									[
										527886,
										527887
									],
									[
										527981,
										527982
									],
									[
										528113,
										528114
									],
									[
										528129,
										528130
									],
									[
										528137,
										528138
									],
									[
										528144,
										528145
									],
									[
										528209,
										528210
									],
									[
										528232,
										528233
									],
									[
										528234,
										528235
									],
									[
										528278,
										528279
									],
									[
										528298,
										528299
									],
									[
										528301,
										528302
									],
									[
										528320,
										528321
									],
									[
										528350,
										528351
									],
									[
										528351,
										528352
									],
									[
										528354,
										528355
									],
									[
										528361,
										528362
									],
									[
										528374,
										528375
									],
									[
										528400,
										528401
									],
									[
										528401,
										528402
									],
									[
										528402,
										528403
									],
									[
										528405,
										528406
									],
									[
										528521,
										528522
									],
									[
										528532,
										528533
									],
									[
										528533,
										528534
									],
									[
										528554,
										528555
									],
									[
										528556,
										528557
									],
									[
										528594,
										528595
									],
									[
										528744,
										528745
									],
									[
										528801,
										528802
									],
									[
										528931,
										528932
									],
									[
										528983,
										528984
									],
									[
										529120,
										529121
									],
									[
										529153,
										529154
									],
									[
										529160,
										529161
									],
									[
										529257,
										529258
									],
									[
										529259,
										529260
									],
									[
										529303,
										529304
									],
									[
										529323,
										529324
									],
									[
										529326,
										529327
									],
									[
										529345,
										529346
									],
									[
										529397,
										529398
									],
									[
										529404,
										529405
									],
									[
										529417,
										529418
									],
									[
										529450,
										529451
									],
									[
										529495,
										529496
									],
									[
										529528,
										529529
									],
									[
										529566,
										529567
									],
									[
										529577,
										529578
									],
									[
										529578,
										529579
									],
									[
										529593,
										529594
									],
									[
										529599,
										529600
									],
									[
										529601,
										529602
									],
									[
										529639,
										529640
									],
									[
										529681,
										529682
									],
									[
										529759,
										529760
									],
									[
										529789,
										529790
									],
									[
										529913,
										529914
									],
									[
										530018,
										530019
									],
									[
										530043,
										530044
									],
									[
										530154,
										530155
									],
									[
										530268,
										530269
									],
									[
										530293,
										530294
									],
									[
										530301,
										530302
									],
									[
										530308,
										530309
									],
									[
										530382,
										530383
									],
									[
										530405,
										530406
									],
									[
										530407,
										530408
									],
									[
										530451,
										530452
									],
									[
										530471,
										530472
									],
									[
										530474,
										530475
									],
									[
										530493,
										530494
									],
									[
										530545,
										530546
									],
									[
										530552,
										530553
									],
									[
										530565,
										530566
									],
									[
										530598,
										530599
									],
									[
										530722,
										530723
									],
									[
										530733,
										530734
									],
									[
										530734,
										530735
									],
									[
										530759,
										530760
									],
									[
										530761,
										530762
									],
									[
										530799,
										530800
									],
									[
										530946,
										530947
									],
									[
										531069,
										531070
									],
									[
										531183,
										531184
									],
									[
										531220,
										531221
									],
									[
										531227,
										531228
									],
									[
										531328,
										531329
									],
									[
										531330,
										531331
									],
									[
										531374,
										531375
									],
									[
										531394,
										531395
									],
									[
										531397,
										531398
									],
									[
										531416,
										531417
									],
									[
										531468,
										531469
									],
									[
										531475,
										531476
									],
									[
										531488,
										531489
									],
									[
										531521,
										531522
									],
									[
										531639,
										531640
									],
									[
										531650,
										531651
									],
									[
										531651,
										531652
									],
									[
										531673,
										531674
									],
									[
										531675,
										531676
									],
									[
										531713,
										531714
									],
									[
										531865,
										531866
									],
									[
										531923,
										531924
									],
									[
										532056,
										532057
									],
									[
										532109,
										532110
									],
									[
										532225,
										532226
									],
									[
										532259,
										532260
									],
									[
										532266,
										532267
									],
									[
										532364,
										532365
									],
									[
										532366,
										532367
									],
									[
										532410,
										532411
									],
									[
										532430,
										532431
									],
									[
										532433,
										532434
									],
									[
										532452,
										532453
									],
									[
										532504,
										532505
									],
									[
										532511,
										532512
									],
									[
										532524,
										532525
									],
									[
										532557,
										532558
									],
									[
										532671,
										532672
									],
									[
										532682,
										532683
									],
									[
										532683,
										532684
									],
									[
										532710,
										532711
									],
									[
										532712,
										532713
									],
									[
										532750,
										532751
									],
									[
										532898,
										532899
									],
									[
										532954,
										532955
									],
									[
										533085,
										533086
									],
									[
										533136,
										533137
									],
									[
										533252,
										533253
									],
									[
										533291,
										533292
									],
									[
										533298,
										533299
									],
									[
										533394,
										533395
									],
									[
										533396,
										533397
									],
									[
										533440,
										533441
									],
									[
										533460,
										533461
									],
									[
										533463,
										533464
									],
									[
										533482,
										533483
									],
									[
										533534,
										533535
									],
									[
										533541,
										533542
									],
									[
										533554,
										533555
									],
									[
										533587,
										533588
									],
									[
										533697,
										533698
									],
									[
										533708,
										533709
									],
									[
										533709,
										533710
									],
									[
										533734,
										533735
									],
									[
										533736,
										533737
									],
									[
										533774,
										533775
									],
									[
										533959,
										533960
									],
									[
										534091,
										534092
									],
									[
										534200,
										534201
									],
									[
										534230,
										534231
									],
									[
										534237,
										534238
									],
									[
										534331,
										534332
									],
									[
										534333,
										534334
									],
									[
										534377,
										534378
									],
									[
										534397,
										534398
									],
									[
										534400,
										534401
									],
									[
										534419,
										534420
									],
									[
										534473,
										534474
									],
									[
										534480,
										534481
									],
									[
										534493,
										534494
									],
									[
										534526,
										534527
									],
									[
										534568,
										534569
									],
									[
										534598,
										534599
									],
									[
										534636,
										534637
									],
									[
										534647,
										534648
									],
									[
										534648,
										534649
									],
									[
										534660,
										534661
									],
									[
										534673,
										534674
									],
									[
										534675,
										534676
									],
									[
										534713,
										534714
									],
									[
										534752,
										534753
									],
									[
										534827,
										534828
									],
									[
										534962,
										534963
									],
									[
										535064,
										535065
									],
									[
										535178,
										535179
									],
									[
										535287,
										535288
									],
									[
										535309,
										535310
									],
									[
										535317,
										535318
									],
									[
										535324,
										535325
									],
									[
										535395,
										535396
									],
									[
										535418,
										535419
									],
									[
										535420,
										535421
									],
									[
										535464,
										535465
									],
									[
										535484,
										535485
									],
									[
										535487,
										535488
									],
									[
										535506,
										535507
									],
									[
										535560,
										535561
									],
									[
										535567,
										535568
									],
									[
										535580,
										535581
									],
									[
										535613,
										535614
									],
									[
										535731,
										535732
									],
									[
										535742,
										535743
									],
									[
										535743,
										535744
									],
									[
										535772,
										535773
									],
									[
										535774,
										535775
									],
									[
										535812,
										535813
									],
									[
										535953,
										535954
									],
									[
										536073,
										536074
									],
									[
										536182,
										536183
									],
									[
										536216,
										536217
									],
									[
										536223,
										536224
									],
									[
										536321,
										536322
									],
									[
										536323,
										536324
									],
									[
										536367,
										536368
									],
									[
										536387,
										536388
									],
									[
										536390,
										536391
									],
									[
										536409,
										536410
									],
									[
										536463,
										536464
									],
									[
										536470,
										536471
									],
									[
										536483,
										536484
									],
									[
										536516,
										536517
									],
									[
										536628,
										536629
									],
									[
										536639,
										536640
									],
									[
										536640,
										536641
									],
									[
										536666,
										536667
									],
									[
										536668,
										536669
									],
									[
										536706,
										536707
									],
									[
										536894,
										536895
									],
									[
										537029,
										537030
									],
									[
										537140,
										537141
									],
									[
										537171,
										537172
									],
									[
										537178,
										537179
									],
									[
										537273,
										537274
									],
									[
										537275,
										537276
									],
									[
										537319,
										537320
									],
									[
										537339,
										537340
									],
									[
										537342,
										537343
									],
									[
										537361,
										537362
									],
									[
										537415,
										537416
									],
									[
										537422,
										537423
									],
									[
										537435,
										537436
									],
									[
										537468,
										537469
									],
									[
										537576,
										537577
									],
									[
										537587,
										537588
									],
									[
										537588,
										537589
									],
									[
										537612,
										537613
									],
									[
										537614,
										537615
									],
									[
										537652,
										537653
									],
									[
										537834,
										537835
									],
									[
										537967,
										537968
									],
									[
										538078,
										538079
									],
									[
										538114,
										538115
									],
									[
										538121,
										538122
									],
									[
										538214,
										538215
									],
									[
										538216,
										538217
									],
									[
										538260,
										538261
									],
									[
										538280,
										538281
									],
									[
										538283,
										538284
									],
									[
										538302,
										538303
									],
									[
										538356,
										538357
									],
									[
										538363,
										538364
									],
									[
										538376,
										538377
									],
									[
										538409,
										538410
									],
									[
										538445,
										538446
									],
									[
										538478,
										538479
									],
									[
										538505,
										538506
									],
									[
										538508,
										538509
									],
									[
										538555,
										538556
									],
									[
										538588,
										538589
									],
									[
										538618,
										538619
									],
									[
										538629,
										538630
									],
									[
										538699,
										538700
									],
									[
										538749,
										538750
									],
									[
										538817,
										538818
									],
									[
										538908,
										538909
									],
									[
										538979,
										538980
									],
									[
										539096,
										539097
									],
									[
										539139,
										539140
									],
									[
										539175,
										539176
									],
									[
										539178,
										539179
									],
									[
										539231,
										539232
									],
									[
										539262,
										539263
									],
									[
										539292,
										539293
									],
									[
										539303,
										539304
									],
									[
										539373,
										539374
									],
									[
										539423,
										539424
									],
									[
										539519,
										539520
									],
									[
										539645,
										539646
									],
									[
										539653,
										539654
									],
									[
										539654,
										539655
									],
									[
										539680,
										539681
									],
									[
										539687,
										539688
									],
									[
										539688,
										539689
									],
									[
										539709,
										539710
									],
									[
										539712,
										539713
									],
									[
										539720,
										539721
									],
									[
										539726,
										539727
									],
									[
										539732,
										539733
									],
									[
										539817,
										539818
									],
									[
										539825,
										539826
									],
									[
										539858,
										539859
									],
									[
										539869,
										539870
									],
									[
										539927,
										539928
									],
									[
										539933,
										539934
									],
									[
										539950,
										539951
									],
									[
										539966,
										539967
									],
									[
										539977,
										539978
									],
									[
										539999,
										540000
									],
									[
										540007,
										540008
									],
									[
										540047,
										540048
									],
									[
										540092,
										540093
									],
									[
										540099,
										540100
									],
									[
										540100,
										540101
									],
									[
										540177,
										540178
									],
									[
										540272,
										540273
									],
									[
										540287,
										540288
									],
									[
										540407,
										540408
									],
									[
										540408,
										540409
									],
									[
										540417,
										540418
									],
									[
										540424,
										540425
									],
									[
										540538,
										540539
									],
									[
										540542,
										540543
									],
									[
										540559,
										540560
									],
									[
										540579,
										540580
									],
									[
										540586,
										540587
									],
									[
										540587,
										540588
									],
									[
										540656,
										540657
									],
									[
										540751,
										540752
									],
									[
										540766,
										540767
									],
									[
										540886,
										540887
									],
									[
										540887,
										540888
									],
									[
										540896,
										540897
									],
									[
										540903,
										540904
									],
									[
										541014,
										541015
									],
									[
										541042,
										541043
									],
									[
										541049,
										541050
									],
									[
										541050,
										541051
									],
									[
										541062,
										541063
									],
									[
										541071,
										541072
									],
									[
										541077,
										541078
									],
									[
										541092,
										541093
									],
									[
										541108,
										541109
									],
									[
										541109,
										541110
									],
									[
										541186,
										541187
									],
									[
										541193,
										541194
									],
									[
										541194,
										541195
									],
									[
										541206,
										541207
									],
									[
										541215,
										541216
									],
									[
										541221,
										541222
									],
									[
										541236,
										541237
									],
									[
										541252,
										541253
									],
									[
										541253,
										541254
									],
									[
										541346,
										541347
									],
									[
										541355,
										541356
									],
									[
										541362,
										541363
									],
									[
										541363,
										541364
									],
									[
										541403,
										541404
									],
									[
										541452,
										541453
									],
									[
										541493,
										541494
									],
									[
										541496,
										541497
									],
									[
										541519,
										541520
									],
									[
										541522,
										541523
									],
									[
										541528,
										541529
									],
									[
										541567,
										541568
									],
									[
										541599,
										541600
									],
									[
										541634,
										541635
									],
									[
										541675,
										541676
									],
									[
										541686,
										541687
									],
									[
										541776,
										541777
									],
									[
										541782,
										541783
									],
									[
										541807,
										541808
									],
									[
										541823,
										541824
									],
									[
										541834,
										541835
									],
									[
										541865,
										541866
									],
									[
										541882,
										541883
									],
									[
										541936,
										541937
									],
									[
										541976,
										541977
									],
									[
										541987,
										541988
									],
									[
										542082,
										542083
									],
									[
										542124,
										542125
									],
									[
										542135,
										542136
									],
									[
										542237,
										542238
									],
									[
										542282,
										542283
									],
									[
										542293,
										542294
									],
									[
										542388,
										542389
									],
									[
										542433,
										542434
									],
									[
										542613,
										542614
									],
									[
										542628,
										542629
									],
									[
										542824,
										542825
									],
									[
										542852,
										542853
									],
									[
										542884,
										542885
									],
									[
										542893,
										542894
									],
									[
										542899,
										542900
									],
									[
										542914,
										542915
									],
									[
										542930,
										542931
									],
									[
										542931,
										542932
									],
									[
										543033,
										543034
									],
									[
										543042,
										543043
									],
									[
										543102,
										543103
									],
									[
										543153,
										543154
									],
									[
										543196,
										543197
									],
									[
										543199,
										543200
									],
									[
										543224,
										543225
									],
									[
										543227,
										543228
									],
									[
										543233,
										543234
									],
									[
										543272,
										543273
									],
									[
										543304,
										543305
									],
									[
										543347,
										543348
									],
									[
										543385,
										543386
									],
									[
										543396,
										543397
									],
									[
										543488,
										543489
									],
									[
										543494,
										543495
									],
									[
										543516,
										543517
									],
									[
										543532,
										543533
									],
									[
										543543,
										543544
									],
									[
										543571,
										543572
									],
									[
										543585,
										543586
									],
									[
										543647,
										543648
									],
									[
										543684,
										543685
									],
									[
										543695,
										543696
									],
									[
										543792,
										543793
									],
									[
										543831,
										543832
									],
									[
										543842,
										543843
									],
									[
										543946,
										543947
									],
									[
										543988,
										543989
									],
									[
										543999,
										544000
									],
									[
										544088,
										544089
									],
									[
										544133,
										544134
									],
									[
										544313,
										544314
									],
									[
										544328,
										544329
									],
									[
										544522,
										544523
									],
									[
										544550,
										544551
									],
									[
										544584,
										544585
									],
									[
										544593,
										544594
									],
									[
										544599,
										544600
									],
									[
										544614,
										544615
									],
									[
										544630,
										544631
									],
									[
										544631,
										544632
									],
									[
										544733,
										544734
									],
									[
										544742,
										544743
									],
									[
										544804,
										544805
									],
									[
										544839,
										544840
									],
									[
										544871,
										544872
									],
									[
										544882,
										544883
									],
									[
										544899,
										544900
									],
									[
										544915,
										544916
									],
									[
										544942,
										544943
									],
									[
										544992,
										544993
									],
									[
										545067,
										545068
									],
									[
										545156,
										545157
									],
									[
										545242,
										545243
									],
									[
										545372,
										545373
									],
									[
										545405,
										545406
									],
									[
										545422,
										545423
									],
									[
										545426,
										545427
									],
									[
										545438,
										545439
									],
									[
										545447,
										545448
									],
									[
										545453,
										545454
									],
									[
										545468,
										545469
									],
									[
										545484,
										545485
									],
									[
										545485,
										545486
									],
									[
										545575,
										545576
									],
									[
										545620,
										545621
									],
									[
										545661,
										545662
									],
									[
										545672,
										545673
									],
									[
										545689,
										545690
									],
									[
										545705,
										545706
									],
									[
										545742,
										545743
									],
									[
										545792,
										545793
									],
									[
										545893,
										545894
									],
									[
										545991,
										545992
									],
									[
										546103,
										546104
									],
									[
										546251,
										546252
									],
									[
										546284,
										546285
									],
									[
										546309,
										546310
									],
									[
										546330,
										546331
									],
									[
										546335,
										546336
									],
									[
										546347,
										546348
									],
									[
										546356,
										546357
									],
									[
										546362,
										546363
									],
									[
										546377,
										546378
									],
									[
										546393,
										546394
									],
									[
										546394,
										546395
									],
									[
										546484,
										546485
									],
									[
										546490,
										546491
									],
									[
										546528,
										546529
									],
									[
										546533,
										546534
									],
									[
										546566,
										546567
									],
									[
										546578,
										546579
									],
									[
										546594,
										546595
									],
									[
										546618,
										546619
									],
									[
										546636,
										546637
									],
									[
										546686,
										546687
									],
									[
										546691,
										546692
									],
									[
										546785,
										546786
									],
									[
										546882,
										546883
									],
									[
										546887,
										546888
									],
									[
										546992,
										546993
									],
									[
										547138,
										547139
									],
									[
										547171,
										547172
									],
									[
										547196,
										547197
									],
									[
										547201,
										547202
									],
									[
										547216,
										547217
									],
									[
										547221,
										547222
									],
									[
										547233,
										547234
									],
									[
										547242,
										547243
									],
									[
										547248,
										547249
									],
									[
										547263,
										547264
									],
									[
										547279,
										547280
									],
									[
										547280,
										547281
									],
									[
										547370,
										547371
									],
									[
										547409,
										547410
									],
									[
										547441,
										547442
									],
									[
										547511,
										547512
									],
									[
										547523,
										547524
									],
									[
										547570,
										547571
									],
									[
										547590,
										547591
									],
									[
										547615,
										547616
									],
									[
										547665,
										547666
									],
									[
										547833,
										547834
									],
									[
										547858,
										547859
									],
									[
										547862,
										547863
									],
									[
										547885,
										547886
									],
									[
										547894,
										547895
									],
									[
										547900,
										547901
									],
									[
										547915,
										547916
									],
									[
										547931,
										547932
									],
									[
										547932,
										547933
									],
									[
										548031,
										548032
									],
									[
										548041,
										548042
									],
									[
										548082,
										548083
									],
									[
										548090,
										548091
									],
									[
										548124,
										548125
									],
									[
										548127,
										548128
									],
									[
										548149,
										548150
									],
									[
										548168,
										548169
									],
									[
										548174,
										548175
									],
									[
										548215,
										548216
									],
									[
										548252,
										548253
									],
									[
										548254,
										548255
									],
									[
										548261,
										548262
									],
									[
										548267,
										548268
									],
									[
										548292,
										548293
									],
									[
										548305,
										548306
									],
									[
										548330,
										548331
									],
									[
										548359,
										548360
									],
									[
										548409,
										548410
									],
									[
										548417,
										548418
									],
									[
										548585,
										548586
									],
									[
										548608,
										548609
									],
									[
										548612,
										548613
									],
									[
										548620,
										548621
									],
									[
										548645,
										548646
									],
									[
										548654,
										548655
									],
									[
										548660,
										548661
									],
									[
										548675,
										548676
									],
									[
										548691,
										548692
									],
									[
										548692,
										548693
									],
									[
										548878,
										548879
									],
									[
										548930,
										548931
									],
									[
										548943,
										548944
									],
									[
										548959,
										548960
									],
									[
										548976,
										548977
									],
									[
										548977,
										548978
									],
									[
										548983,
										548984
									],
									[
										548996,
										548997
									],
									[
										549000,
										549001
									],
									[
										549262,
										549263
									],
									[
										549283,
										549284
									],
									[
										549337,
										549338
									],
									[
										549364,
										549365
									],
									[
										549460,
										549461
									],
									[
										549471,
										549472
									],
									[
										549480,
										549481
									],
									[
										549498,
										549499
									],
									[
										549511,
										549512
									],
									[
										549542,
										549543
									],
									[
										549589,
										549590
									],
									[
										549598,
										549599
									],
									[
										549604,
										549605
									],
									[
										549619,
										549620
									],
									[
										549635,
										549636
									],
									[
										549636,
										549637
									],
									[
										549682,
										549683
									],
									[
										549695,
										549696
									],
									[
										549712,
										549713
									],
									[
										549740,
										549741
									],
									[
										549749,
										549750
									],
									[
										549778,
										549779
									],
									[
										549786,
										549787
									],
									[
										549808,
										549809
									],
									[
										549817,
										549818
									],
									[
										549823,
										549824
									],
									[
										549840,
										549841
									],
									[
										549845,
										549846
									],
									[
										549847,
										549848
									],
									[
										549919,
										549920
									],
									[
										549975,
										549976
									],
									[
										550015,
										550016
									],
									[
										550036,
										550037
									],
									[
										550072,
										550073
									],
									[
										550137,
										550138
									],
									[
										550282,
										550283
									],
									[
										550392,
										550393
									],
									[
										550501,
										550502
									],
									[
										550558,
										550559
									],
									[
										550569,
										550570
									],
									[
										550621,
										550622
									],
									[
										550641,
										550642
									],
									[
										550646,
										550647
									],
									[
										550656,
										550657
									],
									[
										550695,
										550696
									],
									[
										550718,
										550719
									],
									[
										550775,
										550776
									],
									[
										550798,
										550799
									],
									[
										550843,
										550844
									],
									[
										550866,
										550867
									],
									[
										550915,
										550916
									],
									[
										550938,
										550939
									],
									[
										550998,
										550999
									],
									[
										551014,
										551015
									],
									[
										551060,
										551061
									],
									[
										551084,
										551085
									],
									[
										551100,
										551101
									],
									[
										551108,
										551109
									],
									[
										551146,
										551147
									],
									[
										551186,
										551187
									],
									[
										551194,
										551195
									],
									[
										551266,
										551267
									],
									[
										551299,
										551300
									],
									[
										551305,
										551306
									],
									[
										551366,
										551367
									],
									[
										551374,
										551375
									],
									[
										551385,
										551386
									],
									[
										551396,
										551397
									],
									[
										551419,
										551420
									],
									[
										551427,
										551428
									],
									[
										551440,
										551441
									],
									[
										551449,
										551450
									],
									[
										551455,
										551456
									],
									[
										551470,
										551471
									],
									[
										551486,
										551487
									],
									[
										551487,
										551488
									],
									[
										551495,
										551496
									],
									[
										551524,
										551525
									],
									[
										551533,
										551534
									],
									[
										551556,
										551557
									],
									[
										551573,
										551574
									],
									[
										551577,
										551578
									],
									[
										551585,
										551586
									],
									[
										551605,
										551606
									],
									[
										551609,
										551610
									],
									[
										551754,
										551755
									],
									[
										551771,
										551772
									],
									[
										551772,
										551773
									],
									[
										551778,
										551779
									],
									[
										551791,
										551792
									],
									[
										551795,
										551796
									],
									[
										551819,
										551820
									],
									[
										551962,
										551963
									],
									[
										551979,
										551980
									],
									[
										551980,
										551981
									],
									[
										551986,
										551987
									],
									[
										551999,
										552000
									],
									[
										552003,
										552004
									],
									[
										552027,
										552028
									],
									[
										552163,
										552164
									],
									[
										552203,
										552204
									],
									[
										552220,
										552221
									],
									[
										552221,
										552222
									],
									[
										552227,
										552228
									],
									[
										552240,
										552241
									],
									[
										552244,
										552245
									],
									[
										552268,
										552269
									],
									[
										552353,
										552354
									],
									[
										552381,
										552382
									],
									[
										552460,
										552461
									],
									[
										552476,
										552477
									],
									[
										552501,
										552502
									],
									[
										552518,
										552519
									],
									[
										552519,
										552520
									],
									[
										552525,
										552526
									],
									[
										552538,
										552539
									],
									[
										552542,
										552543
									],
									[
										552566,
										552567
									],
									[
										552637,
										552638
									],
									[
										552691,
										552692
									],
									[
										552725,
										552726
									],
									[
										552760,
										552761
									],
									[
										552780,
										552781
									],
									[
										552789,
										552790
									],
									[
										552795,
										552796
									],
									[
										552810,
										552811
									],
									[
										552826,
										552827
									],
									[
										552827,
										552828
									],
									[
										552835,
										552836
									],
									[
										552905,
										552906
									],
									[
										552927,
										552928
									],
									[
										552944,
										552945
									],
									[
										552945,
										552946
									],
									[
										552951,
										552952
									],
									[
										552964,
										552965
									],
									[
										552968,
										552969
									],
									[
										552992,
										552993
									],
									[
										553046,
										553047
									],
									[
										553064,
										553065
									],
									[
										553137,
										553138
									],
									[
										553176,
										553177
									],
									[
										553227,
										553228
									],
									[
										553258,
										553259
									],
									[
										553267,
										553268
									],
									[
										553273,
										553274
									],
									[
										553288,
										553289
									],
									[
										553304,
										553305
									],
									[
										553305,
										553306
									],
									[
										553313,
										553314
									],
									[
										553376,
										553377
									],
									[
										553378,
										553379
									],
									[
										553409,
										553410
									],
									[
										553410,
										553411
									],
									[
										553412,
										553413
									],
									[
										553425,
										553426
									],
									[
										553429,
										553430
									],
									[
										553446,
										553447
									],
									[
										553454,
										553455
									],
									[
										553495,
										553496
									],
									[
										553555,
										553556
									],
									[
										553578,
										553579
									],
									[
										553588,
										553589
									],
									[
										553776,
										553777
									],
									[
										553786,
										553787
									],
									[
										553799,
										553800
									],
									[
										553955,
										553956
									],
									[
										554002,
										554003
									],
									[
										554004,
										554005
									],
									[
										554018,
										554019
									],
									[
										554019,
										554020
									],
									[
										554025,
										554026
									],
									[
										554038,
										554039
									],
									[
										554042,
										554043
									],
									[
										554069,
										554070
									],
									[
										554102,
										554103
									],
									[
										554164,
										554165
									],
									[
										554165,
										554166
									],
									[
										554211,
										554212
									],
									[
										554215,
										554216
									],
									[
										554224,
										554225
									],
									[
										554238,
										554239
									],
									[
										554298,
										554299
									],
									[
										554307,
										554308
									],
									[
										554549,
										554550
									],
									[
										554557,
										554558
									],
									[
										554821,
										554822
									],
									[
										555020,
										555021
									],
									[
										555083,
										555084
									],
									[
										555128,
										555129
									],
									[
										555153,
										555154
									],
									[
										555187,
										555188
									],
									[
										555201,
										555202
									],
									[
										555227,
										555228
									],
									[
										555333,
										555334
									],
									[
										555354,
										555355
									],
									[
										555395,
										555396
									],
									[
										555406,
										555407
									],
									[
										555407,
										555408
									],
									[
										555421,
										555422
									],
									[
										555432,
										555433
									],
									[
										555443,
										555444
									],
									[
										555451,
										555452
									],
									[
										555486,
										555487
									],
									[
										555499,
										555500
									],
									[
										555511,
										555512
									],
									[
										555512,
										555513
									],
									[
										555529,
										555530
									],
									[
										555548,
										555549
									],
									[
										555558,
										555559
									],
									[
										555581,
										555582
									],
									[
										555666,
										555667
									],
									[
										555734,
										555735
									],
									[
										555748,
										555749
									],
									[
										555754,
										555755
									],
									[
										555908,
										555909
									],
									[
										555945,
										555946
									],
									[
										555946,
										555947
									],
									[
										555956,
										555957
									],
									[
										555986,
										555987
									],
									[
										556019,
										556020
									],
									[
										556210,
										556211
									],
									[
										556212,
										556213
									],
									[
										556228,
										556229
									],
									[
										556245,
										556246
									],
									[
										556249,
										556250
									],
									[
										556260,
										556261
									],
									[
										556313,
										556314
									],
									[
										556315,
										556316
									],
									[
										556324,
										556325
									],
									[
										556326,
										556327
									],
									[
										556393,
										556394
									],
									[
										556394,
										556395
									],
									[
										556516,
										556517
									],
									[
										556517,
										556518
									],
									[
										556531,
										556532
									],
									[
										556674,
										556675
									],
									[
										556676,
										556677
									],
									[
										556698,
										556699
									],
									[
										556700,
										556701
									],
									[
										556805,
										556806
									],
									[
										556819,
										556820
									],
									[
										556878,
										556879
									],
									[
										556944,
										556945
									],
									[
										556952,
										556953
									],
									[
										557030,
										557031
									],
									[
										557043,
										557044
									],
									[
										557079,
										557080
									],
									[
										557082,
										557083
									],
									[
										557086,
										557087
									],
									[
										557108,
										557109
									],
									[
										557161,
										557162
									],
									[
										557201,
										557202
									],
									[
										557247,
										557248
									],
									[
										557248,
										557249
									],
									[
										557289,
										557290
									],
									[
										557297,
										557298
									],
									[
										557353,
										557354
									],
									[
										557377,
										557378
									],
									[
										557396,
										557397
									],
									[
										557398,
										557399
									],
									[
										557452,
										557453
									],
									[
										557461,
										557462
									],
									[
										557538,
										557539
									],
									[
										557585,
										557586
									],
									[
										557635,
										557636
									],
									[
										557642,
										557643
									],
									[
										557651,
										557652
									],
									[
										557666,
										557667
									],
									[
										557678,
										557679
									],
									[
										557697,
										557698
									],
									[
										557715,
										557716
									],
									[
										557740,
										557741
									],
									[
										557743,
										557744
									],
									[
										557795,
										557796
									],
									[
										557826,
										557827
									],
									[
										557835,
										557836
									],
									[
										557844,
										557845
									],
									[
										557900,
										557901
									],
									[
										557905,
										557906
									],
									[
										557906,
										557907
									],
									[
										557926,
										557927
									],
									[
										557927,
										557928
									],
									[
										557942,
										557943
									],
									[
										557955,
										557956
									],
									[
										557973,
										557974
									],
									[
										558002,
										558003
									],
									[
										558015,
										558016
									],
									[
										558040,
										558041
									],
									[
										558044,
										558045
									],
									[
										558071,
										558072
									],
									[
										558075,
										558076
									],
									[
										558078,
										558079
									],
									[
										558088,
										558089
									],
									[
										558136,
										558137
									],
									[
										558148,
										558149
									],
									[
										558157,
										558158
									],
									[
										558170,
										558171
									],
									[
										558183,
										558184
									],
									[
										558265,
										558266
									],
									[
										558269,
										558270
									],
									[
										558270,
										558271
									],
									[
										558304,
										558305
									],
									[
										558326,
										558327
									],
									[
										558342,
										558343
									],
									[
										558357,
										558358
									],
									[
										558386,
										558387
									],
									[
										558393,
										558394
									],
									[
										558433,
										558434
									],
									[
										558468,
										558469
									],
									[
										558469,
										558470
									],
									[
										558480,
										558481
									],
									[
										558490,
										558491
									],
									[
										558522,
										558523
									],
									[
										558528,
										558529
									],
									[
										558604,
										558605
									],
									[
										558605,
										558606
									],
									[
										558616,
										558617
									],
									[
										558629,
										558630
									],
									[
										558637,
										558638
									],
									[
										558638,
										558639
									],
									[
										558643,
										558644
									],
									[
										558655,
										558656
									],
									[
										558680,
										558681
									],
									[
										558681,
										558682
									],
									[
										558686,
										558687
									],
									[
										558721,
										558722
									],
									[
										558747,
										558748
									],
									[
										558748,
										558749
									],
									[
										558751,
										558752
									],
									[
										558762,
										558763
									],
									[
										558790,
										558791
									],
									[
										558797,
										558798
									],
									[
										558827,
										558828
									],
									[
										558878,
										558879
									],
									[
										558902,
										558903
									],
									[
										558938,
										558939
									],
									[
										558939,
										558940
									],
									[
										559002,
										559003
									],
									[
										559135,
										559136
									],
									[
										559141,
										559142
									],
									[
										559142,
										559143
									],
									[
										559206,
										559207
									],
									[
										559224,
										559225
									],
									[
										559269,
										559270
									],
									[
										559329,
										559330
									],
									[
										559398,
										559399
									],
									[
										559411,
										559412
									],
									[
										559472,
										559473
									],
									[
										559635,
										559636
									],
									[
										559681,
										559682
									],
									[
										559685,
										559686
									],
									[
										559739,
										559740
									],
									[
										559789,
										559790
									],
									[
										559876,
										559877
									],
									[
										559917,
										559918
									],
									[
										559929,
										559930
									],
									[
										559950,
										559951
									],
									[
										559971,
										559972
									],
									[
										560086,
										560087
									],
									[
										560102,
										560103
									],
									[
										560150,
										560151
									],
									[
										560157,
										560158
									],
									[
										560165,
										560166
									],
									[
										560227,
										560228
									],
									[
										560368,
										560369
									],
									[
										560416,
										560417
									],
									[
										560556,
										560557
									],
									[
										560602,
										560603
									],
									[
										560624,
										560625
									],
									[
										560626,
										560627
									],
									[
										560651,
										560652
									],
									[
										560675,
										560676
									],
									[
										560690,
										560691
									],
									[
										560692,
										560693
									],
									[
										560718,
										560719
									],
									[
										560752,
										560753
									],
									[
										560817,
										560818
									],
									[
										560827,
										560828
									],
									[
										560857,
										560858
									],
									[
										560907,
										560908
									],
									[
										560995,
										560996
									],
									[
										561005,
										561006
									],
									[
										561095,
										561096
									],
									[
										561129,
										561130
									],
									[
										561130,
										561131
									],
									[
										561200,
										561201
									],
									[
										561335,
										561336
									],
									[
										561353,
										561354
									],
									[
										561403,
										561404
									],
									[
										561472,
										561473
									],
									[
										561485,
										561486
									],
									[
										561558,
										561559
									],
									[
										561581,
										561582
									],
									[
										561629,
										561630
									],
									[
										561645,
										561646
									],
									[
										561694,
										561695
									],
									[
										561737,
										561738
									],
									[
										561761,
										561762
									],
									[
										561872,
										561873
									],
									[
										561886,
										561887
									],
									[
										561896,
										561897
									],
									[
										562024,
										562025
									],
									[
										562120,
										562121
									],
									[
										562166,
										562167
									],
									[
										562170,
										562171
									],
									[
										562224,
										562225
									],
									[
										562267,
										562268
									],
									[
										562373,
										562374
									],
									[
										562414,
										562415
									],
									[
										562426,
										562427
									],
									[
										562447,
										562448
									],
									[
										562468,
										562469
									],
									[
										562583,
										562584
									],
									[
										562599,
										562600
									],
									[
										562647,
										562648
									],
									[
										562661,
										562662
									],
									[
										562671,
										562672
									],
									[
										562746,
										562747
									],
									[
										562895,
										562896
									],
									[
										562941,
										562942
									],
									[
										562963,
										562964
									],
									[
										562965,
										562966
									],
									[
										562990,
										562991
									],
									[
										563014,
										563015
									],
									[
										563029,
										563030
									],
									[
										563031,
										563032
									],
									[
										563057,
										563058
									],
									[
										563091,
										563092
									],
									[
										563211,
										563212
									],
									[
										563247,
										563248
									],
									[
										563274,
										563275
									],
									[
										563396,
										563397
									],
									[
										563479,
										563480
									],
									[
										563489,
										563490
									],
									[
										563519,
										563520
									],
									[
										563576,
										563577
									],
									[
										563669,
										563670
									],
									[
										563691,
										563692
									],
									[
										563701,
										563702
									],
									[
										563769,
										563770
									],
									[
										563770,
										563771
									],
									[
										563789,
										563790
									],
									[
										563814,
										563815
									],
									[
										563842,
										563843
									],
									[
										563843,
										563844
									],
									[
										563906,
										563907
									],
									[
										563924,
										563925
									],
									[
										564137,
										564138
									],
									[
										564157,
										564158
									],
									[
										564197,
										564198
									],
									[
										564373,
										564374
									],
									[
										564533,
										564534
									],
									[
										564569,
										564570
									],
									[
										564596,
										564597
									],
									[
										564718,
										564719
									],
									[
										564770,
										564771
									],
									[
										564806,
										564807
									],
									[
										564815,
										564816
									],
									[
										564898,
										564899
									],
									[
										564978,
										564979
									],
									[
										564988,
										564989
									],
									[
										565018,
										565019
									],
									[
										565062,
										565063
									],
									[
										565130,
										565131
									],
									[
										565185,
										565186
									],
									[
										565207,
										565208
									],
									[
										565217,
										565218
									],
									[
										565236,
										565237
									],
									[
										565251,
										565252
									],
									[
										565373,
										565374
									],
									[
										565375,
										565376
									],
									[
										565390,
										565391
									],
									[
										565433,
										565434
									],
									[
										565461,
										565462
									],
									[
										565469,
										565470
									],
									[
										565477,
										565478
									],
									[
										565479,
										565480
									],
									[
										565529,
										565530
									],
									[
										565532,
										565533
									],
									[
										565540,
										565541
									],
									[
										565553,
										565554
									],
									[
										565574,
										565575
									],
									[
										565593,
										565594
									],
									[
										565595,
										565596
									],
									[
										565615,
										565616
									],
									[
										565633,
										565634
									],
									[
										565648,
										565649
									],
									[
										565651,
										565652
									],
									[
										565711,
										565712
									],
									[
										565717,
										565718
									],
									[
										565718,
										565719
									],
									[
										565778,
										565779
									],
									[
										565780,
										565781
									],
									[
										565790,
										565791
									],
									[
										565791,
										565792
									],
									[
										565793,
										565794
									],
									[
										565798,
										565799
									],
									[
										565823,
										565824
									],
									[
										565824,
										565825
									],
									[
										565836,
										565837
									],
									[
										565840,
										565841
									],
									[
										565842,
										565843
									],
									[
										565892,
										565893
									],
									[
										565894,
										565895
									],
									[
										565902,
										565903
									],
									[
										565923,
										565924
									],
									[
										565925,
										565926
									],
									[
										565932,
										565933
									],
									[
										565944,
										565945
									],
									[
										565946,
										565947
									],
									[
										565953,
										565954
									],
									[
										566015,
										566016
									],
									[
										566017,
										566018
									],
									[
										566028,
										566029
									],
									[
										566059,
										566060
									],
									[
										566061,
										566062
									],
									[
										566071,
										566072
									],
									[
										566093,
										566094
									],
									[
										566095,
										566096
									],
									[
										566105,
										566106
									],
									[
										566162,
										566163
									],
									[
										566164,
										566165
									],
									[
										566175,
										566176
									],
									[
										566203,
										566204
									],
									[
										566205,
										566206
									],
									[
										566215,
										566216
									],
									[
										566234,
										566235
									],
									[
										566236,
										566237
									],
									[
										566246,
										566247
									],
									[
										566294,
										566295
									],
									[
										566296,
										566297
									],
									[
										566320,
										566321
									],
									[
										566322,
										566323
									],
									[
										566620,
										566621
									],
									[
										566623,
										566624
									],
									[
										566642,
										566643
									],
									[
										566650,
										566651
									],
									[
										566668,
										566669
									],
									[
										566698,
										566699
									],
									[
										566711,
										566712
									],
									[
										566739,
										566740
									],
									[
										566778,
										566779
									],
									[
										566780,
										566781
									],
									[
										566788,
										566789
									],
									[
										566816,
										566817
									],
									[
										566818,
										566819
									],
									[
										566825,
										566826
									],
									[
										566837,
										566838
									],
									[
										566839,
										566840
									],
									[
										566846,
										566847
									],
									[
										566869,
										566870
									],
									[
										566871,
										566872
									],
									[
										566891,
										566892
									],
									[
										566910,
										566911
									],
									[
										566939,
										566940
									],
									[
										566968,
										566969
									],
									[
										567024,
										567025
									],
									[
										567039,
										567040
									],
									[
										567068,
										567069
									],
									[
										567080,
										567081
									],
									[
										567101,
										567102
									],
									[
										567103,
										567104
									],
									[
										567110,
										567111
									],
									[
										567116,
										567117
									],
									[
										567127,
										567128
									],
									[
										567139,
										567140
									],
									[
										567150,
										567151
									],
									[
										567153,
										567154
									],
									[
										567158,
										567159
									],
									[
										567177,
										567178
									],
									[
										567178,
										567179
									],
									[
										567189,
										567190
									],
									[
										567191,
										567192
									],
									[
										567198,
										567199
									],
									[
										567204,
										567205
									],
									[
										567265,
										567266
									],
									[
										567268,
										567269
									],
									[
										567283,
										567284
									],
									[
										567294,
										567295
									],
									[
										567296,
										567297
									],
									[
										567303,
										567304
									],
									[
										567320,
										567321
									],
									[
										567324,
										567325
									],
									[
										567355,
										567356
									],
									[
										567357,
										567358
									],
									[
										567364,
										567365
									],
									[
										567369,
										567370
									],
									[
										567372,
										567373
									],
									[
										567389,
										567390
									],
									[
										567393,
										567394
									],
									[
										567456,
										567457
									],
									[
										567457,
										567458
									],
									[
										567462,
										567463
									],
									[
										567464,
										567465
									],
									[
										567471,
										567472
									],
									[
										567533,
										567534
									],
									[
										567554,
										567555
									],
									[
										567596,
										567597
									],
									[
										567652,
										567653
									],
									[
										567673,
										567674
									],
									[
										567735,
										567736
									],
									[
										567755,
										567756
									],
									[
										567759,
										567760
									],
									[
										567812,
										567813
									],
									[
										567822,
										567823
									],
									[
										567829,
										567830
									],
									[
										567842,
										567843
									],
									[
										567903,
										567904
									],
									[
										567924,
										567925
									],
									[
										567986,
										567987
									],
									[
										568006,
										568007
									],
									[
										568010,
										568011
									],
									[
										568063,
										568064
									],
									[
										568073,
										568074
									],
									[
										568080,
										568081
									],
									[
										568086,
										568087
									],
									[
										568088,
										568089
									],
									[
										568095,
										568096
									],
									[
										568098,
										568099
									],
									[
										568159,
										568160
									],
									[
										568180,
										568181
									],
									[
										568206,
										568207
									],
									[
										568241,
										568242
									],
									[
										568277,
										568278
									],
									[
										568353,
										568354
									],
									[
										568375,
										568376
									],
									[
										568381,
										568382
									],
									[
										568383,
										568384
									],
									[
										568390,
										568391
									],
									[
										568393,
										568394
									],
									[
										568439,
										568440
									],
									[
										568461,
										568462
									],
									[
										568474,
										568475
									],
									[
										568520,
										568521
									],
									[
										568542,
										568543
									],
									[
										568548,
										568549
									],
									[
										568550,
										568551
									],
									[
										568557,
										568558
									],
									[
										568560,
										568561
									],
									[
										568606,
										568607
									],
									[
										568628,
										568629
									],
									[
										568641,
										568642
									],
									[
										568689,
										568690
									],
									[
										568725,
										568726
									],
									[
										568761,
										568762
									],
									[
										568777,
										568778
									],
									[
										568816,
										568817
									],
									[
										568856,
										568857
									],
									[
										568868,
										568869
									],
									[
										568882,
										568883
									],
									[
										568894,
										568895
									],
									[
										568896,
										568897
									],
									[
										568913,
										568914
									],
									[
										568920,
										568921
									],
									[
										568928,
										568929
									],
									[
										568945,
										568946
									],
									[
										569013,
										569014
									],
									[
										569074,
										569075
									],
									[
										569161,
										569162
									],
									[
										569241,
										569242
									],
									[
										569423,
										569424
									],
									[
										569445,
										569446
									],
									[
										569486,
										569487
									],
									[
										569531,
										569532
									],
									[
										569547,
										569548
									],
									[
										569609,
										569610
									],
									[
										569621,
										569622
									],
									[
										569622,
										569623
									],
									[
										569791,
										569792
									],
									[
										569818,
										569819
									],
									[
										569836,
										569837
									],
									[
										569866,
										569867
									],
									[
										569886,
										569887
									],
									[
										569939,
										569940
									],
									[
										569955,
										569956
									],
									[
										569986,
										569987
									],
									[
										570007,
										570008
									],
									[
										570020,
										570021
									],
									[
										570047,
										570048
									],
									[
										570058,
										570059
									],
									[
										570097,
										570098
									],
									[
										570131,
										570132
									],
									[
										570133,
										570134
									],
									[
										570140,
										570141
									],
									[
										570149,
										570150
									],
									[
										570158,
										570159
									],
									[
										570164,
										570165
									],
									[
										570179,
										570180
									],
									[
										570195,
										570196
									],
									[
										570196,
										570197
									],
									[
										570207,
										570208
									],
									[
										570209,
										570210
									],
									[
										570217,
										570218
									],
									[
										570345,
										570346
									],
									[
										570347,
										570348
									],
									[
										570354,
										570355
									],
									[
										570365,
										570366
									],
									[
										570367,
										570368
									],
									[
										570454,
										570455
									],
									[
										570456,
										570457
									],
									[
										570523,
										570524
									],
									[
										570525,
										570526
									],
									[
										570536,
										570537
									],
									[
										570574,
										570575
									],
									[
										570576,
										570577
									],
									[
										570586,
										570587
									],
									[
										570608,
										570609
									],
									[
										570610,
										570611
									],
									[
										570620,
										570621
									],
									[
										570650,
										570651
									],
									[
										570665,
										570666
									],
									[
										570667,
										570668
									],
									[
										570678,
										570679
									],
									[
										570683,
										570684
									],
									[
										570684,
										570685
									],
									[
										570689,
										570690
									],
									[
										570702,
										570703
									],
									[
										570722,
										570723
									],
									[
										570735,
										570736
									],
									[
										570736,
										570737
									],
									[
										570761,
										570762
									],
									[
										570770,
										570771
									],
									[
										570777,
										570778
									],
									[
										570788,
										570789
									],
									[
										570794,
										570795
									],
									[
										570835,
										570836
									],
									[
										570894,
										570895
									],
									[
										570897,
										570898
									],
									[
										570912,
										570913
									],
									[
										570934,
										570935
									],
									[
										570936,
										570937
									],
									[
										570946,
										570947
									],
									[
										570962,
										570963
									],
									[
										570966,
										570967
									],
									[
										571008,
										571009
									],
									[
										571010,
										571011
									],
									[
										571020,
										571021
									],
									[
										571024,
										571025
									],
									[
										571027,
										571028
									],
									[
										571044,
										571045
									],
									[
										571048,
										571049
									],
									[
										571111,
										571112
									],
									[
										571112,
										571113
									],
									[
										571128,
										571129
									],
									[
										571130,
										571131
									],
									[
										571140,
										571141
									],
									[
										571180,
										571181
									],
									[
										571182,
										571183
									],
									[
										571205,
										571206
									],
									[
										571207,
										571208
									],
									[
										571217,
										571218
									],
									[
										571238,
										571239
									],
									[
										571240,
										571241
									],
									[
										571264,
										571265
									],
									[
										571274,
										571275
									],
									[
										571285,
										571286
									],
									[
										571292,
										571293
									],
									[
										571306,
										571307
									],
									[
										571345,
										571346
									],
									[
										571369,
										571370
									],
									[
										571389,
										571390
									],
									[
										571395,
										571396
									],
									[
										571397,
										571398
									],
									[
										571403,
										571404
									],
									[
										571410,
										571411
									],
									[
										571458,
										571459
									],
									[
										571460,
										571461
									],
									[
										571469,
										571470
									],
									[
										571512,
										571513
									],
									[
										571576,
										571577
									],
									[
										571621,
										571622
									],
									[
										571623,
										571624
									],
									[
										571633,
										571634
									],
									[
										571641,
										571642
									],
									[
										571650,
										571651
									],
									[
										571656,
										571657
									],
									[
										571671,
										571672
									],
									[
										571687,
										571688
									],
									[
										571688,
										571689
									],
									[
										571712,
										571713
									],
									[
										571714,
										571715
									],
									[
										571725,
										571726
									],
									[
										571802,
										571803
									],
									[
										571804,
										571805
									],
									[
										571815,
										571816
									],
									[
										571850,
										571851
									],
									[
										571852,
										571853
									],
									[
										571862,
										571863
									],
									[
										571881,
										571882
									],
									[
										571883,
										571884
									],
									[
										571893,
										571894
									],
									[
										571922,
										571923
									],
									[
										571923,
										571924
									],
									[
										571933,
										571934
									],
									[
										571957,
										571958
									],
									[
										571958,
										571959
									],
									[
										571974,
										571975
									],
									[
										571976,
										571977
									],
									[
										571987,
										571988
									],
									[
										572011,
										572012
									],
									[
										572016,
										572017
									],
									[
										572053,
										572054
									],
									[
										572115,
										572116
									],
									[
										572118,
										572119
									],
									[
										572133,
										572134
									],
									[
										572152,
										572153
									],
									[
										572154,
										572155
									],
									[
										572164,
										572165
									],
									[
										572180,
										572181
									],
									[
										572184,
										572185
									],
									[
										572226,
										572227
									],
									[
										572228,
										572229
									],
									[
										572238,
										572239
									],
									[
										572242,
										572243
									],
									[
										572245,
										572246
									],
									[
										572262,
										572263
									],
									[
										572266,
										572267
									],
									[
										572336,
										572337
									],
									[
										572337,
										572338
									],
									[
										572350,
										572351
									],
									[
										572352,
										572353
									],
									[
										572362,
										572363
									],
									[
										572402,
										572403
									],
									[
										572404,
										572405
									],
									[
										572424,
										572425
									],
									[
										572426,
										572427
									],
									[
										572436,
										572437
									],
									[
										572454,
										572455
									],
									[
										572456,
										572457
									],
									[
										572480,
										572481
									],
									[
										572490,
										572491
									],
									[
										572501,
										572502
									],
									[
										572508,
										572509
									],
									[
										572560,
										572561
									],
									[
										572584,
										572585
									],
									[
										572604,
										572605
									],
									[
										572610,
										572611
									],
									[
										572612,
										572613
									],
									[
										572618,
										572619
									],
									[
										572625,
										572626
									],
									[
										572670,
										572671
									],
									[
										572672,
										572673
									],
									[
										572681,
										572682
									],
									[
										572722,
										572723
									],
									[
										572764,
										572765
									],
									[
										572766,
										572767
									],
									[
										572776,
										572777
									],
									[
										572784,
										572785
									],
									[
										572793,
										572794
									],
									[
										572799,
										572800
									],
									[
										572814,
										572815
									],
									[
										572827,
										572828
									],
									[
										572852,
										572853
									],
									[
										572854,
										572855
									],
									[
										572865,
										572866
									],
									[
										572933,
										572934
									],
									[
										572935,
										572936
									],
									[
										572966,
										572967
									],
									[
										572968,
										572969
									],
									[
										573003,
										573004
									],
									[
										573005,
										573006
									],
									[
										573012,
										573013
									],
									[
										573027,
										573028
									],
									[
										573039,
										573040
									],
									[
										573040,
										573041
									],
									[
										573057,
										573058
									],
									[
										573058,
										573059
									],
									[
										573073,
										573074
									],
									[
										573092,
										573093
									],
									[
										573117,
										573118
									],
									[
										573122,
										573123
									],
									[
										573123,
										573124
									],
									[
										573234,
										573235
									],
									[
										573236,
										573237
									],
									[
										573246,
										573247
									],
									[
										573263,
										573264
									],
									[
										573264,
										573265
									],
									[
										573269,
										573270
									],
									[
										573271,
										573272
									],
									[
										573329,
										573330
									],
									[
										573330,
										573331
									],
									[
										573335,
										573336
									],
									[
										573337,
										573338
									],
									[
										573355,
										573356
									],
									[
										573357,
										573358
									],
									[
										573364,
										573365
									],
									[
										573416,
										573417
									],
									[
										573418,
										573419
									],
									[
										573432,
										573433
									],
									[
										573470,
										573471
									],
									[
										573472,
										573473
									],
									[
										573517,
										573518
									],
									[
										573529,
										573530
									],
									[
										573531,
										573532
									],
									[
										573575,
										573576
									],
									[
										573606,
										573607
									],
									[
										573620,
										573621
									],
									[
										573646,
										573647
									],
									[
										573670,
										573671
									],
									[
										573688,
										573689
									],
									[
										573733,
										573734
									],
									[
										573739,
										573740
									],
									[
										573741,
										573742
									],
									[
										573757,
										573758
									],
									[
										573803,
										573804
									],
									[
										573815,
										573816
									],
									[
										573817,
										573818
									],
									[
										573833,
										573834
									],
									[
										573835,
										573836
									],
									[
										573854,
										573855
									],
									[
										573856,
										573857
									],
									[
										573863,
										573864
									],
									[
										573894,
										573895
									],
									[
										573908,
										573909
									],
									[
										573934,
										573935
									],
									[
										573958,
										573959
									],
									[
										573976,
										573977
									],
									[
										574006,
										574007
									],
									[
										574008,
										574009
									],
									[
										574017,
										574018
									],
									[
										574023,
										574024
									],
									[
										574025,
										574026
									],
									[
										574084,
										574085
									],
									[
										574092,
										574093
									],
									[
										574099,
										574100
									],
									[
										574100,
										574101
									],
									[
										574130,
										574131
									],
									[
										574132,
										574133
									],
									[
										574159,
										574160
									],
									[
										574168,
										574169
									],
									[
										574170,
										574171
									],
									[
										574179,
										574180
									],
									[
										574225,
										574226
									],
									[
										574230,
										574231
									],
									[
										574231,
										574232
									],
									[
										574246,
										574247
									],
									[
										574269,
										574270
									],
									[
										574284,
										574285
									],
									[
										574288,
										574289
									],
									[
										574309,
										574310
									],
									[
										574311,
										574312
									],
									[
										574343,
										574344
									],
									[
										574345,
										574346
									],
									[
										574365,
										574366
									],
									[
										574371,
										574372
									],
									[
										574373,
										574374
									],
									[
										574423,
										574424
									],
									[
										574451,
										574452
									],
									[
										574453,
										574454
									],
									[
										574473,
										574474
									],
									[
										574479,
										574480
									],
									[
										574481,
										574482
									],
									[
										574487,
										574488
									],
									[
										574541,
										574542
									],
									[
										574557,
										574558
									],
									[
										574560,
										574561
									],
									[
										574570,
										574571
									],
									[
										574572,
										574573
									],
									[
										574580,
										574581
									],
									[
										574594,
										574595
									],
									[
										574601,
										574602
									],
									[
										574626,
										574627
									],
									[
										574640,
										574641
									],
									[
										574645,
										574646
									],
									[
										574646,
										574647
									],
									[
										574650,
										574651
									],
									[
										574670,
										574671
									],
									[
										574673,
										574674
									],
									[
										574682,
										574683
									],
									[
										574721,
										574722
									],
									[
										574743,
										574744
									],
									[
										574745,
										574746
									],
									[
										574752,
										574753
									],
									[
										574786,
										574787
									],
									[
										574788,
										574789
									],
									[
										574833,
										574834
									],
									[
										574867,
										574868
									],
									[
										574869,
										574870
									],
									[
										574881,
										574882
									],
									[
										574890,
										574891
									],
									[
										574896,
										574897
									],
									[
										574911,
										574912
									],
									[
										574927,
										574928
									],
									[
										574928,
										574929
									],
									[
										574939,
										574940
									],
									[
										574941,
										574942
									],
									[
										575075,
										575076
									],
									[
										575077,
										575078
									],
									[
										575084,
										575085
									],
									[
										575096,
										575097
									],
									[
										575103,
										575104
									],
									[
										575111,
										575112
									],
									[
										575167,
										575168
									],
									[
										575168,
										575169
									],
									[
										575189,
										575190
									],
									[
										575191,
										575192
									],
									[
										575198,
										575199
									],
									[
										575264,
										575265
									],
									[
										575346,
										575347
									],
									[
										575400,
										575401
									],
									[
										575431,
										575432
									],
									[
										575445,
										575446
									],
									[
										575471,
										575472
									],
									[
										575495,
										575496
									],
									[
										575501,
										575502
									],
									[
										575546,
										575547
									],
									[
										575566,
										575567
									],
									[
										575604,
										575605
									],
									[
										575630,
										575631
									],
									[
										575632,
										575633
									],
									[
										575639,
										575640
									],
									[
										575655,
										575656
									],
									[
										575657,
										575658
									],
									[
										575664,
										575665
									],
									[
										575695,
										575696
									],
									[
										575709,
										575710
									],
									[
										575735,
										575736
									],
									[
										575759,
										575760
									],
									[
										575777,
										575778
									],
									[
										575822,
										575823
									],
									[
										575835,
										575836
									],
									[
										575841,
										575842
									],
									[
										575843,
										575844
									],
									[
										575850,
										575851
									],
									[
										575853,
										575854
									],
									[
										575899,
										575900
									],
									[
										575900,
										575901
									],
									[
										575907,
										575908
									],
									[
										575925,
										575926
									],
									[
										575940,
										575941
									],
									[
										575979,
										575980
									],
									[
										575980,
										575981
									],
									[
										576021,
										576022
									],
									[
										576065,
										576066
									],
									[
										576074,
										576075
									],
									[
										576080,
										576081
									],
									[
										576095,
										576096
									],
									[
										576111,
										576112
									],
									[
										576112,
										576113
									],
									[
										576288,
										576289
									],
									[
										576291,
										576292
									],
									[
										576296,
										576297
									],
									[
										576315,
										576316
									],
									[
										576328,
										576329
									],
									[
										576330,
										576331
									],
									[
										576347,
										576348
									],
									[
										576391,
										576392
									],
									[
										576397,
										576398
									],
									[
										576427,
										576428
									],
									[
										576464,
										576465
									],
									[
										576484,
										576485
									],
									[
										576488,
										576489
									],
									[
										576577,
										576578
									],
									[
										576578,
										576579
									],
									[
										576652,
										576653
									],
									[
										576705,
										576706
									],
									[
										576717,
										576718
									],
									[
										576729,
										576730
									],
									[
										576791,
										576792
									],
									[
										576794,
										576795
									],
									[
										576795,
										576796
									],
									[
										576869,
										576870
									],
									[
										577019,
										577020
									],
									[
										577068,
										577069
									],
									[
										577124,
										577125
									],
									[
										577259,
										577260
									],
									[
										577261,
										577262
									],
									[
										577326,
										577327
									],
									[
										577407,
										577408
									],
									[
										577461,
										577462
									],
									[
										577470,
										577471
									],
									[
										577476,
										577477
									],
									[
										577491,
										577492
									],
									[
										577507,
										577508
									],
									[
										577508,
										577509
									],
									[
										577676,
										577677
									],
									[
										577680,
										577681
									],
									[
										577759,
										577760
									],
									[
										577765,
										577766
									],
									[
										577796,
										577797
									],
									[
										577798,
										577799
									],
									[
										577805,
										577806
									],
									[
										577809,
										577810
									],
									[
										577916,
										577917
									],
									[
										577920,
										577921
									],
									[
										577922,
										577923
									],
									[
										577948,
										577949
									],
									[
										577959,
										577960
									],
									[
										577985,
										577986
									],
									[
										577987,
										577988
									],
									[
										577994,
										577995
									],
									[
										578061,
										578062
									],
									[
										578077,
										578078
									],
									[
										578102,
										578103
									],
									[
										578169,
										578170
									],
									[
										578170,
										578171
									],
									[
										578217,
										578218
									],
									[
										578319,
										578320
									],
									[
										578324,
										578325
									],
									[
										578359,
										578360
									],
									[
										578398,
										578399
									],
									[
										578408,
										578409
									],
									[
										578409,
										578410
									],
									[
										578414,
										578415
									],
									[
										578425,
										578426
									],
									[
										578441,
										578442
									],
									[
										578442,
										578443
									],
									[
										578452,
										578453
									],
									[
										578495,
										578496
									],
									[
										578522,
										578523
									],
									[
										578547,
										578548
									],
									[
										578585,
										578586
									],
									[
										578604,
										578605
									],
									[
										578625,
										578626
									],
									[
										578630,
										578631
									],
									[
										578678,
										578679
									],
									[
										578698,
										578699
									],
									[
										578743,
										578744
									],
									[
										578756,
										578757
									],
									[
										578759,
										578760
									],
									[
										578775,
										578776
									],
									[
										578776,
										578777
									],
									[
										578782,
										578783
									],
									[
										578795,
										578796
									],
									[
										578799,
										578800
									],
									[
										578830,
										578831
									],
									[
										578834,
										578835
									],
									[
										578854,
										578855
									],
									[
										578869,
										578870
									],
									[
										578873,
										578874
									],
									[
										578884,
										578885
									],
									[
										578885,
										578886
									],
									[
										578890,
										578891
									],
									[
										578937,
										578938
									],
									[
										578964,
										578965
									],
									[
										579014,
										579015
									],
									[
										579030,
										579031
									],
									[
										579052,
										579053
									],
									[
										579066,
										579067
									],
									[
										579104,
										579105
									],
									[
										579107,
										579108
									],
									[
										579126,
										579127
									],
									[
										579134,
										579135
									],
									[
										579152,
										579153
									],
									[
										579182,
										579183
									],
									[
										579195,
										579196
									],
									[
										579223,
										579224
									],
									[
										579266,
										579267
									],
									[
										579300,
										579301
									],
									[
										579323,
										579324
									],
									[
										579357,
										579358
									],
									[
										579369,
										579370
									],
									[
										579378,
										579379
									],
									[
										579384,
										579385
									],
									[
										579399,
										579400
									],
									[
										579415,
										579416
									],
									[
										579416,
										579417
									],
									[
										579431,
										579432
									],
									[
										579503,
										579504
									],
									[
										579504,
										579505
									],
									[
										579517,
										579518
									],
									[
										579561,
										579562
									],
									[
										579579,
										579580
									],
									[
										579604,
										579605
									],
									[
										579672,
										579673
									],
									[
										579716,
										579717
									],
									[
										579729,
										579730
									],
									[
										579761,
										579762
									],
									[
										579769,
										579770
									],
									[
										579794,
										579795
									],
									[
										579805,
										579806
									],
									[
										579806,
										579807
									],
									[
										579818,
										579819
									],
									[
										579820,
										579821
									],
									[
										579844,
										579845
									],
									[
										579857,
										579858
									],
									[
										579931,
										579932
									],
									[
										579949,
										579950
									],
									[
										579957,
										579958
									],
									[
										579983,
										579984
									],
									[
										579984,
										579985
									],
									[
										580010,
										580011
									],
									[
										580016,
										580017
									],
									[
										580115,
										580116
									],
									[
										580126,
										580127
									],
									[
										580127,
										580128
									],
									[
										580150,
										580151
									],
									[
										580160,
										580161
									],
									[
										580191,
										580192
									],
									[
										580192,
										580193
									],
									[
										580312,
										580313
									],
									[
										580328,
										580329
									],
									[
										580357,
										580358
									],
									[
										580371,
										580372
									],
									[
										580392,
										580393
									],
									[
										580416,
										580417
									],
									[
										580440,
										580441
									],
									[
										580451,
										580452
									],
									[
										580462,
										580463
									],
									[
										580471,
										580472
									],
									[
										580473,
										580474
									],
									[
										580496,
										580497
									],
									[
										580517,
										580518
									],
									[
										580536,
										580537
									],
									[
										580621,
										580622
									],
									[
										580622,
										580623
									],
									[
										580630,
										580631
									],
									[
										580644,
										580645
									],
									[
										580683,
										580684
									],
									[
										580697,
										580698
									],
									[
										580715,
										580716
									],
									[
										580740,
										580741
									],
									[
										580789,
										580790
									],
									[
										580852,
										580853
									],
									[
										580857,
										580858
									],
									[
										580994,
										580995
									],
									[
										581008,
										581009
									],
									[
										581014,
										581015
									],
									[
										581098,
										581099
									],
									[
										581105,
										581106
									],
									[
										581215,
										581216
									],
									[
										581248,
										581249
									],
									[
										581257,
										581258
									],
									[
										581271,
										581272
									],
									[
										581274,
										581275
									],
									[
										581286,
										581287
									],
									[
										581305,
										581306
									],
									[
										581318,
										581319
									],
									[
										581322,
										581323
									],
									[
										581375,
										581376
									],
									[
										581404,
										581405
									],
									[
										581460,
										581461
									],
									[
										581485,
										581486
									],
									[
										581557,
										581558
									],
									[
										581593,
										581594
									],
									[
										581640,
										581641
									],
									[
										581664,
										581665
									],
									[
										581673,
										581674
									],
									[
										581679,
										581680
									],
									[
										581694,
										581695
									],
									[
										581710,
										581711
									],
									[
										581711,
										581712
									],
									[
										581719,
										581720
									],
									[
										581812,
										581813
									],
									[
										581821,
										581822
									],
									[
										581830,
										581831
									],
									[
										581841,
										581842
									],
									[
										581865,
										581866
									],
									[
										581931,
										581932
									],
									[
										581951,
										581952
									],
									[
										581984,
										581985
									],
									[
										581992,
										581993
									],
									[
										582009,
										582010
									],
									[
										582016,
										582017
									],
									[
										582072,
										582073
									],
									[
										582092,
										582093
									],
									[
										582113,
										582114
									],
									[
										582121,
										582122
									],
									[
										582180,
										582181
									],
									[
										582212,
										582213
									],
									[
										582240,
										582241
									],
									[
										582243,
										582244
									],
									[
										582262,
										582263
									],
									[
										582362,
										582363
									],
									[
										582371,
										582372
									],
									[
										582380,
										582381
									],
									[
										582391,
										582392
									],
									[
										582416,
										582417
									],
									[
										582425,
										582426
									],
									[
										582434,
										582435
									],
									[
										582452,
										582453
									],
									[
										582485,
										582486
									],
									[
										582505,
										582506
									],
									[
										582509,
										582510
									],
									[
										582533,
										582534
									],
									[
										582608,
										582609
									],
									[
										582637,
										582638
									],
									[
										582645,
										582646
									],
									[
										582695,
										582696
									],
									[
										582722,
										582723
									],
									[
										582730,
										582731
									],
									[
										582842,
										582843
									],
									[
										582848,
										582849
									],
									[
										582856,
										582857
									],
									[
										582875,
										582876
									],
									[
										582885,
										582886
									],
									[
										582887,
										582888
									],
									[
										582968,
										582969
									],
									[
										582969,
										582970
									],
									[
										582971,
										582972
									],
									[
										582984,
										582985
									],
									[
										582988,
										582989
									],
									[
										583030,
										583031
									],
									[
										583057,
										583058
									],
									[
										583063,
										583064
									],
									[
										583092,
										583093
									],
									[
										583096,
										583097
									],
									[
										583123,
										583124
									],
									[
										583124,
										583125
									],
									[
										583327,
										583328
									],
									[
										583354,
										583355
									],
									[
										583525,
										583526
									],
									[
										583537,
										583538
									],
									[
										583560,
										583561
									],
									[
										583596,
										583597
									],
									[
										583601,
										583602
									],
									[
										583603,
										583604
									],
									[
										583613,
										583614
									],
									[
										583614,
										583615
									],
									[
										583619,
										583620
									],
									[
										583623,
										583624
									],
									[
										583712,
										583713
									],
									[
										583726,
										583727
									],
									[
										583734,
										583735
									],
									[
										583871,
										583872
									],
									[
										583878,
										583879
									],
									[
										583880,
										583881
									],
									[
										583905,
										583906
									],
									[
										583906,
										583907
									],
									[
										583908,
										583909
									],
									[
										583921,
										583922
									],
									[
										583925,
										583926
									],
									[
										583951,
										583952
									],
									[
										584027,
										584028
									],
									[
										584081,
										584082
									],
									[
										584234,
										584235
									],
									[
										584268,
										584269
									],
									[
										584321,
										584322
									],
									[
										584338,
										584339
									],
									[
										584345,
										584346
									],
									[
										584347,
										584348
									],
									[
										584372,
										584373
									],
									[
										584373,
										584374
									],
									[
										584375,
										584376
									],
									[
										584388,
										584389
									],
									[
										584392,
										584393
									],
									[
										584418,
										584419
									],
									[
										584458,
										584459
									],
									[
										584459,
										584460
									],
									[
										584481,
										584482
									],
									[
										584693,
										584694
									],
									[
										584700,
										584701
									],
									[
										584702,
										584703
									],
									[
										584727,
										584728
									],
									[
										584728,
										584729
									],
									[
										584730,
										584731
									],
									[
										584743,
										584744
									],
									[
										584747,
										584748
									],
									[
										584773,
										584774
									],
									[
										584813,
										584814
									],
									[
										584814,
										584815
									],
									[
										584881,
										584882
									],
									[
										585117,
										585118
									],
									[
										585142,
										585143
									],
									[
										585151,
										585152
									],
									[
										585152,
										585153
									],
									[
										585165,
										585166
									],
									[
										585184,
										585185
									],
									[
										585189,
										585190
									],
									[
										585193,
										585194
									],
									[
										585213,
										585214
									],
									[
										585214,
										585215
									],
									[
										585220,
										585221
									],
									[
										585233,
										585234
									],
									[
										585237,
										585238
									],
									[
										585267,
										585268
									],
									[
										585271,
										585272
									],
									[
										585281,
										585282
									],
									[
										585318,
										585319
									],
									[
										585675,
										585676
									],
									[
										585680,
										585681
									],
									[
										585684,
										585685
									],
									[
										585708,
										585709
									],
									[
										585713,
										585714
									],
									[
										585717,
										585718
									],
									[
										585764,
										585765
									],
									[
										585800,
										585801
									],
									[
										585864,
										585865
									],
									[
										585877,
										585878
									],
									[
										585909,
										585910
									],
									[
										585920,
										585921
									],
									[
										585981,
										585982
									],
									[
										585991,
										585992
									],
									[
										585999,
										586000
									],
									[
										586030,
										586031
									],
									[
										586038,
										586039
									],
									[
										586045,
										586046
									],
									[
										586316,
										586317
									],
									[
										586319,
										586320
									],
									[
										586360,
										586361
									],
									[
										586363,
										586364
									],
									[
										586535,
										586536
									],
									[
										586577,
										586578
									],
									[
										586650,
										586651
									],
									[
										586688,
										586689
									],
									[
										586801,
										586802
									],
									[
										586846,
										586847
									],
									[
										586942,
										586943
									],
									[
										586956,
										586957
									],
									[
										586999,
										587000
									],
									[
										587005,
										587006
									],
									[
										587038,
										587039
									],
									[
										587053,
										587054
									],
									[
										587055,
										587056
									],
									[
										587194,
										587195
									],
									[
										587201,
										587202
									],
									[
										587207,
										587208
									],
									[
										587311,
										587312
									],
									[
										587412,
										587413
									],
									[
										587489,
										587490
									],
									[
										587600,
										587601
									],
									[
										587605,
										587606
									],
									[
										587639,
										587640
									],
									[
										587648,
										587649
									],
									[
										587654,
										587655
									],
									[
										587669,
										587670
									],
									[
										587685,
										587686
									],
									[
										587686,
										587687
									],
									[
										587695,
										587696
									],
									[
										587867,
										587868
									],
									[
										587947,
										587948
									],
									[
										588014,
										588015
									],
									[
										588019,
										588020
									],
									[
										588056,
										588057
									],
									[
										588065,
										588066
									],
									[
										588071,
										588072
									],
									[
										588086,
										588087
									],
									[
										588102,
										588103
									],
									[
										588103,
										588104
									],
									[
										588112,
										588113
									],
									[
										588278,
										588279
									],
									[
										588355,
										588356
									],
									[
										588449,
										588450
									],
									[
										588454,
										588455
									],
									[
										588488,
										588489
									],
									[
										588497,
										588498
									],
									[
										588503,
										588504
									],
									[
										588518,
										588519
									],
									[
										588534,
										588535
									],
									[
										588535,
										588536
									],
									[
										588544,
										588545
									],
									[
										588716,
										588717
									],
									[
										588796,
										588797
									],
									[
										588863,
										588864
									],
									[
										588868,
										588869
									],
									[
										588905,
										588906
									],
									[
										588914,
										588915
									],
									[
										588920,
										588921
									],
									[
										588935,
										588936
									],
									[
										588951,
										588952
									],
									[
										588952,
										588953
									],
									[
										588961,
										588962
									],
									[
										589050,
										589051
									],
									[
										589055,
										589056
									],
									[
										589059,
										589060
									],
									[
										589090,
										589091
									],
									[
										589095,
										589096
									],
									[
										589099,
										589100
									],
									[
										589118,
										589119
									],
									[
										589175,
										589176
									],
									[
										589180,
										589181
									],
									[
										589184,
										589185
									],
									[
										589194,
										589195
									],
									[
										589199,
										589200
									],
									[
										589203,
										589204
									],
									[
										589211,
										589212
									],
									[
										589216,
										589217
									],
									[
										589220,
										589221
									],
									[
										589253,
										589254
									],
									[
										589258,
										589259
									],
									[
										589269,
										589270
									],
									[
										589274,
										589275
									],
									[
										589278,
										589279
									],
									[
										589288,
										589289
									],
									[
										589297,
										589298
									],
									[
										589303,
										589304
									],
									[
										589318,
										589319
									],
									[
										589334,
										589335
									],
									[
										589335,
										589336
									],
									[
										589344,
										589345
									],
									[
										589424,
										589425
									],
									[
										589467,
										589468
									],
									[
										589503,
										589504
									],
									[
										589553,
										589554
									],
									[
										589632,
										589633
									],
									[
										589637,
										589638
									],
									[
										589641,
										589642
									],
									[
										589668,
										589669
									],
									[
										589677,
										589678
									],
									[
										589683,
										589684
									],
									[
										589698,
										589699
									],
									[
										589714,
										589715
									],
									[
										589715,
										589716
									],
									[
										589724,
										589725
									],
									[
										589804,
										589805
									],
									[
										589817,
										589818
									],
									[
										589856,
										589857
									],
									[
										589867,
										589868
									],
									[
										589900,
										589901
									],
									[
										589950,
										589951
									],
									[
										589961,
										589962
									],
									[
										589989,
										589990
									],
									[
										590040,
										590041
									],
									[
										590045,
										590046
									],
									[
										590049,
										590050
									],
									[
										590060,
										590061
									],
									[
										590084,
										590085
									],
									[
										590093,
										590094
									],
									[
										590099,
										590100
									],
									[
										590114,
										590115
									],
									[
										590130,
										590131
									],
									[
										590131,
										590132
									],
									[
										590140,
										590141
									],
									[
										590220,
										590221
									],
									[
										590230,
										590231
									],
									[
										590238,
										590239
									],
									[
										590276,
										590277
									],
									[
										590284,
										590285
									],
									[
										590291,
										590292
									],
									[
										590323,
										590324
									],
									[
										590373,
										590374
									],
									[
										590381,
										590382
									],
									[
										590388,
										590389
									],
									[
										590412,
										590413
									],
									[
										590419,
										590420
									],
									[
										590469,
										590470
									],
									[
										590474,
										590475
									],
									[
										590478,
										590479
									],
									[
										590486,
										590487
									],
									[
										590493,
										590494
									],
									[
										590516,
										590517
									],
									[
										590525,
										590526
									],
									[
										590531,
										590532
									],
									[
										590546,
										590547
									],
									[
										590562,
										590563
									],
									[
										590563,
										590564
									],
									[
										590572,
										590573
									],
									[
										590726,
										590727
									],
									[
										590801,
										590802
									],
									[
										590806,
										590807
									],
									[
										590810,
										590811
									],
									[
										590818,
										590819
									],
									[
										590823,
										590824
									],
									[
										590827,
										590828
									],
									[
										590860,
										590861
									],
									[
										590865,
										590866
									],
									[
										590926,
										590927
									],
									[
										590935,
										590936
									],
									[
										590941,
										590942
									],
									[
										590956,
										590957
									],
									[
										590972,
										590973
									],
									[
										590973,
										590974
									],
									[
										590982,
										590983
									],
									[
										591048,
										591049
									],
									[
										591171,
										591172
									],
									[
										591240,
										591241
									],
									[
										591245,
										591246
									],
									[
										591274,
										591275
									],
									[
										591283,
										591284
									],
									[
										591289,
										591290
									],
									[
										591304,
										591305
									],
									[
										591320,
										591321
									],
									[
										591321,
										591322
									],
									[
										591330,
										591331
									],
									[
										591420,
										591421
									],
									[
										591423,
										591424
									],
									[
										591471,
										591472
									],
									[
										591474,
										591475
									],
									[
										591507,
										591508
									],
									[
										591566,
										591567
									],
									[
										591569,
										591570
									],
									[
										591617,
										591618
									],
									[
										591622,
										591623
									],
									[
										591635,
										591636
									],
									[
										591638,
										591639
									],
									[
										591662,
										591663
									],
									[
										591671,
										591672
									],
									[
										591677,
										591678
									],
									[
										591692,
										591693
									],
									[
										591708,
										591709
									],
									[
										591709,
										591710
									],
									[
										591718,
										591719
									],
									[
										591891,
										591892
									],
									[
										591983,
										591984
									],
									[
										592052,
										592053
									],
									[
										592065,
										592066
									],
									[
										592147,
										592148
									],
									[
										592156,
										592157
									],
									[
										592162,
										592163
									],
									[
										592177,
										592178
									],
									[
										592193,
										592194
									],
									[
										592194,
										592195
									],
									[
										592269,
										592270
									],
									[
										592313,
										592314
									],
									[
										592362,
										592363
									],
									[
										592403,
										592404
									],
									[
										592406,
										592407
									],
									[
										592491,
										592492
									],
									[
										592541,
										592542
									],
									[
										592649,
										592650
									],
									[
										592662,
										592663
									],
									[
										592666,
										592667
									],
									[
										592706,
										592707
									],
									[
										592740,
										592741
									],
									[
										592749,
										592750
									],
									[
										592755,
										592756
									],
									[
										592770,
										592771
									],
									[
										592786,
										592787
									],
									[
										592787,
										592788
									],
									[
										592796,
										592797
									],
									[
										592863,
										592864
									],
									[
										592911,
										592912
									],
									[
										592956,
										592957
									],
									[
										592990,
										592991
									],
									[
										593043,
										593044
									],
									[
										593068,
										593069
									],
									[
										593107,
										593108
									],
									[
										593112,
										593113
									],
									[
										593120,
										593121
									],
									[
										593162,
										593163
									],
									[
										593171,
										593172
									],
									[
										593177,
										593178
									],
									[
										593192,
										593193
									],
									[
										593208,
										593209
									],
									[
										593209,
										593210
									],
									[
										593218,
										593219
									],
									[
										593363,
										593364
									],
									[
										593373,
										593374
									],
									[
										593384,
										593385
									],
									[
										593427,
										593428
									],
									[
										593453,
										593454
									],
									[
										593601,
										593602
									],
									[
										593606,
										593607
									],
									[
										593633,
										593634
									],
									[
										593637,
										593638
									],
									[
										593698,
										593699
									],
									[
										593729,
										593730
									],
									[
										593803,
										593804
									],
									[
										593837,
										593838
									],
									[
										593899,
										593900
									],
									[
										593932,
										593933
									],
									[
										593961,
										593962
									],
									[
										594018,
										594019
									],
									[
										594028,
										594029
									],
									[
										594039,
										594040
									],
									[
										594076,
										594077
									],
									[
										594138,
										594139
									],
									[
										594167,
										594168
									],
									[
										594198,
										594199
									],
									[
										594209,
										594210
									],
									[
										594219,
										594220
									],
									[
										594286,
										594287
									],
									[
										594310,
										594311
									],
									[
										594319,
										594320
									],
									[
										594325,
										594326
									],
									[
										594340,
										594341
									],
									[
										594356,
										594357
									],
									[
										594357,
										594358
									],
									[
										594365,
										594366
									],
									[
										594399,
										594400
									],
									[
										594404,
										594405
									],
									[
										594406,
										594407
									],
									[
										594416,
										594417
									],
									[
										594417,
										594418
									],
									[
										594423,
										594424
									],
									[
										594436,
										594437
									],
									[
										594440,
										594441
									],
									[
										594508,
										594509
									],
									[
										594509,
										594510
									],
									[
										594520,
										594521
									],
									[
										594563,
										594564
									],
									[
										594631,
										594632
									],
									[
										594683,
										594684
									],
									[
										594707,
										594708
									],
									[
										594806,
										594807
									],
									[
										594854,
										594855
									],
									[
										594863,
										594864
									],
									[
										594869,
										594870
									],
									[
										594884,
										594885
									],
									[
										594900,
										594901
									],
									[
										594901,
										594902
									],
									[
										594910,
										594911
									],
									[
										594966,
										594967
									],
									[
										594972,
										594973
									],
									[
										594973,
										594974
									],
									[
										594979,
										594980
									],
									[
										594992,
										594993
									],
									[
										594996,
										594997
									],
									[
										595020,
										595021
									],
									[
										595102,
										595103
									],
									[
										595107,
										595108
									],
									[
										595141,
										595142
									],
									[
										595145,
										595146
									],
									[
										595198,
										595199
									],
									[
										595200,
										595201
									],
									[
										595220,
										595221
									],
									[
										595227,
										595228
									],
									[
										595243,
										595244
									],
									[
										595252,
										595253
									],
									[
										595258,
										595259
									],
									[
										595273,
										595274
									],
									[
										595289,
										595290
									],
									[
										595290,
										595291
									],
									[
										595299,
										595300
									],
									[
										595362,
										595363
									],
									[
										595412,
										595413
									],
									[
										595416,
										595417
									],
									[
										595432,
										595433
									],
									[
										595441,
										595442
									],
									[
										595514,
										595515
									],
									[
										595552,
										595553
									],
									[
										595605,
										595606
									],
									[
										595607,
										595608
									],
									[
										595627,
										595628
									],
									[
										595650,
										595651
									],
									[
										595659,
										595660
									],
									[
										595665,
										595666
									],
									[
										595680,
										595681
									],
									[
										595696,
										595697
									],
									[
										595697,
										595698
									],
									[
										595706,
										595707
									],
									[
										595769,
										595770
									],
									[
										595821,
										595822
									],
									[
										595837,
										595838
									],
									[
										595846,
										595847
									],
									[
										595915,
										595916
									],
									[
										595956,
										595957
									],
									[
										595988,
										595989
									],
									[
										595989,
										595990
									],
									[
										595999,
										596000
									],
									[
										596000,
										596001
									],
									[
										596016,
										596017
									],
									[
										596090,
										596091
									],
									[
										596158,
										596159
									],
									[
										596231,
										596232
									],
									[
										596278,
										596279
									],
									[
										596293,
										596294
									],
									[
										596294,
										596295
									],
									[
										596350,
										596351
									],
									[
										596353,
										596354
									],
									[
										596411,
										596412
									],
									[
										596412,
										596413
									],
									[
										596419,
										596420
									],
									[
										596428,
										596429
									],
									[
										596516,
										596517
									],
									[
										596517,
										596518
									],
									[
										596541,
										596542
									],
									[
										596587,
										596588
									],
									[
										596631,
										596632
									],
									[
										596650,
										596651
									],
									[
										596677,
										596678
									],
									[
										596705,
										596706
									],
									[
										596714,
										596715
									],
									[
										596732,
										596733
									],
									[
										596836,
										596837
									],
									[
										596955,
										596956
									],
									[
										596964,
										596965
									],
									[
										596976,
										596977
									],
									[
										597032,
										597033
									],
									[
										597063,
										597064
									],
									[
										597071,
										597072
									],
									[
										597091,
										597092
									],
									[
										597104,
										597105
									],
									[
										597114,
										597115
									],
									[
										597264,
										597265
									],
									[
										597278,
										597279
									],
									[
										597334,
										597335
									],
									[
										597406,
										597407
									],
									[
										597473,
										597474
									],
									[
										597546,
										597547
									],
									[
										597580,
										597581
									],
									[
										597709,
										597710
									],
									[
										597715,
										597716
									],
									[
										597722,
										597723
									],
									[
										597734,
										597735
									],
									[
										597755,
										597756
									],
									[
										597768,
										597769
									],
									[
										597801,
										597802
									],
									[
										597809,
										597810
									],
									[
										597810,
										597811
									],
									[
										597846,
										597847
									],
									[
										597847,
										597848
									],
									[
										597854,
										597855
									],
									[
										597951,
										597952
									],
									[
										597958,
										597959
									],
									[
										597964,
										597965
									],
									[
										597971,
										597972
									],
									[
										597992,
										597993
									],
									[
										597993,
										597994
									],
									[
										597997,
										597998
									],
									[
										598019,
										598020
									],
									[
										598020,
										598021
									],
									[
										598032,
										598033
									],
									[
										598116,
										598117
									],
									[
										598158,
										598159
									],
									[
										598159,
										598160
									],
									[
										598170,
										598171
									],
									[
										598189,
										598190
									],
									[
										598211,
										598212
									],
									[
										598248,
										598249
									],
									[
										598255,
										598256
									],
									[
										598258,
										598259
									],
									[
										598261,
										598262
									],
									[
										598268,
										598269
									],
									[
										598282,
										598283
									],
									[
										598319,
										598320
									],
									[
										598323,
										598324
									],
									[
										598365,
										598366
									],
									[
										598393,
										598394
									],
									[
										598430,
										598431
									],
									[
										598434,
										598435
									],
									[
										598457,
										598458
									],
									[
										598462,
										598463
									],
									[
										598512,
										598513
									],
									[
										598514,
										598515
									],
									[
										598554,
										598555
									],
									[
										598557,
										598558
									],
									[
										598566,
										598567
									],
									[
										598582,
										598583
									],
									[
										598583,
										598584
									],
									[
										598590,
										598591
									],
									[
										598604,
										598605
									],
									[
										598623,
										598624
									],
									[
										598627,
										598628
									],
									[
										598656,
										598657
									],
									[
										598664,
										598665
									],
									[
										598742,
										598743
									],
									[
										598853,
										598854
									],
									[
										598854,
										598855
									],
									[
										598864,
										598865
									],
									[
										598898,
										598899
									],
									[
										598902,
										598903
									],
									[
										598975,
										598976
									],
									[
										599053,
										599054
									],
									[
										599057,
										599058
									],
									[
										599176,
										599177
									],
									[
										599202,
										599203
									],
									[
										599215,
										599216
									],
									[
										599261,
										599262
									],
									[
										599265,
										599266
									],
									[
										599338,
										599339
									],
									[
										599398,
										599399
									],
									[
										599452,
										599453
									],
									[
										599510,
										599511
									],
									[
										599556,
										599557
									],
									[
										599591,
										599592
									],
									[
										599608,
										599609
									],
									[
										599647,
										599648
									],
									[
										599664,
										599665
									],
									[
										599693,
										599694
									],
									[
										599712,
										599713
									],
									[
										599749,
										599750
									],
									[
										599768,
										599769
									],
									[
										599844,
										599845
									],
									[
										599860,
										599861
									],
									[
										599870,
										599871
									],
									[
										599900,
										599901
									],
									[
										599904,
										599905
									],
									[
										599992,
										599993
									],
									[
										600064,
										600065
									],
									[
										600242,
										600243
									],
									[
										600382,
										600383
									],
									[
										600390,
										600391
									],
									[
										600395,
										600396
									],
									[
										600408,
										600409
									],
									[
										600471,
										600472
									],
									[
										600519,
										600520
									],
									[
										600523,
										600524
									],
									[
										600536,
										600537
									],
									[
										600550,
										600551
									],
									[
										600629,
										600630
									],
									[
										600792,
										600793
									],
									[
										600835,
										600836
									],
									[
										600839,
										600840
									],
									[
										600852,
										600853
									],
									[
										600866,
										600867
									],
									[
										601043,
										601044
									],
									[
										601112,
										601113
									],
									[
										601116,
										601117
									],
									[
										601151,
										601152
									],
									[
										601212,
										601213
									],
									[
										601214,
										601215
									],
									[
										601262,
										601263
									],
									[
										601292,
										601293
									],
									[
										601296,
										601297
									],
									[
										601326,
										601327
									],
									[
										601329,
										601330
									],
									[
										601334,
										601335
									],
									[
										601336,
										601337
									],
									[
										601391,
										601392
									],
									[
										601398,
										601399
									],
									[
										601405,
										601406
									],
									[
										601445,
										601446
									],
									[
										601457,
										601458
									],
									[
										601459,
										601460
									],
									[
										601472,
										601473
									],
									[
										601500,
										601501
									],
									[
										601502,
										601503
									],
									[
										601536,
										601537
									],
									[
										601540,
										601541
									],
									[
										601563,
										601564
									],
									[
										601565,
										601566
									],
									[
										601573,
										601574
									],
									[
										601580,
										601581
									],
									[
										601587,
										601588
									],
									[
										601594,
										601595
									],
									[
										601599,
										601600
									],
									[
										601635,
										601636
									],
									[
										601660,
										601661
									],
									[
										601719,
										601720
									],
									[
										601723,
										601724
									],
									[
										601736,
										601737
									],
									[
										601744,
										601745
									],
									[
										601846,
										601847
									],
									[
										601880,
										601881
									],
									[
										601912,
										601913
									],
									[
										601929,
										601930
									],
									[
										601955,
										601956
									],
									[
										601992,
										601993
									],
									[
										602044,
										602045
									],
									[
										602068,
										602069
									],
									[
										602072,
										602073
									],
									[
										602098,
										602099
									],
									[
										602171,
										602172
									],
									[
										602223,
										602224
									],
									[
										602321,
										602322
									],
									[
										602337,
										602338
									],
									[
										602364,
										602365
									],
									[
										602399,
										602400
									],
									[
										602440,
										602441
									],
									[
										602471,
										602472
									],
									[
										602487,
										602488
									],
									[
										602494,
										602495
									],
									[
										602495,
										602496
									],
									[
										602511,
										602512
									],
									[
										602549,
										602550
									],
									[
										602585,
										602586
									],
									[
										602653,
										602654
									],
									[
										602686,
										602687
									],
									[
										602700,
										602701
									],
									[
										602745,
										602746
									],
									[
										602796,
										602797
									],
									[
										602800,
										602801
									],
									[
										602844,
										602845
									],
									[
										602969,
										602970
									],
									[
										602981,
										602982
									],
									[
										603023,
										603024
									],
									[
										603027,
										603028
									],
									[
										603039,
										603040
									],
									[
										603053,
										603054
									],
									[
										603071,
										603072
									],
									[
										603081,
										603082
									],
									[
										603117,
										603118
									],
									[
										603119,
										603120
									],
									[
										603129,
										603130
									],
									[
										603134,
										603135
									],
									[
										603142,
										603143
									],
									[
										603143,
										603144
									],
									[
										603176,
										603177
									],
									[
										603180,
										603181
									],
									[
										603193,
										603194
									],
									[
										603194,
										603195
									],
									[
										603201,
										603202
									],
									[
										603203,
										603204
									],
									[
										603242,
										603243
									],
									[
										603270,
										603271
									],
									[
										603274,
										603275
									],
									[
										603325,
										603326
									],
									[
										603329,
										603330
									],
									[
										603346,
										603347
									],
									[
										603394,
										603395
									],
									[
										603452,
										603453
									],
									[
										603456,
										603457
									],
									[
										603531,
										603532
									],
									[
										603533,
										603534
									],
									[
										603541,
										603542
									],
									[
										603563,
										603564
									],
									[
										603565,
										603566
									],
									[
										603599,
										603600
									],
									[
										603603,
										603604
									],
									[
										603633,
										603634
									],
									[
										603635,
										603636
									],
									[
										603674,
										603675
									],
									[
										603705,
										603706
									],
									[
										603737,
										603738
									],
									[
										603738,
										603739
									],
									[
										603782,
										603783
									],
									[
										603789,
										603790
									],
									[
										603804,
										603805
									],
									[
										603806,
										603807
									],
									[
										603838,
										603839
									],
									[
										603858,
										603859
									],
									[
										603867,
										603868
									],
									[
										603913,
										603914
									],
									[
										603950,
										603951
									],
									[
										603961,
										603962
									],
									[
										604057,
										604058
									],
									[
										604066,
										604067
									],
									[
										604107,
										604108
									],
									[
										604155,
										604156
									],
									[
										604217,
										604218
									],
									[
										604244,
										604245
									],
									[
										604302,
										604303
									],
									[
										604318,
										604319
									],
									[
										604321,
										604322
									],
									[
										604349,
										604350
									],
									[
										604357,
										604358
									],
									[
										604358,
										604359
									],
									[
										604362,
										604363
									],
									[
										604376,
										604377
									],
									[
										604399,
										604400
									],
									[
										604497,
										604498
									],
									[
										604520,
										604521
									],
									[
										604533,
										604534
									],
									[
										604577,
										604578
									],
									[
										604589,
										604590
									],
									[
										604590,
										604591
									],
									[
										604594,
										604595
									],
									[
										604612,
										604613
									],
									[
										604628,
										604629
									],
									[
										604635,
										604636
									],
									[
										604664,
										604665
									],
									[
										604725,
										604726
									],
									[
										604734,
										604735
									],
									[
										604775,
										604776
									],
									[
										604804,
										604805
									],
									[
										604813,
										604814
									],
									[
										604864,
										604865
									],
									[
										604902,
										604903
									],
									[
										604910,
										604911
									],
									[
										604914,
										604915
									],
									[
										604955,
										604956
									],
									[
										604981,
										604982
									],
									[
										604989,
										604990
									],
									[
										604994,
										604995
									],
									[
										605027,
										605028
									],
									[
										605034,
										605035
									],
									[
										605059,
										605060
									],
									[
										605126,
										605127
									],
									[
										605153,
										605154
									],
									[
										605221,
										605222
									],
									[
										605244,
										605245
									],
									[
										605253,
										605254
									],
									[
										605255,
										605256
									],
									[
										605293,
										605294
									],
									[
										605377,
										605378
									],
									[
										605395,
										605396
									],
									[
										605413,
										605414
									],
									[
										605429,
										605430
									],
									[
										605436,
										605437
									],
									[
										605465,
										605466
									],
									[
										605473,
										605474
									],
									[
										605481,
										605482
									],
									[
										605518,
										605519
									],
									[
										605526,
										605527
									],
									[
										605532,
										605533
									],
									[
										605556,
										605557
									],
									[
										605632,
										605633
									],
									[
										605639,
										605640
									],
									[
										605675,
										605676
									],
									[
										605681,
										605682
									],
									[
										605815,
										605816
									],
									[
										605822,
										605823
									],
									[
										605879,
										605880
									],
									[
										605886,
										605887
									],
									[
										605909,
										605910
									],
									[
										606047,
										606048
									],
									[
										606054,
										606055
									],
									[
										606110,
										606111
									],
									[
										606188,
										606189
									],
									[
										606221,
										606222
									],
									[
										606224,
										606225
									],
									[
										606268,
										606269
									],
									[
										606284,
										606285
									],
									[
										606291,
										606292
									],
									[
										606320,
										606321
									],
									[
										606343,
										606344
									],
									[
										606381,
										606382
									],
									[
										606404,
										606405
									],
									[
										606448,
										606449
									],
									[
										606471,
										606472
									],
									[
										606513,
										606514
									],
									[
										606536,
										606537
									],
									[
										606566,
										606567
									],
									[
										606589,
										606590
									],
									[
										606625,
										606626
									],
									[
										606631,
										606632
									],
									[
										606648,
										606649
									],
									[
										606688,
										606689
									],
									[
										606694,
										606695
									],
									[
										606711,
										606712
									],
									[
										606743,
										606744
									],
									[
										606747,
										606748
									],
									[
										606766,
										606767
									],
									[
										606806,
										606807
									],
									[
										606810,
										606811
									],
									[
										606829,
										606830
									],
									[
										606876,
										606877
									],
									[
										606883,
										606884
									],
									[
										606906,
										606907
									],
									[
										606932,
										606933
									],
									[
										607023,
										607024
									],
									[
										607024,
										607025
									],
									[
										607032,
										607033
									],
									[
										607056,
										607057
									],
									[
										607072,
										607073
									],
									[
										607079,
										607080
									],
									[
										607108,
										607109
									],
									[
										607142,
										607143
									],
									[
										607176,
										607177
									],
									[
										607184,
										607185
									],
									[
										607210,
										607211
									],
									[
										607251,
										607252
									],
									[
										607295,
										607296
									],
									[
										607335,
										607336
									],
									[
										607374,
										607375
									],
									[
										607388,
										607389
									],
									[
										607414,
										607415
									],
									[
										607458,
										607459
									],
									[
										607505,
										607506
									],
									[
										607548,
										607549
									],
									[
										607590,
										607591
									],
									[
										607607,
										607608
									],
									[
										607648,
										607649
									],
									[
										607655,
										607656
									],
									[
										607744,
										607745
									],
									[
										607766,
										607767
									],
									[
										607782,
										607783
									],
									[
										607789,
										607790
									],
									[
										607818,
										607819
									],
									[
										607849,
										607850
									],
									[
										607878,
										607879
									],
									[
										607909,
										607910
									],
									[
										607939,
										607940
									],
									[
										607969,
										607970
									],
									[
										607973,
										607974
									],
									[
										607999,
										608000
									],
									[
										608045,
										608046
									],
									[
										608052,
										608053
									],
									[
										608088,
										608089
									],
									[
										608095,
										608096
									],
									[
										608120,
										608121
									],
									[
										608127,
										608128
									],
									[
										608232,
										608233
									],
									[
										608253,
										608254
									],
									[
										608269,
										608270
									],
									[
										608276,
										608277
									],
									[
										608305,
										608306
									],
									[
										608357,
										608358
									],
									[
										608364,
										608365
									],
									[
										608402,
										608403
									],
									[
										608409,
										608410
									],
									[
										608450,
										608451
									],
									[
										608500,
										608501
									],
									[
										608507,
										608508
									],
									[
										608548,
										608549
									],
									[
										608555,
										608556
									],
									[
										608596,
										608597
									],
									[
										608648,
										608649
									],
									[
										608655,
										608656
									],
									[
										608696,
										608697
									],
									[
										608703,
										608704
									],
									[
										608744,
										608745
									],
									[
										608795,
										608796
									],
									[
										608802,
										608803
									],
									[
										608844,
										608845
									],
									[
										608851,
										608852
									],
									[
										608984,
										608985
									],
									[
										608991,
										608992
									],
									[
										609106,
										609107
									],
									[
										609113,
										609114
									],
									[
										609132,
										609133
									],
									[
										609217,
										609218
									],
									[
										609226,
										609227
									],
									[
										609238,
										609239
									],
									[
										609239,
										609240
									],
									[
										609241,
										609242
									],
									[
										609245,
										609246
									],
									[
										609267,
										609268
									],
									[
										609283,
										609284
									],
									[
										609290,
										609291
									],
									[
										609319,
										609320
									],
									[
										609328,
										609329
									],
									[
										609331,
										609332
									],
									[
										609336,
										609337
									],
									[
										609338,
										609339
									],
									[
										609379,
										609380
									],
									[
										609386,
										609387
									],
									[
										609404,
										609405
									],
									[
										609438,
										609439
									],
									[
										609497,
										609498
									],
									[
										609504,
										609505
									],
									[
										609605,
										609606
									],
									[
										609624,
										609625
									],
									[
										609626,
										609627
									],
									[
										609634,
										609635
									],
									[
										609668,
										609669
									],
									[
										609675,
										609676
									],
									[
										609704,
										609705
									],
									[
										609706,
										609707
									],
									[
										609746,
										609747
									],
									[
										609753,
										609754
									],
									[
										609771,
										609772
									],
									[
										609824,
										609825
									],
									[
										609839,
										609840
									],
									[
										609855,
										609856
									],
									[
										609873,
										609874
									],
									[
										609891,
										609892
									],
									[
										609907,
										609908
									],
									[
										609914,
										609915
									],
									[
										609944,
										609945
									],
									[
										609980,
										609981
									],
									[
										610015,
										610016
									],
									[
										610052,
										610053
									],
									[
										610074,
										610075
									],
									[
										610095,
										610096
									],
									[
										610114,
										610115
									],
									[
										610135,
										610136
									],
									[
										610142,
										610143
									],
									[
										610172,
										610173
									],
									[
										610179,
										610180
									],
									[
										610210,
										610211
									],
									[
										610219,
										610220
									],
									[
										610245,
										610246
									],
									[
										610262,
										610263
									],
									[
										610288,
										610289
									],
									[
										610324,
										610325
									],
									[
										610336,
										610337
									],
									[
										610378,
										610379
									],
									[
										610385,
										610386
									],
									[
										610415,
										610416
									],
									[
										610422,
										610423
									],
									[
										610446,
										610447
									],
									[
										610453,
										610454
									],
									[
										610495,
										610496
									],
									[
										610504,
										610505
									],
									[
										610508,
										610509
									],
									[
										610536,
										610537
									],
									[
										610545,
										610546
									],
									[
										610574,
										610575
									],
									[
										610612,
										610613
									],
									[
										610642,
										610643
									],
									[
										610651,
										610652
									],
									[
										610674,
										610675
									],
									[
										610701,
										610702
									],
									[
										610725,
										610726
									],
									[
										610746,
										610747
									],
									[
										610790,
										610791
									],
									[
										610850,
										610851
									],
									[
										610856,
										610857
									],
									[
										610877,
										610878
									],
									[
										610883,
										610884
									],
									[
										610915,
										610916
									],
									[
										610921,
										610922
									],
									[
										610961,
										610962
									],
									[
										610967,
										610968
									],
									[
										611013,
										611014
									],
									[
										611019,
										611020
									],
									[
										611057,
										611058
									],
									[
										611061,
										611062
									],
									[
										611084,
										611085
									],
									[
										611088,
										611089
									],
									[
										611095,
										611096
									],
									[
										611096,
										611097
									],
									[
										611119,
										611120
									],
									[
										611123,
										611124
									],
									[
										611168,
										611169
									],
									[
										611172,
										611173
									],
									[
										611215,
										611216
									],
									[
										611219,
										611220
									],
									[
										611267,
										611268
									],
									[
										611274,
										611275
									],
									[
										611304,
										611305
									],
									[
										611311,
										611312
									],
									[
										611335,
										611336
									],
									[
										611342,
										611343
									],
									[
										611500,
										611501
									],
									[
										611516,
										611517
									],
									[
										611523,
										611524
									],
									[
										611553,
										611554
									],
									[
										611581,
										611582
									],
									[
										611585,
										611586
									],
									[
										611611,
										611612
									],
									[
										611667,
										611668
									],
									[
										611674,
										611675
									],
									[
										611697,
										611698
									],
									[
										611704,
										611705
									],
									[
										611821,
										611822
									],
									[
										611824,
										611825
									],
									[
										611882,
										611883
									],
									[
										611889,
										611890
									],
									[
										611909,
										611910
									],
									[
										611946,
										611947
									],
									[
										611953,
										611954
									],
									[
										611977,
										611978
									],
									[
										611990,
										611991
									],
									[
										611997,
										611998
									],
									[
										612026,
										612027
									],
									[
										612033,
										612034
									],
									[
										612098,
										612099
									],
									[
										612126,
										612127
									],
									[
										612127,
										612128
									],
									[
										612131,
										612132
									],
									[
										612165,
										612166
									],
									[
										612172,
										612173
									],
									[
										612191,
										612192
									],
									[
										612192,
										612193
									],
									[
										612199,
										612200
									],
									[
										612201,
										612202
									],
									[
										612242,
										612243
									],
									[
										612249,
										612250
									],
									[
										612268,
										612269
									],
									[
										612327,
										612328
									],
									[
										612366,
										612367
									],
									[
										612373,
										612374
									],
									[
										612391,
										612392
									],
									[
										612428,
										612429
									],
									[
										612435,
										612436
									],
									[
										612466,
										612467
									],
									[
										612473,
										612474
									],
									[
										612594,
										612595
									],
									[
										612601,
										612602
									],
									[
										612662,
										612663
									],
									[
										612669,
										612670
									],
									[
										612709,
										612710
									],
									[
										612716,
										612717
									],
									[
										612783,
										612784
									],
									[
										612785,
										612786
									],
									[
										612801,
										612802
									],
									[
										612803,
										612804
									],
									[
										612837,
										612838
									],
									[
										612844,
										612845
									],
									[
										612862,
										612863
									],
									[
										612864,
										612865
									],
									[
										612905,
										612906
									],
									[
										612912,
										612913
									],
									[
										612934,
										612935
									],
									[
										612936,
										612937
									],
									[
										612952,
										612953
									],
									[
										612959,
										612960
									],
									[
										613026,
										613027
									],
									[
										613028,
										613029
									],
									[
										613049,
										613050
									],
									[
										613057,
										613058
									],
									[
										613070,
										613071
									],
									[
										613071,
										613072
									],
									[
										613080,
										613081
									],
									[
										613092,
										613093
									],
									[
										613147,
										613148
									],
									[
										613184,
										613185
									],
									[
										613197,
										613198
									],
									[
										613220,
										613221
									],
									[
										613254,
										613255
									],
									[
										613255,
										613256
									],
									[
										613279,
										613280
									],
									[
										613462,
										613463
									],
									[
										613479,
										613480
									],
									[
										613512,
										613513
									],
									[
										613537,
										613538
									],
									[
										613658,
										613659
									],
									[
										613659,
										613660
									],
									[
										613670,
										613671
									],
									[
										613699,
										613700
									],
									[
										613700,
										613701
									],
									[
										613721,
										613722
									],
									[
										613759,
										613760
									],
									[
										613760,
										613761
									],
									[
										613813,
										613814
									],
									[
										613814,
										613815
									],
									[
										613846,
										613847
									],
									[
										613927,
										613928
									],
									[
										613942,
										613943
									],
									[
										613943,
										613944
									],
									[
										614070,
										614071
									],
									[
										614072,
										614073
									],
									[
										614088,
										614089
									],
									[
										614133,
										614134
									],
									[
										614141,
										614142
									],
									[
										614145,
										614146
									],
									[
										614158,
										614159
									],
									[
										614163,
										614164
									],
									[
										614169,
										614170
									],
									[
										614177,
										614178
									],
									[
										614178,
										614179
									],
									[
										614194,
										614195
									],
									[
										614211,
										614212
									],
									[
										614242,
										614243
									],
									[
										614274,
										614275
									],
									[
										614320,
										614321
									],
									[
										614331,
										614332
									],
									[
										614340,
										614341
									],
									[
										614352,
										614353
									],
									[
										614373,
										614374
									],
									[
										614389,
										614390
									],
									[
										614397,
										614398
									],
									[
										614417,
										614418
									],
									[
										614435,
										614436
									],
									[
										614472,
										614473
									],
									[
										614517,
										614518
									],
									[
										614554,
										614555
									],
									[
										614574,
										614575
									],
									[
										614725,
										614726
									],
									[
										614753,
										614754
									],
									[
										614787,
										614788
									],
									[
										614820,
										614821
									],
									[
										614838,
										614839
									],
									[
										614916,
										614917
									],
									[
										614960,
										614961
									],
									[
										615016,
										615017
									],
									[
										615060,
										615061
									],
									[
										615064,
										615065
									],
									[
										615073,
										615074
									],
									[
										615094,
										615095
									],
									[
										615135,
										615136
									],
									[
										615231,
										615232
									],
									[
										615337,
										615338
									],
									[
										615379,
										615380
									],
									[
										615401,
										615402
									],
									[
										615447,
										615448
									],
									[
										615463,
										615464
									],
									[
										615476,
										615477
									],
									[
										615481,
										615482
									],
									[
										615486,
										615487
									],
									[
										615492,
										615493
									],
									[
										615495,
										615496
									],
									[
										615528,
										615529
									],
									[
										615546,
										615547
									],
									[
										615559,
										615560
									],
									[
										615564,
										615565
									],
									[
										615569,
										615570
									],
									[
										615575,
										615576
									],
									[
										615578,
										615579
									],
									[
										615613,
										615614
									],
									[
										615631,
										615632
									],
									[
										615644,
										615645
									],
									[
										615649,
										615650
									],
									[
										615654,
										615655
									],
									[
										615660,
										615661
									],
									[
										615663,
										615664
									],
									[
										615714,
										615715
									],
									[
										615727,
										615728
									],
									[
										615732,
										615733
									],
									[
										615737,
										615738
									],
									[
										615743,
										615744
									],
									[
										615746,
										615747
									],
									[
										615842,
										615843
									],
									[
										615869,
										615870
									],
									[
										615974,
										615975
									],
									[
										615976,
										615977
									],
									[
										615998,
										615999
									],
									[
										616026,
										616027
									],
									[
										616043,
										616044
									],
									[
										616048,
										616049
									],
									[
										616053,
										616054
									],
									[
										616060,
										616061
									],
									[
										616101,
										616102
									],
									[
										616105,
										616106
									],
									[
										616164,
										616165
									],
									[
										616210,
										616211
									],
									[
										616227,
										616228
									],
									[
										616232,
										616233
									],
									[
										616237,
										616238
									],
									[
										616244,
										616245
									],
									[
										616285,
										616286
									],
									[
										616289,
										616290
									],
									[
										616348,
										616349
									],
									[
										616391,
										616392
									],
									[
										616408,
										616409
									],
									[
										616413,
										616414
									],
									[
										616418,
										616419
									],
									[
										616425,
										616426
									],
									[
										616466,
										616467
									],
									[
										616470,
										616471
									],
									[
										616529,
										616530
									],
									[
										616574,
										616575
									],
									[
										616591,
										616592
									],
									[
										616596,
										616597
									],
									[
										616601,
										616602
									],
									[
										616608,
										616609
									],
									[
										616649,
										616650
									],
									[
										616653,
										616654
									],
									[
										616712,
										616713
									],
									[
										616755,
										616756
									],
									[
										616772,
										616773
									],
									[
										616777,
										616778
									],
									[
										616782,
										616783
									],
									[
										616789,
										616790
									],
									[
										616832,
										616833
									],
									[
										616836,
										616837
									],
									[
										616897,
										616898
									],
									[
										616940,
										616941
									],
									[
										616957,
										616958
									],
									[
										616962,
										616963
									],
									[
										616967,
										616968
									],
									[
										616974,
										616975
									],
									[
										617017,
										617018
									],
									[
										617021,
										617022
									],
									[
										617082,
										617083
									],
									[
										617194,
										617195
									],
									[
										617205,
										617206
									],
									[
										617240,
										617241
									],
									[
										617264,
										617265
									],
									[
										617321,
										617322
									],
									[
										617338,
										617339
									],
									[
										617358,
										617359
									],
									[
										617365,
										617366
									],
									[
										617380,
										617381
									],
									[
										617406,
										617407
									],
									[
										617513,
										617514
									],
									[
										617519,
										617520
									],
									[
										617614,
										617615
									],
									[
										617666,
										617667
									],
									[
										617677,
										617678
									],
									[
										617705,
										617706
									],
									[
										617754,
										617755
									],
									[
										618015,
										618016
									],
									[
										618104,
										618105
									],
									[
										618107,
										618108
									],
									[
										618111,
										618112
									],
									[
										618127,
										618128
									],
									[
										618130,
										618131
									],
									[
										618207,
										618208
									],
									[
										618213,
										618214
									],
									[
										618216,
										618217
									],
									[
										618223,
										618224
									],
									[
										618233,
										618234
									],
									[
										618236,
										618237
									],
									[
										618339,
										618340
									],
									[
										618350,
										618351
									],
									[
										618369,
										618370
									],
									[
										618373,
										618374
									],
									[
										618392,
										618393
									],
									[
										618401,
										618402
									],
									[
										618421,
										618422
									],
									[
										618434,
										618435
									],
									[
										618454,
										618455
									],
									[
										618471,
										618472
									],
									[
										618487,
										618488
									],
									[
										618516,
										618517
									],
									[
										618551,
										618552
									],
									[
										618578,
										618579
									],
									[
										618598,
										618599
									],
									[
										618641,
										618642
									],
									[
										618685,
										618686
									],
									[
										618688,
										618689
									],
									[
										618758,
										618759
									],
									[
										618761,
										618762
									],
									[
										618779,
										618780
									],
									[
										618805,
										618806
									],
									[
										618806,
										618807
									],
									[
										618859,
										618860
									],
									[
										618865,
										618866
									],
									[
										618868,
										618869
									],
									[
										618875,
										618876
									],
									[
										618884,
										618885
									],
									[
										618893,
										618894
									],
									[
										618914,
										618915
									],
									[
										618927,
										618928
									],
									[
										618992,
										618993
									],
									[
										618993,
										618994
									],
									[
										619062,
										619063
									],
									[
										619098,
										619099
									],
									[
										619179,
										619180
									],
									[
										619193,
										619194
									],
									[
										619238,
										619239
									],
									[
										619245,
										619246
									],
									[
										619294,
										619295
									],
									[
										619301,
										619302
									],
									[
										619339,
										619340
									],
									[
										619368,
										619369
									],
									[
										619375,
										619376
									],
									[
										619421,
										619422
									],
									[
										619424,
										619425
									],
									[
										619442,
										619443
									],
									[
										619468,
										619469
									],
									[
										619469,
										619470
									],
									[
										619526,
										619527
									],
									[
										619532,
										619533
									],
									[
										619535,
										619536
									],
									[
										619542,
										619543
									],
									[
										619551,
										619552
									],
									[
										619560,
										619561
									],
									[
										619585,
										619586
									],
									[
										619598,
										619599
									],
									[
										619671,
										619672
									],
									[
										619672,
										619673
									],
									[
										619749,
										619750
									],
									[
										619789,
										619790
									],
									[
										619850,
										619851
									],
									[
										619885,
										619886
									],
									[
										619899,
										619900
									],
									[
										619936,
										619937
									],
									[
										619971,
										619972
									],
									[
										619995,
										619996
									],
									[
										619998,
										619999
									],
									[
										620016,
										620017
									],
									[
										620042,
										620043
									],
									[
										620043,
										620044
									],
									[
										620105,
										620106
									],
									[
										620143,
										620144
									],
									[
										620184,
										620185
									],
									[
										620196,
										620197
									],
									[
										620265,
										620266
									],
									[
										620268,
										620269
									],
									[
										620318,
										620319
									],
									[
										620321,
										620322
									],
									[
										620325,
										620326
									],
									[
										620341,
										620342
									],
									[
										620344,
										620345
									],
									[
										620421,
										620422
									],
									[
										620427,
										620428
									],
									[
										620430,
										620431
									],
									[
										620437,
										620438
									],
									[
										620447,
										620448
									],
									[
										620450,
										620451
									],
									[
										620584,
										620585
									],
									[
										620593,
										620594
									],
									[
										620618,
										620619
									],
									[
										620694,
										620695
									],
									[
										620695,
										620696
									],
									[
										620754,
										620755
									],
									[
										620760,
										620761
									],
									[
										620763,
										620764
									],
									[
										620770,
										620771
									],
									[
										620780,
										620781
									],
									[
										620783,
										620784
									],
									[
										620924,
										620925
									],
									[
										620929,
										620930
									],
									[
										620932,
										620933
									],
									[
										620979,
										620980
									],
									[
										620982,
										620983
									],
									[
										621034,
										621035
									],
									[
										621038,
										621039
									],
									[
										621050,
										621051
									],
									[
										621053,
										621054
									],
									[
										621093,
										621094
									],
									[
										621096,
										621097
									],
									[
										621164,
										621165
									],
									[
										621169,
										621170
									],
									[
										621205,
										621206
									],
									[
										621214,
										621215
									],
									[
										621217,
										621218
									],
									[
										621255,
										621256
									],
									[
										621258,
										621259
									],
									[
										621262,
										621263
									],
									[
										621271,
										621272
									],
									[
										621313,
										621314
									],
									[
										621316,
										621317
									],
									[
										621329,
										621330
									],
									[
										621339,
										621340
									],
									[
										621375,
										621376
									],
									[
										621378,
										621379
									],
									[
										621382,
										621383
									],
									[
										621391,
										621392
									],
									[
										621397,
										621398
									],
									[
										621454,
										621455
									],
									[
										621457,
										621458
									],
									[
										621468,
										621469
									],
									[
										621481,
										621482
									],
									[
										621511,
										621512
									],
									[
										621514,
										621515
									],
									[
										621531,
										621532
									],
									[
										621583,
										621584
									],
									[
										621586,
										621587
									],
									[
										621594,
										621595
									],
									[
										621662,
										621663
									],
									[
										621667,
										621668
									],
									[
										621670,
										621671
									],
									[
										621692,
										621693
									],
									[
										621717,
										621718
									],
									[
										621726,
										621727
									],
									[
										621729,
										621730
									],
									[
										621770,
										621771
									],
									[
										621773,
										621774
									],
									[
										621805,
										621806
									],
									[
										621814,
										621815
									],
									[
										621842,
										621843
									],
									[
										621845,
										621846
									],
									[
										621853,
										621854
									],
									[
										621861,
										621862
									],
									[
										621867,
										621868
									],
									[
										621945,
										621946
									],
									[
										621948,
										621949
									],
									[
										621952,
										621953
									],
									[
										621961,
										621962
									],
									[
										622000,
										622001
									],
									[
										622003,
										622004
									],
									[
										622015,
										622016
									],
									[
										622042,
										622043
									],
									[
										622048,
										622049
									],
									[
										622083,
										622084
									],
									[
										622086,
										622087
									],
									[
										622099,
										622100
									],
									[
										622109,
										622110
									],
									[
										622127,
										622128
									],
									[
										622154,
										622155
									],
									[
										622160,
										622161
									],
									[
										622198,
										622199
									],
									[
										622201,
										622202
									],
									[
										622213,
										622214
									],
									[
										622262,
										622263
									],
									[
										622265,
										622266
									],
									[
										622269,
										622270
									],
									[
										622278,
										622279
									],
									[
										622284,
										622285
									],
									[
										622335,
										622336
									],
									[
										622338,
										622339
									],
									[
										622349,
										622350
									],
									[
										622362,
										622363
									],
									[
										622389,
										622390
									],
									[
										622392,
										622393
									],
									[
										622409,
										622410
									],
									[
										622417,
										622418
									],
									[
										622444,
										622445
									],
									[
										622450,
										622451
									],
									[
										622506,
										622507
									],
									[
										622509,
										622510
									],
									[
										622517,
										622518
									],
									[
										622585,
										622586
									],
									[
										622594,
										622595
									],
									[
										622631,
										622632
									],
									[
										622633,
										622634
									],
									[
										622640,
										622641
									],
									[
										622673,
										622674
									],
									[
										622682,
										622683
									],
									[
										622685,
										622686
									],
									[
										622707,
										622708
									],
									[
										622710,
										622711
									],
									[
										622714,
										622715
									],
									[
										622723,
										622724
									],
									[
										622762,
										622763
									],
									[
										622789,
										622790
									],
									[
										622792,
										622793
									],
									[
										622796,
										622797
									],
									[
										622805,
										622806
									],
									[
										622811,
										622812
									],
									[
										622862,
										622863
									],
									[
										622865,
										622866
									],
									[
										622876,
										622877
									],
									[
										622889,
										622890
									],
									[
										622915,
										622916
									],
									[
										622924,
										622925
									],
									[
										622966,
										622967
									],
									[
										622969,
										622970
									],
									[
										622980,
										622981
									],
									[
										622993,
										622994
									],
									[
										623007,
										623008
									],
									[
										623042,
										623043
									],
									[
										623058,
										623059
									],
									[
										623066,
										623067
									],
									[
										623105,
										623106
									],
									[
										623122,
										623123
									],
									[
										623125,
										623126
									],
									[
										623138,
										623139
									],
									[
										623141,
										623142
									],
									[
										623156,
										623157
									],
									[
										623201,
										623202
									],
									[
										623210,
										623211
									],
									[
										623300,
										623301
									],
									[
										623344,
										623345
									],
									[
										623443,
										623444
									],
									[
										623456,
										623457
									],
									[
										623463,
										623464
									],
									[
										623479,
										623480
									],
									[
										623564,
										623565
									],
									[
										623598,
										623599
									],
									[
										623621,
										623622
									],
									[
										623658,
										623659
									],
									[
										623721,
										623722
									],
									[
										623808,
										623809
									],
									[
										623913,
										623914
									],
									[
										623947,
										623948
									],
									[
										623970,
										623971
									],
									[
										624005,
										624006
									],
									[
										624076,
										624077
									],
									[
										624171,
										624172
									],
									[
										624268,
										624269
									],
									[
										624302,
										624303
									],
									[
										624325,
										624326
									],
									[
										624360,
										624361
									],
									[
										624422,
										624423
									],
									[
										624424,
										624425
									],
									[
										624434,
										624435
									],
									[
										624442,
										624443
									],
									[
										624451,
										624452
									],
									[
										624483,
										624484
									],
									[
										624509,
										624510
									],
									[
										624562,
										624563
									],
									[
										624661,
										624662
									],
									[
										624695,
										624696
									],
									[
										624718,
										624719
									],
									[
										624755,
										624756
									],
									[
										624820,
										624821
									],
									[
										624891,
										624892
									],
									[
										625129,
										625132
									],
									[
										625347,
										625350
									],
									[
										625704,
										625707
									],
									[
										625889,
										625892
									],
									[
										626110,
										626113
									],
									[
										626362,
										626365
									],
									[
										626735,
										626746
									],
									[
										626841,
										626852
									],
									[
										627245,
										627256
									],
									[
										627296,
										627307
									],
									[
										627694,
										627700
									],
									[
										636200,
										636206
									],
									[
										636468,
										636474
									],
									[
										636830,
										636836
									],
									[
										645336,
										645342
									],
									[
										645604,
										645610
									],
									[
										645893,
										645899
									],
									[
										645945,
										645951
									],
									[
										646257,
										646263
									],
									[
										646470,
										646476
									],
									[
										646700,
										646706
									],
									[
										646708,
										646714
									],
									[
										647192,
										647198
									],
									[
										647371,
										647377
									],
									[
										647758,
										647764
									],
									[
										647899,
										647905
									],
									[
										648160,
										648166
									],
									[
										648500,
										648511
									],
									[
										648606,
										648617
									],
									[
										648751,
										648762
									],
									[
										649065,
										649076
									],
									[
										649299,
										649310
									],
									[
										649350,
										649361
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								649307,
								649307
							]
						],
						"settings":
						{
							"default_dir": "/run/media/ted/Data/WEB/ths_signup",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 9,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 356268.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "client/stylesheets/style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 260,
						"regions":
						{
						},
						"selection":
						[
							[
								219,
								219
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "client/templates/events_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5163,
						"regions":
						{
						},
						"selection":
						[
							[
								1908,
								1908
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 742.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "client/templates/events_list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20200,
						"regions":
						{
						},
						"selection":
						[
							[
								4282,
								4282
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "UIHelpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2354,
						"regions":
						{
						},
						"selection":
						[
							[
								2244,
								2244
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1578.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "client/templates/admin.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1944,
						"regions":
						{
						},
						"selection":
						[
							[
								937,
								937
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 66.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 32.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "signup.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sty",
				"~/Sites/m20/public_html/wp-content/themes/M20_masonry/style.css"
			],
			[
				"st",
				"simple-todos.css"
			],
			[
				"fin",
				"Find Results"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/run/media/ted/Data/KTH/Algorithms & Data Structures/kth_alg.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 192.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
